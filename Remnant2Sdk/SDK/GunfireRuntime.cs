using UnrealSharp;
using Object = UnrealSharp.UEObject;
using Guid = SDK.Script.CoreUObjectSDK.Guid;
using Enum = SDK.Script.CoreUObjectSDK.Enum;
using DateTime = SDK.Script.CoreUObjectSDK.DateTime;
using SDK.Script.EngineSDK;
using SDK.Script.CoreUObjectSDK;
using SDK.Script.GunfireSaveSystemSDK;
using SDK.Script.NiagaraSDK;
using SDK.Script.EnhancedInputSDK;
using SDK.Script.UMGSDK;
using SDK.Script.InputCoreSDK;
using SDK.Script.AIModuleSDK;
using SDK.Script.NavigationSystemSDK;
using SDK.Script.NiagaraAnimNotifiesSDK;
using SDK.Script.PhysicsCoreSDK;
using SDK.Script.SlateCoreSDK;
using SDK.Script.SlateSDK;
using SDK.Script.BinkMediaPlayerSDK;
using SDK.Script.AkAudioSDK;
using SDK.Script.CinematicCameraSDK;
using SDK.Script.MovieSceneSDK;
using SDK.Script.MovieSceneTracksSDK;
using SDK.Script.LevelSequenceSDK;
using SDK.Script.GunfireTechRequirementsSDK;
using SDK.Script.GunfireOnlineModuleSDK;
using SDK.Script.AnimGraphRuntimeSDK;
namespace SDK.Script.GunfireRuntimeSDK
{
    public class ActorModifier : Object
    {
        public ActorModifier(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public EActorModifierScope Scope { get { return (EActorModifierScope)this[nameof(Scope)].GetValue<int>(); } set { this[nameof(Scope)].SetValue<int>((int)value); } }
        public DataTableRowHandle Stats { get { return this[nameof(Stats)].As<DataTableRowHandle>(); } set { this["Stats"] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object SubLabel { get { return this[nameof(SubLabel)]; } set { this[nameof(SubLabel)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object FlavorText { get { return this[nameof(FlavorText)]; } set { this[nameof(FlavorText)] = value; } }
        public Array<Object> DisplayTags { get { return new Array<Object>(this[nameof(DisplayTags)].Address); } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public StatInfoSet InspectStats { get { return this[nameof(InspectStats)].As<StatInfoSet>(); } set { this["InspectStats"] = value; } }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
        public StatsComponent StatsComponent { get { return this[nameof(StatsComponent)].As<StatsComponent>(); } set { this["StatsComponent"] = value; } }
        public void SetOwner(Actor NewOwner) { Invoke(nameof(SetOwner), NewOwner); }
        public void SetLevel(int NewLevel) { Invoke(nameof(SetLevel), NewLevel); }
        public void ScaleStat(Object Stat, float Scalar, bool AutoInitValue) { Invoke(nameof(ScaleStat), Stat, Scalar, AutoInitValue); }
        public void PostComputeStats() { Invoke(nameof(PostComputeStats)); }
        public void OnUnequipped() { Invoke(nameof(OnUnequipped)); }
        public void OnTick(float DeltaSeconds) { Invoke(nameof(OnTick), DeltaSeconds); }
        public void OnTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnTakeDamage), DamageInfo); }
        public void OnRep_Level() { Invoke(nameof(OnRep_Level)); }
        public void OnPostComputeStats() { Invoke(nameof(OnPostComputeStats)); }
        public void OnLevelChanged() { Invoke(nameof(OnLevelChanged)); }
        public void OnHitTarget(DamageInfo DamageInfo) { Invoke(nameof(OnHitTarget), DamageInfo); }
        public void OnEquipped() { Invoke(nameof(OnEquipped)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void OnComputeDerivedStats() { Invoke(nameof(OnComputeDerivedStats)); }
        public void OnAdded() { Invoke(nameof(OnAdded)); }
        public void NotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(NotifyTakeDamage), DamageInfo); }
        public void NotifyHitTarget(DamageInfo DamageInfo) { Invoke(nameof(NotifyHitTarget), DamageInfo); }
        public void ModifyStat(Object Stat, float Value) { Invoke(nameof(ModifyStat), Stat, Value); }
        public void ModifyInspectInfo(Actor Actor, int InspectLevel, InspectInfo Info, bool Rtn) { Invoke(nameof(ModifyInspectInfo), Actor, InspectLevel, Info, Rtn); }
        public void ModifyIncomingHealing(HealingInfo Info) { Invoke(nameof(ModifyIncomingHealing), Info); }
        public void ModifyIncomingDamage(DamageInfo Info) { Invoke(nameof(ModifyIncomingDamage), Info); }
        public void ModifyHealing(HealingInfo Info) { Invoke(nameof(ModifyHealing), Info); }
        public void ModifyDamage(DamageInfo Info) { Invoke(nameof(ModifyDamage), Info); }
        public float GetStat(Object Stat) { return Invoke<float>(nameof(GetStat), Stat); }
        public Character GetOwningCharacter() { return Invoke<Character>(nameof(GetOwningCharacter)); }
        public Actor GetOwner() { return Invoke<Actor>(nameof(GetOwner)); }
        public InspectInfo GetInspectInfo(Actor Actor, int InspectLevel) { return Invoke<InspectInfo>(nameof(GetInspectInfo), Actor, InspectLevel); }
        public Object GetDebugText() { return Invoke<Object>(nameof(GetDebugText)); }
        public void FilterIncomingHealing(HealingInfo HealingInfo, float HealingOut, bool ShouldApplyHealing) { Invoke(nameof(FilterIncomingHealing), HealingInfo, HealingOut, ShouldApplyHealing); }
        public void FilterIncomingFallDamage(float Damage, float DamageInfoOut, bool ShouldApplyDamage) { Invoke(nameof(FilterIncomingFallDamage), Damage, DamageInfoOut, ShouldApplyDamage); }
        public void FilterIncomingDamage(DamageInfo DamageInfo, float DamageOut, bool ShouldApplyDamage) { Invoke(nameof(FilterIncomingDamage), DamageInfo, DamageOut, ShouldApplyDamage); }
        public void ComputeStats() { Invoke(nameof(ComputeStats)); }
        public void ComputeDerivedStats() { Invoke(nameof(ComputeDerivedStats)); }
    }
    public class ActionBase : ActorModifier
    {
        public ActionBase(nint addr) : base(addr) { }
        public CameraEffect CameraEffect { get { return this[nameof(CameraEffect)].As<CameraEffect>(); } set { this["CameraEffect"] = value; } }
        public int ActionID { get { return this[nameof(ActionID)].GetValue<int>(); } set { this[nameof(ActionID)].SetValue<int>(value); } }
        public int ActionCameraEffectHandleID { get { return this[nameof(ActionCameraEffectHandleID)].GetValue<int>(); } set { this[nameof(ActionCameraEffectHandleID)].SetValue<int>(value); } }
        public DamageInfo DamageInfo { get { return this[nameof(DamageInfo)].As<DamageInfo>(); } set { this["DamageInfo"] = value; } }
        public bool ApplyOnKilled { get { return this[nameof(ApplyOnKilled)].Flag; } set { this[nameof(ApplyOnKilled)].Flag = value; } }
        public bool AllowChildrenClassesToValidate { get { return this[nameof(AllowChildrenClassesToValidate)].Flag; } set { this[nameof(AllowChildrenClassesToValidate)].Flag = value; } }
        public Object OnActionComplete { get { return this[nameof(OnActionComplete)]; } set { this[nameof(OnActionComplete)] = value; } }
        public bool bStopOnCinematic { get { return this[nameof(bStopOnCinematic)].Flag; } set { this[nameof(bStopOnCinematic)].Flag = value; } }
        public bool ValidateAction(Actor Actor, Actor Target) { return Invoke<bool>(nameof(ValidateAction), Actor, Target); }
        public void SetTarget(Actor Target) { Invoke(nameof(SetTarget), Target); }
        public void SetCause(Actor Cause) { Invoke(nameof(SetCause), Cause); }
        public void OnCinematic(PlayerControllerGunfire Player, bool bIsInCinematicMode) { Invoke(nameof(OnCinematic), Player, bIsInCinematicMode); }
        public void OnActionStop() { Invoke(nameof(OnActionStop)); }
        public void OnActionStart() { Invoke(nameof(OnActionStart)); }
        public bool IsActionFinished() { return Invoke<bool>(nameof(IsActionFinished)); }
        public Actor GetTarget() { return Invoke<Actor>(nameof(GetTarget)); }
        public HitResult GetHitInfo() { return Invoke<HitResult>(nameof(GetHitInfo)); }
        public Object GetDamageType() { return Invoke<Object>(nameof(GetDamageType)); }
        public Actor GetCauseOwner() { return Invoke<Actor>(nameof(GetCauseOwner)); }
        public Actor GetCause() { return Invoke<Actor>(nameof(GetCause)); }
        public ActionComponent GetActionComponent() { return Invoke<ActionComponent>(nameof(GetActionComponent)); }
        public Actor FireProjectile(Actor CauseActor, Object SourceSocket, Actor TargetActor, Object ProjectileBP, float Speed, bool bOrientTowardsTarget, float AutoArcHeight, float GravityScale) { return Invoke<Actor>(nameof(FireProjectile), CauseActor, SourceSocket, TargetActor, ProjectileBP, Speed, bOrientTowardsTarget, AutoArcHeight, GravityScale); }
        public void FinishAction() { Invoke(nameof(FinishAction)); }
        public void DoInstantHitFromAimVector(Actor CauseActor, Vector Start, Vector End, int SprayCount, float Spread, Object DamageType, float Damage, float DamageMod, float DamageScalar, HitResult OutHit) { Invoke(nameof(DoInstantHitFromAimVector), CauseActor, Start, End, SprayCount, Spread, DamageType, Damage, DamageMod, DamageScalar, OutHit); }
        public void DoInstantHit(Actor CauseActor, Object SourceSocket, float Range, int SprayCount, float Spread, Object DamageType, float Damage, float DamageMod, float DamageScalar, HitResult OutHit) { Invoke(nameof(DoInstantHit), CauseActor, SourceSocket, Range, SprayCount, Spread, DamageType, Damage, DamageMod, DamageScalar, OutHit); }
        public void ApplyDamage(Actor CauseActor, Actor TargetActor, float Damage, float DamageMod, float DamageScalar, Object DamageType, HitResult HitInfo) { Invoke(nameof(ApplyDamage), CauseActor, TargetActor, Damage, DamageMod, DamageScalar, DamageType, HitInfo); }
        public bool AllowStopAction() { return Invoke<bool>(nameof(AllowStopAction)); }
        public bool AllowAction(Object ActionBP, DamageInfo InDamageInfo, ActionBase NewAction) { return Invoke<bool>(nameof(AllowAction), ActionBP, InDamageInfo, NewAction); }
    }
    public class Item : Actor
    {
        public Item(nint addr) : base(addr) { }
        public PersistenceComponent PersistenceComp { get { return this[nameof(PersistenceComp)].As<PersistenceComponent>(); } set { this["PersistenceComp"] = value; } }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public int MaxStackCount { get { return this[nameof(MaxStackCount)].GetValue<int>(); } set { this[nameof(MaxStackCount)].SetValue<int>(value); } }
        public int BaseMaxQuantity { get { return this[nameof(BaseMaxQuantity)].GetValue<int>(); } set { this[nameof(BaseMaxQuantity)].SetValue<int>(value); } }
        public StatValue MaxQuantityBonusStat { get { return this[nameof(MaxQuantityBonusStat)].As<StatValue>(); } set { this["MaxQuantityBonusStat"] = value; } }
        public StatValue MaxQuantityMultiplierStat { get { return this[nameof(MaxQuantityMultiplierStat)].As<StatValue>(); } set { this["MaxQuantityMultiplierStat"] = value; } }
        public ItemInstanceData InstanceData { get { return this[nameof(InstanceData)].As<ItemInstanceData>(); } set { this["InstanceData"] = value; } }
        public DataTableRowHandle Stats { get { return this[nameof(Stats)].As<DataTableRowHandle>(); } set { this["Stats"] = value; } }
        public bool Unique { get { return this[nameof(Unique)].Flag; } set { this[nameof(Unique)].Flag = value; } }
        public bool bNeedsQuantityToSelect { get { return this[nameof(bNeedsQuantityToSelect)].Flag; } set { this[nameof(bNeedsQuantityToSelect)].Flag = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object SubLabel { get { return this[nameof(SubLabel)]; } set { this[nameof(SubLabel)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object PickupDescription { get { return this[nameof(PickupDescription)]; } set { this[nameof(PickupDescription)] = value; } }
        public Object FlavorText { get { return this[nameof(FlavorText)]; } set { this[nameof(FlavorText)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Object LargeIcon { get { return this[nameof(LargeIcon)]; } set { this[nameof(LargeIcon)] = value; } }
        public Texture2D HUDIcon { get { return this[nameof(HUDIcon)].As<Texture2D>(); } set { this["HUDIcon"] = value; } }
        public Object InspectActor { get { return this[nameof(InspectActor)]; } set { this[nameof(InspectActor)] = value; } }
        public bool Interactable { get { return this[nameof(Interactable)].Flag; } set { this[nameof(Interactable)].Flag = value; } }
        public bool UseInteractInfo { get { return this[nameof(UseInteractInfo)].Flag; } set { this[nameof(UseInteractInfo)].Flag = value; } }
        public Object InteractLabel { get { return this[nameof(InteractLabel)]; } set { this[nameof(InteractLabel)] = value; } }
        public Object InteractIconName { get { return this[nameof(InteractIconName)]; } set { this[nameof(InteractIconName)] = value; } }
        public Texture2D InteractIcon { get { return this[nameof(InteractIcon)].As<Texture2D>(); } set { this["InteractIcon"] = value; } }
        public SoundGunfire PickupSound { get { return this[nameof(PickupSound)].As<SoundGunfire>(); } set { this["PickupSound"] = value; } }
        public Object PickupChanceApplyModStatName { get { return this[nameof(PickupChanceApplyModStatName)]; } set { this[nameof(PickupChanceApplyModStatName)] = value; } }
        public Object PickupModStatName { get { return this[nameof(PickupModStatName)]; } set { this[nameof(PickupModStatName)] = value; } }
        public Object PickupScalarStatName { get { return this[nameof(PickupScalarStatName)]; } set { this[nameof(PickupScalarStatName)] = value; } }
        public Object LootFxAttachNode { get { return this[nameof(LootFxAttachNode)]; } set { this[nameof(LootFxAttachNode)] = value; } }
        public NiagaraSystem LootFxOverride { get { return this[nameof(LootFxOverride)].As<NiagaraSystem>(); } set { this["LootFxOverride"] = value; } }
        public bool DoBounce { get { return this[nameof(DoBounce)].Flag; } set { this[nameof(DoBounce)].Flag = value; } }
        public Object BounceAnimRoot { get { return this[nameof(BounceAnimRoot)]; } set { this[nameof(BounceAnimRoot)] = value; } }
        public SoundGunfire BounceFlipSound { get { return this[nameof(BounceFlipSound)].As<SoundGunfire>(); } set { this["BounceFlipSound"] = value; } }
        public SoundGunfire BounceSound { get { return this[nameof(BounceSound)].As<SoundGunfire>(); } set { this["BounceSound"] = value; } }
        public ImpactEffectSelector DroppedImpactEffect { get { return this[nameof(DroppedImpactEffect)].As<ImpactEffectSelector>(); } set { this["DroppedImpactEffect"] = value; } }
        public Object RequiredAccountAward { get { return this[nameof(RequiredAccountAward)]; } set { this[nameof(RequiredAccountAward)] = value; } }
        public Object RequiredEntitlement { get { return this[nameof(RequiredEntitlement)]; } set { this[nameof(RequiredEntitlement)] = value; } }
        public bool bOnGround { get { return this[nameof(bOnGround)].Flag; } set { this[nameof(bOnGround)].Flag = value; } }
        public Object OnCollected { get { return this[nameof(OnCollected)]; } set { this[nameof(OnCollected)] = value; } }
        public NiagaraComponent LootFxParticles { get { return this[nameof(LootFxParticles)].As<NiagaraComponent>(); } set { this["LootFxParticles"] = value; } }
        public bool Inspecting { get { return this[nameof(Inspecting)].Flag; } set { this[nameof(Inspecting)].Flag = value; } }
        public ItemSocketComponent ItemSocket { get { return this[nameof(ItemSocket)].As<ItemSocketComponent>(); } set { this["ItemSocket"] = value; } }
        public bool ValidateAdd(InventoryComponent Inventory, int DesiredQuantity, int AllowedQuantity) { return Invoke<bool>(nameof(ValidateAdd), Inventory, DesiredQuantity, AllowedQuantity); }
        public void SetQuantity(int Quantity) { Invoke(nameof(SetQuantity), Quantity); }
        public void SetLevel(byte Level) { Invoke(nameof(SetLevel), Level); }
        public void SetFallLocation(Vector NewRootLocation, Vector NewRelativeLocation) { Invoke(nameof(SetFallLocation), NewRootLocation, NewRelativeLocation); }
        public bool PreAdd(InventoryComponent Inventory, int Quantity) { return Invoke<bool>(nameof(PreAdd), Inventory, Quantity); }
        public bool PickupPreAdd(InventoryComponent Inventory, int Quantity, int Level) { return Invoke<bool>(nameof(PickupPreAdd), Inventory, Quantity, Level); }
        public void PickupItem(InventoryComponent Inventory) { Invoke(nameof(PickupItem), Inventory); }
        public void OnRep_InstanceData(ItemInstanceData PrevData) { Invoke(nameof(OnRep_InstanceData), PrevData); }
        public void OnPickupFailed() { Invoke(nameof(OnPickupFailed)); }
        public void OnPickedUp(InventoryComponent Inventory) { Invoke(nameof(OnPickedUp), Inventory); }
        public void OnDropped() { Invoke(nameof(OnDropped)); }
        public void OnCinematic(PlayerControllerGunfire Player, bool bIsInCinematicMode) { Invoke(nameof(OnCinematic), Player, bIsInCinematicMode); }
        public void ModifyInspectInfo(Actor Actor, ItemInstanceData InInstanceData, InspectInfo Info, bool HideBaseStats) { Invoke(nameof(ModifyInspectInfo), Actor, InInstanceData, Info, HideBaseStats); }
        public void LevelChanged(InventoryComponent Inventory, int ItemId, ItemInstanceData ItemInstanceData) { Invoke(nameof(LevelChanged), Inventory, ItemId, ItemInstanceData); }
        public void InitializeLootFxForLocalPawn(Pawn Pawn) { Invoke(nameof(InitializeLootFxForLocalPawn), Pawn); }
        public Object GetSubLabel() { return Invoke<Object>(nameof(GetSubLabel)); }
        public bool GetRewardForLowerQualityPickup(InventoryComponent Inventory, int Level, Object OutRewardClass, int OutQuantity, int OutLevel) { return Invoke<bool>(nameof(GetRewardForLowerQualityPickup), Inventory, Level, OutRewardClass, OutQuantity, OutLevel); }
        public int GetQuantity() { return Invoke<int>(nameof(GetQuantity)); }
        public int GetMaxQuantity(Actor Actor) { return Invoke<int>(nameof(GetMaxQuantity), Actor); }
        public Object GetLabel() { return Invoke<Object>(nameof(GetLabel)); }
        public ItemSocketComponent GetItemSocket() { return Invoke<ItemSocketComponent>(nameof(GetItemSocket)); }
        public byte GetItemLevel() { return Invoke<byte>(nameof(GetItemLevel)); }
        public InspectInfo GetInspectInfo(Actor Actor, ItemInstanceData InInstanceData, int LevelOverride) { return Invoke<InspectInfo>(nameof(GetInspectInfo), Actor, InInstanceData, LevelOverride); }
        public void FallTo(Vector NewLocation) { Invoke(nameof(FallTo), NewLocation); }
        public void Fall(float MaxHeight) { Invoke(nameof(Fall), MaxHeight); }
        public void DropBounce() { Invoke(nameof(DropBounce)); }
        public void Bounce() { Invoke(nameof(Bounce)); }
    }
    public class Equipment : Item
    {
        public Equipment(nint addr) : base(addr) { }
        public Object CustomizationID { get { return this[nameof(CustomizationID)]; } set { this[nameof(CustomizationID)] = value; } }
        public Object AnimationLayer { get { return this[nameof(AnimationLayer)]; } set { this[nameof(AnimationLayer)] = value; } }
        public Array<EquipmentAttachment> Attachments { get { return new Array<EquipmentAttachment>(this[nameof(Attachments)].Address); } }
        public bool AutoEnableInput { get { return this[nameof(AutoEnableInput)].Flag; } set { this[nameof(AutoEnableInput)].Flag = value; } }
        public bool ShouldUnequip { get { return this[nameof(ShouldUnequip)].Flag; } set { this[nameof(ShouldUnequip)].Flag = value; } }
        public bool UseEquipmentAnimTimings { get { return this[nameof(UseEquipmentAnimTimings)].Flag; } set { this[nameof(UseEquipmentAnimTimings)].Flag = value; } }
        public Array<EquipmentModSlot> ModSlots { get { return new Array<EquipmentModSlot>(this[nameof(ModSlots)].Address); } }
        public Array<Object> ActiveTags { get { return new Array<Object>(this[nameof(ActiveTags)].Address); } }
        public Array<Object> CharacterAnimTags { get { return new Array<Object>(this[nameof(CharacterAnimTags)].Address); } }
        public Object AdditionalAnimTag { get { return this[nameof(AdditionalAnimTag)]; } set { this[nameof(AdditionalAnimTag)] = value; } }
        public SoundGunfire EquipSound { get { return this[nameof(EquipSound)].As<SoundGunfire>(); } set { this["EquipSound"] = value; } }
        public StatsComponent StatsComp { get { return this[nameof(StatsComp)].As<StatsComponent>(); } set { this["StatsComp"] = value; } }
        public Object OnEquippedEvent { get { return this[nameof(OnEquippedEvent)]; } set { this[nameof(OnEquippedEvent)] = value; } }
        public Object OnUnequippedEvent { get { return this[nameof(OnUnequippedEvent)]; } set { this[nameof(OnUnequippedEvent)] = value; } }
        public Object OnInHandChangedEvent { get { return this[nameof(OnInHandChangedEvent)]; } set { this[nameof(OnInHandChangedEvent)] = value; } }
        public Object OnModAttached { get { return this[nameof(OnModAttached)]; } set { this[nameof(OnModAttached)] = value; } }
        public Object OnModDetached { get { return this[nameof(OnModDetached)]; } set { this[nameof(OnModDetached)] = value; } }
        public AnimationHandle CurrentAnimHandle { get { return this[nameof(CurrentAnimHandle)].As<AnimationHandle>(); } set { this["CurrentAnimHandle"] = value; } }
        public CharacterGunfire Character { get { return this[nameof(Character)].As<CharacterGunfire>(); } set { this["Character"] = value; } }
        public CharacterGunfire CharacterReplicated { get { return this[nameof(CharacterReplicated)].As<CharacterGunfire>(); } set { this["CharacterReplicated"] = value; } }
        public Array<AnimInstanceGunfire> AnimInstances { get { return new Array<AnimInstanceGunfire>(this[nameof(AnimInstances)].Address); } }
        public Array<EquipmentMod> ModInstances { get { return new Array<EquipmentMod>(this[nameof(ModInstances)].Address); } }
        public ActorCustomizationComponent CustomizationComponent { get { return this[nameof(CustomizationComponent)].As<ActorCustomizationComponent>(); } set { this["CustomizationComponent"] = value; } }
        public bool bIsActiveReplicated { get { return this[nameof(bIsActiveReplicated)].Flag; } set { this[nameof(bIsActiveReplicated)].Flag = value; } }
        public bool bIsInHandReplicated { get { return this[nameof(bIsInHandReplicated)].Flag; } set { this[nameof(bIsInHandReplicated)].Flag = value; } }
        public bool ValidateEquip(CharacterGunfire ToCharacter) { return Invoke<bool>(nameof(ValidateEquip), ToCharacter); }
        public void Unequip() { Invoke(nameof(Unequip)); }
        public void SetInputEnabled(bool Enabled) { Invoke(nameof(SetInputEnabled), Enabled); }
        public void SetInHand(bool InHand) { Invoke(nameof(SetInHand), InHand); }
        public void SetAttachmentsVisible(bool Visible) { Invoke(nameof(SetAttachmentsVisible), Visible); }
        public void ServerSetInHand(bool InHand) { Invoke(nameof(ServerSetInHand), InHand); }
        public void ScaleStat(Object Stat, float Scalar, bool AutoInitValue) { Invoke(nameof(ScaleStat), Stat, Scalar, AutoInitValue); }
        public void PostSetupInventory() { Invoke(nameof(PostSetupInventory)); }
        public void PostComputeStats() { Invoke(nameof(PostComputeStats)); }
        public void PostComputeCharacterStats() { Invoke(nameof(PostComputeCharacterStats)); }
        public float PlayAnimation(Object AnimationID, float PlayRate, bool bCharacterOnly, Object AnimLayerOverride, int Seed, float StartTimeOverride) { return Invoke<float>(nameof(PlayAnimation), AnimationID, PlayRate, bCharacterOnly, AnimLayerOverride, Seed, StartTimeOverride); }
        public void OnUnequipped() { Invoke(nameof(OnUnequipped)); }
        public void OnTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnTakeDamage), DamageInfo); }
        public void OnSkeletalMeshAnimInitialized() { Invoke(nameof(OnSkeletalMeshAnimInitialized)); }
        public void OnPostComputeStats() { Invoke(nameof(OnPostComputeStats)); }
        public void OnNotInHand() { Invoke(nameof(OnNotInHand)); }
        public void OnInHand() { Invoke(nameof(OnInHand)); }
        public void OnHitTarget(DamageInfo DamageInfo) { Invoke(nameof(OnHitTarget), DamageInfo); }
        public void OnEquipped() { Invoke(nameof(OnEquipped)); }
        public void OnDetached() { Invoke(nameof(OnDetached)); }
        public void OnDeactivated() { Invoke(nameof(OnDeactivated)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void OnAttachmentsUpdated() { Invoke(nameof(OnAttachmentsUpdated)); }
        public void OnActivated() { Invoke(nameof(OnActivated)); }
        public void ModifyStat(Object Stat, float Value) { Invoke(nameof(ModifyStat), Stat, Value); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool IsInHand() { return Invoke<bool>(nameof(IsInHand)); }
        public bool IsEquipped() { return Invoke<bool>(nameof(IsEquipped)); }
        public bool IsActive() { return Invoke<bool>(nameof(IsActive)); }
        public bool IsActionAllowed() { return Invoke<bool>(nameof(IsActionAllowed)); }
        public void InstanceDataChanged() { Invoke(nameof(InstanceDataChanged)); }
        public bool HasEquipmentAnimationEntry(Object AnimationID, Object AnimLayerOverride) { return Invoke<bool>(nameof(HasEquipmentAnimationEntry), AnimationID, AnimLayerOverride); }
        public float GetStat(Object Stat) { return Invoke<float>(nameof(GetStat), Stat); }
        public byte GetModSlotIndexByNameID(Object SlotNameID) { return Invoke<byte>(nameof(GetModSlotIndexByNameID), SlotNameID); }
        public EquipmentModSlot GetModSlotByNameID(Object SlotNameID) { return Invoke<EquipmentModSlot>(nameof(GetModSlotByNameID), SlotNameID); }
        public int GetItemID() { return Invoke<int>(nameof(GetItemID)); }
        public InventoryComponent GetInventoryComponent() { return Invoke<InventoryComponent>(nameof(GetInventoryComponent)); }
        public UIHud GetHud() { return Invoke<UIHud>(nameof(GetHud)); }
        public int GetEquipmentSlotIdx() { return Invoke<int>(nameof(GetEquipmentSlotIdx)); }
        public EquipmentMod GetEquipmentMod(byte Slot) { return Invoke<EquipmentMod>(nameof(GetEquipmentMod), Slot); }
        public Object GetCurrentAnimation() { return Invoke<Object>(nameof(GetCurrentAnimation)); }
        public CharacterGunfire GetCharacter() { return Invoke<CharacterGunfire>(nameof(GetCharacter)); }
        public Array<EquipmentMod> GetAttachedMods() { return Invoke<Array<EquipmentMod>>(nameof(GetAttachedMods)); }
        public void Detach() { Invoke(nameof(Detach)); }
        public void Deactivate() { Invoke(nameof(Deactivate)); }
        public void ComputeStats() { Invoke(nameof(ComputeStats)); }
        public void ComputeCharacterStats() { Invoke(nameof(ComputeCharacterStats)); }
        public void Activate() { Invoke(nameof(Activate)); }
        public void _NotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(_NotifyTakeDamage), DamageInfo); }
        public void _NotifyHitTarget(DamageInfo DamageInfo) { Invoke(nameof(_NotifyHitTarget), DamageInfo); }
    }
    public class DamageClass : Object
    {
        public DamageClass(nint addr) : base(addr) { }
        public Object DamageModStat { get { return this[nameof(DamageModStat)]; } set { this[nameof(DamageModStat)] = value; } }
        public Object DamageScalarStat { get { return this[nameof(DamageScalarStat)]; } set { this[nameof(DamageScalarStat)] = value; } }
        public Object CritChanceStat { get { return this[nameof(CritChanceStat)]; } set { this[nameof(CritChanceStat)] = value; } }
        public Object CritDamageModStat { get { return this[nameof(CritDamageModStat)]; } set { this[nameof(CritDamageModStat)] = value; } }
        public bool bAllowsWeakSpots { get { return this[nameof(bAllowsWeakSpots)].Flag; } set { this[nameof(bAllowsWeakSpots)].Flag = value; } }
        public bool bIgnoresWeakspotStatRequirement { get { return this[nameof(bIgnoresWeakspotStatRequirement)].Flag; } set { this[nameof(bIgnoresWeakspotStatRequirement)].Flag = value; } }
        public Object DamageReductionStat { get { return this[nameof(DamageReductionStat)]; } set { this[nameof(DamageReductionStat)] = value; } }
        public Object DamageResistanceStat { get { return this[nameof(DamageResistanceStat)]; } set { this[nameof(DamageResistanceStat)] = value; } }
        public int DamageResistConstant { get { return this[nameof(DamageResistConstant)].GetValue<int>(); } set { this[nameof(DamageResistConstant)].SetValue<int>(value); } }
        public int DamageResistLevelScalar { get { return this[nameof(DamageResistLevelScalar)].GetValue<int>(); } set { this[nameof(DamageResistLevelScalar)].SetValue<int>(value); } }
        public Object Action { get { return this[nameof(Action)]; } set { this[nameof(Action)] = value; } }
    }
    public class Trait : ActorModifier
    {
        public Trait(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public DataTable StatTable { get { return this[nameof(StatTable)].As<DataTable>(); } set { this["StatTable"] = value; } }
        public int MaxLevel { get { return this[nameof(MaxLevel)].GetValue<int>(); } set { this[nameof(MaxLevel)].SetValue<int>(value); } }
        public bool bAddIfAlreadyUnlocked { get { return this[nameof(bAddIfAlreadyUnlocked)].Flag; } set { this[nameof(bAddIfAlreadyUnlocked)].Flag = value; } }
        public int SubsequentUnlockLevelIncrement { get { return this[nameof(SubsequentUnlockLevelIncrement)].GetValue<int>(); } set { this[nameof(SubsequentUnlockLevelIncrement)].SetValue<int>(value); } }
        public int RequiredLevel { get { return this[nameof(RequiredLevel)].GetValue<int>(); } set { this[nameof(RequiredLevel)].SetValue<int>(value); } }
        public int Cost { get { return this[nameof(Cost)].GetValue<int>(); } set { this[nameof(Cost)].SetValue<int>(value); } }
        public Array<Object> RequiredTraits { get { return new Array<Object>(this[nameof(RequiredTraits)].Address); } }
        public ConditionList ConditionList { get { return this[nameof(ConditionList)].As<ConditionList>(); } set { this["ConditionList"] = value; } }
        public Object RequiredEntitlement { get { return this[nameof(RequiredEntitlement)]; } set { this[nameof(RequiredEntitlement)] = value; } }
        public bool ShouldApplyStats() { return Invoke<bool>(nameof(ShouldApplyStats)); }
        public bool HasModifier(Object ModifierBP) { return Invoke<bool>(nameof(HasModifier), ModifierBP); }
        public float GetTraitStatValue(Object StatName, int TraitLevel) { return Invoke<float>(nameof(GetTraitStatValue), StatName, TraitLevel); }
        public void GetModifierBonus(Object ModifierBP, int FromLevel, int ToLevel, int LevelBonus, int MaxLevelBonus) { Invoke(nameof(GetModifierBonus), ModifierBP, FromLevel, ToLevel, LevelBonus, MaxLevelBonus); }
    }
    public class SpawnTableEntry : Object
    {
        public SpawnTableEntry(nint addr) : base(addr) { }
        public Object ChanceGroup { get { return this[nameof(ChanceGroup)]; } set { this[nameof(ChanceGroup)] = value; } }
        public int Chance { get { return this[nameof(Chance)].GetValue<int>(); } set { this[nameof(Chance)].SetValue<int>(value); } }
        public Array<Object> ChanceStats { get { return new Array<Object>(this[nameof(ChanceStats)].Address); } }
        public int ChanceDecayBelowMinLevel { get { return this[nameof(ChanceDecayBelowMinLevel)].GetValue<int>(); } set { this[nameof(ChanceDecayBelowMinLevel)].SetValue<int>(value); } }
        public int ChanceDecayAboveMaxLevel { get { return this[nameof(ChanceDecayAboveMaxLevel)].GetValue<int>(); } set { this[nameof(ChanceDecayAboveMaxLevel)].SetValue<int>(value); } }
        public int ChanceIncreaseOnFail { get { return this[nameof(ChanceIncreaseOnFail)].GetValue<int>(); } set { this[nameof(ChanceIncreaseOnFail)].SetValue<int>(value); } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Array<Object> RestrictedTags { get { return new Array<Object>(this[nameof(RestrictedTags)].Address); } }
        public int LevelMin { get { return this[nameof(LevelMin)].GetValue<int>(); } set { this[nameof(LevelMin)].SetValue<int>(value); } }
        public int LevelMax { get { return this[nameof(LevelMax)].GetValue<int>(); } set { this[nameof(LevelMax)].SetValue<int>(value); } }
        public int RatingMin { get { return this[nameof(RatingMin)].GetValue<int>(); } set { this[nameof(RatingMin)].SetValue<int>(value); } }
        public int RatingMax { get { return this[nameof(RatingMax)].GetValue<int>(); } set { this[nameof(RatingMax)].SetValue<int>(value); } }
        public int ScaleSpawnQuantity(Object WorldContextObject, int Quantity) { return Invoke<int>(nameof(ScaleSpawnQuantity), WorldContextObject, Quantity); }
    }
    public class AICustomTacticalPoint : Actor
    {
        public AICustomTacticalPoint(nint addr) : base(addr) { }
    }
    public class InheritableObject : Object
    {
        public InheritableObject(nint addr) : base(addr) { }
    }
    public class Condition : InheritableObject
    {
        public Condition(nint addr) : base(addr) { }
        public bool InvertCondition { get { return this[nameof(InvertCondition)].Flag; } set { this[nameof(InvertCondition)].Flag = value; } }
        public bool CompareValue(float Value1, float Value2, CompareOp Compare) { return Invoke<bool>(nameof(CompareValue), Value1, Value2, Compare); }
    }
    public class ActorStateDecorator : InheritableObject
    {
        public ActorStateDecorator(nint addr) : base(addr) { }
    }
    public class AITargetSelector : Object
    {
        public AITargetSelector(nint addr) : base(addr) { }
        public float Score(AIControllerGunfire AIController, RelevantActor Target) { return Invoke<float>(nameof(Score), AIController, Target); }
    }
    public class AIDefaultTargetSelector : AITargetSelector
    {
        public AIDefaultTargetSelector(nint addr) : base(addr) { }
        public bool CullNotVisibleTargets { get { return this[nameof(CullNotVisibleTargets)].Flag; } set { this[nameof(CullNotVisibleTargets)].Flag = value; } }
        public float WoundedAwarenessScalar { get { return this[nameof(WoundedAwarenessScalar)].GetValue<float>(); } set { this[nameof(WoundedAwarenessScalar)].SetValue<float>(value); } }
        public float PlayerAwarenessScalar { get { return this[nameof(PlayerAwarenessScalar)].GetValue<float>(); } set { this[nameof(PlayerAwarenessScalar)].SetValue<float>(value); } }
        public bool bScoreUnknownTargets { get { return this[nameof(bScoreUnknownTargets)].Flag; } set { this[nameof(bScoreUnknownTargets)].Flag = value; } }
        public ConditionList TargetingConditions { get { return this[nameof(TargetingConditions)].As<ConditionList>(); } set { this["TargetingConditions"] = value; } }
    }
    public class AnimInstanceGunfire : AnimInstance
    {
        public AnimInstanceGunfire(nint addr) : base(addr) { }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float VerticalSpeed { get { return this[nameof(VerticalSpeed)].GetValue<float>(); } set { this[nameof(VerticalSpeed)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public EAnimationVelocityMode VelocityMode { get { return (EAnimationVelocityMode)this[nameof(VelocityMode)].GetValue<int>(); } set { this[nameof(VelocityMode)].SetValue<int>((int)value); } }
        public Vector VelocityOverride { get { return this[nameof(VelocityOverride)].As<Vector>(); } set { this["VelocityOverride"] = value; } }
        public float Direction { get { return this[nameof(Direction)].GetValue<float>(); } set { this[nameof(Direction)].SetValue<float>(value); } }
        public float InputDirection { get { return this[nameof(InputDirection)].GetValue<float>(); } set { this[nameof(InputDirection)].SetValue<float>(value); } }
        public float CameraRelativeInputDirection { get { return this[nameof(CameraRelativeInputDirection)].GetValue<float>(); } set { this[nameof(CameraRelativeInputDirection)].SetValue<float>(value); } }
        public float VerticalDirection { get { return this[nameof(VerticalDirection)].GetValue<float>(); } set { this[nameof(VerticalDirection)].SetValue<float>(value); } }
        public float CameraRelativeVerticalInputDirection { get { return this[nameof(CameraRelativeVerticalInputDirection)].GetValue<float>(); } set { this[nameof(CameraRelativeVerticalInputDirection)].SetValue<float>(value); } }
        public bool bCalculateGroundSlope { get { return this[nameof(bCalculateGroundSlope)].Flag; } set { this[nameof(bCalculateGroundSlope)].Flag = value; } }
        public float GroundSlope { get { return this[nameof(GroundSlope)].GetValue<float>(); } set { this[nameof(GroundSlope)].SetValue<float>(value); } }
        public Rotator LookDirection { get { return this[nameof(LookDirection)].As<Rotator>(); } set { this["LookDirection"] = value; } }
        public bool bIsStopping { get { return this[nameof(bIsStopping)].Flag; } set { this[nameof(bIsStopping)].Flag = value; } }
        public float WindupPlayrate { get { return this[nameof(WindupPlayrate)].GetValue<float>(); } set { this[nameof(WindupPlayrate)].SetValue<float>(value); } }
        public float UpperBlendOut { get { return this[nameof(UpperBlendOut)].GetValue<float>(); } set { this[nameof(UpperBlendOut)].SetValue<float>(value); } }
        public float UpperBlendOutDelay { get { return this[nameof(UpperBlendOutDelay)].GetValue<float>(); } set { this[nameof(UpperBlendOutDelay)].SetValue<float>(value); } }
        public Array<AnimationLayer> AnimationLayers { get { return new Array<AnimationLayer>(this[nameof(AnimationLayers)].Address); } }
        public Array<Object> AnimationTags { get { return new Array<Object>(this[nameof(AnimationTags)].Address); } }
        public Array<IkEffector> IkEffectors { get { return new Array<IkEffector>(this[nameof(IkEffectors)].Address); } }
        public float AimYaw { get { return this[nameof(AimYaw)].GetValue<float>(); } set { this[nameof(AimYaw)].SetValue<float>(value); } }
        public float AimPitch { get { return this[nameof(AimPitch)].GetValue<float>(); } set { this[nameof(AimPitch)].SetValue<float>(value); } }
        public bool UseTargetForAim { get { return this[nameof(UseTargetForAim)].Flag; } set { this[nameof(UseTargetForAim)].Flag = value; } }
        public bool bAdjustTargetDirectionByMeshOrientation { get { return this[nameof(bAdjustTargetDirectionByMeshOrientation)].Flag; } set { this[nameof(bAdjustTargetDirectionByMeshOrientation)].Flag = value; } }
        public float DirectionalAnimationInterpSpeed { get { return this[nameof(DirectionalAnimationInterpSpeed)].GetValue<float>(); } set { this[nameof(DirectionalAnimationInterpSpeed)].SetValue<float>(value); } }
        public bool bMaintainDirectionWhileStopping { get { return this[nameof(bMaintainDirectionWhileStopping)].Flag; } set { this[nameof(bMaintainDirectionWhileStopping)].Flag = value; } }
        public bool bClearTimeDilationOnStateChange { get { return this[nameof(bClearTimeDilationOnStateChange)].Flag; } set { this[nameof(bClearTimeDilationOnStateChange)].Flag = value; } }
        public bool bCopyParentAnimationMetrics { get { return this[nameof(bCopyParentAnimationMetrics)].Flag; } set { this[nameof(bCopyParentAnimationMetrics)].Flag = value; } }
        public bool bCopyParentAimDirection { get { return this[nameof(bCopyParentAimDirection)].Flag; } set { this[nameof(bCopyParentAimDirection)].Flag = value; } }
        public bool bCopyAllParentLayers { get { return this[nameof(bCopyAllParentLayers)].Flag; } set { this[nameof(bCopyAllParentLayers)].Flag = value; } }
        public Array<Object> ParentLayersToCopy { get { return new Array<Object>(this[nameof(ParentLayersToCopy)].Address); } }
        public Object DefaultBone { get { return this[nameof(DefaultBone)]; } set { this[nameof(DefaultBone)] = value; } }
        public bool bDoNotifyTriggerRateOptimizations { get { return this[nameof(bDoNotifyTriggerRateOptimizations)].Flag; } set { this[nameof(bDoNotifyTriggerRateOptimizations)].Flag = value; } }
        public bool bDisableRateOptimizationsDuringCinematics { get { return this[nameof(bDisableRateOptimizationsDuringCinematics)].Flag; } set { this[nameof(bDisableRateOptimizationsDuringCinematics)].Flag = value; } }
        public int MinNotifiesPerFrame { get { return this[nameof(MinNotifiesPerFrame)].GetValue<int>(); } set { this[nameof(MinNotifiesPerFrame)].SetValue<int>(value); } }
        public int MaxNotifiesPerFrame { get { return this[nameof(MaxNotifiesPerFrame)].GetValue<int>(); } set { this[nameof(MaxNotifiesPerFrame)].SetValue<int>(value); } }
        public int QueuedNotifyFlushThreshold { get { return this[nameof(QueuedNotifyFlushThreshold)].GetValue<int>(); } set { this[nameof(QueuedNotifyFlushThreshold)].SetValue<int>(value); } }
        public Pawn OwningPawn { get { return this[nameof(OwningPawn)].As<Pawn>(); } set { this["OwningPawn"] = value; } }
        public CharacterGunfire OwningCharacter { get { return this[nameof(OwningCharacter)].As<CharacterGunfire>(); } set { this["OwningCharacter"] = value; } }
        public PlayerGunfire OwningPlayer { get { return this[nameof(OwningPlayer)].As<PlayerGunfire>(); } set { this["OwningPlayer"] = value; } }
        public InputStateComponent Input { get { return this[nameof(Input)].As<InputStateComponent>(); } set { this["Input"] = value; } }
        public StateMachineComponent CachedStateMachine { get { return this[nameof(CachedStateMachine)].As<StateMachineComponent>(); } set { this["CachedStateMachine"] = value; } }
        public AnimInstanceGunfire ParentAnimInstance { get { return this[nameof(ParentAnimInstance)].As<AnimInstanceGunfire>(); } set { this["ParentAnimInstance"] = value; } }
        public Array<AnimInstanceGunfire> ChildAnimInstances { get { return new Array<AnimInstanceGunfire>(this[nameof(ChildAnimInstances)].Address); } }
        public void UpdateIkEffector(IkEffector Effector) { Invoke(nameof(UpdateIkEffector), Effector); }
        public void StopAnimation(AnimationHandle Handle) { Invoke(nameof(StopAnimation), Handle); }
        public void SetVelocityMode(EAnimationVelocityMode NewMode) { Invoke(nameof(SetVelocityMode), NewMode); }
        public void SetSimulatedVelocityRate(Vector SimulatedVelocityRate) { Invoke(nameof(SetSimulatedVelocityRate), SimulatedVelocityRate); }
        public void SetSimulatedVelocity(Vector SimulatedVelocity) { Invoke(nameof(SetSimulatedVelocity), SimulatedVelocity); }
        public void SetParentAnimInstance(AnimInstanceGunfire AnimInstance) { Invoke(nameof(SetParentAnimInstance), AnimInstance); }
        public void SetCopyParentAnimationMetrics(bool bEnabled) { Invoke(nameof(SetCopyParentAnimationMetrics), bEnabled); }
        public void SetCopyParentAimDirection(bool bEnabled) { Invoke(nameof(SetCopyParentAimDirection), bEnabled); }
        public void SetCopyAllParentAnimationLayers(bool bEnabled) { Invoke(nameof(SetCopyAllParentAnimationLayers), bEnabled); }
        public Object ResolveBoneName(SkeletalMeshComponent Mesh, Object InBoneName) { return Invoke<Object>(nameof(ResolveBoneName), Mesh, InBoneName); }
        public void RemoveParentAnimationLayerToCopy(Object Layer) { Invoke(nameof(RemoveParentAnimationLayerToCopy), Layer); }
        public void RemoveIkEffector(Object IkBone) { Invoke(nameof(RemoveIkEffector), IkBone); }
        public void RemoveChildAnimInstance(AnimInstanceGunfire AnimInstance) { Invoke(nameof(RemoveChildAnimInstance), AnimInstance); }
        public void RemoveAnimationTag(Object AnimTag) { Invoke(nameof(RemoveAnimationTag), AnimTag); }
        public AnimationHandle PlayAnimationByID(Object AnimationLayer, Object AnimationID) { return Invoke<AnimationHandle>(nameof(PlayAnimationByID), AnimationLayer, AnimationID); }
        public bool HasAnimationTag(Object AnimTag) { return Invoke<bool>(nameof(HasAnimationTag), AnimTag); }
        public StateMachineComponent GetStateMachine() { return Invoke<StateMachineComponent>(nameof(GetStateMachine)); }
        public float GetMoveInputDir() { return Invoke<float>(nameof(GetMoveInputDir)); }
        public float GetMoveDir() { return Invoke<float>(nameof(GetMoveDir)); }
        public AnimInstanceGunfire GetMasterAnimInstance(Actor Actor) { return Invoke<AnimInstanceGunfire>(nameof(GetMasterAnimInstance), Actor); }
        public IkEffector GetIkEffector(Object IkBone) { return Invoke<IkEffector>(nameof(GetIkEffector), IkBone); }
        public float GetHeading() { return Invoke<float>(nameof(GetHeading)); }
        public InputStateComponent GetCharacterInput() { return Invoke<InputStateComponent>(nameof(GetCharacterInput)); }
        public Vector GetAnimationVelocity() { return Invoke<Vector>(nameof(GetAnimationVelocity)); }
        public void GetAimAngles(Object RefBone, float Yaw, float Pitch) { Invoke(nameof(GetAimAngles), RefBone, Yaw, Pitch); }
        public void EnableLookPoses(bool bEnabled) { Invoke(nameof(EnableLookPoses), bEnabled); }
        public bool CompareAngles(float Angle1, float Angle2, float Arc) { return Invoke<bool>(nameof(CompareAngles), Angle1, Angle2, Arc); }
        public bool AreLookPosesDisabled() { return Invoke<bool>(nameof(AreLookPosesDisabled)); }
        public float ApplyAngleDeadzones(float Angle, Array<Vector2D> Deadzones, float DirectionAngleTolerance, float PreviousAngle) { return Invoke<float>(nameof(ApplyAngleDeadzones), Angle, Deadzones, DirectionAngleTolerance, PreviousAngle); }
        public void AddParentAnimationLayerToCopy(Object Layer) { Invoke(nameof(AddParentAnimationLayerToCopy), Layer); }
        public void AddChildAnimInstance(AnimInstanceGunfire AnimInstance) { Invoke(nameof(AddChildAnimInstance), AnimInstance); }
        public void AddAnimationTag(Object AnimTag) { Invoke(nameof(AddAnimationTag), AnimTag); }
    }
    public class CameraState : Object
    {
        public CameraState(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public float FOV { get { return this[nameof(FOV)].GetValue<float>(); } set { this[nameof(FOV)].SetValue<float>(value); } }
        public float DefaultBlendTime { get { return this[nameof(DefaultBlendTime)].GetValue<float>(); } set { this[nameof(DefaultBlendTime)].SetValue<float>(value); } }
        public float CameraCollisionSweepOffset { get { return this[nameof(CameraCollisionSweepOffset)].GetValue<float>(); } set { this[nameof(CameraCollisionSweepOffset)].SetValue<float>(value); } }
        public float CameraCollisionInterpSpeed { get { return this[nameof(CameraCollisionInterpSpeed)].GetValue<float>(); } set { this[nameof(CameraCollisionInterpSpeed)].SetValue<float>(value); } }
        public Actor ValidateCameraActor(StateCameraComponent CameraManager, Actor CameraActor) { return Invoke<Actor>(nameof(ValidateCameraActor), CameraManager, CameraActor); }
        public void OnUpdate(StateCameraComponent CameraManager, float DeltaTime, MinimalViewInfo DesiredView) { Invoke(nameof(OnUpdate), CameraManager, DeltaTime, DesiredView); }
        public void OnLeave(StateCameraComponent CameraManager) { Invoke(nameof(OnLeave), CameraManager); }
        public void OnEnter(StateCameraComponent CameraManager, CameraState PreviousState, float TransitionTime) { Invoke(nameof(OnEnter), CameraManager, PreviousState, TransitionTime); }
    }
    public class FlyCameraState : CameraState
    {
        public FlyCameraState(nint addr) : base(addr) { }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float PitchSpeed { get { return this[nameof(PitchSpeed)].GetValue<float>(); } set { this[nameof(PitchSpeed)].SetValue<float>(value); } }
        public float YawSpeed { get { return this[nameof(YawSpeed)].GetValue<float>(); } set { this[nameof(YawSpeed)].SetValue<float>(value); } }
        public float MoveSpeed { get { return this[nameof(MoveSpeed)].GetValue<float>(); } set { this[nameof(MoveSpeed)].SetValue<float>(value); } }
        public float SprintSpeedScalar { get { return this[nameof(SprintSpeedScalar)].GetValue<float>(); } set { this[nameof(SprintSpeedScalar)].SetValue<float>(value); } }
        public float StepFrameSimulateDelay { get { return this[nameof(StepFrameSimulateDelay)].GetValue<float>(); } set { this[nameof(StepFrameSimulateDelay)].SetValue<float>(value); } }
        public Actor LastRequestedCameraActor { get { return this[nameof(LastRequestedCameraActor)].As<Actor>(); } set { this["LastRequestedCameraActor"] = value; } }
        public Actor LastRequestedExternalCameraActor { get { return this[nameof(LastRequestedExternalCameraActor)].As<Actor>(); } set { this["LastRequestedExternalCameraActor"] = value; } }
        public Array<CharacterGunfire> CharacterBaseActorArr { get { return new Array<CharacterGunfire>(this[nameof(CharacterBaseActorArr)].Address); } }
    }
    public class StateCameraComponent : CameraComponent
    {
        public StateCameraComponent(nint addr) : base(addr) { }
        public Object DefaultCameraState { get { return this[nameof(DefaultCameraState)]; } set { this[nameof(DefaultCameraState)] = value; } }
        public Object FlyCameraState { get { return this[nameof(FlyCameraState)]; } set { this[nameof(FlyCameraState)] = value; } }
        public Object FixedCameraState { get { return this[nameof(FixedCameraState)]; } set { this[nameof(FixedCameraState)] = value; } }
        public Object CinematicTransitionCameraState { get { return this[nameof(CinematicTransitionCameraState)]; } set { this[nameof(CinematicTransitionCameraState)] = value; } }
        public Object HMDComponentName { get { return this[nameof(HMDComponentName)]; } set { this[nameof(HMDComponentName)] = value; } }
        public Object AimBone { get { return this[nameof(AimBone)]; } set { this[nameof(AimBone)] = value; } }
        public Vector AimBonePitchAxis { get { return this[nameof(AimBonePitchAxis)].As<Vector>(); } set { this["AimBonePitchAxis"] = value; } }
        public float AimBoneScale { get { return this[nameof(AimBoneScale)].GetValue<float>(); } set { this[nameof(AimBoneScale)].SetValue<float>(value); } }
        public float MinControllerSensitivityScalar { get { return this[nameof(MinControllerSensitivityScalar)].GetValue<float>(); } set { this[nameof(MinControllerSensitivityScalar)].SetValue<float>(value); } }
        public float MaxControllerSensitivityScalar { get { return this[nameof(MaxControllerSensitivityScalar)].GetValue<float>(); } set { this[nameof(MaxControllerSensitivityScalar)].SetValue<float>(value); } }
        public float MinMouseSensitivityScalar { get { return this[nameof(MinMouseSensitivityScalar)].GetValue<float>(); } set { this[nameof(MinMouseSensitivityScalar)].SetValue<float>(value); } }
        public float MaxMouseSensitivityScalar { get { return this[nameof(MaxMouseSensitivityScalar)].GetValue<float>(); } set { this[nameof(MaxMouseSensitivityScalar)].SetValue<float>(value); } }
        public float DefaultCollisionInterpSpeed { get { return this[nameof(DefaultCollisionInterpSpeed)].GetValue<float>(); } set { this[nameof(DefaultCollisionInterpSpeed)].SetValue<float>(value); } }
        public bool bOverrideSwimmingCameraChannel { get { return this[nameof(bOverrideSwimmingCameraChannel)].Flag; } set { this[nameof(bOverrideSwimmingCameraChannel)].Flag = value; } }
        public byte SwimmingCameraChannel { get { return this[nameof(SwimmingCameraChannel)].GetValue<byte>(); } set { this[nameof(SwimmingCameraChannel)].SetValue<byte>(value); } }
        public float MaxRecoveryAngle { get { return this[nameof(MaxRecoveryAngle)].GetValue<float>(); } set { this[nameof(MaxRecoveryAngle)].SetValue<float>(value); } }
        public float MaxPlatformCamPivotSmoothTime { get { return this[nameof(MaxPlatformCamPivotSmoothTime)].GetValue<float>(); } set { this[nameof(MaxPlatformCamPivotSmoothTime)].SetValue<float>(value); } }
        public Object OnCameraStateChangedDelegate { get { return this[nameof(OnCameraStateChangedDelegate)]; } set { this[nameof(OnCameraStateChangedDelegate)] = value; } }
        public bool bIsBlendingFov { get { return this[nameof(bIsBlendingFov)].Flag; } set { this[nameof(bIsBlendingFov)].Flag = value; } }
        public Array<Actor> FadedActors { get { return new Array<Actor>(this[nameof(FadedActors)].Address); } }
        public Character Character { get { return this[nameof(Character)].As<Character>(); } set { this["Character"] = value; } }
        public CameraState CurrentCamera { get { return this[nameof(CurrentCamera)].As<CameraState>(); } set { this["CurrentCamera"] = value; } }
        public CameraState LockedCamera { get { return this[nameof(LockedCamera)].As<CameraState>(); } set { this["LockedCamera"] = value; } }
        public CameraState UnlockedCamera { get { return this[nameof(UnlockedCamera)].As<CameraState>(); } set { this["UnlockedCamera"] = value; } }
        public Actor ActiveCameraActor { get { return this[nameof(ActiveCameraActor)].As<Actor>(); } set { this["ActiveCameraActor"] = value; } }
        public SceneComponent HMDComponent { get { return this[nameof(HMDComponent)].As<SceneComponent>(); } set { this["HMDComponent"] = value; } }
        public Actor AnimatedCameraActor { get { return this[nameof(AnimatedCameraActor)].As<Actor>(); } set { this["AnimatedCameraActor"] = value; } }
        public void UnlockCameraState(float BlendTime) { Invoke(nameof(UnlockCameraState), BlendTime); }
        public void ToggleSecondaryFlyCamera() { Invoke(nameof(ToggleSecondaryFlyCamera)); }
        public void ToggleFlyCamera(bool bUseSecondGamepad) { Invoke(nameof(ToggleFlyCamera), bUseSecondGamepad); }
        public void SetInputEnabled(bool Enabled) { Invoke(nameof(SetInputEnabled), Enabled); }
        public void SetCameraStateByClass(Object CameraState, float BlendTime) { Invoke(nameof(SetCameraStateByClass), CameraState, BlendTime); }
        public void SetCameraState(CameraState State, float BlendTime) { Invoke(nameof(SetCameraState), State, BlendTime); }
        public void SetAnimatedCameraFOV(float CameraFOV) { Invoke(nameof(SetAnimatedCameraFOV), CameraFOV); }
        public void ResetView(bool bHardReset) { Invoke(nameof(ResetView), bHardReset); }
        public void ResetFromCurrentView(float BlendTime) { Invoke(nameof(ResetFromCurrentView), BlendTime); }
        public void OnCinematicExitMoveEvent() { Invoke(nameof(OnCinematicExitMoveEvent)); }
        public void LockCameraState() { Invoke(nameof(LockCameraState)); }
        public void HardResetFromCamera(StateCameraComponent OtherCameraComponent, float BlendTime) { Invoke(nameof(HardResetFromCamera), OtherCameraComponent, BlendTime); }
        public void HardReset(MinimalViewInfo NewCameraParams, Object NewState, float BlendTime) { Invoke(nameof(HardReset), NewCameraParams, NewState, BlendTime); }
        public PlayerControllerGunfire GetPlayerController() { return Invoke<PlayerControllerGunfire>(nameof(GetPlayerController)); }
        public CameraState GetCurrentCamera() { return Invoke<CameraState>(nameof(GetCurrentCamera)); }
        public Character GetCharacter() { return Invoke<Character>(nameof(GetCharacter)); }
        public Transform GetCameraTransform() { return Invoke<Transform>(nameof(GetCameraTransform)); }
        public Rotator GetCameraRotation() { return Invoke<Rotator>(nameof(GetCameraRotation)); }
        public Vector GetCameraLocation() { return Invoke<Vector>(nameof(GetCameraLocation)); }
        public float GetCameraInputScalar(bool OutHasLimitedControl) { return Invoke<float>(nameof(GetCameraInputScalar), OutHasLimitedControl); }
        public Actor GetCameraActor() { return Invoke<Actor>(nameof(GetCameraActor)); }
        public void ExitFlyCamera() { Invoke(nameof(ExitFlyCamera)); }
        public void ExitAnimatedCamera() { Invoke(nameof(ExitAnimatedCamera)); }
        public void EnterFlyCamera(bool bUseSecondGamepad) { Invoke(nameof(EnterFlyCamera), bUseSecondGamepad); }
        public void EnterAnimatedCamera(Actor RefActor, Object CameraBone, bool AllowInput, float BlendTime, float BlendOutTime, float CameraFOV, bool bLockCameraState) { Invoke(nameof(EnterAnimatedCamera), RefActor, CameraBone, AllowInput, BlendTime, BlendOutTime, CameraFOV, bLockCameraState); }
        public void BlendFromCurrentParams(float BlendTime) { Invoke(nameof(BlendFromCurrentParams), BlendTime); }
        public void AnimatedCameraCut(Actor RefActor, Object CameraBone, float CameraFOV) { Invoke(nameof(AnimatedCameraCut), RefActor, CameraBone, CameraFOV); }
    }
    public class InventoryComponent : ActorComponent
    {
        public InventoryComponent(nint addr) : base(addr) { }
        public bool IsMerchant { get { return this[nameof(IsMerchant)].Flag; } set { this[nameof(IsMerchant)].Flag = value; } }
        public EInventoryAccess Accessibility { get { return (EInventoryAccess)this[nameof(Accessibility)].GetValue<int>(); } set { this[nameof(Accessibility)].SetValue<int>((int)value); } }
        public Object EquipmentInHand { get { return this[nameof(EquipmentInHand)]; } set { this[nameof(EquipmentInHand)] = value; } }
        public Object LastEquipmentInHand { get { return this[nameof(LastEquipmentInHand)]; } set { this[nameof(LastEquipmentInHand)] = value; } }
        public Object CurrencyType { get { return this[nameof(CurrencyType)]; } set { this[nameof(CurrencyType)] = value; } }
        public Object MetalType { get { return this[nameof(MetalType)]; } set { this[nameof(MetalType)] = value; } }
        public NiagaraSystem DefaultLootFX { get { return this[nameof(DefaultLootFX)].As<NiagaraSystem>(); } set { this["DefaultLootFX"] = value; } }
        public Object OnInventoryChanged { get { return this[nameof(OnInventoryChanged)]; } set { this[nameof(OnInventoryChanged)] = value; } }
        public Object OnLeveledUp { get { return this[nameof(OnLeveledUp)]; } set { this[nameof(OnLeveledUp)] = value; } }
        public Object OnUsedItem { get { return this[nameof(OnUsedItem)]; } set { this[nameof(OnUsedItem)] = value; } }
        public Object OnAddItem { get { return this[nameof(OnAddItem)]; } set { this[nameof(OnAddItem)] = value; } }
        public Object OnAttemptTakeItem { get { return this[nameof(OnAttemptTakeItem)]; } set { this[nameof(OnAttemptTakeItem)] = value; } }
        public Object OnPickupItem { get { return this[nameof(OnPickupItem)]; } set { this[nameof(OnPickupItem)] = value; } }
        public Object OnPickupItemServer { get { return this[nameof(OnPickupItemServer)]; } set { this[nameof(OnPickupItemServer)] = value; } }
        public Object OnUpgradeItem { get { return this[nameof(OnUpgradeItem)]; } set { this[nameof(OnUpgradeItem)] = value; } }
        public Object OnInventoryFull { get { return this[nameof(OnInventoryFull)]; } set { this[nameof(OnInventoryFull)] = value; } }
        public Object OnEquipmentActivated { get { return this[nameof(OnEquipmentActivated)]; } set { this[nameof(OnEquipmentActivated)] = value; } }
        public Object OnEquipmentDeactivated { get { return this[nameof(OnEquipmentDeactivated)]; } set { this[nameof(OnEquipmentDeactivated)] = value; } }
        public Object OnEquippedItem { get { return this[nameof(OnEquippedItem)]; } set { this[nameof(OnEquippedItem)] = value; } }
        public Object OnUnequippedItem { get { return this[nameof(OnUnequippedItem)]; } set { this[nameof(OnUnequippedItem)] = value; } }
        public Object OnEquipmentInHand { get { return this[nameof(OnEquipmentInHand)]; } set { this[nameof(OnEquipmentInHand)] = value; } }
        public Object OnEquipmentModAttached { get { return this[nameof(OnEquipmentModAttached)]; } set { this[nameof(OnEquipmentModAttached)] = value; } }
        public Object OnEquipmentModDetached { get { return this[nameof(OnEquipmentModDetached)]; } set { this[nameof(OnEquipmentModDetached)] = value; } }
        public int IDGen { get { return this[nameof(IDGen)].GetValue<int>(); } set { this[nameof(IDGen)].SetValue<int>(value); } }
        public Array<InventoryItem> Items { get { return new Array<InventoryItem>(this[nameof(Items)]); } }
        public Array<EquipmentSlot> EquipmentSlots { get { return new Array<EquipmentSlot>(this[nameof(EquipmentSlots)].Address); } }
        public Array<InventorySold> PriceScaling { get { return new Array<InventorySold>(this[nameof(PriceScaling)].Address); } }
        public bool DoPriceScaling { get { return this[nameof(DoPriceScaling)].Flag; } set { this[nameof(DoPriceScaling)].Flag = value; } }
        public bool UseItem(Object ItemBP) { return Invoke<bool>(nameof(UseItem), ItemBP); }
        public bool UnequipItemByID(int ItemId) { return Invoke<bool>(nameof(UnequipItemByID), ItemId); }
        public bool UnequipItemAtSlotIndex(int SlotIndex) { return Invoke<bool>(nameof(UnequipItemAtSlotIndex), SlotIndex); }
        public bool UnequipItem(Object ItemBP) { return Invoke<bool>(nameof(UnequipItem), ItemBP); }
        public void ToggleActiveItem(Object Type) { Invoke(nameof(ToggleActiveItem), Type); }
        public void TakeItemByID(Actor OtherActor, int ItemId, int Quantity, int LevelOverride) { Invoke(nameof(TakeItemByID), OtherActor, ItemId, Quantity, LevelOverride); }
        public void TakeAll(Actor OtherActor) { Invoke(nameof(TakeAll), OtherActor); }
        public void SwapItem(Object From, Object To) { Invoke(nameof(SwapItem), From, To); }
        public bool SetQuantity(Object ItemBP, int Quantity, int ItemLevel, EItemNotifyReason Reason) { return Invoke<bool>(nameof(SetQuantity), ItemBP, Quantity, ItemLevel, Reason); }
        public bool SetItemLevel(Object ItemBP, int LevelToSet) { return Invoke<bool>(nameof(SetItemLevel), ItemBP, LevelToSet); }
        public void SetEquipmentInHandById(int EquipmentId) { Invoke(nameof(SetEquipmentInHandById), EquipmentId); }
        public void SetEquipmentInHandByClass(Object Equipment) { Invoke(nameof(SetEquipmentInHandByClass), Equipment); }
        public void SetEquipmentInHand(Object Type) { Invoke(nameof(SetEquipmentInHand), Type); }
        public void SetActiveItemByClass(Object Equipment) { Invoke(nameof(SetActiveItemByClass), Equipment); }
        public void SetActiveItem(Object Type) { Invoke(nameof(SetActiveItem), Type); }
        public void ServerUseItem(Object ItemBP) { Invoke(nameof(ServerUseItem), ItemBP); }
        public void ServerUnequipMod(int ItemId, byte Slot, bool AddToInventory) { Invoke(nameof(ServerUnequipMod), ItemId, Slot, AddToInventory); }
        public void ServerUnequipItemByID(int ItemId) { Invoke(nameof(ServerUnequipItemByID), ItemId); }
        public void ServerToggleActiveItem(Object Type) { Invoke(nameof(ServerToggleActiveItem), Type); }
        public void ServerTakeItemByID(Actor OtherActor, int ItemId, int Quantity) { Invoke(nameof(ServerTakeItemByID), OtherActor, ItemId, Quantity); }
        public void ServerTakeAll(Actor OtherActor) { Invoke(nameof(ServerTakeAll), OtherActor); }
        public void ServerSetEquipmentInHand(Object Type) { Invoke(nameof(ServerSetEquipmentInHand), Type); }
        public void ServerSetActiveItem(Object Type) { Invoke(nameof(ServerSetActiveItem), Type); }
        public void ServerPutItemByID(Actor OtherActor, int ItemId, int Quantity) { Invoke(nameof(ServerPutItemByID), OtherActor, ItemId, Quantity); }
        public void ServerPickupItem(Item Item) { Invoke(nameof(ServerPickupItem), Item); }
        public void ServerPickupAndEquipItem(Item Item, int SlotIndex, bool InHand) { Invoke(nameof(ServerPickupAndEquipItem), Item, SlotIndex, InHand); }
        public void ServerEquipSkin(int ItemId, int SkinID) { Invoke(nameof(ServerEquipSkin), ItemId, SkinID); }
        public void ServerEquipItemByID(int ItemId, int SlotIndex) { Invoke(nameof(ServerEquipItemByID), ItemId, SlotIndex); }
        public void ServerDropItemByID(int ItemId, int Quantity, bool Force) { Invoke(nameof(ServerDropItemByID), ItemId, Quantity, Force); }
        public void ServerDetachItem(int ItemId) { Invoke(nameof(ServerDetachItem), ItemId); }
        public void RouteNotifyPickupItem(Object ItemBP, int Quantity, int Level, EItemNotifyReason Reason) { Invoke(nameof(RouteNotifyPickupItem), ItemBP, Quantity, Level, Reason); }
        public bool RemoveItemByID(int ID, int Quantity, int ItemLevel) { return Invoke<bool>(nameof(RemoveItemByID), ID, Quantity, ItemLevel); }
        public bool RemoveItem(Object ItemBP, int Quantity, int ItemLevel) { return Invoke<bool>(nameof(RemoveItem), ItemBP, Quantity, ItemLevel); }
        public void RemoveAllItems() { Invoke(nameof(RemoveAllItems)); }
        public void PutItemByID(Actor OtherActor, int ItemId, int Quantity) { Invoke(nameof(PutItemByID), OtherActor, ItemId, Quantity); }
        public void PickupItem(Item Item) { Invoke(nameof(PickupItem), Item); }
        public void PickupAndEquipItem(Item Item, int SlotIndex, bool InHand) { Invoke(nameof(PickupAndEquipItem), Item, SlotIndex, InHand); }
        public void OnRep_Items() { Invoke(nameof(OnRep_Items)); }
        public void OnInstanceDataChanged() { Invoke(nameof(OnInstanceDataChanged)); }
        public void NotifyUsedItem(Object ItemBP) { Invoke(nameof(NotifyUsedItem), ItemBP); }
        public void NotifyPickupItem(Object ItemBP, int Quantity, int Level, EItemNotifyReason Reason) { Invoke(nameof(NotifyPickupItem), ItemBP, Quantity, Level, Reason); }
        public void MulticastOnInventoryChanged() { Invoke(nameof(MulticastOnInventoryChanged)); }
        public void MarkNotNew(int ItemId) { Invoke(nameof(MarkNotNew), ItemId); }
        public void MarkFavorited(int ItemId, bool Favorited) { Invoke(nameof(MarkFavorited), ItemId, Favorited); }
        public void K2_AddItemSoft(Object ItemBP, int Quantity, int ItemLevel, EItemNotifyReason Reason, Object OnAdded, bool ForceEquip, bool SendNotification) { Invoke(nameof(K2_AddItemSoft), ItemBP, Quantity, ItemLevel, Reason, OnAdded, ForceEquip, SendNotification); }
        public InventoryResult K2_AddItem(Object ItemBP, int Quantity, int ItemLevel, EItemNotifyReason Reason, bool bAllowAutoEquip) { return Invoke<InventoryResult>(nameof(K2_AddItem), ItemBP, Quantity, ItemLevel, Reason, bAllowAutoEquip); }
        public bool IsInventoryItemInfiniteByType(Object ItemBP) { return Invoke<bool>(nameof(IsInventoryItemInfiniteByType), ItemBP); }
        public bool IsInventoryItemInfiniteByID(InventoryComponent Inventory, int ItemId) { return Invoke<bool>(nameof(IsInventoryItemInfiniteByID), Inventory, ItemId); }
        public bool IsInventoryItemInfinite(InventoryItem InventoryItem) { return Invoke<bool>(nameof(IsInventoryItemInfinite), InventoryItem); }
        public bool IsEquippedByID(int ItemId) { return Invoke<bool>(nameof(IsEquippedByID), ItemId); }
        public bool IsEquipped(Object ItemBP) { return Invoke<bool>(nameof(IsEquipped), ItemBP); }
        public bool HasNewItemInInventory() { return Invoke<bool>(nameof(HasNewItemInInventory)); }
        public bool HasItemByType(Object Type) { return Invoke<bool>(nameof(HasItemByType), Type); }
        public bool HasItem(Object ItemBP, int Quantity, int ItemLevel) { return Invoke<bool>(nameof(HasItem), ItemBP, Quantity, ItemLevel); }
        public bool HasEquippedItemByType(Object Type) { return Invoke<bool>(nameof(HasEquippedItemByType), Type); }
        public bool HasEquipmentSlot(Object NameID) { return Invoke<bool>(nameof(HasEquipmentSlot), NameID); }
        public int GetSellValue(int Cost, float SellScalar) { return Invoke<int>(nameof(GetSellValue), Cost, SellScalar); }
        public int GetQuantity(Object ItemBP, int ItemLevel) { return Invoke<int>(nameof(GetQuantity), ItemBP, ItemLevel); }
        public bool GetPreviousItem(int CurrentID, InventoryItem OutItem, Object Type, bool bWrapAround) { return Invoke<bool>(nameof(GetPreviousItem), CurrentID, OutItem, Type, bWrapAround); }
        public bool GetNextItem(int CurrentID, InventoryItem OutItem, Object Type, bool bWrapAround) { return Invoke<bool>(nameof(GetNextItem), CurrentID, OutItem, Type, bWrapAround); }
        public Equipment GetNextActiveItem(Object Type) { return Invoke<Equipment>(nameof(GetNextActiveItem), Type); }
        public Object GetItemTypeBySlotName(Object NameID) { return Invoke<Object>(nameof(GetItemTypeBySlotName), NameID); }
        public Object GetItemType(Item Item) { return Invoke<Object>(nameof(GetItemType), Item); }
        public Array<InventoryItem> GetItems() { return Invoke<Array<InventoryItem>>(nameof(GetItems)); }
        public ItemInstanceData GetItemInstanceData(Object ItemBP) { return Invoke<ItemInstanceData>(nameof(GetItemInstanceData), ItemBP); }
        public int GetItemCount() { return Invoke<int>(nameof(GetItemCount)); }
        public InventoryComponent GetInventoryForItemType(Actor Actor, Object ItemType) { return Invoke<InventoryComponent>(nameof(GetInventoryForItemType), Actor, ItemType); }
        public InventoryComponent GetInventoryForItem(Actor Actor, Object Item) { return Invoke<InventoryComponent>(nameof(GetInventoryForItem), Actor, Item); }
        public Equipment GetEquippedItemBySlotName(Object NameID) { return Invoke<Equipment>(nameof(GetEquippedItemBySlotName), NameID); }
        public Equipment GetEquippedItemByClass(Object Equipment) { return Invoke<Equipment>(nameof(GetEquippedItemByClass), Equipment); }
        public Equipment GetEquippedItem(int SlotIndex) { return Invoke<Equipment>(nameof(GetEquippedItem), SlotIndex); }
        public Object GetEquipmentSlotNameForItem(Object ItemBP) { return Invoke<Object>(nameof(GetEquipmentSlotNameForItem), ItemBP); }
        public int GetEquipmentSlotIndexByNameID(Object SlotNameID) { return Invoke<int>(nameof(GetEquipmentSlotIndexByNameID), SlotNameID); }
        public int GetEquipmentSlotIndex(Object ItemBP) { return Invoke<int>(nameof(GetEquipmentSlotIndex), ItemBP); }
        public EquipmentSlot GetEquipmentSlotByNameID(Object SlotNameID) { return Invoke<EquipmentSlot>(nameof(GetEquipmentSlotByNameID), SlotNameID); }
        public int GetEquipmentItemID(Equipment EquippedActor) { return Invoke<int>(nameof(GetEquipmentItemID), EquippedActor); }
        public Equipment GetEquipmentInHand() { return Invoke<Equipment>(nameof(GetEquipmentInHand)); }
        public int GetBuyValue(InventoryComponent OtherInventory, Object ItemBP, int Level) { return Invoke<int>(nameof(GetBuyValue), OtherInventory, ItemBP, Level); }
        public Equipment GetActiveItem(Object Type) { return Invoke<Equipment>(nameof(GetActiveItem), Type); }
        public Object GetActivationTypeBySlotName(Object NameID) { return Invoke<Object>(nameof(GetActivationTypeBySlotName), NameID); }
        public InventoryItem FindItemByID(int ID) { return Invoke<InventoryItem>(nameof(FindItemByID), ID); }
        public InventoryItem FindItemByEquipSlotNameID(Object NameID) { return Invoke<InventoryItem>(nameof(FindItemByEquipSlotNameID), NameID); }
        public InventoryItem FindItem(Object ItemBP) { return Invoke<InventoryItem>(nameof(FindItem), ItemBP); }
        public void EquipSkin(int ItemId, int SkinID) { Invoke(nameof(EquipSkin), ItemId, SkinID); }
        public bool EquipItemWithTransform(int ItemId, int SlotIndex, Transform Transform) { return Invoke<bool>(nameof(EquipItemWithTransform), ItemId, SlotIndex, Transform); }
        public bool EquipItemByID(int ItemId, int SlotIndex) { return Invoke<bool>(nameof(EquipItemByID), ItemId, SlotIndex); }
        public bool EquipItem(Object ItemBP, int SlotIndex) { return Invoke<bool>(nameof(EquipItem), ItemBP, SlotIndex); }
        public void DropItemByID(int ItemId, int Quantity, bool Force) { Invoke(nameof(DropItemByID), ItemId, Quantity, Force); }
        public void DropItem(Object ItemBP, int Quantity) { Invoke(nameof(DropItem), ItemBP, Quantity); }
        public void DropAll() { Invoke(nameof(DropAll)); }
        public bool DidActiveItemChange(Object Type) { return Invoke<bool>(nameof(DidActiveItemChange), Type); }
        public void DetachItemByID(int ItemId) { Invoke(nameof(DetachItemByID), ItemId); }
        public int CountItemByType(Object ItemType) { return Invoke<int>(nameof(CountItemByType), ItemType); }
        public void ClientNotifyUpgradeItem(Object ItemBP, int Level) { Invoke(nameof(ClientNotifyUpgradeItem), ItemBP, Level); }
        public void ClientNotifyTakeItemResult(Object ItemBP, int Quantity, bool DidTakeItem) { Invoke(nameof(ClientNotifyTakeItemResult), ItemBP, Quantity, DidTakeItem); }
        public void ClientNotifyPickupItemInstance(Item Item, int Quantity, int Level, EItemNotifyReason Reason, bool bBroadcastNotify) { Invoke(nameof(ClientNotifyPickupItemInstance), Item, Quantity, Level, Reason, bBroadcastNotify); }
        public void ClientNotifyPickupItem(Object ItemBP, int Quantity, int Level, EItemNotifyReason Reason) { Invoke(nameof(ClientNotifyPickupItem), ItemBP, Quantity, Level, Reason); }
        public void ClientNotifyInventoryFull(Object ItemBP) { Invoke(nameof(ClientNotifyInventoryFull), ItemBP); }
        public void ClientForceUseItem(int ItemId) { Invoke(nameof(ClientForceUseItem), ItemId); }
        public bool CanEquipItemByID(int ItemId, int SlotIndex) { return Invoke<bool>(nameof(CanEquipItemByID), ItemId, SlotIndex); }
        public bool CanAutoEquip(Object ItemBP, bool ManualRequest) { return Invoke<bool>(nameof(CanAutoEquip), ItemBP, ManualRequest); }
        public bool CanAddItem(Object ItemBP, int Quantity, int ItemLevel) { return Invoke<bool>(nameof(CanAddItem), ItemBP, Quantity, ItemLevel); }
        public void AutoPickupAndEquipItem(Item Item, bool InHand) { Invoke(nameof(AutoPickupAndEquipItem), Item, InHand); }
        public bool AutoEquipItemByID(int ItemId, bool ForceEquip) { return Invoke<bool>(nameof(AutoEquipItemByID), ItemId, ForceEquip); }
        public bool AutoEquipItem(Object ItemBP, bool ForceEquip) { return Invoke<bool>(nameof(AutoEquipItem), ItemBP, ForceEquip); }
        public void AddInfiniteItem(Object ItemBP) { Invoke(nameof(AddInfiniteItem), ItemBP); }
        public Object ActorToItem(Object Item) { return Invoke<Object>(nameof(ActorToItem), Item); }
    }
    public class PlayerInventoryComponent : InventoryComponent
    {
        public PlayerInventoryComponent(nint addr) : base(addr) { }
        public Array<Object> UniqueMaterialRecipeTags { get { return new Array<Object>(this[nameof(UniqueMaterialRecipeTags)].Address); } }
        public Array<AutoUpgradeableItem> AutoUpgradeableItems { get { return new Array<AutoUpgradeableItem>(this[nameof(AutoUpgradeableItems)].Address); } }
        public Object OnPickedUpDuplicateUnique { get { return this[nameof(OnPickedUpDuplicateUnique)]; } set { this[nameof(OnPickedUpDuplicateUnique)] = value; } }
        public Object OnPickedUpUpgradedUnique { get { return this[nameof(OnPickedUpUpgradedUnique)]; } set { this[nameof(OnPickedUpUpgradedUnique)] = value; } }
    }
    public class ActorCustomizationBase : InheritableObject
    {
        public ActorCustomizationBase(nint addr) : base(addr) { }
    }
    public class ActorCustomization : ActorCustomizationBase
    {
        public ActorCustomization(nint addr) : base(addr) { }
        public Object RequiredID { get { return this[nameof(RequiredID)]; } set { this[nameof(RequiredID)] = value; } }
        public bool HardReferenceAssets { get { return this[nameof(HardReferenceAssets)].Flag; } set { this[nameof(HardReferenceAssets)].Flag = value; } }
    }
    public class SceneCustomization : ActorCustomization
    {
        public SceneCustomization(nint addr) : base(addr) { }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public Array<Object> RequiredSoundTags { get { return new Array<Object>(this[nameof(RequiredSoundTags)].Address); } }
    }
    public class ParticleCustomization : SceneCustomization
    {
        public ParticleCustomization(nint addr) : base(addr) { }
        public Object ParticleSystem { get { return this[nameof(ParticleSystem)]; } set { this[nameof(ParticleSystem)] = value; } }
        public bool Attached { get { return this[nameof(Attached)].Flag; } set { this[nameof(Attached)].Flag = value; } }
        public bool ApplyToAllMeshes { get { return this[nameof(ApplyToAllMeshes)].Flag; } set { this[nameof(ApplyToAllMeshes)].Flag = value; } }
        public bool TrySoftDestroy { get { return this[nameof(TrySoftDestroy)].Flag; } set { this[nameof(TrySoftDestroy)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Object ActorParameterName { get { return this[nameof(ActorParameterName)]; } set { this[nameof(ActorParameterName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
        public bool bStateSoftDestroy { get { return this[nameof(bStateSoftDestroy)].Flag; } set { this[nameof(bStateSoftDestroy)].Flag = value; } }
    }
    public class WeightedGraphNode : Object
    {
        public WeightedGraphNode(nint addr) : base(addr) { }
    }
    public class WeightedGraphComponent : ActorComponent
    {
        public WeightedGraphComponent(nint addr) : base(addr) { }
        public int NumRows { get { return this[nameof(NumRows)].GetValue<int>(); } set { this[nameof(NumRows)].SetValue<int>(value); } }
        public int NumColumns { get { return this[nameof(NumColumns)].GetValue<int>(); } set { this[nameof(NumColumns)].SetValue<int>(value); } }
        public Object WeightedGraph { get { return this[nameof(WeightedGraph)]; } set { this[nameof(WeightedGraph)] = value; } }
        public Array<GraphPosition> CachedGraphPositions { get { return new Array<GraphPosition>(this[nameof(CachedGraphPositions)].Address); } }
    }
    public class SilhouetteComponent : ActorComponent
    {
        public SilhouetteComponent(nint addr) : base(addr) { }
        public Object RequiredTag { get { return this[nameof(RequiredTag)]; } set { this[nameof(RequiredTag)] = value; } }
        public bool RequiredTagCanBeAnyActor { get { return this[nameof(RequiredTagCanBeAnyActor)].Flag; } set { this[nameof(RequiredTagCanBeAnyActor)].Flag = value; } }
        public Object ViewerTag { get { return this[nameof(ViewerTag)]; } set { this[nameof(ViewerTag)] = value; } }
        public ESilhouetteVisibility Visibility { get { return (ESilhouetteVisibility)this[nameof(Visibility)].GetValue<int>(); } set { this[nameof(Visibility)].SetValue<int>((int)value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public byte DefaultSilhouetteColorIdx { get { return this[nameof(DefaultSilhouetteColorIdx)].GetValue<byte>(); } set { this[nameof(DefaultSilhouetteColorIdx)].SetValue<byte>(value); } }
        public byte WoundedSilhouetteColorIdx { get { return this[nameof(WoundedSilhouetteColorIdx)].GetValue<byte>(); } set { this[nameof(WoundedSilhouetteColorIdx)].SetValue<byte>(value); } }
        public bool bAutoUpdateEquipment { get { return this[nameof(bAutoUpdateEquipment)].Flag; } set { this[nameof(bAutoUpdateEquipment)].Flag = value; } }
        public void OnInventoryChanged() { Invoke(nameof(OnInventoryChanged)); }
    }
    public class PlayerStateGunfire : PlayerState
    {
        public PlayerStateGunfire(nint addr) : base(addr) { }
        public Object OnPawnChanged { get { return this[nameof(OnPawnChanged)]; } set { this[nameof(OnPawnChanged)] = value; } }
        public Object OnTalkingChanged { get { return this[nameof(OnTalkingChanged)]; } set { this[nameof(OnTalkingChanged)] = value; } }
        public Object OnPlayerNameChanged { get { return this[nameof(OnPlayerNameChanged)]; } set { this[nameof(OnPlayerNameChanged)] = value; } }
        public Object OnChatRestrictionChanged { get { return this[nameof(OnChatRestrictionChanged)]; } set { this[nameof(OnChatRestrictionChanged)] = value; } }
        public Object OnJoinStateChanged { get { return this[nameof(OnJoinStateChanged)]; } set { this[nameof(OnJoinStateChanged)] = value; } }
        public Pawn CachedPawn { get { return this[nameof(CachedPawn)].As<Pawn>(); } set { this["CachedPawn"] = value; } }
        public bool bIsHost { get { return this[nameof(bIsHost)].Flag; } set { this[nameof(bIsHost)].Flag = value; } }
        public bool bIsChatRestricted { get { return this[nameof(bIsChatRestricted)].Flag; } set { this[nameof(bIsChatRestricted)].Flag = value; } }
        public EPlayerJoinState JoinState { get { return (EPlayerJoinState)this[nameof(JoinState)].GetValue<int>(); } set { this[nameof(JoinState)].SetValue<int>((int)value); } }
        public void ServerSetChatRestricted(bool ChatRestricted) { Invoke(nameof(ServerSetChatRestricted), ChatRestricted); }
        public void OnRep_JoinState() { Invoke(nameof(OnRep_JoinState)); }
        public void OnRep_ChatRestricted() { Invoke(nameof(OnRep_ChatRestricted)); }
        public void MulticastSetJoinState(EPlayerJoinState NewState) { Invoke(nameof(MulticastSetJoinState), NewState); }
        public bool IsHost() { return Invoke<bool>(nameof(IsHost)); }
        public bool IsChatRestricted() { return Invoke<bool>(nameof(IsChatRestricted)); }
        public Pawn GetPlayerPawn() { return Invoke<Pawn>(nameof(GetPlayerPawn)); }
        public CharacterGunfire GetPlayerCharacter() { return Invoke<CharacterGunfire>(nameof(GetPlayerCharacter)); }
        public EPlayerJoinState GetJoinState() { return Invoke<EPlayerJoinState>(nameof(GetJoinState)); }
        public bool GetIsTalking() { return Invoke<bool>(nameof(GetIsTalking)); }
    }
    public class SequencerManager : ActorComponent
    {
        public SequencerManager(nint addr) : base(addr) { }
        public Object OnSkipVoteChange { get { return this[nameof(OnSkipVoteChange)]; } set { this[nameof(OnSkipVoteChange)] = value; } }
        public Object OnCinematicPrePlay { get { return this[nameof(OnCinematicPrePlay)]; } set { this[nameof(OnCinematicPrePlay)] = value; } }
        public Object OnCinematicPlaying { get { return this[nameof(OnCinematicPlaying)]; } set { this[nameof(OnCinematicPlaying)] = value; } }
        public Object OnCinematicStopping { get { return this[nameof(OnCinematicStopping)]; } set { this[nameof(OnCinematicStopping)] = value; } }
        public Object OnServerFinishedAllSequences { get { return this[nameof(OnServerFinishedAllSequences)]; } set { this[nameof(OnServerFinishedAllSequences)] = value; } }
        public Object OnSequenceUIRequest { get { return this[nameof(OnSequenceUIRequest)]; } set { this[nameof(OnSequenceUIRequest)] = value; } }
        public SequenceReplicationState ReplicationState { get { return this[nameof(ReplicationState)].As<SequenceReplicationState>(); } set { this["ReplicationState"] = value; } }
        public int NumRunningInstancesOnServer { get { return this[nameof(NumRunningInstancesOnServer)].GetValue<int>(); } set { this[nameof(NumRunningInstancesOnServer)].SetValue<int>(value); } }
        public Object PossessedObjectAction { get { return this[nameof(PossessedObjectAction)]; } set { this[nameof(PossessedObjectAction)] = value; } }
        public Array<CinematicInstance_Base> CinematicInstances { get { return new Array<CinematicInstance_Base>(this[nameof(CinematicInstances)].Address); } }
        public Array<Object> StoredCinematicAssets { get { return new Array<Object>(this[nameof(StoredCinematicAssets)].Address); } }
        public void UpdateSkipStatus(Object InSequence, bool ShouldSkip) { Invoke(nameof(UpdateSkipStatus), InSequence, ShouldSkip); }
        public void SpectatorJoinRunningInstance(PlayerControllerGunfire Controller, Object CinematicAsset, CinematicPlayerSettings CinematicSettings, Actor Instigator, EventTreeComponent SourceComponent, bool Force) { Invoke(nameof(SpectatorJoinRunningInstance), Controller, CinematicAsset, CinematicSettings, Instigator, SourceComponent, Force); }
        public void SkipSequence(Object InSequence) { Invoke(nameof(SkipSequence), InSequence); }
        public void SetupSequence_Client(Object CinematicAsset, CinematicPlayerSettings CinematicSettings, Actor Instigator, EventTreeComponent SourceComponent, int Tries) { Invoke(nameof(SetupSequence_Client), CinematicAsset, CinematicSettings, Instigator, SourceComponent, Tries); }
        public void RequestUIEvent(SequencerUIEventPayload EventPayload, bool IsShowing) { Invoke(nameof(RequestUIEvent), EventPayload, IsShowing); }
        public void ProposeToSkip(Object InSequence, PlayerGunfire Player) { Invoke(nameof(ProposeToSkip), InSequence, Player); }
        public void OnRep_ServerInstanceCount() { Invoke(nameof(OnRep_ServerInstanceCount)); }
        public void OnPlayerJoined(PlayerState NewPlayer) { Invoke(nameof(OnPlayerJoined), NewPlayer); }
        public void NotifyClientsFailedToStart(CinematicPlayerSettings CinematicSettings, Object CinematicAsset, Actor Instigator) { Invoke(nameof(NotifyClientsFailedToStart), CinematicSettings, CinematicAsset, Instigator); }
        public void HandleSpectationChange(Actor SpectateTarget, PlayerControllerGunfire Controller) { Invoke(nameof(HandleSpectationChange), SpectateTarget, Controller); }
        public bool GetShowTimeCode() { return Invoke<bool>(nameof(GetShowTimeCode)); }
        public CinematicInstance_Base GetSequenceInstanceForCinematicAsset(Object CinematicAsset) { return Invoke<CinematicInstance_Base>(nameof(GetSequenceInstanceForCinematicAsset), CinematicAsset); }
        public SequencerManager GetInstance(Object WorldContextObject) { return Invoke<SequencerManager>(nameof(GetInstance), WorldContextObject); }
        public Array<CinematicInstance_Base> GetActiveCinematicInstances() { return Invoke<Array<CinematicInstance_Base>>(nameof(GetActiveCinematicInstances)); }
    }
    public class UseableItem : Equipment
    {
        public UseableItem(nint addr) : base(addr) { }
        public ConditionList Conditions { get { return this[nameof(Conditions)].As<ConditionList>(); } set { this["Conditions"] = value; } }
        public UseDetails UseDetails { get { return this[nameof(UseDetails)].As<UseDetails>(); } set { this["UseDetails"] = value; } }
        public UseDetails HoldUseDetails { get { return this[nameof(HoldUseDetails)].As<UseDetails>(); } set { this["HoldUseDetails"] = value; } }
        public UseDetails DoublePressUseDetails { get { return this[nameof(DoublePressUseDetails)].As<UseDetails>(); } set { this["DoublePressUseDetails"] = value; } }
        public Object UseState { get { return this[nameof(UseState)]; } set { this[nameof(UseState)] = value; } }
        public Object UseAnim { get { return this[nameof(UseAnim)]; } set { this[nameof(UseAnim)] = value; } }
        public Object PlayRateStat { get { return this[nameof(PlayRateStat)]; } set { this[nameof(PlayRateStat)] = value; } }
        public Array<Object> UseTags { get { return new Array<Object>(this[nameof(UseTags)].Address); } }
        public Array<Object> UseAnimTags { get { return new Array<Object>(this[nameof(UseAnimTags)].Address); } }
        public EUsableActivationType ActivationType { get { return (EUsableActivationType)this[nameof(ActivationType)].GetValue<int>(); } set { this[nameof(ActivationType)].SetValue<int>((int)value); } }
        public bool bConsumeInput { get { return this[nameof(bConsumeInput)].Flag; } set { this[nameof(bConsumeInput)].Flag = value; } }
        public bool bIgnoreInputWhileInUse { get { return this[nameof(bIgnoreInputWhileInUse)].Flag; } set { this[nameof(bIgnoreInputWhileInUse)].Flag = value; } }
        public float HoldTime { get { return this[nameof(HoldTime)].GetValue<float>(); } set { this[nameof(HoldTime)].SetValue<float>(value); } }
        public bool bDeferHoldUseUntilRelease { get { return this[nameof(bDeferHoldUseUntilRelease)].Flag; } set { this[nameof(bDeferHoldUseUntilRelease)].Flag = value; } }
        public bool bValidateUseBeforeStartingHoldTimer { get { return this[nameof(bValidateUseBeforeStartingHoldTimer)].Flag; } set { this[nameof(bValidateUseBeforeStartingHoldTimer)].Flag = value; } }
        public float DoublePressTime { get { return this[nameof(DoublePressTime)].GetValue<float>(); } set { this[nameof(DoublePressTime)].SetValue<float>(value); } }
        public bool DisableTickAfterUse { get { return this[nameof(DisableTickAfterUse)].Flag; } set { this[nameof(DisableTickAfterUse)].Flag = value; } }
        public Array<Object> ValidationTags { get { return new Array<Object>(this[nameof(ValidationTags)].Address); } }
        public Object OnItemUsed { get { return this[nameof(OnItemUsed)]; } set { this[nameof(OnItemUsed)] = value; } }
        public TimerHandle HoldTimerHandle { get { return this[nameof(HoldTimerHandle)].As<TimerHandle>(); } set { this["HoldTimerHandle"] = value; } }
        public TimerHandle DoublePressTimerHandle { get { return this[nameof(DoublePressTimerHandle)].As<TimerHandle>(); } set { this["DoublePressTimerHandle"] = value; } }
        public Array<UseableItemActivationInstance> UseInstances { get { return new Array<UseableItemActivationInstance>(this[nameof(UseInstances)].Address); } }
        public bool ValidateUse(Actor Actor, EItemUseType UseType) { return Invoke<bool>(nameof(ValidateUse), Actor, UseType); }
        public void UseItem(EItemUseType UseType) { Invoke(nameof(UseItem), UseType); }
        public void Use(EItemUseType UseType) { Invoke(nameof(Use), UseType); }
        public void UpdateTickState() { Invoke(nameof(UpdateTickState)); }
        public void ServerKeyPressed(EItemUseType UseType) { Invoke(nameof(ServerKeyPressed), UseType); }
        public void ResetInput() { Invoke(nameof(ResetInput)); }
        public void RemoveItem() { Invoke(nameof(RemoveItem)); }
        public void OnUseInstanceDetailsRemoved(UseableItemActivationInstance Instance) { Invoke(nameof(OnUseInstanceDetailsRemoved), Instance); }
        public void OnUseableHotkeyReleased() { Invoke(nameof(OnUseableHotkeyReleased)); }
        public void OnUseableHotkeyPressed() { Invoke(nameof(OnUseableHotkeyPressed)); }
        public void OnUse(EItemUseType UseType) { Invoke(nameof(OnUse), UseType); }
        public void OnPreApplyUseDetails(EItemUseType UseType, UseDetails OutUseDetails) { Invoke(nameof(OnPreApplyUseDetails), UseType, OutUseDetails); }
        public void OnInput(Object ButtonName, ButtonEvent Event) { Invoke(nameof(OnInput), ButtonName, Event); }
        public void MultiCreateUseInstance(EItemUseType UseType) { Invoke(nameof(MultiCreateUseInstance), UseType); }
        public void ModifyUseDetails(EItemUseType UseType, UseDetails OutUseDetails) { Invoke(nameof(ModifyUseDetails), UseType, OutUseDetails); }
        public bool HasHoldTimerElapsed() { return Invoke<bool>(nameof(HasHoldTimerElapsed)); }
        public float GetCooldownPct(Actor Actor) { return Invoke<float>(nameof(GetCooldownPct), Actor); }
        public void ClientOnItemUsed(EItemUseType UseType) { Invoke(nameof(ClientOnItemUsed), UseType); }
    }
    public class ItemInstanceData : Object
    {
        public ItemInstanceData(nint addr) : base(addr) { }
        public byte Level { get { return this[nameof(Level)].GetValue<byte>(); } set { this[nameof(Level)].SetValue<byte>(value); } }
        public int Quantity { get { return this[nameof(Quantity)].GetValue<int>(); } set { this[nameof(Quantity)].SetValue<int>(value); } }
        public Object OnChanged { get { return this[nameof(OnChanged)]; } set { this[nameof(OnChanged)] = value; } }
        public void OnRep_InstanceData() { Invoke(nameof(OnRep_InstanceData)); }
    }
    public class EquipmentInstanceData : ItemInstanceData
    {
        public EquipmentInstanceData(nint addr) : base(addr) { }
        public EquipmentMods Mods { get { return this[nameof(Mods)].As<EquipmentMods>(); } set { this["Mods"] = value; } }
    }
    public class ItemCategory : Object
    {
        public ItemCategory(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
    }
    public class ManagedActor : Actor
    {
        public ManagedActor(nint addr) : base(addr) { }
        public bool EnableAnimOptimizations { get { return this[nameof(EnableAnimOptimizations)].Flag; } set { this[nameof(EnableAnimOptimizations)].Flag = value; } }
        public bool EnableAnimSignificanceOptimizations { get { return this[nameof(EnableAnimSignificanceOptimizations)].Flag; } set { this[nameof(EnableAnimSignificanceOptimizations)].Flag = value; } }
        public float AnimSignificanceScalar { get { return this[nameof(AnimSignificanceScalar)].GetValue<float>(); } set { this[nameof(AnimSignificanceScalar)].SetValue<float>(value); } }
        public bool SuspendClothWhenNotVisible { get { return this[nameof(SuspendClothWhenNotVisible)].Flag; } set { this[nameof(SuspendClothWhenNotVisible)].Flag = value; } }
        public bool EnableTickRateOptimizations { get { return this[nameof(EnableTickRateOptimizations)].Flag; } set { this[nameof(EnableTickRateOptimizations)].Flag = value; } }
        public Array<SkeletalMeshComponent> SkeletalMeshes { get { return new Array<SkeletalMeshComponent>(this[nameof(SkeletalMeshes)].Address); } }
        public Object GetDebugInfo(int DebugLevel) { return Invoke<Object>(nameof(GetDebugInfo), DebugLevel); }
    }
    public class ItemType : Object
    {
        public ItemType(nint addr) : base(addr) { }
        public Object BaseType { get { return this[nameof(BaseType)]; } set { this[nameof(BaseType)] = value; } }
        public StatInfoSet ItemStats { get { return this[nameof(ItemStats)].As<StatInfoSet>(); } set { this["ItemStats"] = value; } }
        public StatInfoSet CharacterStats { get { return this[nameof(CharacterStats)].As<StatInfoSet>(); } set { this["CharacterStats"] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Array<Object> AdditionalTypes { get { return new Array<Object>(this[nameof(AdditionalTypes)].Address); } }
        public int SortPriority { get { return this[nameof(SortPriority)].GetValue<int>(); } set { this[nameof(SortPriority)].SetValue<int>(value); } }
        public void SortQueryResults(Array<InventoryComponent> Inventories, Array<ItemQueryResult> Results, Array<EItemQuerySortMethod> SortMethods) { Invoke(nameof(SortQueryResults), Inventories, Results, SortMethods); }
        public Array<ItemQueryResult> QueryRelevantItemsEx(Array<InventoryComponent> Inventories, ItemQueryFilter Filter, Array<EItemQuerySortMethod> SortMethods) { return Invoke<Array<ItemQueryResult>>(nameof(QueryRelevantItemsEx), Inventories, Filter, SortMethods); }
        public Array<ItemQueryResult> QueryRelevantItems(Array<InventoryComponent> Inventories, ItemQueryFilter Filter, EItemQuerySortMethod SortMethod) { return Invoke<Array<ItemQueryResult>>(nameof(QueryRelevantItems), Inventories, Filter, SortMethod); }
        public Array<InventoryComponent> GetRelevantInventoriesForType(Actor Actor, Object Type) { return Invoke<Array<InventoryComponent>>(nameof(GetRelevantInventoriesForType), Actor, Type); }
    }
    public class WeaponBase : Equipment
    {
        public WeaponBase(nint addr) : base(addr) { }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public ImpactEffectDescriptor ImpactEffect { get { return this[nameof(ImpactEffect)].As<ImpactEffectDescriptor>(); } set { this["ImpactEffect"] = value; } }
        public float GetProcChance() { return Invoke<float>(nameof(GetProcChance)); }
        public ImpactEffectDescriptor GetImpactEffect() { return Invoke<ImpactEffectDescriptor>(nameof(GetImpactEffect)); }
        public float GetAttackSpeed() { return Invoke<float>(nameof(GetAttackSpeed)); }
        public void ComputeDamage(Actor Actor, float Damage, float AttackRating) { Invoke(nameof(ComputeDamage), Actor, Damage, AttackRating); }
        public bool AttemptProc(float BonusChance) { return Invoke<bool>(nameof(AttemptProc), BonusChance); }
    }
    public class RangedWeapon : WeaponBase
    {
        public RangedWeapon(nint addr) : base(addr) { }
        public RangedWeaponMode DefaultWeaponMode { get { return this[nameof(DefaultWeaponMode)].As<RangedWeaponMode>(); } set { this["DefaultWeaponMode"] = value; } }
        public bool FireWhileAimingOnly { get { return this[nameof(FireWhileAimingOnly)].Flag; } set { this[nameof(FireWhileAimingOnly)].Flag = value; } }
        public bool AllowActionOnFlinch { get { return this[nameof(AllowActionOnFlinch)].Flag; } set { this[nameof(AllowActionOnFlinch)].Flag = value; } }
        public Object ProjectileSocket { get { return this[nameof(ProjectileSocket)]; } set { this[nameof(ProjectileSocket)] = value; } }
        public Object AmmoType { get { return this[nameof(AmmoType)]; } set { this[nameof(AmmoType)] = value; } }
        public Object AmmoPool { get { return this[nameof(AmmoPool)]; } set { this[nameof(AmmoPool)] = value; } }
        public bool bUnlimitedAmmoForAICharacters { get { return this[nameof(bUnlimitedAmmoForAICharacters)].Flag; } set { this[nameof(bUnlimitedAmmoForAICharacters)].Flag = value; } }
        public InputAction FireInputAction { get { return this[nameof(FireInputAction)].As<InputAction>(); } set { this["FireInputAction"] = value; } }
        public InputAction ReloadInputAction { get { return this[nameof(ReloadInputAction)].As<InputAction>(); } set { this["ReloadInputAction"] = value; } }
        public bool ReloadOnRelease { get { return this[nameof(ReloadOnRelease)].Flag; } set { this[nameof(ReloadOnRelease)].Flag = value; } }
        public bool AllowAutoReload { get { return this[nameof(AllowAutoReload)].Flag; } set { this[nameof(AllowAutoReload)].Flag = value; } }
        public InputAction AimInputAction { get { return this[nameof(AimInputAction)].As<InputAction>(); } set { this["AimInputAction"] = value; } }
        public bool bRequireTagForAiming { get { return this[nameof(bRequireTagForAiming)].Flag; } set { this[nameof(bRequireTagForAiming)].Flag = value; } }
        public InputAction ScopeInputAction { get { return this[nameof(ScopeInputAction)].As<InputAction>(); } set { this["ScopeInputAction"] = value; } }
        public InputAction DoubleClickScopeInputAction { get { return this[nameof(DoubleClickScopeInputAction)].As<InputAction>(); } set { this["DoubleClickScopeInputAction"] = value; } }
        public float MinimumAimTime { get { return this[nameof(MinimumAimTime)].GetValue<float>(); } set { this[nameof(MinimumAimTime)].SetValue<float>(value); } }
        public float FireInputBufferDuration { get { return this[nameof(FireInputBufferDuration)].GetValue<float>(); } set { this[nameof(FireInputBufferDuration)].SetValue<float>(value); } }
        public bool bUseCameraWhenAimingWithScope { get { return this[nameof(bUseCameraWhenAimingWithScope)].Flag; } set { this[nameof(bUseCameraWhenAimingWithScope)].Flag = value; } }
        public Vector CameraRelativeScopeOffset { get { return this[nameof(CameraRelativeScopeOffset)].As<Vector>(); } set { this["CameraRelativeScopeOffset"] = value; } }
        public InputAction AimScopeInputAction { get { return this[nameof(AimScopeInputAction)].As<InputAction>(); } set { this["AimScopeInputAction"] = value; } }
        public CustomWeaponSpread CustomSpread { get { return this[nameof(CustomSpread)].As<CustomWeaponSpread>(); } set { this["CustomSpread"] = value; } }
        public Object AimTag { get { return this[nameof(AimTag)]; } set { this[nameof(AimTag)] = value; } }
        public Object AimScopeTag { get { return this[nameof(AimScopeTag)]; } set { this[nameof(AimScopeTag)] = value; } }
        public bool bRequiresInHandToUse { get { return this[nameof(bRequiresInHandToUse)].Flag; } set { this[nameof(bRequiresInHandToUse)].Flag = value; } }
        public float ReloadStartTime { get { return this[nameof(ReloadStartTime)].GetValue<float>(); } set { this[nameof(ReloadStartTime)].SetValue<float>(value); } }
        public float ReloadLoopTime { get { return this[nameof(ReloadLoopTime)].GetValue<float>(); } set { this[nameof(ReloadLoopTime)].SetValue<float>(value); } }
        public float ReloadEndTime { get { return this[nameof(ReloadEndTime)].GetValue<float>(); } set { this[nameof(ReloadEndTime)].SetValue<float>(value); } }
        public float ReloadTime { get { return this[nameof(ReloadTime)].GetValue<float>(); } set { this[nameof(ReloadTime)].SetValue<float>(value); } }
        public float ReloadSpeed { get { return this[nameof(ReloadSpeed)].GetValue<float>(); } set { this[nameof(ReloadSpeed)].SetValue<float>(value); } }
        public Object MuzzleAttachPoint { get { return this[nameof(MuzzleAttachPoint)]; } set { this[nameof(MuzzleAttachPoint)] = value; } }
        public bool AttachMuzzleFX { get { return this[nameof(AttachMuzzleFX)].Flag; } set { this[nameof(AttachMuzzleFX)].Flag = value; } }
        public Object OutOfAmmoSoundIDName { get { return this[nameof(OutOfAmmoSoundIDName)]; } set { this[nameof(OutOfAmmoSoundIDName)] = value; } }
        public SoundGunfire OutOfAmmoSoundCue { get { return this[nameof(OutOfAmmoSoundCue)].As<SoundGunfire>(); } set { this["OutOfAmmoSoundCue"] = value; } }
        public bool UseLowAmmoSounds { get { return this[nameof(UseLowAmmoSounds)].Flag; } set { this[nameof(UseLowAmmoSounds)].Flag = value; } }
        public int LowAmmoCount { get { return this[nameof(LowAmmoCount)].GetValue<int>(); } set { this[nameof(LowAmmoCount)].SetValue<int>(value); } }
        public SoundGunfire BulletWhizBySoundCue { get { return this[nameof(BulletWhizBySoundCue)].As<SoundGunfire>(); } set { this["BulletWhizBySoundCue"] = value; } }
        public float BulletWhizByRadius { get { return this[nameof(BulletWhizByRadius)].GetValue<float>(); } set { this[nameof(BulletWhizByRadius)].SetValue<float>(value); } }
        public Object OnReload { get { return this[nameof(OnReload)]; } set { this[nameof(OnReload)] = value; } }
        public Object OnMaxAmmoChanged { get { return this[nameof(OnMaxAmmoChanged)]; } set { this[nameof(OnMaxAmmoChanged)] = value; } }
        public Object OnCurrentAmmoChanged { get { return this[nameof(OnCurrentAmmoChanged)]; } set { this[nameof(OnCurrentAmmoChanged)] = value; } }
        public Object RightOrientationAttachment { get { return this[nameof(RightOrientationAttachment)]; } set { this[nameof(RightOrientationAttachment)] = value; } }
        public Object LeftOrientationAttachment { get { return this[nameof(LeftOrientationAttachment)]; } set { this[nameof(LeftOrientationAttachment)] = value; } }
        public bool UseAltOrientAttachOnReload { get { return this[nameof(UseAltOrientAttachOnReload)].Flag; } set { this[nameof(UseAltOrientAttachOnReload)].Flag = value; } }
        public VitalityComponent AmmoPoolComponent { get { return this[nameof(AmmoPoolComponent)].As<VitalityComponent>(); } set { this["AmmoPoolComponent"] = value; } }
        public SceneComponent Muzzle { get { return this[nameof(Muzzle)].As<SceneComponent>(); } set { this["Muzzle"] = value; } }
        public AimingComponent AimingComponent { get { return this[nameof(AimingComponent)].As<AimingComponent>(); } set { this["AimingComponent"] = value; } }
        public RangedWeaponMode OverrideWeaponMode { get { return this[nameof(OverrideWeaponMode)].As<RangedWeaponMode>(); } set { this["OverrideWeaponMode"] = value; } }
        public Array<ProjectileBase> FiredProjectiles { get { return new Array<ProjectileBase>(this[nameof(FiredProjectiles)].Address); } }
        public void TriggerSoundAwareness(float Radius) { Invoke(nameof(TriggerSoundAwareness), Radius); }
        public void ToggleScopeInput(bool bRequiresAimInput) { Invoke(nameof(ToggleScopeInput), bRequiresAimInput); }
        public void SetProjectileToVisualize(Object NewProjectileClass) { Invoke(nameof(SetProjectileToVisualize), NewProjectileClass); }
        public void SetOverrideWeaponMode(RangedWeaponMode Mode) { Invoke(nameof(SetOverrideWeaponMode), Mode); }
        public void SetCustomUserState(bool InCustomUserState) { Invoke(nameof(SetCustomUserState), InCustomUserState); }
        public void SetCustomUserSecondaryState(bool InCustomUserSecondaryState) { Invoke(nameof(SetCustomUserSecondaryState), InCustomUserSecondaryState); }
        public void SetClipAmount(int Amount) { Invoke(nameof(SetClipAmount), Amount); }
        public void ServerSetState(byte InState) { Invoke(nameof(ServerSetState), InState); }
        public void ServerFireWithWindup(Vector_NetQuantize From, ReplicatedHits ClientHits, float WeaponSpread, uint RandomSeed, float ClientWindupTime) { Invoke(nameof(ServerFireWithWindup), From, ClientHits, WeaponSpread, RandomSeed, ClientWindupTime); }
        public void ServerFireWithCameraTransform(Vector_NetQuantize From, ReplicatedHits ClientHits, float WeaponSpread, uint RandomSeed, Vector_NetQuantize CameraLocation, Rotator CameraRotation) { Invoke(nameof(ServerFireWithCameraTransform), From, ClientHits, WeaponSpread, RandomSeed, CameraLocation, CameraRotation); }
        public void ServerFireWithAllData(Vector_NetQuantize From, ReplicatedHits ClientHits, float WeaponSpread, uint RandomSeed, Vector_NetQuantize CameraLocation, Rotator CameraRotation, float ClientWindupTime) { Invoke(nameof(ServerFireWithAllData), From, ClientHits, WeaponSpread, RandomSeed, CameraLocation, CameraRotation, ClientWindupTime); }
        public void ServerFire(Vector_NetQuantize From, ReplicatedHits ClientHits, float WeaponSpread, uint RandomSeed) { Invoke(nameof(ServerFire), From, ClientHits, WeaponSpread, RandomSeed); }
        public void RemoveAmmoFromClip(int Ammo) { Invoke(nameof(RemoveAmmoFromClip), Ammo); }
        public void Reload() { Invoke(nameof(Reload)); }
        public void PlayMuzzleFX(NiagaraSystem WeaponMuzzleFX, bool Attach) { Invoke(nameof(PlayMuzzleFX), WeaponMuzzleFX, Attach); }
        public void PlayFireAnimation(Object AnimationID) { Invoke(nameof(PlayFireAnimation), AnimationID); }
        public void OnWindupOverdrawBegin() { Invoke(nameof(OnWindupOverdrawBegin)); }
        public void OnWindupFull() { Invoke(nameof(OnWindupFull)); }
        public void OnWindupEnd() { Invoke(nameof(OnWindupEnd)); }
        public void OnWindupBegin() { Invoke(nameof(OnWindupBegin)); }
        public void OnStartReloading() { Invoke(nameof(OnStartReloading)); }
        public void OnScopeInputPressed() { Invoke(nameof(OnScopeInputPressed)); }
        public void OnReloaded() { Invoke(nameof(OnReloaded)); }
        public void OnPreFireEnd() { Invoke(nameof(OnPreFireEnd)); }
        public void OnPreFireBegin() { Invoke(nameof(OnPreFireBegin)); }
        public void OnIdle() { Invoke(nameof(OnIdle)); }
        public void OnFireEnd() { Invoke(nameof(OnFireEnd)); }
        public void OnFireBegin() { Invoke(nameof(OnFireBegin)); }
        public void OnFire(Vector From, Vector To, float WeaponSpread) { Invoke(nameof(OnFire), From, To, WeaponSpread); }
        public void OnFinishReloading() { Invoke(nameof(OnFinishReloading)); }
        public void OnExitCustomUserState() { Invoke(nameof(OnExitCustomUserState)); }
        public void OnExitCustomUserSecondaryState() { Invoke(nameof(OnExitCustomUserSecondaryState)); }
        public void OnEquipEnd() { Invoke(nameof(OnEquipEnd)); }
        public void OnEquipBegin() { Invoke(nameof(OnEquipBegin)); }
        public void OnEnterCustomUserState() { Invoke(nameof(OnEnterCustomUserState)); }
        public void OnEnterCustomUserSecondaryState() { Invoke(nameof(OnEnterCustomUserSecondaryState)); }
        public void OnDoubleClickScopeInputReleased() { Invoke(nameof(OnDoubleClickScopeInputReleased)); }
        public void OnDoubleClickScopeInputPressed() { Invoke(nameof(OnDoubleClickScopeInputPressed)); }
        public void OnChangeHandedness(EHandedness Handedness) { Invoke(nameof(OnChangeHandedness), Handedness); }
        public void MulticastSetStateNS(byte InState) { Invoke(nameof(MulticastSetStateNS), InState); }
        public void MulticastSetState(byte InState) { Invoke(nameof(MulticastSetState), InState); }
        public void MulticastFire(Vector_NetQuantize From, ReplicatedLocation To, float WeaponSpread, uint RandomSeed) { Invoke(nameof(MulticastFire), From, To, WeaponSpread, RandomSeed); }
        public void ModifyMuzzleFXPointAndDirection(Vector MuzzlePoint, Vector MuzzleDirection, int SprayIndex) { Invoke(nameof(ModifyMuzzleFXPointAndDirection), MuzzlePoint, MuzzleDirection, SprayIndex); }
        public bool IsWindupOverdrawn() { return Invoke<bool>(nameof(IsWindupOverdrawn)); }
        public bool IsWindingUp() { return Invoke<bool>(nameof(IsWindingUp)); }
        public bool IsScopeInputEnabled() { return Invoke<bool>(nameof(IsScopeInputEnabled)); }
        public bool IsReloading() { return Invoke<bool>(nameof(IsReloading)); }
        public bool IsInCustomUserState() { return Invoke<bool>(nameof(IsInCustomUserState)); }
        public bool IsInCustomUserSecondaryState() { return Invoke<bool>(nameof(IsInCustomUserSecondaryState)); }
        public bool IsFiring() { return Invoke<bool>(nameof(IsFiring)); }
        public bool IsBusy() { return Invoke<bool>(nameof(IsBusy)); }
        public bool IsAimInputDown() { return Invoke<bool>(nameof(IsAimInputDown)); }
        public bool IsAimingWithScope() { return Invoke<bool>(nameof(IsAimingWithScope)); }
        public bool IsAiming() { return Invoke<bool>(nameof(IsAiming)); }
        public bool HasScope() { return Invoke<bool>(nameof(HasScope)); }
        public bool HasInfiniteReserve() { return Invoke<bool>(nameof(HasInfiniteReserve)); }
        public bool HasInfiniteClip() { return Invoke<bool>(nameof(HasInfiniteClip)); }
        public float GetWindupTime() { return Invoke<float>(nameof(GetWindupTime)); }
        public float GetWindupRate() { return Invoke<float>(nameof(GetWindupRate)); }
        public float GetWindupProgress() { return Invoke<float>(nameof(GetWindupProgress)); }
        public float GetWindupOverdrawProgress() { return Invoke<float>(nameof(GetWindupOverdrawProgress)); }
        public RangedWeaponMode GetWeaponMode() { return Invoke<RangedWeaponMode>(nameof(GetWeaponMode)); }
        public float GetTotalWindup() { return Invoke<float>(nameof(GetTotalWindup)); }
        public Object GetStateName() { return Invoke<Object>(nameof(GetStateName)); }
        public byte GetState() { return Invoke<byte>(nameof(GetState)); }
        public int GetSprayCount() { return Invoke<int>(nameof(GetSprayCount)); }
        public float GetScopeFOV() { return Invoke<float>(nameof(GetScopeFOV)); }
        public float GetRateOfFire() { return Invoke<float>(nameof(GetRateOfFire)); }
        public float GetRange(bool bIncludeFalloff) { return Invoke<float>(nameof(GetRange), bIncludeFalloff); }
        public RandomStream GetRandomStream() { return Invoke<RandomStream>(nameof(GetRandomStream)); }
        public ProjectileVisualizationContext GetProjectileVisualization() { return Invoke<ProjectileVisualizationContext>(nameof(GetProjectileVisualization)); }
        public float GetOverdrawTime() { return Invoke<float>(nameof(GetOverdrawTime)); }
        public float GetNormalizedSpread() { return Invoke<float>(nameof(GetNormalizedSpread)); }
        public HitResult GetMuzzleObstruction() { return Invoke<HitResult>(nameof(GetMuzzleObstruction)); }
        public void GetMuzzleFXPointAndDirection(Vector MuzzlePoint, Vector MuzzleDirection, int SprayIndex) { Invoke(nameof(GetMuzzleFXPointAndDirection), MuzzlePoint, MuzzleDirection, SprayIndex); }
        public int GetMaxAmmo() { return Invoke<int>(nameof(GetMaxAmmo)); }
        public float GetFalloff(bool bPrimaryFalloffOnly) { return Invoke<float>(nameof(GetFalloff), bPrimaryFalloffOnly); }
        public float GetDamageScalar(float Distance) { return Invoke<float>(nameof(GetDamageScalar), Distance); }
        public float GetCurrentSpread() { return Invoke<float>(nameof(GetCurrentSpread)); }
        public float GetBurstRateOfFire() { return Invoke<float>(nameof(GetBurstRateOfFire)); }
        public int GetBurstCount() { return Invoke<int>(nameof(GetBurstCount)); }
        public int GetAmmoPerReload() { return Invoke<int>(nameof(GetAmmoPerReload)); }
        public int GetAmmoPerClip() { return Invoke<int>(nameof(GetAmmoPerClip)); }
        public int GetAmmoInClip() { return Invoke<int>(nameof(GetAmmoInClip)); }
        public int GetAmmo() { return Invoke<int>(nameof(GetAmmo)); }
        public void GetAimVector(Vector From, Vector To, bool bApplyAimAssist, bool bOverrideTrajectoryMode, ERangedWeaponTrajectoryMode TrajectoryModeOverride) { Invoke(nameof(GetAimVector), From, To, bApplyAimAssist, bOverrideTrajectoryMode, TrajectoryModeOverride); }
        public Vector GetAimTargetLocation() { return Invoke<Vector>(nameof(GetAimTargetLocation)); }
        public HitResult GetAimTarget(bool bInitialSegmentOnly) { return Invoke<HitResult>(nameof(GetAimTarget), bInitialSegmentOnly); }
        public WeaponTracePath GetAimPath() { return Invoke<WeaponTracePath>(nameof(GetAimPath)); }
        public AimingComponent GetAimingComponent() { return Invoke<AimingComponent>(nameof(GetAimingComponent)); }
        public void ForceReload() { Invoke(nameof(ForceReload)); }
        public void ForceIdle() { Invoke(nameof(ForceIdle)); }
        public Actor FireProjectile(Actor Cause, Vector Origin, Vector End, float WeaponSpread, Object ProjectileBP, float Velocity) { return Invoke<Actor>(nameof(FireProjectile), Cause, Origin, End, WeaponSpread, ProjectileBP, Velocity); }
        public void FinishEquip() { Invoke(nameof(FinishEquip)); }
        public void FillClip(int Amount) { Invoke(nameof(FillClip), Amount); }
        public void EndUse() { Invoke(nameof(EndUse)); }
        public void DoInstantHit(Vector Origin, Vector End, float WeaponSpread) { Invoke(nameof(DoInstantHit), Origin, End, WeaponSpread); }
        public void DoImpact(HitResult Hit) { Invoke(nameof(DoImpact), Hit); }
        public bool DoCustomReload() { return Invoke<bool>(nameof(DoCustomReload)); }
        public void ConsumeAmmo(int Amount) { Invoke(nameof(ConsumeAmmo), Amount); }
        public void ClearOverrideWeaponMode() { Invoke(nameof(ClearOverrideWeaponMode)); }
        public void ClearDoubleClickTimer() { Invoke(nameof(ClearDoubleClickTimer)); }
        public bool CanWindup(float PercentComplete) { return Invoke<bool>(nameof(CanWindup), PercentComplete); }
        public bool CanUse() { return Invoke<bool>(nameof(CanUse)); }
        public bool CanReload() { return Invoke<bool>(nameof(CanReload)); }
        public bool CanFire() { return Invoke<bool>(nameof(CanFire)); }
        public void CancelWindup() { Invoke(nameof(CancelWindup)); }
        public bool CanAutoReload() { return Invoke<bool>(nameof(CanAutoReload)); }
        public void BeginUse() { Invoke(nameof(BeginUse)); }
        public void BeginReload() { Invoke(nameof(BeginReload)); }
        public void ApplySpread(float Scalar) { Invoke(nameof(ApplySpread), Scalar); }
        public void ApplyRecoil(float Scalar) { Invoke(nameof(ApplyRecoil), Scalar); }
        public void AddAmmoToClip(int Ammo, bool bIsReload) { Invoke(nameof(AddAmmoToClip), Ammo, bIsReload); }
        public void AddAmmo(int Amount, bool FillClip) { Invoke(nameof(AddAmmo), Amount, FillClip); }
    }
    public class MeleeWeapon : WeaponBase
    {
        public MeleeWeapon(nint addr) : base(addr) { }
    }
    public class EquipmentMod : Item
    {
        public EquipmentMod(nint addr) : base(addr) { }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
        public bool ReplicateMod { get { return this[nameof(ReplicateMod)].Flag; } set { this[nameof(ReplicateMod)].Flag = value; } }
        public bool CanBeRemoved { get { return this[nameof(CanBeRemoved)].Flag; } set { this[nameof(CanBeRemoved)].Flag = value; } }
        public Object CustomizationSlot { get { return this[nameof(CustomizationSlot)]; } set { this[nameof(CustomizationSlot)] = value; } }
        public Object CustomizationID { get { return this[nameof(CustomizationID)]; } set { this[nameof(CustomizationID)] = value; } }
        public Equipment EquipOwner { get { return this[nameof(EquipOwner)].As<Equipment>(); } set { this["EquipOwner"] = value; } }
        public byte EquippedSlot { get { return this[nameof(EquippedSlot)].GetValue<byte>(); } set { this[nameof(EquippedSlot)].SetValue<byte>(value); } }
        public byte EquippedLevel { get { return this[nameof(EquippedLevel)].GetValue<byte>(); } set { this[nameof(EquippedLevel)].SetValue<byte>(value); } }
        public bool UnequipMod(InventoryComponent Inventory, int ItemId, byte Slot, bool AddToInventory) { return Invoke<bool>(nameof(UnequipMod), Inventory, ItemId, Slot, AddToInventory); }
        public void ScaleStat(Object Stat, float Scalar, bool AutoInitValue) { Invoke(nameof(ScaleStat), Stat, Scalar, AutoInitValue); }
        public void OnPostComputeStats() { Invoke(nameof(OnPostComputeStats)); }
        public void OnEquipmentInHandEvent(bool InHand) { Invoke(nameof(OnEquipmentInHandEvent), InHand); }
        public void OnDetached() { Invoke(nameof(OnDetached)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void OnAttached() { Invoke(nameof(OnAttached)); }
        public void ModifyStat(Object Stat, float Value) { Invoke(nameof(ModifyStat), Stat, Value); }
        public bool HasItemOrEquippedMod(InventoryComponent Inventory, Object ItemBP) { return Invoke<bool>(nameof(HasItemOrEquippedMod), Inventory, ItemBP); }
        public float GetStat(Object Stat) { return Invoke<float>(nameof(GetStat), Stat); }
        public byte GetSlot() { return Invoke<byte>(nameof(GetSlot)); }
        public InspectInfo GetPreviewInspectInfoFromInventory(Actor Actor, InventoryComponent Inventory, int ItemId, byte Slot, int ModItemID) { return Invoke<InspectInfo>(nameof(GetPreviewInspectInfoFromInventory), Actor, Inventory, ItemId, Slot, ModItemID); }
        public InspectInfo GetPreviewInspectInfo(Actor Actor, InventoryComponent Inventory, int ItemId, byte Slot, Object Mod, byte ModLevel) { return Invoke<InspectInfo>(nameof(GetPreviewInspectInfo), Actor, Inventory, ItemId, Slot, Mod, ModLevel); }
        public bool GetInspectInfoForModBySlotName(Actor Actor, InventoryComponent Inventory, int ItemId, Object Slot, InspectInfo Rtn) { return Invoke<bool>(nameof(GetInspectInfoForModBySlotName), Actor, Inventory, ItemId, Slot, Rtn); }
        public Equipment GetEquipment() { return Invoke<Equipment>(nameof(GetEquipment)); }
        public bool FindEquippedModInInventory(InventoryComponent Inventory, Object Mod, int OutItemID, EquipmentModData OutModData) { return Invoke<bool>(nameof(FindEquippedModInInventory), Inventory, Mod, OutItemID, OutModData); }
        public bool EquipModFromInventory(InventoryComponent Inventory, int ItemId, byte Slot, int ModItemID) { return Invoke<bool>(nameof(EquipModFromInventory), Inventory, ItemId, Slot, ModItemID); }
        public bool EquipMod(InventoryComponent Inventory, int ItemId, byte Slot, Object Mod, byte ModLevel, int ModItemID) { return Invoke<bool>(nameof(EquipMod), Inventory, ItemId, Slot, Mod, ModLevel, ModItemID); }
    }
    public class SpawnTableElement : SpawnTableEntry
    {
        public SpawnTableElement(nint addr) : base(addr) { }
    }
    public class ExplorableMinimapModel : Actor
    {
        public ExplorableMinimapModel(nint addr) : base(addr) { }
        public Vector ModelScale { get { return this[nameof(ModelScale)].As<Vector>(); } set { this["ModelScale"] = value; } }
        public Vector EntityGlobalScale { get { return this[nameof(EntityGlobalScale)].As<Vector>(); } set { this["EntityGlobalScale"] = value; } }
        public Box TileBounds { get { return this[nameof(TileBounds)].As<Box>(); } set { this["TileBounds"] = value; } }
        public Vector TileBoundsOrigin { get { return this[nameof(TileBoundsOrigin)].As<Vector>(); } set { this["TileBoundsOrigin"] = value; } }
        public Box ModelBounds { get { return this[nameof(ModelBounds)].As<Box>(); } set { this["ModelBounds"] = value; } }
        public float VisibilityRadius { get { return this[nameof(VisibilityRadius)].GetValue<float>(); } set { this[nameof(VisibilityRadius)].SetValue<float>(value); } }
        public float VisibilityHeight { get { return this[nameof(VisibilityHeight)].GetValue<float>(); } set { this[nameof(VisibilityHeight)].SetValue<float>(value); } }
        public CurveFloat VisibilityCurveHoriz { get { return this[nameof(VisibilityCurveHoriz)].As<CurveFloat>(); } set { this["VisibilityCurveHoriz"] = value; } }
        public CurveFloat VisibilityCurveVertical { get { return this[nameof(VisibilityCurveVertical)].As<CurveFloat>(); } set { this["VisibilityCurveVertical"] = value; } }
        public double GridResolution { get { return this[nameof(GridResolution)].GetValue<double>(); } set { this[nameof(GridResolution)].SetValue<double>(value); } }
        public float WidgetSize { get { return this[nameof(WidgetSize)].GetValue<float>(); } set { this[nameof(WidgetSize)].SetValue<float>(value); } }
        public float WidgetMinSize { get { return this[nameof(WidgetMinSize)].GetValue<float>(); } set { this[nameof(WidgetMinSize)].SetValue<float>(value); } }
        public float WidgetMaxSize { get { return this[nameof(WidgetMaxSize)].GetValue<float>(); } set { this[nameof(WidgetMaxSize)].SetValue<float>(value); } }
        public Vector2D FullMapSize { get { return this[nameof(FullMapSize)].As<Vector2D>(); } set { this["FullMapSize"] = value; } }
        public UserWidget FullScreenOverlayWidget { get { return this[nameof(FullScreenOverlayWidget)].As<UserWidget>(); } set { this["FullScreenOverlayWidget"] = value; } }
        public SceneComponent MinimapScene { get { return this[nameof(MinimapScene)].As<SceneComponent>(); } set { this["MinimapScene"] = value; } }
        public Object RegisteredEntityMap { get { return this[nameof(RegisteredEntityMap)]; } set { this[nameof(RegisteredEntityMap)] = value; } }
        public void SetFullscreenOverlayWidget(UserWidget OverlayWidget) { Invoke(nameof(SetFullscreenOverlayWidget), OverlayWidget); }
        public void RevealHiddenArea(Actor ContextActor, int HiddenAreaID) { Invoke(nameof(RevealHiddenArea), ContextActor, HiddenAreaID); }
        public void OnUninitialize() { Invoke(nameof(OnUninitialize)); }
        public void OnTileVisibilityUpdate(int ID, bool Visible) { Invoke(nameof(OnTileVisibilityUpdate), ID, Visible); }
        public void OnMinimapEntitySpawnUnregistered(Actor Entity) { Invoke(nameof(OnMinimapEntitySpawnUnregistered), Entity); }
        public void OnMinimapEntitySpawnRegistered(Actor Entity) { Invoke(nameof(OnMinimapEntitySpawnRegistered), Entity); }
        public void OnMinimapEntityRegistrationChanged(Actor EntityOwner, bool IsRegistering) { Invoke(nameof(OnMinimapEntityRegistrationChanged), EntityOwner, IsRegistering); }
        public void OnMapGenFullyLoaded(MapGenComponent Component) { Invoke(nameof(OnMapGenFullyLoaded), Component); }
        public float GetVisibilityAtLocation(Vector WorldLocation, Vector Extents) { return Invoke<float>(nameof(GetVisibilityAtLocation), WorldLocation, Extents); }
        public ExplorableMinimapModel GetExplorableMinimapModel(Object WorldContextObject) { return Invoke<ExplorableMinimapModel>(nameof(GetExplorableMinimapModel), WorldContextObject); }
    }
    public class TraitsComponent : ActorComponent
    {
        public TraitsComponent(nint addr) : base(addr) { }
        public DataTable TraitPointsPerLevelTable { get { return this[nameof(TraitPointsPerLevelTable)].As<DataTable>(); } set { this["TraitPointsPerLevelTable"] = value; } }
        public int TraitPointsPerLevel { get { return this[nameof(TraitPointsPerLevel)].GetValue<int>(); } set { this[nameof(TraitPointsPerLevel)].SetValue<int>(value); } }
        public int MaxTraitPoints { get { return this[nameof(MaxTraitPoints)].GetValue<int>(); } set { this[nameof(MaxTraitPoints)].SetValue<int>(value); } }
        public Array<Object> AvailableTraits { get { return new Array<Object>(this[nameof(AvailableTraits)].Address); } }
        public Array<TraitSlot> TraitSlots { get { return new Array<TraitSlot>(this[nameof(TraitSlots)].Address); } }
        public int UnlockedTraitLevel { get { return this[nameof(UnlockedTraitLevel)].GetValue<int>(); } set { this[nameof(UnlockedTraitLevel)].SetValue<int>(value); } }
        public int TraitPoints { get { return this[nameof(TraitPoints)].GetValue<int>(); } set { this[nameof(TraitPoints)].SetValue<int>(value); } }
        public Object OnTraitUpdated { get { return this[nameof(OnTraitUpdated)]; } set { this[nameof(OnTraitUpdated)] = value; } }
        public Object OnTraitAdded { get { return this[nameof(OnTraitAdded)]; } set { this[nameof(OnTraitAdded)] = value; } }
        public Object OnTraitRemoved { get { return this[nameof(OnTraitRemoved)]; } set { this[nameof(OnTraitRemoved)] = value; } }
        public Object OnTraitAddFailed { get { return this[nameof(OnTraitAddFailed)]; } set { this[nameof(OnTraitAddFailed)] = value; } }
        public Object OnTraitLevelChanged { get { return this[nameof(OnTraitLevelChanged)]; } set { this[nameof(OnTraitLevelChanged)] = value; } }
        public Object OnTraitPointAdded { get { return this[nameof(OnTraitPointAdded)]; } set { this[nameof(OnTraitPointAdded)] = value; } }
        public Object OnPostTraitsInitialized { get { return this[nameof(OnPostTraitsInitialized)]; } set { this[nameof(OnPostTraitsInitialized)] = value; } }
        public Object OnFinishPreviewing { get { return this[nameof(OnFinishPreviewing)]; } set { this[nameof(OnFinishPreviewing)] = value; } }
        public Array<TraitInfo> Traits { get { return new Array<TraitInfo>(this[nameof(Traits)].Address); } }
        public Array<TraitInfo> OldTraits { get { return new Array<TraitInfo>(this[nameof(OldTraits)].Address); } }
        public void Unequip(int SlotIndex) { Invoke(nameof(Unequip), SlotIndex); }
        public void SetTraitInstanceData(Object TraitBP, int NewInstanceDataValue) { Invoke(nameof(SetTraitInstanceData), TraitBP, NewInstanceDataValue); }
        public void SetMaxLevelMod(Object TraitBP, byte MaxLevelMod, ETraitPointModType ModType, bool bOverrideExistingLevel) { Invoke(nameof(SetMaxLevelMod), TraitBP, MaxLevelMod, ModType, bOverrideExistingLevel); }
        public void SetLevelMod(Object TraitBP, byte LevelMod, ETraitPointModType ModType, bool bOverrideExistingLevel) { Invoke(nameof(SetLevelMod), TraitBP, LevelMod, ModType, bOverrideExistingLevel); }
        public void RemoveTraitModifier(Object TraitBP, byte LevelMod, byte MaxLevelMod, ETraitPointModType ModType) { Invoke(nameof(RemoveTraitModifier), TraitBP, LevelMod, MaxLevelMod, ModType); }
        public bool RemoveTrait(Object TraitBP) { return Invoke<bool>(nameof(RemoveTrait), TraitBP); }
        public void RefundToLevel(Object TraitBP, int DesiredLevel) { Invoke(nameof(RefundToLevel), TraitBP, DesiredLevel); }
        public void Refund(Object TraitBP, int Amount) { Invoke(nameof(Refund), TraitBP, Amount); }
        public void Purchase(Object TraitBP) { Invoke(nameof(Purchase), TraitBP); }
        public void OnRep_Traits() { Invoke(nameof(OnRep_Traits)); }
        public void OnLevelUp() { Invoke(nameof(OnLevelUp)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void MarkTraitNoLongerNew(Object TraitBP) { Invoke(nameof(MarkTraitNoLongerNew), TraitBP); }
        public void MarkPreviewingChangesComplete(bool bCanceled) { Invoke(nameof(MarkPreviewingChangesComplete), bCanceled); }
        public void MarkPreviewingChanges() { Invoke(nameof(MarkPreviewingChanges)); }
        public void K2_UnlockTraitSoft(Object TraitBP, Object OnUnlockedTrait, int StartingLevel, bool bAllowAutoEquip) { Invoke(nameof(K2_UnlockTraitSoft), TraitBP, OnUnlockedTrait, StartingLevel, bAllowAutoEquip); }
        public bool IsTraitTransient(Object TraitBP) { return Invoke<bool>(nameof(IsTraitTransient), TraitBP); }
        public bool IsTraitSlotUnlocked(int SlotIndex, bool ValidateHasTraits) { return Invoke<bool>(nameof(IsTraitSlotUnlocked), SlotIndex, ValidateHasTraits); }
        public bool IsTraitOfType(Object TraitBP, Object Type) { return Invoke<bool>(nameof(IsTraitOfType), TraitBP, Type); }
        public bool IsPreviewingTraitChanges() { return Invoke<bool>(nameof(IsPreviewingTraitChanges)); }
        public bool HasTraitByType(Object Type) { return Invoke<bool>(nameof(HasTraitByType), Type); }
        public bool HasTraitByName(Object NameID, int RequiredLevel) { return Invoke<bool>(nameof(HasTraitByName), NameID, RequiredLevel); }
        public bool HasTrait(Object TraitBP, int RequiredLevel) { return Invoke<bool>(nameof(HasTrait), TraitBP, RequiredLevel); }
        public int GetTraitPoints() { return Invoke<int>(nameof(GetTraitPoints)); }
        public int GetTraitMaxLevel(Object TraitBP, bool ApplyModifiers) { return Invoke<int>(nameof(GetTraitMaxLevel), TraitBP, ApplyModifiers); }
        public int GetTraitLevel(Object TraitBP, bool ApplyModifiers) { return Invoke<int>(nameof(GetTraitLevel), TraitBP, ApplyModifiers); }
        public int GetTraitInstanceData(Object TraitBP) { return Invoke<int>(nameof(GetTraitInstanceData), TraitBP); }
        public TraitInfo GetTraitInfoForSlot(int SlotIndex) { return Invoke<TraitInfo>(nameof(GetTraitInfoForSlot), SlotIndex); }
        public TraitInfo GetTraitInfo(Object TraitBP) { return Invoke<TraitInfo>(nameof(GetTraitInfo), TraitBP); }
        public int GetTotalArchetypeLevel() { return Invoke<int>(nameof(GetTotalArchetypeLevel)); }
        public ProgressionComponent GetProgression() { return Invoke<ProgressionComponent>(nameof(GetProgression)); }
        public int GetOverallocatedPoints(Object TraitBP) { return Invoke<int>(nameof(GetOverallocatedPoints), TraitBP); }
        public byte GetMaxLevelMods(Object TraitBP, bool bGetAllMods, ETraitPointModType ModType) { return Invoke<byte>(nameof(GetMaxLevelMods), TraitBP, bGetAllMods, ModType); }
        public byte GetLevelMods(Object TraitBP, bool bGetAllMods, ETraitPointModType ModType) { return Invoke<byte>(nameof(GetLevelMods), TraitBP, bGetAllMods, ModType); }
        public int GetEquippedArchetypeLevel() { return Invoke<int>(nameof(GetEquippedArchetypeLevel)); }
        public Array<TraitInfo> GetAvailableTraits() { return Invoke<Array<TraitInfo>>(nameof(GetAvailableTraits)); }
        public int GetAvailableTraitPoints() { return Invoke<int>(nameof(GetAvailableTraitPoints)); }
        public Array<TraitInfo> GetAllTraits() { return Invoke<Array<TraitInfo>>(nameof(GetAllTraits)); }
        public int GetAllocatedTraitPoints() { return Invoke<int>(nameof(GetAllocatedTraitPoints)); }
        public void Equip(Object TraitBP, int SlotIndex) { Invoke(nameof(Equip), TraitBP, SlotIndex); }
        public void ClientNotifyTraitPointsAdded(int Points) { Invoke(nameof(ClientNotifyTraitPointsAdded), Points); }
        public bool CanPurchase(Object TraitBP) { return Invoke<bool>(nameof(CanPurchase), TraitBP); }
        public bool CanEquip(Object TraitBP, int SlotIndex) { return Invoke<bool>(nameof(CanEquip), TraitBP, SlotIndex); }
        public int AddTraitPoints(int Points, bool BroadcastNotify) { return Invoke<int>(nameof(AddTraitPoints), Points, BroadcastNotify); }
        public void AddTraitModifier(Object TraitBP, byte LevelMod, byte MaxLevelMod, ETraitPointModType ModType, bool OverrideExistingLevel) { Invoke(nameof(AddTraitModifier), TraitBP, LevelMod, MaxLevelMod, ModType, OverrideExistingLevel); }
    }
    public class Archetype : Trait
    {
        public Archetype(nint addr) : base(addr) { }
        public float RequiredExperience { get { return this[nameof(RequiredExperience)].GetValue<float>(); } set { this[nameof(RequiredExperience)].SetValue<float>(value); } }
        public float RequiredExperienceInc { get { return this[nameof(RequiredExperienceInc)].GetValue<float>(); } set { this[nameof(RequiredExperienceInc)].SetValue<float>(value); } }
        public float RequiredExperienceExp { get { return this[nameof(RequiredExperienceExp)].GetValue<float>(); } set { this[nameof(RequiredExperienceExp)].SetValue<float>(value); } }
        public int RequiredExperienceRound { get { return this[nameof(RequiredExperienceRound)].GetValue<int>(); } set { this[nameof(RequiredExperienceRound)].SetValue<int>(value); } }
        public void OnExperience(int Experience) { Invoke(nameof(OnExperience), Experience); }
        public void ModifyIncomingExperience(int Experience) { Invoke(nameof(ModifyIncomingExperience), Experience); }
        public int GetRequiredExperienceForLevel(Actor Actor, int TargetLevel) { return Invoke<int>(nameof(GetRequiredExperienceForLevel), Actor, TargetLevel); }
    }
    public class ProgressionComponent : ActorComponent
    {
        public ProgressionComponent(nint addr) : base(addr) { }
        public DataTable ExperienceTable { get { return this[nameof(ExperienceTable)].As<DataTable>(); } set { this["ExperienceTable"] = value; } }
        public int StartingLevel { get { return this[nameof(StartingLevel)].GetValue<int>(); } set { this[nameof(StartingLevel)].SetValue<int>(value); } }
        public float RequiredExperience { get { return this[nameof(RequiredExperience)].GetValue<float>(); } set { this[nameof(RequiredExperience)].SetValue<float>(value); } }
        public float RequiredExperienceInc { get { return this[nameof(RequiredExperienceInc)].GetValue<float>(); } set { this[nameof(RequiredExperienceInc)].SetValue<float>(value); } }
        public float RequiredExperienceExp { get { return this[nameof(RequiredExperienceExp)].GetValue<float>(); } set { this[nameof(RequiredExperienceExp)].SetValue<float>(value); } }
        public int RequiredExperienceRound { get { return this[nameof(RequiredExperienceRound)].GetValue<int>(); } set { this[nameof(RequiredExperienceRound)].SetValue<int>(value); } }
        public float IncomingExperienceScalar { get { return this[nameof(IncomingExperienceScalar)].GetValue<float>(); } set { this[nameof(IncomingExperienceScalar)].SetValue<float>(value); } }
        public int MaxLevel { get { return this[nameof(MaxLevel)].GetValue<int>(); } set { this[nameof(MaxLevel)].SetValue<int>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int Experience { get { return this[nameof(Experience)].GetValue<int>(); } set { this[nameof(Experience)].SetValue<int>(value); } }
        public int QueuedExperience { get { return this[nameof(QueuedExperience)].GetValue<int>(); } set { this[nameof(QueuedExperience)].SetValue<int>(value); } }
        public bool AutoAcquireExperience { get { return this[nameof(AutoAcquireExperience)].Flag; } set { this[nameof(AutoAcquireExperience)].Flag = value; } }
        public bool QueueExperience { get { return this[nameof(QueueExperience)].Flag; } set { this[nameof(QueueExperience)].Flag = value; } }
        public bool SharedExperience { get { return this[nameof(SharedExperience)].Flag; } set { this[nameof(SharedExperience)].Flag = value; } }
        public float SharedExperienceRange { get { return this[nameof(SharedExperienceRange)].GetValue<float>(); } set { this[nameof(SharedExperienceRange)].SetValue<float>(value); } }
        public bool StopExpGainAtMaxLevel { get { return this[nameof(StopExpGainAtMaxLevel)].Flag; } set { this[nameof(StopExpGainAtMaxLevel)].Flag = value; } }
        public Object OnExperience { get { return this[nameof(OnExperience)]; } set { this[nameof(OnExperience)] = value; } }
        public Object OnLevelUp { get { return this[nameof(OnLevelUp)]; } set { this[nameof(OnLevelUp)] = value; } }
        public bool SetLevel(int LevelToSet) { return Invoke<bool>(nameof(SetLevel), LevelToSet); }
        public void OnRep_Level() { Invoke(nameof(OnRep_Level)); }
        public void OnRep_Experience() { Invoke(nameof(OnRep_Experience)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public float GetPercentageToNextLevel() { return Invoke<float>(nameof(GetPercentageToNextLevel)); }
        public int GetExperienceTowardsNextLevel() { return Invoke<int>(nameof(GetExperienceTowardsNextLevel)); }
        public int GetExperienceToNextLevel() { return Invoke<int>(nameof(GetExperienceToNextLevel)); }
        public void CommitQueuedExperience() { Invoke(nameof(CommitQueuedExperience)); }
        public void ClearQueuedExperience() { Invoke(nameof(ClearQueuedExperience)); }
        public void AddExperience(int ExperienceToAdd, EExperienceReason Reason, int ExperienceLevel) { Invoke(nameof(AddExperience), ExperienceToAdd, Reason, ExperienceLevel); }
    }
    public class Quest : Actor
    {
        public Quest(nint addr) : base(addr) { }
        public Object QuestNameID { get { return this[nameof(QuestNameID)]; } set { this[nameof(QuestNameID)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public Object QuestScope { get { return this[nameof(QuestScope)]; } set { this[nameof(QuestScope)] = value; } }
        public Array<Object> QuestTags { get { return new Array<Object>(this[nameof(QuestTags)].Address); } }
        public Array<Object> ParentQuestTags { get { return new Array<Object>(this[nameof(ParentQuestTags)].Address); } }
        public Array<VariableDef> Variables { get { return new Array<VariableDef>(this[nameof(Variables)].Address); } }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public int ParentQuestID { get { return this[nameof(ParentQuestID)].GetValue<int>(); } set { this[nameof(ParentQuestID)].SetValue<int>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public EQuestState QuestState { get { return (EQuestState)this[nameof(QuestState)].GetValue<int>(); } set { this[nameof(QuestState)].SetValue<int>((int)value); } }
        public EQuestResult QuestResult { get { return (EQuestResult)this[nameof(QuestResult)].GetValue<int>(); } set { this[nameof(QuestResult)].SetValue<int>((int)value); } }
        public Object OnQuestCompleteEvent { get { return this[nameof(OnQuestCompleteEvent)]; } set { this[nameof(OnQuestCompleteEvent)] = value; } }
        public Array<QuestObjective> QuestObjectives { get { return new Array<QuestObjective>(this[nameof(QuestObjectives)].Address); } }
        public Array<Quest> ChildQuests { get { return new Array<Quest>(this[nameof(ChildQuests)].Address); } }
        public QuestComponent ParentQuestComponent { get { return this[nameof(ParentQuestComponent)].As<QuestComponent>(); } set { this["ParentQuestComponent"] = value; } }
        public void SetObjectiveCounterMax(Object NameID, int MaxCount) { Invoke(nameof(SetObjectiveCounterMax), NameID, MaxCount); }
        public void ResetObjective(Object NameID) { Invoke(nameof(ResetObjective), NameID); }
        public void ResetAllObjectives(bool ResetQuestState) { Invoke(nameof(ResetAllObjectives), ResetQuestState); }
        public void OnResetQuest() { Invoke(nameof(OnResetQuest)); }
        public void OnQuestManagerReady() { Invoke(nameof(OnQuestManagerReady)); }
        public void OnQuestComplete(EQuestResult Result) { Invoke(nameof(OnQuestComplete), Result); }
        public void OnPostInitializeQuest() { Invoke(nameof(OnPostInitializeQuest)); }
        public void OnPostCreateQuest() { Invoke(nameof(OnPostCreateQuest)); }
        public void OnObjectiveUpdated(QuestObjective Objective) { Invoke(nameof(OnObjectiveUpdated), Objective); }
        public void OnObjectiveComplete(Object NameID) { Invoke(nameof(OnObjectiveComplete), NameID); }
        public void OnObjectiveActivate(Object NameID) { Invoke(nameof(OnObjectiveActivate), NameID); }
        public void OnInitializeQuest() { Invoke(nameof(OnInitializeQuest)); }
        public void OnDestroyQuest() { Invoke(nameof(OnDestroyQuest)); }
        public void OnDeinitializeQuest() { Invoke(nameof(OnDeinitializeQuest)); }
        public void OnCreateQuest(RandomStream RandomStream) { Invoke(nameof(OnCreateQuest), RandomStream); }
        public void OnBeginQuest() { Invoke(nameof(OnBeginQuest)); }
        public void NotifyQuestComplete(EQuestResult Result) { Invoke(nameof(NotifyQuestComplete), Result); }
        public bool IsQuestComplete() { return Invoke<bool>(nameof(IsQuestComplete)); }
        public bool IsQuestActive() { return Invoke<bool>(nameof(IsQuestActive)); }
        public bool IsObjectiveComplete(Object NameID) { return Invoke<bool>(nameof(IsObjectiveComplete), NameID); }
        public bool IsObjectiveActive(Object NameID) { return Invoke<bool>(nameof(IsObjectiveActive), NameID); }
        public void IncrementObjectiveCounter(Object NameID, bool AutoComplete) { Invoke(nameof(IncrementObjectiveCounter), NameID, AutoComplete); }
        public bool HasActiveObjectives(bool IncludeHidden) { return Invoke<bool>(nameof(HasActiveObjectives), IncludeHidden); }
        public Object GetUniqueName() { return Invoke<Object>(nameof(GetUniqueName)); }
        public Quest GetRootQuestForScope() { return Invoke<Quest>(nameof(GetRootQuestForScope)); }
        public Quest GetRootQuest() { return Invoke<Quest>(nameof(GetRootQuest)); }
        public void GetQuestObjectives(Array<QuestObjective> Objectives) { Invoke(nameof(GetQuestObjectives), Objectives); }
        public QuestObjective GetQuestObjective(Object NameID) { return Invoke<QuestObjective>(nameof(GetQuestObjective), NameID); }
        public Quest GetParentQuest() { return Invoke<Quest>(nameof(GetParentQuest)); }
        public int GetObjectiveCountRemaining(Object NameID) { return Invoke<int>(nameof(GetObjectiveCountRemaining), NameID); }
        public int GetObjectiveCounterMax(Object NameID) { return Invoke<int>(nameof(GetObjectiveCounterMax), NameID); }
        public int GetObjectiveCounter(Object NameID) { return Invoke<int>(nameof(GetObjectiveCounter), NameID); }
        public void CompleteQuest(EQuestResult Result) { Invoke(nameof(CompleteQuest), Result); }
        public void CompleteObjective(Object NameID, EQuestResult ObjectiveResult) { Invoke(nameof(CompleteObjective), NameID, ObjectiveResult); }
        public bool AreAnyObjectivesActiveOrComplete() { return Invoke<bool>(nameof(AreAnyObjectivesActiveOrComplete)); }
        public void ActivateObjective(Object NameID, bool AutoCompleteActiveObjectives) { Invoke(nameof(ActivateObjective), NameID, AutoCompleteActiveObjectives); }
    }
    public class QuestComponent : SceneComponent
    {
        public QuestComponent(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public bool bQuestAutoActivate { get { return this[nameof(bQuestAutoActivate)].Flag; } set { this[nameof(bQuestAutoActivate)].Flag = value; } }
        public Object OnQuestActivated { get { return this[nameof(OnQuestActivated)]; } set { this[nameof(OnQuestActivated)] = value; } }
        public Object OnQuestDeactivated { get { return this[nameof(OnQuestDeactivated)]; } set { this[nameof(OnQuestDeactivated)] = value; } }
        public Array<Object> Errors { get { return new Array<Object>(this[nameof(Errors)].Address); } }
        public void OnResetQuest() { Invoke(nameof(OnResetQuest)); }
        public void OnRequiredAssetsLoaded() { Invoke(nameof(OnRequiredAssetsLoaded)); }
        public void OnQuestComplete(EQuestResult Result) { Invoke(nameof(OnQuestComplete), Result); }
        public void OnPostInitializeQuest() { Invoke(nameof(OnPostInitializeQuest)); }
        public void OnPostCreateQuest() { Invoke(nameof(OnPostCreateQuest)); }
        public void OnObjectiveComplete(Object NameID) { Invoke(nameof(OnObjectiveComplete), NameID); }
        public void OnObjectiveActivate(Object NameID) { Invoke(nameof(OnObjectiveActivate), NameID); }
        public void OnInitializeQuest() { Invoke(nameof(OnInitializeQuest)); }
        public void OnDeinitializeQuest() { Invoke(nameof(OnDeinitializeQuest)); }
        public void OnCreateQuest(RandomStream RandomStream) { Invoke(nameof(OnCreateQuest), RandomStream); }
        public bool IsQuestActive() { return Invoke<bool>(nameof(IsQuestActive)); }
        public bool HasErrors() { return Invoke<bool>(nameof(HasErrors)); }
        public Object GetUniqueName() { return Invoke<Object>(nameof(GetUniqueName)); }
        public Quest GetRootQuest() { return Invoke<Quest>(nameof(GetRootQuest)); }
        public Quest GetQuest() { return Invoke<Quest>(nameof(GetQuest)); }
        public void GetDebugProperties(Array<QuestDebugProperty> Properties) { Invoke(nameof(GetDebugProperties), Properties); }
        public Object GetDebugLabel() { return Invoke<Object>(nameof(GetDebugLabel)); }
        public void DebugTravelTo(PlayerController Player) { Invoke(nameof(DebugTravelTo), Player); }
        public bool DebugCanTravelTo() { return Invoke<bool>(nameof(DebugCanTravelTo)); }
        public void DeactivateQuest() { Invoke(nameof(DeactivateQuest)); }
        public bool AreAssetsLoaded() { return Invoke<bool>(nameof(AreAssetsLoaded)); }
        public void ActivateQuest() { Invoke(nameof(ActivateQuest)); }
    }
    public class QuestEntity : QuestComponent
    {
        public QuestEntity(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object EventTree { get { return this[nameof(EventTree)]; } set { this[nameof(EventTree)] = value; } }
        public EQuestEntityOwnerContext OwnerContext { get { return (EQuestEntityOwnerContext)this[nameof(OwnerContext)].GetValue<int>(); } set { this[nameof(OwnerContext)].SetValue<int>((int)value); } }
        public Array<QuestEntityEventTree> EventTrees { get { return new Array<QuestEntityEventTree>(this[nameof(EventTrees)].Address); } }
        public Object OnSpawned { get { return this[nameof(OnSpawned)]; } set { this[nameof(OnSpawned)] = value; } }
        public Object OnDeSpawned { get { return this[nameof(OnDeSpawned)]; } set { this[nameof(OnDeSpawned)] = value; } }
        public Object OnDestroyed { get { return this[nameof(OnDestroyed)]; } set { this[nameof(OnDestroyed)] = value; } }
        public void StartEventTree(EventTree NewEventTree) { Invoke(nameof(StartEventTree), NewEventTree); }
        public bool IsSpawned() { return Invoke<bool>(nameof(IsSpawned)); }
        public bool HasEventTree(Object NameID) { return Invoke<bool>(nameof(HasEventTree), NameID); }
        public EventTree GetEventTreeByID(Object NameID) { return Invoke<EventTree>(nameof(GetEventTreeByID), NameID); }
        public Actor GetActor() { return Invoke<Actor>(nameof(GetActor)); }
        public void EndDialog() { Invoke(nameof(EndDialog)); }
        public void DialogTrigger(Object TriggerName, Actor Initiator, bool Push, bool AllowOverrideExistingStack) { Invoke(nameof(DialogTrigger), TriggerName, Initiator, Push, AllowOverrideExistingStack); }
        public void BeginDialog(Actor Initiator) { Invoke(nameof(BeginDialog), Initiator); }
    }
    public class QuestManager : ActorComponent
    {
        public QuestManager(nint addr) : base(addr) { }
        public Object OnQuestsUpdated { get { return this[nameof(OnQuestsUpdated)]; } set { this[nameof(OnQuestsUpdated)] = value; } }
        public Object OnQuestObjectivesUpdated { get { return this[nameof(OnQuestObjectivesUpdated)]; } set { this[nameof(OnQuestObjectivesUpdated)] = value; } }
        public Object OnQuestObjectiveUpdated { get { return this[nameof(OnQuestObjectiveUpdated)]; } set { this[nameof(OnQuestObjectiveUpdated)] = value; } }
        public Object OnQuestComplete { get { return this[nameof(OnQuestComplete)]; } set { this[nameof(OnQuestComplete)] = value; } }
        public Array<Quest> Quests { get { return new Array<Quest>(this[nameof(Quests)].Address); } }
        public int QuestIDGen { get { return this[nameof(QuestIDGen)].GetValue<int>(); } set { this[nameof(QuestIDGen)].SetValue<int>(value); } }
        public void SetupQuestVariables(EventTreeComponent EventTreeComponent) { Invoke(nameof(SetupQuestVariables), EventTreeComponent); }
        public void NotifyQuestsUpdated() { Invoke(nameof(NotifyQuestsUpdated)); }
        public bool NotifyQuestByName(Object WorldContextObject, Object QuestNameID, Object EventName) { return Invoke<bool>(nameof(NotifyQuestByName), WorldContextObject, QuestNameID, EventName); }
        public Quest GetQuestByType(Object QuestBP, bool ActiveOnly) { return Invoke<Quest>(nameof(GetQuestByType), QuestBP, ActiveOnly); }
        public QuestManager GetInstance(Object WorldContextObject) { return Invoke<QuestManager>(nameof(GetInstance), WorldContextObject); }
        public Array<Quest> FindQuestsInLevel(Level Level) { return Invoke<Array<Quest>>(nameof(FindQuestsInLevel), Level); }
        public Quest FindQuestByNameID(Object QuestNameID) { return Invoke<Quest>(nameof(FindQuestByNameID), QuestNameID); }
        public Quest FindQuestByID(int ID) { return Invoke<Quest>(nameof(FindQuestByID), ID); }
        public void DestroyQuest(Quest Quest) { Invoke(nameof(DestroyQuest), Quest); }
        public Quest CreateQuest(Object QuestBP, int SeedOverride) { return Invoke<Quest>(nameof(CreateQuest), QuestBP, SeedOverride); }
    }
    public class CraftingRecipe_Base : Object
    {
        public CraftingRecipe_Base(nint addr) : base(addr) { }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public ERecipeType Type { get { return (ERecipeType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object Ingredient1 { get { return this[nameof(Ingredient1)]; } set { this[nameof(Ingredient1)] = value; } }
        public int Ingredient1Quantity { get { return this[nameof(Ingredient1Quantity)].GetValue<int>(); } set { this[nameof(Ingredient1Quantity)].SetValue<int>(value); } }
        public int Ingredient1LevelRequirement { get { return this[nameof(Ingredient1LevelRequirement)].GetValue<int>(); } set { this[nameof(Ingredient1LevelRequirement)].SetValue<int>(value); } }
        public bool bIngredient1HideIfMissing { get { return this[nameof(bIngredient1HideIfMissing)].Flag; } set { this[nameof(bIngredient1HideIfMissing)].Flag = value; } }
        public bool bIngredient1SecretIfMissing { get { return this[nameof(bIngredient1SecretIfMissing)].Flag; } set { this[nameof(bIngredient1SecretIfMissing)].Flag = value; } }
        public Object Ingredient2 { get { return this[nameof(Ingredient2)]; } set { this[nameof(Ingredient2)] = value; } }
        public int Ingredient2Quantity { get { return this[nameof(Ingredient2Quantity)].GetValue<int>(); } set { this[nameof(Ingredient2Quantity)].SetValue<int>(value); } }
        public int Ingredient2LevelRequirement { get { return this[nameof(Ingredient2LevelRequirement)].GetValue<int>(); } set { this[nameof(Ingredient2LevelRequirement)].SetValue<int>(value); } }
        public bool bIngredient2HideIfMissing { get { return this[nameof(bIngredient2HideIfMissing)].Flag; } set { this[nameof(bIngredient2HideIfMissing)].Flag = value; } }
        public bool bIngredient2SecretIfMissing { get { return this[nameof(bIngredient2SecretIfMissing)].Flag; } set { this[nameof(bIngredient2SecretIfMissing)].Flag = value; } }
        public Object Ingredient3 { get { return this[nameof(Ingredient3)]; } set { this[nameof(Ingredient3)] = value; } }
        public int Ingredient3Quantity { get { return this[nameof(Ingredient3Quantity)].GetValue<int>(); } set { this[nameof(Ingredient3Quantity)].SetValue<int>(value); } }
        public int Ingredient3LevelRequirement { get { return this[nameof(Ingredient3LevelRequirement)].GetValue<int>(); } set { this[nameof(Ingredient3LevelRequirement)].SetValue<int>(value); } }
        public bool bIngredient3HideIfMissing { get { return this[nameof(bIngredient3HideIfMissing)].Flag; } set { this[nameof(bIngredient3HideIfMissing)].Flag = value; } }
        public bool bIngredient3SecretIfMissing { get { return this[nameof(bIngredient3SecretIfMissing)].Flag; } set { this[nameof(bIngredient3SecretIfMissing)].Flag = value; } }
        public Object Ingredient4 { get { return this[nameof(Ingredient4)]; } set { this[nameof(Ingredient4)] = value; } }
        public int Ingredient4Quantity { get { return this[nameof(Ingredient4Quantity)].GetValue<int>(); } set { this[nameof(Ingredient4Quantity)].SetValue<int>(value); } }
        public int Ingredient4LevelRequirement { get { return this[nameof(Ingredient4LevelRequirement)].GetValue<int>(); } set { this[nameof(Ingredient4LevelRequirement)].SetValue<int>(value); } }
        public bool bIngredient4HideIfMissing { get { return this[nameof(bIngredient4HideIfMissing)].Flag; } set { this[nameof(bIngredient4HideIfMissing)].Flag = value; } }
        public bool bIngredient4SecretIfMissing { get { return this[nameof(bIngredient4SecretIfMissing)].Flag; } set { this[nameof(bIngredient4SecretIfMissing)].Flag = value; } }
    }
    public class CharacterGunfire : Character
    {
        public CharacterGunfire(nint addr) : base(addr) { }
        public StatsComponent StatsComp { get { return this[nameof(StatsComp)].As<StatsComponent>(); } set { this["StatsComp"] = value; } }
        public ActionComponent ActionComp { get { return this[nameof(ActionComp)].As<ActionComponent>(); } set { this["ActionComp"] = value; } }
        public WeaponPhantomComponent WeaponPhantomProviderComp { get { return this[nameof(WeaponPhantomProviderComp)].As<WeaponPhantomComponent>(); } set { this["WeaponPhantomProviderComp"] = value; } }
        public HitLogComponent HitLogComp { get { return this[nameof(HitLogComp)].As<HitLogComponent>(); } set { this["HitLogComp"] = value; } }
        public ReplicatedMovementComponent ReplicatedMovementComp { get { return this[nameof(ReplicatedMovementComp)].As<ReplicatedMovementComponent>(); } set { this["ReplicatedMovementComp"] = value; } }
        public DataTableRowHandle Data { get { return this[nameof(Data)].As<DataTableRowHandle>(); } set { this["Data"] = value; } }
        public DataTableRowHandle CapData { get { return this[nameof(CapData)].As<DataTableRowHandle>(); } set { this["CapData"] = value; } }
        public Array<DataTable> AdditionalStats { get { return new Array<DataTable>(this[nameof(AdditionalStats)].Address); } }
        public StatInfoSet InspectStats { get { return this[nameof(InspectStats)].As<StatInfoSet>(); } set { this["InspectStats"] = value; } }
        public Object Faction { get { return this[nameof(Faction)]; } set { this[nameof(Faction)] = value; } }
        public Object DefaultDamageType { get { return this[nameof(DefaultDamageType)]; } set { this[nameof(DefaultDamageType)] = value; } }
        public Object AimBone { get { return this[nameof(AimBone)]; } set { this[nameof(AimBone)] = value; } }
        public ImpactDescriptorCharacterSet ImpactDescriptorSet { get { return this[nameof(ImpactDescriptorSet)].As<ImpactDescriptorCharacterSet>(); } set { this["ImpactDescriptorSet"] = value; } }
        public float GlobalFootImpactOffset { get { return this[nameof(GlobalFootImpactOffset)].GetValue<float>(); } set { this[nameof(GlobalFootImpactOffset)].SetValue<float>(value); } }
        public ActiveRagdollInfo ActiveRagdollInfo { get { return this[nameof(ActiveRagdollInfo)].As<ActiveRagdollInfo>(); } set { this["ActiveRagdollInfo"] = value; } }
        public EDecalReceiverType ReceiveDecals { get { return (EDecalReceiverType)this[nameof(ReceiveDecals)].GetValue<int>(); } set { this[nameof(ReceiveDecals)].SetValue<int>((int)value); } }
        public bool NetNotifyHitTarget { get { return this[nameof(NetNotifyHitTarget)].Flag; } set { this[nameof(NetNotifyHitTarget)].Flag = value; } }
        public Array<Object> AggroGroupStack { get { return new Array<Object>(this[nameof(AggroGroupStack)].Address); } }
        public Object SpawnState { get { return this[nameof(SpawnState)]; } set { this[nameof(SpawnState)] = value; } }
        public byte Level { get { return this[nameof(Level)].GetValue<byte>(); } set { this[nameof(Level)].SetValue<byte>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public float HealthNormalized { get { return this[nameof(HealthNormalized)].GetValue<float>(); } set { this[nameof(HealthNormalized)].SetValue<float>(value); } }
        public Object OnTargetChanged { get { return this[nameof(OnTargetChanged)]; } set { this[nameof(OnTargetChanged)] = value; } }
        public Object OnTargeted { get { return this[nameof(OnTargeted)]; } set { this[nameof(OnTargeted)] = value; } }
        public Object OnSpectatorAdded { get { return this[nameof(OnSpectatorAdded)]; } set { this[nameof(OnSpectatorAdded)] = value; } }
        public Object OnSpectatorRemoved { get { return this[nameof(OnSpectatorRemoved)]; } set { this[nameof(OnSpectatorRemoved)] = value; } }
        public Object OnFactionChanged { get { return this[nameof(OnFactionChanged)]; } set { this[nameof(OnFactionChanged)] = value; } }
        public Object OnNotifyHitTarget { get { return this[nameof(OnNotifyHitTarget)]; } set { this[nameof(OnNotifyHitTarget)] = value; } }
        public Object OnNotifyTargetResistedHit { get { return this[nameof(OnNotifyTargetResistedHit)]; } set { this[nameof(OnNotifyTargetResistedHit)] = value; } }
        public Object OnNotifyHealedTarget { get { return this[nameof(OnNotifyHealedTarget)]; } set { this[nameof(OnNotifyHealedTarget)] = value; } }
        public Object OnNotifyHealFailed { get { return this[nameof(OnNotifyHealFailed)]; } set { this[nameof(OnNotifyHealFailed)] = value; } }
        public Object OnNotifyTakeDamage { get { return this[nameof(OnNotifyTakeDamage)]; } set { this[nameof(OnNotifyTakeDamage)] = value; } }
        public Object OnNotifyHealed { get { return this[nameof(OnNotifyHealed)]; } set { this[nameof(OnNotifyHealed)] = value; } }
        public Object OnNotifyEvadeDamage { get { return this[nameof(OnNotifyEvadeDamage)]; } set { this[nameof(OnNotifyEvadeDamage)] = value; } }
        public Object OnNotifyBlockDamage { get { return this[nameof(OnNotifyBlockDamage)]; } set { this[nameof(OnNotifyBlockDamage)] = value; } }
        public Object OnNotifyHealthChanged { get { return this[nameof(OnNotifyHealthChanged)]; } set { this[nameof(OnNotifyHealthChanged)] = value; } }
        public Object OnNotifyHealthRegen { get { return this[nameof(OnNotifyHealthRegen)]; } set { this[nameof(OnNotifyHealthRegen)] = value; } }
        public Object OnPreDead { get { return this[nameof(OnPreDead)]; } set { this[nameof(OnPreDead)] = value; } }
        public Object OnDead { get { return this[nameof(OnDead)]; } set { this[nameof(OnDead)] = value; } }
        public Object OnEvent { get { return this[nameof(OnEvent)]; } set { this[nameof(OnEvent)] = value; } }
        public Object OnViewportFocusEvent { get { return this[nameof(OnViewportFocusEvent)]; } set { this[nameof(OnViewportFocusEvent)] = value; } }
        public bool EnableCharacterOptimizations { get { return this[nameof(EnableCharacterOptimizations)].Flag; } set { this[nameof(EnableCharacterOptimizations)].Flag = value; } }
        public bool EnableAnimOptimizations { get { return this[nameof(EnableAnimOptimizations)].Flag; } set { this[nameof(EnableAnimOptimizations)].Flag = value; } }
        public bool EnableAnimSignificanceOptimizations { get { return this[nameof(EnableAnimSignificanceOptimizations)].Flag; } set { this[nameof(EnableAnimSignificanceOptimizations)].Flag = value; } }
        public float AnimSignificanceScalar { get { return this[nameof(AnimSignificanceScalar)].GetValue<float>(); } set { this[nameof(AnimSignificanceScalar)].SetValue<float>(value); } }
        public bool SuspendClothWhenNotVisible { get { return this[nameof(SuspendClothWhenNotVisible)].Flag; } set { this[nameof(SuspendClothWhenNotVisible)].Flag = value; } }
        public bool UpdateRateDistanceMultiplier { get { return this[nameof(UpdateRateDistanceMultiplier)].Flag; } set { this[nameof(UpdateRateDistanceMultiplier)].Flag = value; } }
        public float ActivationHalfHeightInflation { get { return this[nameof(ActivationHalfHeightInflation)].GetValue<float>(); } set { this[nameof(ActivationHalfHeightInflation)].SetValue<float>(value); } }
        public float ActivationRadiusInflation { get { return this[nameof(ActivationRadiusInflation)].GetValue<float>(); } set { this[nameof(ActivationRadiusInflation)].SetValue<float>(value); } }
        public float MinimumTimeDilation { get { return this[nameof(MinimumTimeDilation)].GetValue<float>(); } set { this[nameof(MinimumTimeDilation)].SetValue<float>(value); } }
        public StateMachineComponent CachedStateMachine { get { return this[nameof(CachedStateMachine)].As<StateMachineComponent>(); } set { this["CachedStateMachine"] = value; } }
        public InventoryComponent CachedInventory { get { return this[nameof(CachedInventory)].As<InventoryComponent>(); } set { this["CachedInventory"] = value; } }
        public Rotator ViewRotation { get { return this[nameof(ViewRotation)].As<Rotator>(); } set { this["ViewRotation"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public CharacterGunfire CharacterTarget { get { return this[nameof(CharacterTarget)].As<CharacterGunfire>(); } set { this["CharacterTarget"] = value; } }
        public Actor AimTarget { get { return this[nameof(AimTarget)].As<Actor>(); } set { this["AimTarget"] = value; } }
        public Actor DeathCauseActor { get { return this[nameof(DeathCauseActor)].As<Actor>(); } set { this["DeathCauseActor"] = value; } }
        public PlayerControllerGunfire OldController { get { return this[nameof(OldController)].As<PlayerControllerGunfire>(); } set { this["OldController"] = value; } }
        public Array<SkeletalMeshComponent> SkeletalMeshes { get { return new Array<SkeletalMeshComponent>(this[nameof(SkeletalMeshes)].Address); } }
        public bool bPauseClothSimulationOnTimeDilation { get { return this[nameof(bPauseClothSimulationOnTimeDilation)].Flag; } set { this[nameof(bPauseClothSimulationOnTimeDilation)].Flag = value; } }
        public bool bResetAnimDynamicsOnResumeClothingSim { get { return this[nameof(bResetAnimDynamicsOnResumeClothingSim)].Flag; } set { this[nameof(bResetAnimDynamicsOnResumeClothingSim)].Flag = value; } }
        public float ClothSimulationPauseThreshold { get { return this[nameof(ClothSimulationPauseThreshold)].GetValue<float>(); } set { this[nameof(ClothSimulationPauseThreshold)].SetValue<float>(value); } }
        public CharacterManager CharacterManager { get { return this[nameof(CharacterManager)].As<CharacterManager>(); } set { this["CharacterManager"] = value; } }
        public Array<Object> ConsumedEntitlements { get { return new Array<Object>(this[nameof(ConsumedEntitlements)].Address); } }
        public void StopWeaponPhantom(PrimitiveComponent Shape) { Invoke(nameof(StopWeaponPhantom), Shape); }
        public void StopAllWeaponPhantoms() { Invoke(nameof(StopAllWeaponPhantoms)); }
        public void StartWeaponPhantom(WeaponPhantomInfo PhantomInfo) { Invoke(nameof(StartWeaponPhantom), PhantomInfo); }
        public void SetWeaponPhantomsSuspended(bool bIsSuspended) { Invoke(nameof(SetWeaponPhantomsSuspended), bIsSuspended); }
        public void SetTarget(Actor Character) { Invoke(nameof(SetTarget), Character); }
        public void SetRagdollFXEnabled(bool bEnabled) { Invoke(nameof(SetRagdollFXEnabled), bEnabled); }
        public void SetOldController(PlayerControllerGunfire OldControllerIn) { Invoke(nameof(SetOldController), OldControllerIn); }
        public void SetIsTargetable(bool Targetable) { Invoke(nameof(SetIsTargetable), Targetable); }
        public void SetHealth(float Health) { Invoke(nameof(SetHealth), Health); }
        public void SetFaction(Object NewFaction) { Invoke(nameof(SetFaction), NewFaction); }
        public void SetCooldown(Object Cooldown, float Time) { Invoke(nameof(SetCooldown), Cooldown, Time); }
        public void SetAllNamesCooldown(float Time) { Invoke(nameof(SetAllNamesCooldown), Time); }
        public void SetAimTarget(Actor InTarget) { Invoke(nameof(SetAimTarget), InTarget); }
        public void ServerSetAimTarget(Actor InTarget) { Invoke(nameof(ServerSetAimTarget), InTarget); }
        public void ScaleStat(Object Stat, float Scalar, bool AutoInitValue) { Invoke(nameof(ScaleStat), Stat, Scalar, AutoInitValue); }
        public void RestoreAggroGroup(Object PreviousAggroGroup, bool bRemoveAll) { Invoke(nameof(RestoreAggroGroup), PreviousAggroGroup, bRemoveAll); }
        public void ResetHealth(bool bResetHitLocations) { Invoke(nameof(ResetHealth), bResetHitLocations); }
        public void ResetCooldown(Object Cooldown) { Invoke(nameof(ResetCooldown), Cooldown); }
        public void ResetClothingSimulation(bool FullReset) { Invoke(nameof(ResetClothingSimulation), FullReset); }
        public void ResetAllNamesCooldown() { Invoke(nameof(ResetAllNamesCooldown)); }
        public void RemoveTag(Object Tag, bool bRemoveAll) { Invoke(nameof(RemoveTag), Tag, bRemoveAll); }
        public void ReinitializeCloth() { Invoke(nameof(ReinitializeCloth)); }
        public bool ReduceCooldown(Object Cooldown, float Time) { return Invoke<bool>(nameof(ReduceCooldown), Cooldown, Time); }
        public void Ragdoll(Object RootBoneName) { Invoke(nameof(Ragdoll), RootBoneName); }
        public void PostComputeStats() { Invoke(nameof(PostComputeStats)); }
        public void OnRep_Target(Actor PreviousTarget) { Invoke(nameof(OnRep_Target), PreviousTarget); }
        public void OnRep_Health() { Invoke(nameof(OnRep_Health)); }
        public void OnRagdollHit(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnRagdollHit), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
        public void OnPostComputeStats() { Invoke(nameof(OnPostComputeStats)); }
        public void OnLocallyControlled() { Invoke(nameof(OnLocallyControlled)); }
        public void OnGameViewportFocusChanged(bool HasFocus) { Invoke(nameof(OnGameViewportFocusChanged), HasFocus); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void OnCharacterStateChanged(Object StateName, Object PreviousStateName) { Invoke(nameof(OnCharacterStateChanged), StateName, PreviousStateName); }
        public void OnCharacterDead(EDeadReason Reason, Actor Cause) { Invoke(nameof(OnCharacterDead), Reason, Cause); }
        public void ModifyStat(Object Stat, float Value) { Invoke(nameof(ModifyStat), Stat, Value); }
        public void MarkActorHit(Object WorldContextObject, PrimitiveComponent Shape, Actor Actor) { Invoke(nameof(MarkActorHit), WorldContextObject, Shape, Actor); }
        public bool IsWounded() { return Invoke<bool>(nameof(IsWounded)); }
        public bool IsSceneCaptureCharacter() { return Invoke<bool>(nameof(IsSceneCaptureCharacter)); }
        public bool IsEditor() { return Invoke<bool>(nameof(IsEditor)); }
        public bool IsCinematicCharacter() { return Invoke<bool>(nameof(IsCinematicCharacter)); }
        public bool IsAlive() { return Invoke<bool>(nameof(IsAlive)); }
        public void HitPause(float Duration, float Dilation, float EaseInTime, float EaseOutTime) { Invoke(nameof(HitPause), Duration, Dilation, EaseInTime, EaseOutTime); }
        public bool HasRecentlyHitActor(Object WorldContextObject, PrimitiveComponent Shape, Actor Actor) { return Invoke<bool>(nameof(HasRecentlyHitActor), WorldContextObject, Shape, Actor); }
        public bool HasAnyOverlappingDamageable(Array<Actor> IgnoredActors, bool bIgnoreDeadActors) { return Invoke<bool>(nameof(HasAnyOverlappingDamageable), IgnoredActors, bIgnoreDeadActors); }
        public Rotator GetViewRotation() { return Invoke<Rotator>(nameof(GetViewRotation)); }
        public Actor GetTarget() { return Invoke<Actor>(nameof(GetTarget)); }
        public StateMachineComponent GetStateMachine() { return Invoke<StateMachineComponent>(nameof(GetStateMachine)); }
        public float GetStat(Object Stat) { return Invoke<float>(nameof(GetStat), Stat); }
        public PlayerControllerGunfire GetOldController() { return Invoke<PlayerControllerGunfire>(nameof(GetOldController)); }
        public bool GetIsTargetable() { return Invoke<bool>(nameof(GetIsTargetable)); }
        public InspectStat GetInspectStatInfo(Object Stat) { return Invoke<InspectStat>(nameof(GetInspectStatInfo), Stat); }
        public InspectInfo GetInspectInfo() { return Invoke<InspectInfo>(nameof(GetInspectInfo)); }
        public float GetHealthPercentage() { return Invoke<float>(nameof(GetHealthPercentage)); }
        public float GetHealthMax() { return Invoke<float>(nameof(GetHealthMax)); }
        public float GetHealth() { return Invoke<float>(nameof(GetHealth)); }
        public void GetEyeViewPointOverride(Vector Location, Rotator Rotation) { Invoke(nameof(GetEyeViewPointOverride), Location, Rotation); }
        public Array<Actor> GetExtraNotifyTargetsForHit(DamageInfo DamageInfo) { return Invoke<Array<Actor>>(nameof(GetExtraNotifyTargetsForHit), DamageInfo); }
        public Object GetDebugInfo(int DebugLevel) { return Invoke<Object>(nameof(GetDebugInfo), DebugLevel); }
        public float GetCooldownTotalDuration(Object Cooldown) { return Invoke<float>(nameof(GetCooldownTotalDuration), Cooldown); }
        public float GetCooldownPct(Object Cooldown) { return Invoke<float>(nameof(GetCooldownPct), Cooldown); }
        public InventoryComponent GetCharacterInventory() { return Invoke<InventoryComponent>(nameof(GetCharacterInventory)); }
        public Actor GetAimTarget() { return Invoke<Actor>(nameof(GetAimTarget)); }
        public Object GetAggroGroup() { return Invoke<Object>(nameof(GetAggroGroup)); }
        public void FilterIncomingDamage(DamageInfo DamageInfo, float DamageOut, bool ShouldApplyDamage) { Invoke(nameof(FilterIncomingDamage), DamageInfo, DamageOut, ShouldApplyDamage); }
        public void EnableClothingSimulation() { Invoke(nameof(EnableClothingSimulation)); }
        public void DisableClothingSimulation() { Invoke(nameof(DisableClothingSimulation)); }
        public void ConsumeEntitlement(Object Entitlement) { Invoke(nameof(ConsumeEntitlement), Entitlement); }
        public void ComputeStats() { Invoke(nameof(ComputeStats)); }
        public void ClientNotifyTargetResistedHit(ReplicatedDamageInfo RepDamageInfo) { Invoke(nameof(ClientNotifyTargetResistedHit), RepDamageInfo); }
        public void ClientNotifyTakeDamage(Actor Source, float Damage, int Power) { Invoke(nameof(ClientNotifyTakeDamage), Source, Damage, Power); }
        public void ClientNotifyHitEvents(Array<ReplicatedDamageInfo> RepDamageInfos) { Invoke(nameof(ClientNotifyHitEvents), RepDamageInfos); }
        public void ClientApplyKnockback(float ImpactHeading, float KnockBackImpulse, float KnockUpImpulse) { Invoke(nameof(ClientApplyKnockback), ImpactHeading, KnockBackImpulse, KnockUpImpulse); }
        public void ClearAggroGroup() { Invoke(nameof(ClearAggroGroup)); }
        public bool CheckTags(Array<Object> TagsToCheck, bool AllOrNothing) { return Invoke<bool>(nameof(CheckTags), TagsToCheck, AllOrNothing); }
        public bool CheckTag(Object Tag) { return Invoke<bool>(nameof(CheckTag), Tag); }
        public bool CheckCooldown(Object Cooldown) { return Invoke<bool>(nameof(CheckCooldown), Cooldown); }
        public bool AreWeaponPhantomsSuspended() { return Invoke<bool>(nameof(AreWeaponPhantomsSuspended)); }
        public bool AreCharacterOptimizationsEnabled() { return Invoke<bool>(nameof(AreCharacterOptimizationsEnabled)); }
        public void ApplyHealthDelta(float Delta) { Invoke(nameof(ApplyHealthDelta), Delta); }
        public void AddTag(Object Tag) { Invoke(nameof(AddTag), Tag); }
        public void AddAggroGroup(Object NewAggroGroup, bool bUniqueOnly) { Invoke(nameof(AddAggroGroup), NewAggroGroup, bUniqueOnly); }
    }
    public class PlayerGunfire : CharacterGunfire
    {
        public PlayerGunfire(nint addr) : base(addr) { }
        public InputStateComponent InputStateComponent { get { return this[nameof(InputStateComponent)].As<InputStateComponent>(); } set { this["InputStateComponent"] = value; } }
        public bool IsPlayerTargeted() { return Invoke<bool>(nameof(IsPlayerTargeted)); }
    }
    public class CheatManagerGunfireBase : CheatManager
    {
        public CheatManagerGunfireBase(nint addr) : base(addr) { }
        public Object OnCheatManagerTogglePressed { get { return this[nameof(OnCheatManagerTogglePressed)]; } set { this[nameof(OnCheatManagerTogglePressed)] = value; } }
        public Object OnAfterCheatExecuted { get { return this[nameof(OnAfterCheatExecuted)]; } set { this[nameof(OnAfterCheatExecuted)] = value; } }
        public Object DefaultCategory { get { return this[nameof(DefaultCategory)]; } set { this[nameof(DefaultCategory)] = value; } }
        public Object PendingSetTriggers { get { return this[nameof(PendingSetTriggers)]; } set { this[nameof(PendingSetTriggers)] = value; } }
        public InputComponent CheatInputComponent { get { return this[nameof(CheatInputComponent)].As<InputComponent>(); } set { this["CheatInputComponent"] = value; } }
        public UIActor SpawnedUIActor { get { return this[nameof(SpawnedUIActor)].As<UIActor>(); } set { this["SpawnedUIActor"] = value; } }
        public FlymodeInputWidget FlyWidget { get { return this[nameof(FlyWidget)].As<FlymodeInputWidget>(); } set { this["FlyWidget"] = value; } }
        public void ToggleFlyCheatWaypointDisplay() { Invoke(nameof(ToggleFlyCheatWaypointDisplay)); }
        public void ToggleFlyCheatDialog() { Invoke(nameof(ToggleFlyCheatDialog)); }
        public void ShowFlyCheatDialog(bool bShowPreview) { Invoke(nameof(ShowFlyCheatDialog), bShowPreview); }
        public void RequestShowGlobalCheatDialog() { Invoke(nameof(RequestShowGlobalCheatDialog)); }
        public void RequestShowCheatDialog(Object SoftDialogClass) { Invoke(nameof(RequestShowCheatDialog), SoftDialogClass); }
        public void RequestCloseCheatManagerMenu() { Invoke(nameof(RequestCloseCheatManagerMenu)); }
        public void OnUseGlobalCheatMenuKey(bool bDown, InputActionKeyMapping KeyMapping) { Invoke(nameof(OnUseGlobalCheatMenuKey), bDown, KeyMapping); }
        public void OnUseAnyKeyDuringCheat() { Invoke(nameof(OnUseAnyKeyDuringCheat)); }
        public void OnShowGlobalCheatMenu() { Invoke(nameof(OnShowGlobalCheatMenu)); }
        public void OnReleaseDebugCommandKey() { Invoke(nameof(OnReleaseDebugCommandKey)); }
        public bool IsThumbstick(Key Key) { return Invoke<bool>(nameof(IsThumbstick), Key); }
        public bool IsGamepadButton(Key Key) { return Invoke<bool>(nameof(IsGamepadButton), Key); }
        public void HideFlyCheatDialog(bool ShowPreview) { Invoke(nameof(HideFlyCheatDialog), ShowPreview); }
        public Object GetKeyDisplayShortName(Key Key) { return Invoke<Object>(nameof(GetKeyDisplayShortName), Key); }
        public Array<CheatActionCategory> GetGlobalCheatCategories() { return Invoke<Array<CheatActionCategory>>(nameof(GetGlobalCheatCategories)); }
        public Array<CheatInputAction> GetFlymodeCheats() { return Invoke<Array<CheatInputAction>>(nameof(GetFlymodeCheats)); }
        public bool GetExecCheatCommandDetails(Object ActionName, CheatCommandDetails DETAILS) { return Invoke<bool>(nameof(GetExecCheatCommandDetails), ActionName, DETAILS); }
        public bool GetConsoleCheat(Object ActionName, CheatInputAction Cheat) { return Invoke<bool>(nameof(GetConsoleCheat), ActionName, Cheat); }
        public bool GetCheatSelectionFromInput(CheatActionCategory Category, CheatInputAction ActionOut) { return Invoke<bool>(nameof(GetCheatSelectionFromInput), Category, ActionOut); }
        public Array<CheatInputAction> GetCheatsByCategory(CheatActionCategory Category) { return Invoke<Array<CheatInputAction>>(nameof(GetCheatsByCategory), Category); }
        public bool GetCheatInputActionByName(Object CheatName, CheatInputAction ActionOut) { return Invoke<bool>(nameof(GetCheatInputActionByName), CheatName, ActionOut); }
        public ECheatExecutionType GetCheatExecutionType(Object CheatName) { return Invoke<ECheatExecutionType>(nameof(GetCheatExecutionType), CheatName); }
        public bool GetCheatCategoryByName(Object CategoryName, CheatActionCategory CategoryOut) { return Invoke<bool>(nameof(GetCheatCategoryByName), CategoryName, CategoryOut); }
        public Array<CheatActionCategory> GetCategorySelectionFromInput() { return Invoke<Array<CheatActionCategory>>(nameof(GetCategorySelectionFromInput)); }
        public Array<CheatInputAction> GetAllCheats() { return Invoke<Array<CheatInputAction>>(nameof(GetAllCheats)); }
        public bool ExecuteCheat(Object ActionName, Array<Object> OptionalParameters) { return Invoke<bool>(nameof(ExecuteCheat), ActionName, OptionalParameters); }
        public bool EnableGlobalCheats() { return Invoke<bool>(nameof(EnableGlobalCheats)); }
        public void EnableCheatLockout(Key Key) { Invoke(nameof(EnableCheatLockout), Key); }
        public void DoExecuteCheat(CheatInputAction CheatAction, Array<Object> OptionalParameters) { Invoke(nameof(DoExecuteCheat), CheatAction, OptionalParameters); }
        public void DisableGlobalCheats() { Invoke(nameof(DisableGlobalCheats)); }
        public void DisableCheatLockout(bool bFlush) { Invoke(nameof(DisableCheatLockout), bFlush); }
        public void BindCheatKeyDetection(bool bEnabled) { Invoke(nameof(BindCheatKeyDetection), bEnabled); }
        public bool AreCheatsEnabled() { return Invoke<bool>(nameof(AreCheatsEnabled)); }
    }
    public class CheatManagerGunfire : CheatManagerGunfireBase
    {
        public CheatManagerGunfire(nint addr) : base(addr) { }
        public Object CheatCommandsByCategory { get { return this[nameof(CheatCommandsByCategory)]; } set { this[nameof(CheatCommandsByCategory)] = value; } }
        public Array<Object> CheatCommandCategories { get { return new Array<Object>(this[nameof(CheatCommandCategories)].Address); } }
        public void UnlockAllTraitsOfType(Object NameOfTypeBP, int StartingLevel) { Invoke(nameof(UnlockAllTraitsOfType), NameOfTypeBP, StartingLevel); }
        public void ToggleSecondaryFlyCamera() { Invoke(nameof(ToggleSecondaryFlyCamera)); }
        public void TogglePrimaryFlyCamera() { Invoke(nameof(TogglePrimaryFlyCamera)); }
        public void ToggleFollowPlayer() { Invoke(nameof(ToggleFollowPlayer)); }
        public void TeleportToHost() { Invoke(nameof(TeleportToHost)); }
        public void TakeScreenShotWithDimensions(int ResX, int ResY) { Invoke(nameof(TakeScreenShotWithDimensions), ResX, ResY); }
        public void TakeScreenShotCurrentResolutionScaled(int ScaleResolution) { Invoke(nameof(TakeScreenShotCurrentResolutionScaled), ScaleResolution); }
        public void SpawnCharacter(Object NameOfCharBP) { Invoke(nameof(SpawnCharacter), NameOfCharBP); }
        public void SetPlayerState(Object NewState) { Invoke(nameof(SetPlayerState), NewState); }
        public void SetPlayerNormalizedHealth(float NewHealth) { Invoke(nameof(SetPlayerNormalizedHealth), NewHealth); }
        public void SetKillRadius(float NewKillRadius) { Invoke(nameof(SetKillRadius), NewKillRadius); }
        public void SetKillNearbyEnemiesRequiresVisibility(bool RequiresVisibility) { Invoke(nameof(SetKillNearbyEnemiesRequiresVisibility), RequiresVisibility); }
        public void SendCommandToConsole(Object Command) { Invoke(nameof(SendCommandToConsole), Command); }
        public void ResyncChallenges() { Invoke(nameof(ResyncChallenges)); }
        public void ResetChallenges() { Invoke(nameof(ResetChallenges)); }
        public void RemoveTrait(Object NameOfBP) { Invoke(nameof(RemoveTrait), NameOfBP); }
        public void RemoveItem(Object NameOfBP, int Quantity) { Invoke(nameof(RemoveItem), NameOfBP, Quantity); }
        public void RemoveAllItems() { Invoke(nameof(RemoveAllItems)); }
        public void KillNearbyEnemies() { Invoke(nameof(KillNearbyEnemies)); }
        public void IncreasePlayerLevel(int NumLevel) { Invoke(nameof(IncreasePlayerLevel), NumLevel); }
        public void GiveItemSilent(Object NameOfBP, int Quantity, int LevelOverride, bool bAutoEquip) { Invoke(nameof(GiveItemSilent), NameOfBP, Quantity, LevelOverride, bAutoEquip); }
        public void GiveItem(Object NameOfBP, int Quantity, int LevelOverride, bool bAutoEquip) { Invoke(nameof(GiveItem), NameOfBP, Quantity, LevelOverride, bAutoEquip); }
        public void GiveAllItems(Object NameOfClassBP, int Quantity, int LevelOverride, bool bOnlyUnique) { Invoke(nameof(GiveAllItems), NameOfClassBP, Quantity, LevelOverride, bOnlyUnique); }
        public Array<Object> GetInputDescriptorForCheat(Object ActionName) { return Invoke<Array<Object>>(nameof(GetInputDescriptorForCheat), ActionName); }
        public Array<Object> GetConsoleCommands(Object Category) { return Invoke<Array<Object>>(nameof(GetConsoleCommands), Category); }
        public Object GetConsoleCommandDescription(Object Command) { return Invoke<Object>(nameof(GetConsoleCommandDescription), Command); }
        public Array<Object> GetConsoleCommandCategories() { return Invoke<Array<Object>>(nameof(GetConsoleCommandCategories)); }
        public void ForceCrash() { Invoke(nameof(ForceCrash)); }
        public void FlushNetDriverReferences() { Invoke(nameof(FlushNetDriverReferences)); }
        public void EnablePrimaryFlyCamera() { Invoke(nameof(EnablePrimaryFlyCamera)); }
        public void DropItem(Object NameOfBP, int Quantity, int LevelOverride, int Stacks) { Invoke(nameof(DropItem), NameOfBP, Quantity, LevelOverride, Stacks); }
        public void DoAction(Object NameOfBP, bool bApplyToTarget) { Invoke(nameof(DoAction), NameOfBP, bApplyToTarget); }
        public void ClearAllDialogs() { Invoke(nameof(ClearAllDialogs)); }
        public void AddTrait(Object NameOfBP, int Level) { Invoke(nameof(AddTrait), NameOfBP, Level); }
    }
    public class DifficultyScalingComponent : ActorComponent
    {
        public DifficultyScalingComponent(nint addr) : base(addr) { }
        public Object OnDifficultyChanged { get { return this[nameof(OnDifficultyChanged)]; } set { this[nameof(OnDifficultyChanged)] = value; } }
        public DataTable NumPlayersScalingTable { get { return this[nameof(NumPlayersScalingTable)].As<DataTable>(); } set { this["NumPlayersScalingTable"] = value; } }
        public DataTable LevelScalingTable { get { return this[nameof(LevelScalingTable)].As<DataTable>(); } set { this["LevelScalingTable"] = value; } }
        public DataTable DifficultyScalingTable { get { return this[nameof(DifficultyScalingTable)].As<DataTable>(); } set { this["DifficultyScalingTable"] = value; } }
        public Array<Object> DifficultyTags { get { return new Array<Object>(this[nameof(DifficultyTags)].Address); } }
        public int NumPlayers { get { return this[nameof(NumPlayers)].GetValue<int>(); } set { this[nameof(NumPlayers)].SetValue<int>(value); } }
        public int LevelOverride { get { return this[nameof(LevelOverride)].GetValue<int>(); } set { this[nameof(LevelOverride)].SetValue<int>(value); } }
        public int Difficulty { get { return this[nameof(Difficulty)].GetValue<int>(); } set { this[nameof(Difficulty)].SetValue<int>(value); } }
        public DataTable OverrideDifficultyScalingTable { get { return this[nameof(OverrideDifficultyScalingTable)].As<DataTable>(); } set { this["OverrideDifficultyScalingTable"] = value; } }
        public void SetNumPlayers(int NumPlayers) { Invoke(nameof(SetNumPlayers), NumPlayers); }
        public void SetLevelOverride(int NewLevel) { Invoke(nameof(SetLevelOverride), NewLevel); }
        public void SetDifficultyScalingTableOverride(DataTable Table) { Invoke(nameof(SetDifficultyScalingTableOverride), Table); }
        public void SetDifficulty(int NewDifficulty) { Invoke(nameof(SetDifficulty), NewDifficulty); }
        public void RemoveExternalStatModifier(Object Stat) { Invoke(nameof(RemoveExternalStatModifier), Stat); }
        public void Invalidate() { Invoke(nameof(Invalidate)); }
        public float GetSpawnQuantityScalar() { return Invoke<float>(nameof(GetSpawnQuantityScalar)); }
        public float GetPlayerStatusDamageScalar() { return Invoke<float>(nameof(GetPlayerStatusDamageScalar)); }
        public float GetPlayerBlightBuildUpScalar() { return Invoke<float>(nameof(GetPlayerBlightBuildUpScalar)); }
        public int GetNumPlayers() { return Invoke<int>(nameof(GetNumPlayers)); }
        public int GetLevelForActor(Actor Actor) { return Invoke<int>(nameof(GetLevelForActor), Actor); }
        public int GetLevel(Actor Actor) { return Invoke<int>(nameof(GetLevel), Actor); }
        public int GetItemLevelForActor(Actor Actor) { return Invoke<int>(nameof(GetItemLevelForActor), Actor); }
        public int GetItemLevel(Actor Actor) { return Invoke<int>(nameof(GetItemLevel), Actor); }
        public float GetExperienceScalar(Actor Actor) { return Invoke<float>(nameof(GetExperienceScalar), Actor); }
        public float GetEnemyHealthScalar(Actor Actor, Object Prefix) { return Invoke<float>(nameof(GetEnemyHealthScalar), Actor, Prefix); }
        public float GetEnemyDamageScalar(Actor Actor, Object Prefix) { return Invoke<float>(nameof(GetEnemyDamageScalar), Actor, Prefix); }
        public DifficultyScalingComponent GetDifficultyScalingComponent(Object WorldContextObject) { return Invoke<DifficultyScalingComponent>(nameof(GetDifficultyScalingComponent), WorldContextObject); }
        public int GetDifficulty() { return Invoke<int>(nameof(GetDifficulty)); }
        public float GetCurrencyScalar(Actor Actor) { return Invoke<float>(nameof(GetCurrencyScalar), Actor); }
        public void ComputeStats() { Invoke(nameof(ComputeStats)); }
        public void ClearExternalStatModifiers() { Invoke(nameof(ClearExternalStatModifiers)); }
        public void ClearDifficultyScalingTableOverride() { Invoke(nameof(ClearDifficultyScalingTableOverride)); }
        public void AddExternalStatModifier(Object Stat, float Value) { Invoke(nameof(AddExternalStatModifier), Stat, Value); }
    }
    public class GameInstanceGunfire : GameInstance
    {
        public GameInstanceGunfire(nint addr) : base(addr) { }
        public Object MainMenuLevel { get { return this[nameof(MainMenuLevel)]; } set { this[nameof(MainMenuLevel)] = value; } }
        public Object AssetCacheClass { get { return this[nameof(AssetCacheClass)]; } set { this[nameof(AssetCacheClass)] = value; } }
        public Object OnFadeIntoLevelCompletedEvent { get { return this[nameof(OnFadeIntoLevelCompletedEvent)]; } set { this[nameof(OnFadeIntoLevelCompletedEvent)] = value; } }
        public Object OnLocalPlayerPawnControlledEvent { get { return this[nameof(OnLocalPlayerPawnControlledEvent)]; } set { this[nameof(OnLocalPlayerPawnControlledEvent)] = value; } }
        public Object OnGameInstanceStartedEvent { get { return this[nameof(OnGameInstanceStartedEvent)]; } set { this[nameof(OnGameInstanceStartedEvent)] = value; } }
        public Object OnGameInstanceShutdownEvent { get { return this[nameof(OnGameInstanceShutdownEvent)]; } set { this[nameof(OnGameInstanceShutdownEvent)] = value; } }
        public Object OnGameInstanceStart { get { return this[nameof(OnGameInstanceStart)]; } set { this[nameof(OnGameInstanceStart)] = value; } }
        public Object EventOnPreQuitToMainMenu { get { return this[nameof(EventOnPreQuitToMainMenu)]; } set { this[nameof(EventOnPreQuitToMainMenu)] = value; } }
        public Object OnSaveStarted { get { return this[nameof(OnSaveStarted)]; } set { this[nameof(OnSaveStarted)] = value; } }
        public Object OnSaveFinished { get { return this[nameof(OnSaveFinished)]; } set { this[nameof(OnSaveFinished)] = value; } }
        public Object NotificationOkDialog { get { return this[nameof(NotificationOkDialog)]; } set { this[nameof(NotificationOkDialog)] = value; } }
        public Pawn LocalPlayerPawn { get { return this[nameof(LocalPlayerPawn)].As<Pawn>(); } set { this["LocalPlayerPawn"] = value; } }
        public AmbientAudioManager AmbientAudioManager { get { return this[nameof(AmbientAudioManager)].As<AmbientAudioManager>(); } set { this["AmbientAudioManager"] = value; } }
        public PathSharingManager PathSharingManager { get { return this[nameof(PathSharingManager)].As<PathSharingManager>(); } set { this["PathSharingManager"] = value; } }
        public void QuitToMainMenu() { Invoke(nameof(QuitToMainMenu)); }
        public void OnShutdown() { Invoke(nameof(OnShutdown)); }
        public void OnPreQuitToMainMenu() { Invoke(nameof(OnPreQuitToMainMenu)); }
        public bool IsSaving() { return Invoke<bool>(nameof(IsSaving)); }
        public bool IsInMainMenuLevel() { return Invoke<bool>(nameof(IsInMainMenuLevel)); }
        public bool IsInGameplay() { return Invoke<bool>(nameof(IsInGameplay)); }
        public bool ImmediatelyFadeScreen(bool bIsFaded, LinearColor FadeColor, bool bFadeAudio) { return Invoke<bool>(nameof(ImmediatelyFadeScreen), bIsFaded, FadeColor, bFadeAudio); }
        public Pawn GetLocalPlayerPawn(Object WorldContextObject) { return Invoke<Pawn>(nameof(GetLocalPlayerPawn), WorldContextObject); }
        public GameInstanceGunfire GetInstance(Object pWorldContextObject) { return Invoke<GameInstanceGunfire>(nameof(GetInstance), pWorldContextObject); }
        public AssetCache GetAssetCache() { return Invoke<AssetCache>(nameof(GetAssetCache)); }
        public bool FadeScreen(EFadeDirection FadeDirection, float FadeTime, LinearColor FadeColor, bool bFadeAudio, bool bReset) { return Invoke<bool>(nameof(FadeScreen), FadeDirection, FadeTime, FadeColor, bFadeAudio, bReset); }
        public bool CanSave() { return Invoke<bool>(nameof(CanSave)); }
    }
    public class GameModeGunfire : GameMode
    {
        public GameModeGunfire(nint addr) : base(addr) { }
        public Object OnNotifyHit { get { return this[nameof(OnNotifyHit)]; } set { this[nameof(OnNotifyHit)] = value; } }
        public Object OnNotifyDead { get { return this[nameof(OnNotifyDead)]; } set { this[nameof(OnNotifyDead)] = value; } }
        public Object OnGameShutdown { get { return this[nameof(OnGameShutdown)]; } set { this[nameof(OnGameShutdown)] = value; } }
        public Object GameRulesClass { get { return this[nameof(GameRulesClass)]; } set { this[nameof(GameRulesClass)] = value; } }
        public Array<Object> AssetReferences { get { return new Array<Object>(this[nameof(AssetReferences)].Address); } }
        public GameRules GameRules { get { return this[nameof(GameRules)].As<GameRules>(); } set { this["GameRules"] = value; } }
        public void PostApplyDamage(DamageInfo DamageInfo) { Invoke(nameof(PostApplyDamage), DamageInfo); }
        public void OnPlayerDied(PlayerController Player) { Invoke(nameof(OnPlayerDied), Player); }
        public void ApplyDamage(Actor CauseActor, Actor TargetActor, float Damage, float DamageMod, float DamageScalar, Object DamageType, Object ImpactDirection) { Invoke(nameof(ApplyDamage), CauseActor, TargetActor, Damage, DamageMod, DamageScalar, DamageType, ImpactDirection); }
    }
    public class GameStateGunfire : GameState
    {
        public GameStateGunfire(nint addr) : base(addr) { }
        public Object OnPlayerJoined { get { return this[nameof(OnPlayerJoined)]; } set { this[nameof(OnPlayerJoined)] = value; } }
        public Object OnPlayerLeft { get { return this[nameof(OnPlayerLeft)]; } set { this[nameof(OnPlayerLeft)] = value; } }
        public TimeDilationManager TimeDilationManager { get { return this[nameof(TimeDilationManager)].As<TimeDilationManager>(); } set { this["TimeDilationManager"] = value; } }
        public SequencerManager SequencerManager { get { return this[nameof(SequencerManager)].As<SequencerManager>(); } set { this["SequencerManager"] = value; } }
        public Array<PlayerState> JoinQueue { get { return new Array<PlayerState>(this[nameof(JoinQueue)].Address); } }
        public Array<PlayerState> Players { get { return new Array<PlayerState>(this[nameof(Players)].Address); } }
        public void StartMatch() { Invoke(nameof(StartMatch)); }
        public void RemoveGameStateInitializedListener(Object Event) { Invoke(nameof(RemoveGameStateInitializedListener), Event); }
        public GameStateGunfire GetGunfireGameState(Object WorldContextObject) { return Invoke<GameStateGunfire>(nameof(GetGunfireGameState), WorldContextObject); }
        public void AddGameStateInitializedListener(Object Event) { Invoke(nameof(AddGameStateInitializedListener), Event); }
    }
    public class PlayerControllerGunfire : PlayerController
    {
        public PlayerControllerGunfire(nint addr) : base(addr) { }
        public Object OnStartedVisualLogger { get { return this[nameof(OnStartedVisualLogger)]; } set { this[nameof(OnStartedVisualLogger)] = value; } }
        public InputMappingContext InputMappingContext { get { return this[nameof(InputMappingContext)].As<InputMappingContext>(); } set { this["InputMappingContext"] = value; } }
        public InputMappingContext RuntimeManagedMappingContext { get { return this[nameof(RuntimeManagedMappingContext)].As<InputMappingContext>(); } set { this["RuntimeManagedMappingContext"] = value; } }
        public Object OnSpectateTargetChanged { get { return this[nameof(OnSpectateTargetChanged)]; } set { this[nameof(OnSpectateTargetChanged)] = value; } }
        public Actor SpectateActor { get { return this[nameof(SpectateActor)].As<Actor>(); } set { this["SpectateActor"] = value; } }
        public PlayStateComponent PlayState { get { return this[nameof(PlayState)].As<PlayStateComponent>(); } set { this["PlayState"] = value; } }
        public void SpectateTarget(Actor Actor) { Invoke(nameof(SpectateTarget), Actor); }
        public void SpectatePrevPlayer() { Invoke(nameof(SpectatePrevPlayer)); }
        public void SpectateNextPlayer() { Invoke(nameof(SpectateNextPlayer)); }
        public void SetGameInputEnabled(bool bEnabled, bool bFlushInput) { Invoke(nameof(SetGameInputEnabled), bEnabled, bFlushInput); }
        public void SetAdditionalNetRelevanceTarget(bool bAdd, Actor Actor, Rotator Rot) { Invoke(nameof(SetAdditionalNetRelevanceTarget), bAdd, Actor, Rot); }
        public void ServerUpdateEntitlement(int PlayerId, SoftObjectPath Entitlement, bool Grant) { Invoke(nameof(ServerUpdateEntitlement), PlayerId, Entitlement, Grant); }
        public void ServerUnlockAllTraitsOfType(Object NameOfBP, int StartingLevel) { Invoke(nameof(ServerUnlockAllTraitsOfType), NameOfBP, StartingLevel); }
        public void ServerSpectateTarget(Actor Actor) { Invoke(nameof(ServerSpectateTarget), Actor); }
        public void ServerSpawnCharacter(Object ClassToSpawn, Transform SpawnTransform, Actor SpawnOwner) { Invoke(nameof(ServerSpawnCharacter), ClassToSpawn, SpawnTransform, SpawnOwner); }
        public void ServerSetPlayerNormalizedHealth(float Health) { Invoke(nameof(ServerSetPlayerNormalizedHealth), Health); }
        public void ServerRequestTime(ushort ClientTime) { Invoke(nameof(ServerRequestTime), ClientTime); }
        public void ServerRemoveTrait(Object NameOfBP) { Invoke(nameof(ServerRemoveTrait), NameOfBP); }
        public void ServerDropItem(Object NameOfBP, int Quantity, int LevelOverride, int Stacks) { Invoke(nameof(ServerDropItem), NameOfBP, Quantity, LevelOverride, Stacks); }
        public void ServerDoConsoleCommand(Object Command) { Invoke(nameof(ServerDoConsoleCommand), Command); }
        public void ServerDoAction(Object NameOfBP, bool bApplyToTarget) { Invoke(nameof(ServerDoAction), NameOfBP, bApplyToTarget); }
        public void ServerBeginSpectate() { Invoke(nameof(ServerBeginSpectate)); }
        public void ServerAddTrait(Object NameOfBP, int Level) { Invoke(nameof(ServerAddTrait), NameOfBP, Level); }
        public void RestoreSpectateViewTarget() { Invoke(nameof(RestoreSpectateViewTarget)); }
        public bool RestartPlayer() { return Invoke<bool>(nameof(RestartPlayer)); }
        public void ResetPauseRefCount() { Invoke(nameof(ResetPauseRefCount)); }
        public void RemoveCinematicListener(Object Event) { Invoke(nameof(RemoveCinematicListener), Event); }
        public void QuitGame() { Invoke(nameof(QuitGame)); }
        public void ProposeToSkipCutscene(Object InSequence) { Invoke(nameof(ProposeToSkipCutscene), InSequence); }
        public void OnRep_SpectateTarget() { Invoke(nameof(OnRep_SpectateTarget)); }
        public void OnBeginPlaying() { Invoke(nameof(OnBeginPlaying)); }
        public bool IsSynchronizingData() { return Invoke<bool>(nameof(IsSynchronizingData)); }
        public bool IsSpectating() { return Invoke<bool>(nameof(IsSpectating)); }
        public bool IsJoiningAsSpectator() { return Invoke<bool>(nameof(IsJoiningAsSpectator)); }
        public bool IsJoining() { return Invoke<bool>(nameof(IsJoining)); }
        public bool IsInCinematic() { return Invoke<bool>(nameof(IsInCinematic)); }
        public bool IsGameInputEnabled() { return Invoke<bool>(nameof(IsGameInputEnabled)); }
        public bool IsFlaggedAsSpectator() { return Invoke<bool>(nameof(IsFlaggedAsSpectator)); }
        public bool IsDisconnected() { return Invoke<bool>(nameof(IsDisconnected)); }
        public bool HasJoined() { return Invoke<bool>(nameof(HasJoined)); }
        public Actor GetSpectateTarget() { return Invoke<Actor>(nameof(GetSpectateTarget)); }
        public Pawn GetRelevantViewTarget() { return Invoke<Pawn>(nameof(GetRelevantViewTarget)); }
        public Pawn GetRelevantPawn() { return Invoke<Pawn>(nameof(GetRelevantPawn)); }
        public Object GetPlayerIdentifier() { return Invoke<Object>(nameof(GetPlayerIdentifier)); }
        public int GetNumPotentialSpectateTargets() { return Invoke<int>(nameof(GetNumPotentialSpectateTargets)); }
        public EPlayerJoinState GetJoinState() { return Invoke<EPlayerJoinState>(nameof(GetJoinState)); }
        public PlayerStateGunfire GetGunfirePlayerState() { return Invoke<PlayerStateGunfire>(nameof(GetGunfirePlayerState)); }
        public void ClientTimeReply(ushort ServerTime, ushort ClientTime) { Invoke(nameof(ClientTimeReply), ServerTime, ClientTime); }
        public bool CanSpectate() { return Invoke<bool>(nameof(CanSpectate)); }
        public void BeginSpectate() { Invoke(nameof(BeginSpectate)); }
        public void BeginPlaying() { Invoke(nameof(BeginPlaying)); }
        public void AddCinematicListener(Object Event) { Invoke(nameof(AddCinematicListener), Event); }
    }
    public class PlayStateEffect : Object
    {
        public PlayStateEffect(nint addr) : base(addr) { }
        public bool TickTransition(PlayStateComponent Component, float DeltaSeconds) { return Invoke<bool>(nameof(TickTransition), Component, DeltaSeconds); }
        public Object GetEditorLabel() { return Invoke<Object>(nameof(GetEditorLabel)); }
        public void Apply(PlayStateComponent Component, PlayStateEffect Previous) { Invoke(nameof(Apply), Component, Previous); }
    }
    public class ShowEquipmentAbstractDecorator : ActorStateDecorator
    {
        public ShowEquipmentAbstractDecorator(nint addr) : base(addr) { }
        public bool SetOnEnter { get { return this[nameof(SetOnEnter)].Flag; } set { this[nameof(SetOnEnter)].Flag = value; } }
        public bool SetOnExit { get { return this[nameof(SetOnExit)].Flag; } set { this[nameof(SetOnExit)].Flag = value; } }
        public bool RestoreOnExit { get { return this[nameof(RestoreOnExit)].Flag; } set { this[nameof(RestoreOnExit)].Flag = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class GunfireAnalogCursorManager : ActorComponent
    {
        public GunfireAnalogCursorManager(nint addr) : base(addr) { }
        public void OnControllerConnectionChanged(bool bConnected) { Invoke(nameof(OnControllerConnectionChanged), bConnected); }
        public bool GetAnalogCursorActiveState() { return Invoke<bool>(nameof(GetAnalogCursorActiveState)); }
    }
    public class UIHud : HUD
    {
        public UIHud(nint addr) : base(addr) { }
        public bool DisablePlayerInput { get { return this[nameof(DisablePlayerInput)].Flag; } set { this[nameof(DisablePlayerInput)].Flag = value; } }
        public Object OnHudEventDelegate { get { return this[nameof(OnHudEventDelegate)]; } set { this[nameof(OnHudEventDelegate)] = value; } }
        public Object OnHudDialogAdded { get { return this[nameof(OnHudDialogAdded)]; } set { this[nameof(OnHudDialogAdded)] = value; } }
        public Object OnHudDialogRemoved { get { return this[nameof(OnHudDialogRemoved)]; } set { this[nameof(OnHudDialogRemoved)] = value; } }
        public bool bAutoHideUMGWidgetsOnHidden { get { return this[nameof(bAutoHideUMGWidgetsOnHidden)].Flag; } set { this[nameof(bAutoHideUMGWidgetsOnHidden)].Flag = value; } }
        public bool bFixedCameraFoV { get { return this[nameof(bFixedCameraFoV)].Flag; } set { this[nameof(bFixedCameraFoV)].Flag = value; } }
        public Pawn PlayerPawn { get { return this[nameof(PlayerPawn)].As<Pawn>(); } set { this["PlayerPawn"] = value; } }
        public Array<UIActor> UIActorStack { get { return new Array<UIActor>(this[nameof(UIActorStack)].Address); } }
        public void UnloadLargeIcons() { Invoke(nameof(UnloadLargeIcons)); }
        public void SoftEndDialog(Object Result, Object EndingDialogContext, float ForceKillTime) { Invoke(nameof(SoftEndDialog), Result, EndingDialogContext, ForceKillTime); }
        public void SetVisibility(bool bVisible) { Invoke(nameof(SetVisibility), bVisible); }
        public UIActor SetDialog(Object DialogBP, EDialogLocation Location, Object Text, Object Caption) { return Invoke<UIActor>(nameof(SetDialog), DialogBP, Location, Text, Caption); }
        public void PushUIActor(UIActor UIActor) { Invoke(nameof(PushUIActor), UIActor); }
        public UIActor PopUIActor(UIActor DialogToPop) { return Invoke<UIActor>(nameof(PopUIActor), DialogToPop); }
        public void PawnChanged(Pawn Pawn) { Invoke(nameof(PawnChanged), Pawn); }
        public void OnSetVisbility(bool bIsVisible) { Invoke(nameof(OnSetVisbility), bIsVisible); }
        public void OnHudEvent(Object EventID, Object Context) { Invoke(nameof(OnHudEvent), EventID, Context); }
        public void OnDialogEnd(UIActor Dialog) { Invoke(nameof(OnDialogEnd), Dialog); }
        public void OnDialogBegin(UIActor Dialog) { Invoke(nameof(OnDialogBegin), Dialog); }
        public void LoadLargeIcons(Object OnIconsLoaded, LatentActionInfo LatentInfo) { Invoke(nameof(LoadLargeIcons), OnIconsLoaded, LatentInfo); }
        public bool IsVisible() { return Invoke<bool>(nameof(IsVisible)); }
        public void InsertUIActor(UIActor UIActor, int StackIndex) { Invoke(nameof(InsertUIActor), UIActor, StackIndex); }
        public UIActor GetUIActorFromContextObject(Object DialogContext) { return Invoke<UIActor>(nameof(GetUIActorFromContextObject), DialogContext); }
        public UIActor GetTopInputActor() { return Invoke<UIActor>(nameof(GetTopInputActor)); }
        public UIActor GetDialog(Object DialogBP, bool AllowChildClasses) { return Invoke<UIActor>(nameof(GetDialog), DialogBP, AllowChildClasses); }
        public UIActor GetCurrentDialog() { return Invoke<UIActor>(nameof(GetCurrentDialog)); }
        public Pawn GetControllingPawn() { return Invoke<Pawn>(nameof(GetControllingPawn)); }
        public void EndDialog(Object Result, Object EndingDialogContext) { Invoke(nameof(EndDialog), Result, EndingDialogContext); }
        public void EndCurrentDialog(Object Result) { Invoke(nameof(EndCurrentDialog), Result); }
        public void EndAllDialogs() { Invoke(nameof(EndAllDialogs)); }
        public UIActor BeginDialog(Object DialogBP, EDialogLocation Location, Object Text, Object Caption, EDialogBeginMethod Method) { return Invoke<UIActor>(nameof(BeginDialog), DialogBP, Location, Text, Caption, Method); }
        public void AddUIToActorStack(UIActor UIActor) { Invoke(nameof(AddUIToActorStack), UIActor); }
    }
    public class UIActor : Actor
    {
        public UIActor(nint addr) : base(addr) { }
        public UIHud HUD { get { return this[nameof(HUD)].As<UIHud>(); } set { this["HUD"] = value; } }
        public Object WidgetClass { get { return this[nameof(WidgetClass)]; } set { this[nameof(WidgetClass)] = value; } }
        public UserWidget WidgetInstance { get { return this[nameof(WidgetInstance)].As<UserWidget>(); } set { this["WidgetInstance"] = value; } }
        public bool bHideParent { get { return this[nameof(bHideParent)].Flag; } set { this[nameof(bHideParent)].Flag = value; } }
        public int ViewPortZ { get { return this[nameof(ViewPortZ)].GetValue<int>(); } set { this[nameof(ViewPortZ)].SetValue<int>(value); } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Caption { get { return this[nameof(Caption)]; } set { this[nameof(Caption)] = value; } }
        public float DistanceFromCamera { get { return this[nameof(DistanceFromCamera)].GetValue<float>(); } set { this[nameof(DistanceFromCamera)].SetValue<float>(value); } }
        public float ZOffsetFromCamera { get { return this[nameof(ZOffsetFromCamera)].GetValue<float>(); } set { this[nameof(ZOffsetFromCamera)].SetValue<float>(value); } }
        public float DialogLinger { get { return this[nameof(DialogLinger)].GetValue<float>(); } set { this[nameof(DialogLinger)].SetValue<float>(value); } }
        public bool bCaptureInput { get { return this[nameof(bCaptureInput)].Flag; } set { this[nameof(bCaptureInput)].Flag = value; } }
        public bool bPassInputToPlayer { get { return this[nameof(bPassInputToPlayer)].Flag; } set { this[nameof(bPassInputToPlayer)].Flag = value; } }
        public bool bAlwaysOnTop { get { return this[nameof(bAlwaysOnTop)].Flag; } set { this[nameof(bAlwaysOnTop)].Flag = value; } }
        public bool bInvulnerable { get { return this[nameof(bInvulnerable)].Flag; } set { this[nameof(bInvulnerable)].Flag = value; } }
        public bool bRemoveOnHidden { get { return this[nameof(bRemoveOnHidden)].Flag; } set { this[nameof(bRemoveOnHidden)].Flag = value; } }
        public bool bRemoveWhenNotOnTop { get { return this[nameof(bRemoveWhenNotOnTop)].Flag; } set { this[nameof(bRemoveWhenNotOnTop)].Flag = value; } }
        public bool bFixedCameraFoV { get { return this[nameof(bFixedCameraFoV)].Flag; } set { this[nameof(bFixedCameraFoV)].Flag = value; } }
        public Object OnDialogResult { get { return this[nameof(OnDialogResult)]; } set { this[nameof(OnDialogResult)] = value; } }
        public void SetWidgetText(Object Widget, Object WidgetText) { Invoke(nameof(SetWidgetText), Widget, WidgetText); }
        public void RefreshDialogState() { Invoke(nameof(RefreshDialogState)); }
        public void OnSoftEndDialog(float Duration) { Invoke(nameof(OnSoftEndDialog), Duration); }
        public void OnResolutionChanged() { Invoke(nameof(OnResolutionChanged)); }
        public void OnPushDialog(UIActor Next) { Invoke(nameof(OnPushDialog), Next); }
        public void OnPopDialog(UIActor Prev) { Invoke(nameof(OnPopDialog), Prev); }
        public void OnEndDialog() { Invoke(nameof(OnEndDialog)); }
        public void OnDialogLayer(int Depth) { Invoke(nameof(OnDialogLayer), Depth); }
        public void OnBeginDialog() { Invoke(nameof(OnBeginDialog)); }
        public void Focus() { Invoke(nameof(Focus)); }
        public void CreateInstance() { Invoke(nameof(CreateInstance)); }
    }
    public class ValidationEntryBase : Object
    {
        public ValidationEntryBase(nint addr) : base(addr) { }
        public Object Comment { get { return this[nameof(Comment)]; } set { this[nameof(Comment)] = value; } }
    }
    public class ValidationTableEntry : ValidationEntryBase
    {
        public ValidationTableEntry(nint addr) : base(addr) { }
    }
    public class ActorCustomizationEffect : ActorCustomizationBase
    {
        public ActorCustomizationEffect(nint addr) : base(addr) { }
    }
    public class BlueprintStateDecorator : ActorStateDecorator
    {
        public BlueprintStateDecorator(nint addr) : base(addr) { }
        public bool OnValidate(StateMachineComponent StateMachine, Actor Actor) { return Invoke<bool>(nameof(OnValidate), StateMachine, Actor); }
        public void OnExit(StateMachineComponent StateMachine, ActorState NextState) { Invoke(nameof(OnExit), StateMachine, NextState); }
        public void OnEnter(StateMachineComponent StateMachine, ActorState PrevState) { Invoke(nameof(OnEnter), StateMachine, PrevState); }
    }
    public class AIDataInterface : Interface
    {
        public AIDataInterface(nint addr) : base(addr) { }
    }
    public class CombatClass : Object
    {
        public CombatClass(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object ComputedStats { get { return this[nameof(ComputedStats)]; } set { this[nameof(ComputedStats)] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public uint Weight { get { return this[nameof(Weight)].GetValue<uint>(); } set { this[nameof(Weight)].SetValue<uint>(value); } }
        public uint DefaultPressure { get { return this[nameof(DefaultPressure)].GetValue<uint>(); } set { this[nameof(DefaultPressure)].SetValue<uint>(value); } }
        public float AttackLockoutTime { get { return this[nameof(AttackLockoutTime)].GetValue<float>(); } set { this[nameof(AttackLockoutTime)].SetValue<float>(value); } }
        public bool bAlertOnSight { get { return this[nameof(bAlertOnSight)].Flag; } set { this[nameof(bAlertOnSight)].Flag = value; } }
        public float ResidualPressureDecay { get { return this[nameof(ResidualPressureDecay)].GetValue<float>(); } set { this[nameof(ResidualPressureDecay)].SetValue<float>(value); } }
        public uint MaxWeight { get { return this[nameof(MaxWeight)].GetValue<uint>(); } set { this[nameof(MaxWeight)].SetValue<uint>(value); } }
        public uint MaxMeleePressure { get { return this[nameof(MaxMeleePressure)].GetValue<uint>(); } set { this[nameof(MaxMeleePressure)].SetValue<uint>(value); } }
        public uint MaxRangedPressure { get { return this[nameof(MaxRangedPressure)].GetValue<uint>(); } set { this[nameof(MaxRangedPressure)].SetValue<uint>(value); } }
        public ECombatSize Size { get { return (ECombatSize)this[nameof(Size)].GetValue<int>(); } set { this[nameof(Size)].SetValue<int>((int)value); } }
        public float MinInsiderTime { get { return this[nameof(MinInsiderTime)].GetValue<float>(); } set { this[nameof(MinInsiderTime)].SetValue<float>(value); } }
        public float MaxInsiderTime { get { return this[nameof(MaxInsiderTime)].GetValue<float>(); } set { this[nameof(MaxInsiderTime)].SetValue<float>(value); } }
        public float MaxOutsiderRange { get { return this[nameof(MaxOutsiderRange)].GetValue<float>(); } set { this[nameof(MaxOutsiderRange)].SetValue<float>(value); } }
    }
    public class ChallengeList : Object
    {
        public ChallengeList(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Array<Challenge> Challenges { get { return new Array<Challenge>(this[nameof(Challenges)].Address); } }
    }
    public class ChallengeObjectiveBase : Object
    {
        public ChallengeObjectiveBase(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Challenge Challenge { get { return this[nameof(Challenge)].As<Challenge>(); } set { this["Challenge"] = value; } }
        public ChallengeManager ChallengeManager { get { return this[nameof(ChallengeManager)].As<ChallengeManager>(); } set { this["ChallengeManager"] = value; } }
        public int RankIdx { get { return this[nameof(RankIdx)].GetValue<int>(); } set { this[nameof(RankIdx)].SetValue<int>(value); } }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
        public EObjectiveType GetObjectiveType() { return Invoke<EObjectiveType>(nameof(GetObjectiveType)); }
        public int GetObjectiveCount() { return Invoke<int>(nameof(GetObjectiveCount)); }
        public Object GetDisplayLabel(Object WorldContextObject) { return Invoke<Object>(nameof(GetDisplayLabel), WorldContextObject); }
        public bool CanIncrement() { return Invoke<bool>(nameof(CanIncrement)); }
    }
    public class ChallengeObjective : ChallengeObjectiveBase
    {
        public ChallengeObjective(nint addr) : base(addr) { }
        public EChallengeObjectType Type { get { return (EChallengeObjectType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Array<Object> RequiredTags { get { return new Array<Object>(this[nameof(RequiredTags)].Address); } }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
        public Object AchievementId { get { return this[nameof(AchievementId)]; } set { this[nameof(AchievementId)] = value; } }
        public EChallengeAuthorityType Authority { get { return (EChallengeAuthorityType)this[nameof(Authority)].GetValue<int>(); } set { this[nameof(Authority)].SetValue<int>((int)value); } }
    }
    public class CinematicInterface : Interface
    {
        public CinematicInterface(nint addr) : base(addr) { }
        public void OnSequencerPossessionEvent(bool IsPossessed) { Invoke(nameof(OnSequencerPossessionEvent), IsPossessed); }
    }
    public class ClimbingSettings : Object
    {
        public ClimbingSettings(nint addr) : base(addr) { }
        public bool bGenerateClimbablePoints { get { return this[nameof(bGenerateClimbablePoints)].Flag; } set { this[nameof(bGenerateClimbablePoints)].Flag = value; } }
        public bool bOnlyGenerateInClimbModifiers { get { return this[nameof(bOnlyGenerateInClimbModifiers)].Flag; } set { this[nameof(bOnlyGenerateInClimbModifiers)].Flag = value; } }
        public Array<Object> SurfaceTags { get { return new Array<Object>(this[nameof(SurfaceTags)].Address); } }
        public float MinimumFallDistance { get { return this[nameof(MinimumFallDistance)].GetValue<float>(); } set { this[nameof(MinimumFallDistance)].SetValue<float>(value); } }
        public float MinimumCharacterRadius { get { return this[nameof(MinimumCharacterRadius)].GetValue<float>(); } set { this[nameof(MinimumCharacterRadius)].SetValue<float>(value); } }
        public float SweepHeightOffset { get { return this[nameof(SweepHeightOffset)].GetValue<float>(); } set { this[nameof(SweepHeightOffset)].SetValue<float>(value); } }
        public float SweepForwardOffset { get { return this[nameof(SweepForwardOffset)].GetValue<float>(); } set { this[nameof(SweepForwardOffset)].SetValue<float>(value); } }
        public float MinimumDistanceFromClimbableSurface { get { return this[nameof(MinimumDistanceFromClimbableSurface)].GetValue<float>(); } set { this[nameof(MinimumDistanceFromClimbableSurface)].SetValue<float>(value); } }
        public float StationaryPlatformRadius { get { return this[nameof(StationaryPlatformRadius)].GetValue<float>(); } set { this[nameof(StationaryPlatformRadius)].SetValue<float>(value); } }
        public Array<Object> IgnoreVaultSettings { get { return new Array<Object>(this[nameof(IgnoreVaultSettings)].Address); } }
        public bool bGenerateContiguousLedges { get { return this[nameof(bGenerateContiguousLedges)].Flag; } set { this[nameof(bGenerateContiguousLedges)].Flag = value; } }
        public float LedgeMatchingDistanceThreshold { get { return this[nameof(LedgeMatchingDistanceThreshold)].GetValue<float>(); } set { this[nameof(LedgeMatchingDistanceThreshold)].SetValue<float>(value); } }
        public float LedgeMatchingCosineThresh { get { return this[nameof(LedgeMatchingCosineThresh)].GetValue<float>(); } set { this[nameof(LedgeMatchingCosineThresh)].SetValue<float>(value); } }
        public float LedgeMatchingSweepRadius { get { return this[nameof(LedgeMatchingSweepRadius)].GetValue<float>(); } set { this[nameof(LedgeMatchingSweepRadius)].SetValue<float>(value); } }
        public float LedgeMatchingSweepOffset { get { return this[nameof(LedgeMatchingSweepOffset)].GetValue<float>(); } set { this[nameof(LedgeMatchingSweepOffset)].SetValue<float>(value); } }
        public float DissolveDistanceThreshold { get { return this[nameof(DissolveDistanceThreshold)].GetValue<float>(); } set { this[nameof(DissolveDistanceThreshold)].SetValue<float>(value); } }
        public float LedgeExpandIterationDistance { get { return this[nameof(LedgeExpandIterationDistance)].GetValue<float>(); } set { this[nameof(LedgeExpandIterationDistance)].SetValue<float>(value); } }
        public float LedgeExpandMaxDistanceToAdjacentLedges { get { return this[nameof(LedgeExpandMaxDistanceToAdjacentLedges)].GetValue<float>(); } set { this[nameof(LedgeExpandMaxDistanceToAdjacentLedges)].SetValue<float>(value); } }
        public float LedgeExpandBufferDistance { get { return this[nameof(LedgeExpandBufferDistance)].GetValue<float>(); } set { this[nameof(LedgeExpandBufferDistance)].SetValue<float>(value); } }
        public float LedgeMergeDistance { get { return this[nameof(LedgeMergeDistance)].GetValue<float>(); } set { this[nameof(LedgeMergeDistance)].SetValue<float>(value); } }
        public float SinglePointExpandLength { get { return this[nameof(SinglePointExpandLength)].GetValue<float>(); } set { this[nameof(SinglePointExpandLength)].SetValue<float>(value); } }
    }
    public class ConditionList : InheritableObject
    {
        public ConditionList(nint addr) : base(addr) { }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public bool EvaluateConditions(Actor Actor) { return Invoke<bool>(nameof(EvaluateConditions), Actor); }
    }
    public class CursorResponseInterface : Interface
    {
        public CursorResponseInterface(nint addr) : base(addr) { }
        public bool ShouldUpdateCursorHoverState() { return Invoke<bool>(nameof(ShouldUpdateCursorHoverState)); }
        public void OnObjectFocusReleased() { Invoke(nameof(OnObjectFocusReleased)); }
        public void OnObjectFocused() { Invoke(nameof(OnObjectFocused)); }
        public void OnCursorExit() { Invoke(nameof(OnCursorExit)); }
        public void OnCursorEnter() { Invoke(nameof(OnCursorEnter)); }
    }
    public class DamageableInterface : Interface
    {
        public DamageableInterface(nint addr) : base(addr) { }
        public void ResolveTarget(DamageInfo DamageInfo) { Invoke(nameof(ResolveTarget), DamageInfo); }
        public void ModifyIncomingDamage(DamageInfo Info) { Invoke(nameof(ModifyIncomingDamage), Info); }
        public void FilterIncomingHealing(HealingInfo HealingInfo, float HealingOut, bool ShouldApplyDamagHealing) { Invoke(nameof(FilterIncomingHealing), HealingInfo, HealingOut, ShouldApplyDamagHealing); }
        public void FilterIncomingDamage(DamageInfo DamageInfo, float DamageOut, bool ShouldApplyDamage) { Invoke(nameof(FilterIncomingDamage), DamageInfo, DamageOut, ShouldApplyDamage); }
    }
    public class DamageNotifyInterface : Interface
    {
        public DamageNotifyInterface(nint addr) : base(addr) { }
        public void OnNotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyTakeDamage), DamageInfo); }
    }
    public class DamageSourceInterface : Interface
    {
        public DamageSourceInterface(nint addr) : base(addr) { }
        public void ResolveOwner(DamageInfo In, DamageInfo Out) { Invoke(nameof(ResolveOwner), In, Out); }
        public void NotifyTargetResistedHit(DamageInfo DamageInfo) { Invoke(nameof(NotifyTargetResistedHit), DamageInfo); }
        public void NotifyHitTarget(DamageInfo DamageInfo) { Invoke(nameof(NotifyHitTarget), DamageInfo); }
        public void NotifyHealFailed(HealingInfo HealingInfo) { Invoke(nameof(NotifyHealFailed), HealingInfo); }
        public void NotifyHealedTarget(HealingInfo HealingInfo) { Invoke(nameof(NotifyHealedTarget), HealingInfo); }
        public void ModifyDamage(DamageInfo Info) { Invoke(nameof(ModifyDamage), Info); }
        public ImpactEffectDescriptor GetImpactEffect() { return Invoke<ImpactEffectDescriptor>(nameof(GetImpactEffect)); }
        public Object GetDamageType() { return Invoke<Object>(nameof(GetDamageType)); }
    }
    public class EffectsPreviewSettings : Object
    {
        public EffectsPreviewSettings(nint addr) : base(addr) { }
        public Object PreviewImpactMaterial { get { return this[nameof(PreviewImpactMaterial)]; } set { this[nameof(PreviewImpactMaterial)] = value; } }
        public ImpactDescriptorSet ImpactSet { get { return this[nameof(ImpactSet)].As<ImpactDescriptorSet>(); } set { this["ImpactSet"] = value; } }
        public Array<SoundSetSettings> SoundSetSettings { get { return new Array<SoundSetSettings>(this[nameof(SoundSetSettings)].Address); } }
        public CustomizationSetSettings CustomizationSettings { get { return this[nameof(CustomizationSettings)].As<CustomizationSetSettings>(); } set { this["CustomizationSettings"] = value; } }
    }
    public class UserSetting_Base : Object
    {
        public UserSetting_Base(nint addr) : base(addr) { }
    }
    public class UserSetting : UserSetting_Base
    {
        public UserSetting(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public Object ConsoleVariable { get { return this[nameof(ConsoleVariable)]; } set { this[nameof(ConsoleVariable)] = value; } }
        public byte Platforms { get { return this[nameof(Platforms)].GetValue<byte>(); } set { this[nameof(Platforms)].SetValue<byte>(value); } }
        public Object OnApplied { get { return this[nameof(OnApplied)]; } set { this[nameof(OnApplied)] = value; } }
        public Object OnChanged { get { return this[nameof(OnChanged)]; } set { this[nameof(OnChanged)] = value; } }
        public GameUserSettingsGunfire Settings { get { return this[nameof(Settings)].As<GameUserSettingsGunfire>(); } set { this["Settings"] = value; } }
        public void ResetToDefault() { Invoke(nameof(ResetToDefault)); }
        public bool IsVisible() { return Invoke<bool>(nameof(IsVisible)); }
        public bool IsEnabled() { return Invoke<bool>(nameof(IsEnabled)); }
        public Object GetDisplayValue() { return Invoke<Object>(nameof(GetDisplayValue)); }
        public void Apply() { Invoke(nameof(Apply)); }
    }
    public class ListUserSetting : UserSetting
    {
        public ListUserSetting(nint addr) : base(addr) { }
        public bool bWraps { get { return this[nameof(bWraps)].Flag; } set { this[nameof(bWraps)].Flag = value; } }
        public void SetValue(int ValueIn) { Invoke(nameof(SetValue), ValueIn); }
        public bool SetNextEntry(bool bForwards) { return Invoke<bool>(nameof(SetNextEntry), bForwards); }
        public int GetValue() { return Invoke<int>(nameof(GetValue)); }
    }
    public class EnumUserSetting : ListUserSetting
    {
        public EnumUserSetting(nint addr) : base(addr) { }
        public Array<int> DisabledValues { get { return new Array<int>(this[nameof(DisabledValues)].Address); } }
        public Array<ListUserSettingEntry> Entries { get { return new Array<ListUserSettingEntry>(this[nameof(Entries)].Address); } }
        public int DefaultValue { get { return this[nameof(DefaultValue)].GetValue<int>(); } set { this[nameof(DefaultValue)].SetValue<int>(value); } }
        public void EnableValue(int InValue) { Invoke(nameof(EnableValue), InValue); }
        public void DisableValue(int InValue) { Invoke(nameof(DisableValue), InValue); }
    }
    public class EventHandlerInterface : Interface
    {
        public EventHandlerInterface(nint addr) : base(addr) { }
        public void HandleEvent(Object EventName) { Invoke(nameof(HandleEvent), EventName); }
    }
    public class EventTreeNode_Base : Object
    {
        public EventTreeNode_Base(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public bool DoOnce { get { return this[nameof(DoOnce)].Flag; } set { this[nameof(DoOnce)].Flag = value; } }
        public float DoOnceExpiration { get { return this[nameof(DoOnceExpiration)].GetValue<float>(); } set { this[nameof(DoOnceExpiration)].SetValue<float>(value); } }
        public Array<EventTreeNodeCondition> Conditions { get { return new Array<EventTreeNodeCondition>(this[nameof(Conditions)].Address); } }
        public VariableStatements ValidateStatements { get { return this[nameof(ValidateStatements)].As<VariableStatements>(); } set { this["ValidateStatements"] = value; } }
        public VariableStatements ExecuteStatements { get { return this[nameof(ExecuteStatements)].As<VariableStatements>(); } set { this["ExecuteStatements"] = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public int UniqueId { get { return this[nameof(UniqueId)].GetValue<int>(); } set { this[nameof(UniqueId)].SetValue<int>(value); } }
        public Object WriteKey { get { return this[nameof(WriteKey)]; } set { this[nameof(WriteKey)] = value; } }
        public Object ValidKey { get { return this[nameof(ValidKey)]; } set { this[nameof(ValidKey)] = value; } }
        public Object NotValidKey { get { return this[nameof(NotValidKey)]; } set { this[nameof(NotValidKey)] = value; } }
        public Object GetEditorLabel() { return Invoke<Object>(nameof(GetEditorLabel)); }
    }
    public class EventTreeNode : EventTreeNode_Base
    {
        public EventTreeNode(nint addr) : base(addr) { }
        public bool Validate(EventTreeComponent Component) { return Invoke<bool>(nameof(Validate), Component); }
        public void Loop(EventTreeComponent Component) { Invoke(nameof(Loop), Component); }
        public void Join(EventTreeComponent Component, PlayerController JoiningController) { Invoke(nameof(Join), Component, JoiningController); }
        public bool IsComplete(EventTreeComponent Component) { return Invoke<bool>(nameof(IsComplete), Component); }
        public void End(EventTreeComponent Component) { Invoke(nameof(End), Component); }
        public void Begin(EventTreeComponent Component) { Invoke(nameof(Begin), Component); }
    }
    public class EventTreeNode_Standalone : EventTreeNode
    {
        public EventTreeNode_Standalone(nint addr) : base(addr) { }
        public void BeginStandalone(EventTreeComponent Component, Actor Instigator) { Invoke(nameof(BeginStandalone), Component, Instigator); }
    }
    public class ChallengeReward : Object
    {
        public ChallengeReward(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public bool GiveReward(Actor Recepient) { return Invoke<bool>(nameof(GiveReward), Recepient); }
        public Object GetDisplayLabel() { return Invoke<Object>(nameof(GetDisplayLabel)); }
        public Object GetDescription() { return Invoke<Object>(nameof(GetDescription)); }
    }
    public class ExperienceReward : ChallengeReward
    {
        public ExperienceReward(nint addr) : base(addr) { }
        public int ExperienceToGive { get { return this[nameof(ExperienceToGive)].GetValue<int>(); } set { this[nameof(ExperienceToGive)].SetValue<int>(value); } }
    }
    public class GunfireUserInterfaceSettings : Object
    {
        public GunfireUserInterfaceSettings(nint addr) : base(addr) { }
        public Object ConfirmInput { get { return this[nameof(ConfirmInput)]; } set { this[nameof(ConfirmInput)] = value; } }
        public Object HardwareCursorProperties { get { return this[nameof(HardwareCursorProperties)]; } set { this[nameof(HardwareCursorProperties)] = value; } }
        public float MinResolutionForHighResCursor { get { return this[nameof(MinResolutionForHighResCursor)].GetValue<float>(); } set { this[nameof(MinResolutionForHighResCursor)].SetValue<float>(value); } }
    }
    public class HealingClass : Object
    {
        public HealingClass(nint addr) : base(addr) { }
        public Object HealingModStat { get { return this[nameof(HealingModStat)]; } set { this[nameof(HealingModStat)] = value; } }
        public Object Action { get { return this[nameof(Action)]; } set { this[nameof(Action)] = value; } }
    }
    public class HealingTypeGunfire : Object
    {
        public HealingTypeGunfire(nint addr) : base(addr) { }
        public Array<Object> HealingClasses { get { return new Array<Object>(this[nameof(HealingClasses)].Address); } }
        public bool Modifiable { get { return this[nameof(Modifiable)].Flag; } set { this[nameof(Modifiable)].Flag = value; } }
        public Object Action { get { return this[nameof(Action)]; } set { this[nameof(Action)] = value; } }
    }
    public class GunfireAudioInterface : Interface
    {
        public GunfireAudioInterface(nint addr) : base(addr) { }
    }
    public class InputHandler : Object
    {
        public InputHandler(nint addr) : base(addr) { }
    }
    public class ActorState : InheritableObject
    {
        public ActorState(nint addr) : base(addr) { }
        public ActorStateID UniqueId { get { return this[nameof(UniqueId)].As<ActorStateID>(); } set { this["UniqueId"] = value; } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public bool IsSwitch { get { return this[nameof(IsSwitch)].Flag; } set { this[nameof(IsSwitch)].Flag = value; } }
        public bool IsReentrant { get { return this[nameof(IsReentrant)].Flag; } set { this[nameof(IsReentrant)].Flag = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public bool IsInterruptible { get { return this[nameof(IsInterruptible)].Flag; } set { this[nameof(IsInterruptible)].Flag = value; } }
        public int InterruptPriority { get { return this[nameof(InterruptPriority)].GetValue<int>(); } set { this[nameof(InterruptPriority)].SetValue<int>(value); } }
        public int InterruptChance { get { return this[nameof(InterruptChance)].GetValue<int>(); } set { this[nameof(InterruptChance)].SetValue<int>(value); } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public ActorStateDecorators Decorators { get { return this[nameof(Decorators)].As<ActorStateDecorators>(); } set { this["Decorators"] = value; } }
        public Array<ActorStateTransition> Transitions { get { return new Array<ActorStateTransition>(this[nameof(Transitions)].Address); } }
    }
    public class AnimActorState : ActorState
    {
        public AnimActorState(nint addr) : base(addr) { }
        public Object AnimationID { get { return this[nameof(AnimationID)]; } set { this[nameof(AnimationID)] = value; } }
        public StatValue AnimPlayRate { get { return this[nameof(AnimPlayRate)].As<StatValue>(); } set { this["AnimPlayRate"] = value; } }
        public CharacterFacing Facing { get { return (CharacterFacing)this[nameof(Facing)].GetValue<int>(); } set { this[nameof(Facing)].SetValue<int>((int)value); } }
        public float FacingOffset { get { return this[nameof(FacingOffset)].GetValue<float>(); } set { this[nameof(FacingOffset)].SetValue<float>(value); } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float MaxSpeedBackwards { get { return this[nameof(MaxSpeedBackwards)].GetValue<float>(); } set { this[nameof(MaxSpeedBackwards)].SetValue<float>(value); } }
        public float BackwardStartAngle { get { return this[nameof(BackwardStartAngle)].GetValue<float>(); } set { this[nameof(BackwardStartAngle)].SetValue<float>(value); } }
        public StatValue MaxSpeedScalar { get { return this[nameof(MaxSpeedScalar)].As<StatValue>(); } set { this["MaxSpeedScalar"] = value; } }
        public float Acceleration { get { return this[nameof(Acceleration)].GetValue<float>(); } set { this[nameof(Acceleration)].SetValue<float>(value); } }
        public float Deceleration { get { return this[nameof(Deceleration)].GetValue<float>(); } set { this[nameof(Deceleration)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public float TurnSmoothTime { get { return this[nameof(TurnSmoothTime)].GetValue<float>(); } set { this[nameof(TurnSmoothTime)].SetValue<float>(value); } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public float GroundFriction { get { return this[nameof(GroundFriction)].GetValue<float>(); } set { this[nameof(GroundFriction)].SetValue<float>(value); } }
        public float JumpImpulse { get { return this[nameof(JumpImpulse)].GetValue<float>(); } set { this[nameof(JumpImpulse)].SetValue<float>(value); } }
        public bool bAbsoluteJumpImpulse { get { return this[nameof(bAbsoluteJumpImpulse)].Flag; } set { this[nameof(bAbsoluteJumpImpulse)].Flag = value; } }
        public ERootMotionVelocityMethod RootMotionMethod { get { return (ERootMotionVelocityMethod)this[nameof(RootMotionMethod)].GetValue<int>(); } set { this[nameof(RootMotionMethod)].SetValue<int>((int)value); } }
        public bool bUseExclusiveRootMotion { get { return this[nameof(bUseExclusiveRootMotion)].Flag; } set { this[nameof(bUseExclusiveRootMotion)].Flag = value; } }
        public bool ConstrainToGround { get { return this[nameof(ConstrainToGround)].Flag; } set { this[nameof(ConstrainToGround)].Flag = value; } }
        public bool UseHeadingAsAccelDirection { get { return this[nameof(UseHeadingAsAccelDirection)].Flag; } set { this[nameof(UseHeadingAsAccelDirection)].Flag = value; } }
        public bool bAllowVerticalInputAcceleration { get { return this[nameof(bAllowVerticalInputAcceleration)].Flag; } set { this[nameof(bAllowVerticalInputAcceleration)].Flag = value; } }
        public bool bForceDigitalInput { get { return this[nameof(bForceDigitalInput)].Flag; } set { this[nameof(bForceDigitalInput)].Flag = value; } }
        public void UpdateMovementParams(StateMachineComponent StateMachine) { Invoke(nameof(UpdateMovementParams), StateMachine); }
    }
    public class TraversalState : AnimActorState
    {
        public TraversalState(nint addr) : base(addr) { }
        public bool bDisableCollisionOnEntry { get { return this[nameof(bDisableCollisionOnEntry)].Flag; } set { this[nameof(bDisableCollisionOnEntry)].Flag = value; } }
        public bool bMaintainOverlaps { get { return this[nameof(bMaintainOverlaps)].Flag; } set { this[nameof(bMaintainOverlaps)].Flag = value; } }
        public Object CollisionEnableWindow { get { return this[nameof(CollisionEnableWindow)]; } set { this[nameof(CollisionEnableWindow)] = value; } }
        public float LerpTime { get { return this[nameof(LerpTime)].GetValue<float>(); } set { this[nameof(LerpTime)].SetValue<float>(value); } }
        public bool LerpEasesIn { get { return this[nameof(LerpEasesIn)].Flag; } set { this[nameof(LerpEasesIn)].Flag = value; } }
        public float LerpEaseExponent { get { return this[nameof(LerpEaseExponent)].GetValue<float>(); } set { this[nameof(LerpEaseExponent)].SetValue<float>(value); } }
        public bool bSetFallingMovementOnCollisionWindow { get { return this[nameof(bSetFallingMovementOnCollisionWindow)].Flag; } set { this[nameof(bSetFallingMovementOnCollisionWindow)].Flag = value; } }
        public bool bZeroVelocityOnEntry { get { return this[nameof(bZeroVelocityOnEntry)].Flag; } set { this[nameof(bZeroVelocityOnEntry)].Flag = value; } }
        public bool bAttachToSurface { get { return this[nameof(bAttachToSurface)].Flag; } set { this[nameof(bAttachToSurface)].Flag = value; } }
        public bool bCollideWithSurface { get { return this[nameof(bCollideWithSurface)].Flag; } set { this[nameof(bCollideWithSurface)].Flag = value; } }
    }
    public class LedgeGrabState : TraversalState
    {
        public LedgeGrabState(nint addr) : base(addr) { }
    }
    public class MusicSetAsset : DataAsset
    {
        public MusicSetAsset(nint addr) : base(addr) { }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public void Stop(MusicManager MusicManager, MusicSetInstanceData InstanceData, Object StingerName) { Invoke(nameof(Stop), MusicManager, InstanceData, StingerName); }
        public void SetState(MusicManager MusicManager, MusicSetInstanceData InstanceData, EMusicState DesiredState) { Invoke(nameof(SetState), MusicManager, InstanceData, DesiredState); }
        public void Play(MusicManager MusicManager, MusicSetInstanceData InstanceData) { Invoke(nameof(Play), MusicManager, InstanceData); }
        public void OnEvent(MusicManager MusicManager, MusicSetInstanceData InstanceData, EMusicEvent Event) { Invoke(nameof(OnEvent), MusicManager, InstanceData, Event); }
    }
    public class PooledObjectInterface : Interface
    {
        public PooledObjectInterface(nint addr) : base(addr) { }
        public void OnPooledObjectRecycled() { Invoke(nameof(OnPooledObjectRecycled)); }
        public void OnPooledObjectDeactivated() { Invoke(nameof(OnPooledObjectDeactivated)); }
        public void OnPooledObjectActivated() { Invoke(nameof(OnPooledObjectActivated)); }
    }
    public class PortalEffectsComponent : ActorComponent
    {
        public PortalEffectsComponent(nint addr) : base(addr) { }
        public bool bOverrideEnterTime { get { return this[nameof(bOverrideEnterTime)].Flag; } set { this[nameof(bOverrideEnterTime)].Flag = value; } }
        public float EnterTime { get { return this[nameof(EnterTime)].GetValue<float>(); } set { this[nameof(EnterTime)].SetValue<float>(value); } }
        public bool bOverrideExitTime { get { return this[nameof(bOverrideExitTime)].Flag; } set { this[nameof(bOverrideExitTime)].Flag = value; } }
        public float ExitTime { get { return this[nameof(ExitTime)].GetValue<float>(); } set { this[nameof(ExitTime)].SetValue<float>(value); } }
        public bool bOverridePortalScale { get { return this[nameof(bOverridePortalScale)].Flag; } set { this[nameof(bOverridePortalScale)].Flag = value; } }
        public Vector PortalScale { get { return this[nameof(PortalScale)].As<Vector>(); } set { this["PortalScale"] = value; } }
        public bool bOverrideEntryRadiusOffset { get { return this[nameof(bOverrideEntryRadiusOffset)].Flag; } set { this[nameof(bOverrideEntryRadiusOffset)].Flag = value; } }
        public float EntryRadiusOffset { get { return this[nameof(EntryRadiusOffset)].GetValue<float>(); } set { this[nameof(EntryRadiusOffset)].SetValue<float>(value); } }
        public bool bOverridePortalEntryDistance { get { return this[nameof(bOverridePortalEntryDistance)].Flag; } set { this[nameof(bOverridePortalEntryDistance)].Flag = value; } }
        public float PortalEntryDistance { get { return this[nameof(PortalEntryDistance)].GetValue<float>(); } set { this[nameof(PortalEntryDistance)].SetValue<float>(value); } }
        public bool bOverridePortalExitDistance { get { return this[nameof(bOverridePortalExitDistance)].Flag; } set { this[nameof(bOverridePortalExitDistance)].Flag = value; } }
        public float PortalExitDistance { get { return this[nameof(PortalExitDistance)].GetValue<float>(); } set { this[nameof(PortalExitDistance)].SetValue<float>(value); } }
        public Transform EntryFXRelativeTransform { get { return this[nameof(EntryFXRelativeTransform)].As<Transform>(); } set { this["EntryFXRelativeTransform"] = value; } }
        public bool bOverrideEnterVFX { get { return this[nameof(bOverrideEnterVFX)].Flag; } set { this[nameof(bOverrideEnterVFX)].Flag = value; } }
        public NiagaraSystem EnterVFX { get { return this[nameof(EnterVFX)].As<NiagaraSystem>(); } set { this["EnterVFX"] = value; } }
        public bool bOverrideEnterSFX { get { return this[nameof(bOverrideEnterSFX)].Flag; } set { this[nameof(bOverrideEnterSFX)].Flag = value; } }
        public SoundGunfire EnterSFX { get { return this[nameof(EnterSFX)].As<SoundGunfire>(); } set { this["EnterSFX"] = value; } }
        public Transform ExitFXRelativeTransform { get { return this[nameof(ExitFXRelativeTransform)].As<Transform>(); } set { this["ExitFXRelativeTransform"] = value; } }
        public bool bOverrideExitVFX { get { return this[nameof(bOverrideExitVFX)].Flag; } set { this[nameof(bOverrideExitVFX)].Flag = value; } }
        public NiagaraSystem ExitVFX { get { return this[nameof(ExitVFX)].As<NiagaraSystem>(); } set { this["ExitVFX"] = value; } }
        public bool bOverrideExitSFX { get { return this[nameof(bOverrideExitSFX)].Flag; } set { this[nameof(bOverrideExitSFX)].Flag = value; } }
        public SoundGunfire ExitSFX { get { return this[nameof(ExitSFX)].As<SoundGunfire>(); } set { this["ExitSFX"] = value; } }
        public Object PortalEnterState { get { return this[nameof(PortalEnterState)]; } set { this[nameof(PortalEnterState)] = value; } }
        public bool bOverrideUprightPortalEnterState { get { return this[nameof(bOverrideUprightPortalEnterState)].Flag; } set { this[nameof(bOverrideUprightPortalEnterState)].Flag = value; } }
        public Object UprightPortalEnterState { get { return this[nameof(UprightPortalEnterState)]; } set { this[nameof(UprightPortalEnterState)] = value; } }
    }
    public class PortalInterface : Interface
    {
        public PortalInterface(nint addr) : base(addr) { }
        public bool ShouldIgnoreProjectileCameraAlignment(Portal EntryPortal, Portal ExitPortal) { return Invoke<bool>(nameof(ShouldIgnoreProjectileCameraAlignment), EntryPortal, ExitPortal); }
        public bool ShouldIgnorePortalTransition(Portal EntryPortal, Portal ExitPortal) { return Invoke<bool>(nameof(ShouldIgnorePortalTransition), EntryPortal, ExitPortal); }
        public bool ShouldIgnoreModifyingWeaponTraces(Portal EntryPortal, Portal ExitPortal) { return Invoke<bool>(nameof(ShouldIgnoreModifyingWeaponTraces), EntryPortal, ExitPortal); }
        public bool ShouldDelayPortalExit(Portal EntryPortal, Portal ExitPortal) { return Invoke<bool>(nameof(ShouldDelayPortalExit), EntryPortal, ExitPortal); }
        public bool ShouldDelayPortalEntry(Portal EntryPortal, Portal ExitPortal) { return Invoke<bool>(nameof(ShouldDelayPortalEntry), EntryPortal, ExitPortal); }
        public void OnTeleportBetweenPortals(Portal EntryPortal, Portal ExitPortal) { Invoke(nameof(OnTeleportBetweenPortals), EntryPortal, ExitPortal); }
        public void OnEndTransitionBetweenPortals(Portal EntryPortal, Portal ExitPortal) { Invoke(nameof(OnEndTransitionBetweenPortals), EntryPortal, ExitPortal); }
        public void OnBeginTransitionBetweenPortals(Portal EntryPortal, Portal ExitPortal) { Invoke(nameof(OnBeginTransitionBetweenPortals), EntryPortal, ExitPortal); }
        public void ModifyPortalTransition(Portal EntryPortal, Portal ExitPortal, float EnterTime, float ExitTime, float FinalEnterTime, float FinalExitTime) { Invoke(nameof(ModifyPortalTransition), EntryPortal, ExitPortal, EnterTime, ExitTime, FinalEnterTime, FinalExitTime); }
        public void GetAttachedActorsForPortalTransition(Portal EntryPortal, Portal ExitPortal, Array<Actor> AttachedActors) { Invoke(nameof(GetAttachedActorsForPortalTransition), EntryPortal, ExitPortal, AttachedActors); }
    }
    public class SpawnableInterface : Interface
    {
        public SpawnableInterface(nint addr) : base(addr) { }
        public int ModifySpawnLevel(int InLevel, Object WorldContextObject) { return Invoke<int>(nameof(ModifySpawnLevel), InLevel, WorldContextObject); }
    }
    public class SpawnTableContextObjectInterface : Interface
    {
        public SpawnTableContextObjectInterface(nint addr) : base(addr) { }
        public void GatherSpawnTableContextTags(Array<Object> OutTags, Actor ContextActor) { Invoke(nameof(GatherSpawnTableContextTags), OutTags, ContextActor); }
    }
    public class TraversalCondition : Condition
    {
        public TraversalCondition(nint addr) : base(addr) { }
    }
    public class ImpactDirection : Object
    {
        public ImpactDirection(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
    }
    public class ActorCustomizationComponent : ActorComponent
    {
        public ActorCustomizationComponent(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public ActorCustomizationSet CustomizationSet { get { return this[nameof(CustomizationSet)].As<ActorCustomizationSet>(); } set { this["CustomizationSet"] = value; } }
        public Array<ActorCustomizationSlot> Slots { get { return new Array<ActorCustomizationSlot>(this[nameof(Slots)].Address); } }
        public Array<Object> CustomizationTags { get { return new Array<Object>(this[nameof(CustomizationTags)].Address); } }
        public Array<Object> AnimSoundTags { get { return new Array<Object>(this[nameof(AnimSoundTags)].Address); } }
        public bool bUsesValidChildMeshes { get { return this[nameof(bUsesValidChildMeshes)].Flag; } set { this[nameof(bUsesValidChildMeshes)].Flag = value; } }
        public Array<Object> ValidChildMeshes { get { return new Array<Object>(this[nameof(ValidChildMeshes)].Address); } }
        public Object OnStreamedCustomizationApplied { get { return this[nameof(OnStreamedCustomizationApplied)]; } set { this[nameof(OnStreamedCustomizationApplied)] = value; } }
        public Object OnCustomizationStreamingComplete { get { return this[nameof(OnCustomizationStreamingComplete)]; } set { this[nameof(OnCustomizationStreamingComplete)] = value; } }
        public Object OnBeginStreamCustomization { get { return this[nameof(OnBeginStreamCustomization)]; } set { this[nameof(OnBeginStreamCustomization)] = value; } }
        public Object OnCustomizationsChanged { get { return this[nameof(OnCustomizationsChanged)]; } set { this[nameof(OnCustomizationsChanged)] = value; } }
        public Array<Object> StreamingAssets { get { return new Array<Object>(this[nameof(StreamingAssets)].Address); } }
        public Array<Object> CachedAssets { get { return new Array<Object>(this[nameof(CachedAssets)].Address); } }
        public void UpdateSlots() { Invoke(nameof(UpdateSlots)); }
        public void StopAllStreamingRequests() { Invoke(nameof(StopAllStreamingRequests)); }
        public void SetupSlaveMeshes() { Invoke(nameof(SetupSlaveMeshes)); }
        public void SetSlotEnabled(Object SlotID, bool bIsEnabled) { Invoke(nameof(SetSlotEnabled), SlotID, bIsEnabled); }
        public void SetCustomizationAt(Object SlotID, int Idx) { Invoke(nameof(SetCustomizationAt), SlotID, Idx); }
        public void SetCustomization(Object SlotID, Object CustomizationID) { Invoke(nameof(SetCustomization), SlotID, CustomizationID); }
        public void PlayCustomizationEffect(Object NameID, bool bCache) { Invoke(nameof(PlayCustomizationEffect), NameID, bCache); }
        public void OnRep_Seed() { Invoke(nameof(OnRep_Seed)); }
        public void OnCustomizationLoaded(Object SlotID, Object CustomizationID, bool bCleared) { Invoke(nameof(OnCustomizationLoaded), SlotID, CustomizationID, bCleared); }
        public bool HasOutstandingStreamingRequests() { return Invoke<bool>(nameof(HasOutstandingStreamingRequests)); }
        public Object GetSlotCustomizationID(Object SlotID) { return Invoke<Object>(nameof(GetSlotCustomizationID), SlotID); }
        public Object GetPreviewMeshForCustomization(Object SlotID, Object CustomizationID, bool bAllowStaticMeshes, bool bAllowSkeletalMeshes) { return Invoke<Object>(nameof(GetPreviewMeshForCustomization), SlotID, CustomizationID, bAllowStaticMeshes, bAllowSkeletalMeshes); }
        public int GetNumCustomizationsForSlotID(Object SlotID) { return Invoke<int>(nameof(GetNumCustomizationsForSlotID), SlotID); }
        public bool GetIconForCustomization(Object SlotID, Object CustomizationID, Object OutIcon) { return Invoke<bool>(nameof(GetIconForCustomization), SlotID, CustomizationID, OutIcon); }
        public bool GetDisplayColorForCustomization(Object SlotID, Object CustomizationID, LinearColor OutColor) { return Invoke<bool>(nameof(GetDisplayColorForCustomization), SlotID, CustomizationID, OutColor); }
        public int GetCustomizationPositionInSlot(Object SlotID) { return Invoke<int>(nameof(GetCustomizationPositionInSlot), SlotID); }
        public Object GetCustomizationAt(Object SlotID, int Idx) { return Invoke<Object>(nameof(GetCustomizationAt), SlotID, Idx); }
        public bool GetAllCustomizationsForSlot(Object SlotID, Array<Object> OutCustomizations) { return Invoke<bool>(nameof(GetAllCustomizationsForSlot), SlotID, OutCustomizations); }
        public void ClearCustomization(Object SlotID) { Invoke(nameof(ClearCustomization), SlotID); }
    }
    public class ActorCustomizationID : InheritableObject
    {
        public ActorCustomizationID(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Array<ActorCustomization> Customizations { get { return new Array<ActorCustomization>(this[nameof(Customizations)].Address); } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public bool HardReferenceAssets { get { return this[nameof(HardReferenceAssets)].Flag; } set { this[nameof(HardReferenceAssets)].Flag = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public bool RequireIDsForColorDisplay { get { return this[nameof(RequireIDsForColorDisplay)].Flag; } set { this[nameof(RequireIDsForColorDisplay)].Flag = value; } }
        public LinearColor DisplayColor { get { return this[nameof(DisplayColor)].As<LinearColor>(); } set { this["DisplayColor"] = value; } }
        public Object ColorsByID { get { return this[nameof(ColorsByID)]; } set { this[nameof(ColorsByID)] = value; } }
    }
    public class ActorCustomizationSetSlot : InheritableObject
    {
        public ActorCustomizationSetSlot(nint addr) : base(addr) { }
        public Object SlotID { get { return this[nameof(SlotID)]; } set { this[nameof(SlotID)] = value; } }
        public Array<ActorCustomizationID> CustomizationIDs { get { return new Array<ActorCustomizationID>(this[nameof(CustomizationIDs)].Address); } }
        public bool HardReferenceAssets { get { return this[nameof(HardReferenceAssets)].Flag; } set { this[nameof(HardReferenceAssets)].Flag = value; } }
    }
    public class ActorCustomizationEffectEntry : ActorCustomizationBase
    {
        public ActorCustomizationEffectEntry(nint addr) : base(addr) { }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Array<ActorCustomizationEffect> Nodes { get { return new Array<ActorCustomizationEffect>(this[nameof(Nodes)].Address); } }
    }
    public class ActorCustomizationSetEffect : InheritableObject
    {
        public ActorCustomizationSetEffect(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Array<ActorCustomizationEffectEntry> Entries { get { return new Array<ActorCustomizationEffectEntry>(this[nameof(Entries)].Address); } }
    }
    public class InheritableAsset : InheritableObject
    {
        public InheritableAsset(nint addr) : base(addr) { }
    }
    public class ActorCustomizationSet : InheritableAsset
    {
        public ActorCustomizationSet(nint addr) : base(addr) { }
        public bool HardReferenceAssets { get { return this[nameof(HardReferenceAssets)].Flag; } set { this[nameof(HardReferenceAssets)].Flag = value; } }
        public Array<ActorCustomizationSetSlot> Slots { get { return new Array<ActorCustomizationSetSlot>(this[nameof(Slots)].Address); } }
        public Array<ActorCustomizationSetEffect> Effects { get { return new Array<ActorCustomizationSetEffect>(this[nameof(Effects)].Address); } }
        public Array<Object> HardReferencedAssets { get { return new Array<Object>(this[nameof(HardReferencedAssets)].Address); } }
    }
    public class AttachActorCustomization : SceneCustomization
    {
        public AttachActorCustomization(nint addr) : base(addr) { }
        public Object ActorBP { get { return this[nameof(ActorBP)]; } set { this[nameof(ActorBP)] = value; } }
    }
    public class AudioCustomization : SceneCustomization
    {
        public AudioCustomization(nint addr) : base(addr) { }
        public SoftSoundGunfire StartSound { get { return this[nameof(StartSound)].As<SoftSoundGunfire>(); } set { this["StartSound"] = value; } }
        public GunfireAudioPlayParams StartSoundPlayParams { get { return this[nameof(StartSoundPlayParams)].As<GunfireAudioPlayParams>(); } set { this["StartSoundPlayParams"] = value; } }
        public bool bStartSoundAttached { get { return this[nameof(bStartSoundAttached)].Flag; } set { this[nameof(bStartSoundAttached)].Flag = value; } }
        public GunfireAudioAttachParams StartSoundAttachParams { get { return this[nameof(StartSoundAttachParams)].As<GunfireAudioAttachParams>(); } set { this["StartSoundAttachParams"] = value; } }
        public bool bStopStartSoundOnEnd { get { return this[nameof(bStopStartSoundOnEnd)].Flag; } set { this[nameof(bStopStartSoundOnEnd)].Flag = value; } }
        public GunfireAudioStopParams StartSoundStopParams { get { return this[nameof(StartSoundStopParams)].As<GunfireAudioStopParams>(); } set { this["StartSoundStopParams"] = value; } }
        public SoftSoundGunfire EndSound { get { return this[nameof(EndSound)].As<SoftSoundGunfire>(); } set { this["EndSound"] = value; } }
        public GunfireAudioPlayParams EndSoundPlayParams { get { return this[nameof(EndSoundPlayParams)].As<GunfireAudioPlayParams>(); } set { this["EndSoundPlayParams"] = value; } }
        public bool bEndSoundAttached { get { return this[nameof(bEndSoundAttached)].Flag; } set { this[nameof(bEndSoundAttached)].Flag = value; } }
        public GunfireAudioAttachParams EndSoundAttachParams { get { return this[nameof(EndSoundAttachParams)].As<GunfireAudioAttachParams>(); } set { this["EndSoundAttachParams"] = value; } }
    }
    public class AudioCustomizationEffect : ActorCustomizationEffect
    {
        public AudioCustomizationEffect(nint addr) : base(addr) { }
        public SoundGunfire Sound { get { return this[nameof(Sound)].As<SoundGunfire>(); } set { this["Sound"] = value; } }
        public GunfireAudioPlayParams PlayParams { get { return this[nameof(PlayParams)].As<GunfireAudioPlayParams>(); } set { this["PlayParams"] = value; } }
        public GunfireAudioAttachParams AttachParams { get { return this[nameof(AttachParams)].As<GunfireAudioAttachParams>(); } set { this["AttachParams"] = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
    }
    public class GlobalMaterialCustomization : ActorCustomization
    {
        public GlobalMaterialCustomization(nint addr) : base(addr) { }
        public ActorCustomizationMaterialParam Param { get { return this[nameof(Param)].As<ActorCustomizationMaterialParam>(); } set { this["Param"] = value; } }
    }
    public class MaterialOverrideCustomization : ActorCustomization
    {
        public MaterialOverrideCustomization(nint addr) : base(addr) { }
        public Object SlotName { get { return this[nameof(SlotName)]; } set { this[nameof(SlotName)] = value; } }
        public Object Material { get { return this[nameof(Material)]; } set { this[nameof(Material)] = value; } }
    }
    public class MeshCustomizationBase : SceneCustomization
    {
        public MeshCustomizationBase(nint addr) : base(addr) { }
    }
    public class SkinnedMeshCustomization : MeshCustomizationBase
    {
        public SkinnedMeshCustomization(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public bool bShouldOverrideAnimInstance { get { return this[nameof(bShouldOverrideAnimInstance)].Flag; } set { this[nameof(bShouldOverrideAnimInstance)].Flag = value; } }
        public Object AnimInstanceOverride { get { return this[nameof(AnimInstanceOverride)]; } set { this[nameof(AnimInstanceOverride)] = value; } }
        public Array<Object> VisualTags { get { return new Array<Object>(this[nameof(VisualTags)].Address); } }
        public Array<Object> AnimSoundTags { get { return new Array<Object>(this[nameof(AnimSoundTags)].Address); } }
        public Array<ActorCustomizationMaterialReplacement> MaterialReplacements { get { return new Array<ActorCustomizationMaterialReplacement>(this[nameof(MaterialReplacements)].Address); } }
        public Array<ActorCustomizationMaterialParam> MaterialParams { get { return new Array<ActorCustomizationMaterialParam>(this[nameof(MaterialParams)].Address); } }
        public bool bReInitPoseOnApply { get { return this[nameof(bReInitPoseOnApply)].Flag; } set { this[nameof(bReInitPoseOnApply)].Flag = value; } }
        public bool bClearMeshOnRemove { get { return this[nameof(bClearMeshOnRemove)].Flag; } set { this[nameof(bClearMeshOnRemove)].Flag = value; } }
        public bool bResetMaterialsOnApply { get { return this[nameof(bResetMaterialsOnApply)].Flag; } set { this[nameof(bResetMaterialsOnApply)].Flag = value; } }
        public bool bAlwaysFirst { get { return this[nameof(bAlwaysFirst)].Flag; } set { this[nameof(bAlwaysFirst)].Flag = value; } }
    }
    public class StaticMeshCustomization : MeshCustomizationBase
    {
        public StaticMeshCustomization(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Array<Object> VisualTags { get { return new Array<Object>(this[nameof(VisualTags)].Address); } }
        public Array<Object> AnimSoundTags { get { return new Array<Object>(this[nameof(AnimSoundTags)].Address); } }
        public Array<ActorCustomizationMaterialReplacement> MaterialReplacements { get { return new Array<ActorCustomizationMaterialReplacement>(this[nameof(MaterialReplacements)].Address); } }
        public Array<ActorCustomizationMaterialParam> MaterialParams { get { return new Array<ActorCustomizationMaterialParam>(this[nameof(MaterialParams)].Address); } }
        public bool bResetMaterialsOnApply { get { return this[nameof(bResetMaterialsOnApply)].Flag; } set { this[nameof(bResetMaterialsOnApply)].Flag = value; } }
    }
    public class RandomMeshCustomization : MeshCustomizationBase
    {
        public RandomMeshCustomization(nint addr) : base(addr) { }
    }
    public class RandomSkinnedMeshCustomization : RandomMeshCustomization
    {
        public RandomSkinnedMeshCustomization(nint addr) : base(addr) { }
        public Array<RandomSkinMesh> Meshes { get { return new Array<RandomSkinMesh>(this[nameof(Meshes)].Address); } }
        public bool bShouldOverrideAnimInstance { get { return this[nameof(bShouldOverrideAnimInstance)].Flag; } set { this[nameof(bShouldOverrideAnimInstance)].Flag = value; } }
        public Object AnimInstanceOverride { get { return this[nameof(AnimInstanceOverride)]; } set { this[nameof(AnimInstanceOverride)] = value; } }
        public bool bResetMaterialsOnApply { get { return this[nameof(bResetMaterialsOnApply)].Flag; } set { this[nameof(bResetMaterialsOnApply)].Flag = value; } }
    }
    public class RandomStaticMeshCustomization : RandomMeshCustomization
    {
        public RandomStaticMeshCustomization(nint addr) : base(addr) { }
        public Array<RandomStaticMesh> Meshes { get { return new Array<RandomStaticMesh>(this[nameof(Meshes)].Address); } }
        public bool bResetMaterialsOnApply { get { return this[nameof(bResetMaterialsOnApply)].Flag; } set { this[nameof(bResetMaterialsOnApply)].Flag = value; } }
    }
    public class ParticleCustomizationEffect : ActorCustomizationEffect
    {
        public ParticleCustomizationEffect(nint addr) : base(addr) { }
        public Object ParticleSystem { get { return this[nameof(ParticleSystem)]; } set { this[nameof(ParticleSystem)] = value; } }
        public bool Attached { get { return this[nameof(Attached)].Flag; } set { this[nameof(Attached)].Flag = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Object ActorParameterName { get { return this[nameof(ActorParameterName)]; } set { this[nameof(ActorParameterName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
    }
    public class RenderDepthCustomization : ActorCustomization
    {
        public RenderDepthCustomization(nint addr) : base(addr) { }
        public int DepthStencilValue { get { return this[nameof(DepthStencilValue)].GetValue<int>(); } set { this[nameof(DepthStencilValue)].SetValue<int>(value); } }
    }
    public class TagCustomization : ActorCustomization
    {
        public TagCustomization(nint addr) : base(addr) { }
        public Array<Object> AnimSoundTags { get { return new Array<Object>(this[nameof(AnimSoundTags)].Address); } }
    }
    public class TrailCustomization : ParticleCustomization
    {
        public TrailCustomization(nint addr) : base(addr) { }
        public Object SkeletalMeshPropertyName { get { return this[nameof(SkeletalMeshPropertyName)]; } set { this[nameof(SkeletalMeshPropertyName)] = value; } }
        public Object BottomSocketName { get { return this[nameof(BottomSocketName)]; } set { this[nameof(BottomSocketName)] = value; } }
        public Object TopSocketName { get { return this[nameof(TopSocketName)]; } set { this[nameof(TopSocketName)] = value; } }
        public Object LifetimePropertyName { get { return this[nameof(LifetimePropertyName)]; } set { this[nameof(LifetimePropertyName)] = value; } }
        public float Lifetime { get { return this[nameof(Lifetime)].GetValue<float>(); } set { this[nameof(Lifetime)].SetValue<float>(value); } }
    }
    public class TrailCustomizationEffect : ParticleCustomizationEffect
    {
        public TrailCustomizationEffect(nint addr) : base(addr) { }
        public Object SkeletalMeshPropertyName { get { return this[nameof(SkeletalMeshPropertyName)]; } set { this[nameof(SkeletalMeshPropertyName)] = value; } }
        public Object BottomSocketName { get { return this[nameof(BottomSocketName)]; } set { this[nameof(BottomSocketName)] = value; } }
        public Object TopSocketName { get { return this[nameof(TopSocketName)]; } set { this[nameof(TopSocketName)] = value; } }
        public Object LifetimePropertyName { get { return this[nameof(LifetimePropertyName)]; } set { this[nameof(LifetimePropertyName)] = value; } }
        public float Lifetime { get { return this[nameof(Lifetime)].GetValue<float>(); } set { this[nameof(Lifetime)].SetValue<float>(value); } }
    }
    public class SetVisibilityCustomization : SceneCustomization
    {
        public SetVisibilityCustomization(nint addr) : base(addr) { }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
        public bool OverrideWeaponSwitching { get { return this[nameof(OverrideWeaponSwitching)].Flag; } set { this[nameof(OverrideWeaponSwitching)].Flag = value; } }
    }
    public class AIAwarenessComponent : ActorComponent
    {
        public AIAwarenessComponent(nint addr) : base(addr) { }
        public bool EvaluateAwareness { get { return this[nameof(EvaluateAwareness)].Flag; } set { this[nameof(EvaluateAwareness)].Flag = value; } }
        public float SightRange { get { return this[nameof(SightRange)].GetValue<float>(); } set { this[nameof(SightRange)].SetValue<float>(value); } }
        public float LostSightRange { get { return this[nameof(LostSightRange)].GetValue<float>(); } set { this[nameof(LostSightRange)].SetValue<float>(value); } }
        public float HearingScalar { get { return this[nameof(HearingScalar)].GetValue<float>(); } set { this[nameof(HearingScalar)].SetValue<float>(value); } }
        public Object RelevantActorClass { get { return this[nameof(RelevantActorClass)]; } set { this[nameof(RelevantActorClass)] = value; } }
        public int AwarenessType { get { return this[nameof(AwarenessType)].GetValue<int>(); } set { this[nameof(AwarenessType)].SetValue<int>(value); } }
        public int TypeToBeAwareOf { get { return this[nameof(TypeToBeAwareOf)].GetValue<int>(); } set { this[nameof(TypeToBeAwareOf)].SetValue<int>(value); } }
        public Object OnAwarenessSignal { get { return this[nameof(OnAwarenessSignal)]; } set { this[nameof(OnAwarenessSignal)] = value; } }
        public Object OnRelevantActorAdded { get { return this[nameof(OnRelevantActorAdded)]; } set { this[nameof(OnRelevantActorAdded)] = value; } }
        public Object OnRelevantActorRemoved { get { return this[nameof(OnRelevantActorRemoved)]; } set { this[nameof(OnRelevantActorRemoved)] = value; } }
        public void RelevantActorRemoved(RelevantActor RelevantActor) { Invoke(nameof(RelevantActorRemoved), RelevantActor); }
        public void RelevantActorAdded(RelevantActor RelevantActor) { Invoke(nameof(RelevantActorAdded), RelevantActor); }
        public int GetNumRelevantActors() { return Invoke<int>(nameof(GetNumRelevantActors)); }
        public void AwarenessSignal(EAwarenessSignal Type, Actor Source, Vector Position, float Radius) { Invoke(nameof(AwarenessSignal), Type, Source, Position, Radius); }
    }
    public class AIAwarenessManager : ActorComponent
    {
        public AIAwarenessManager(nint addr) : base(addr) { }
        public int MaxUpdatesPerFrame { get { return this[nameof(MaxUpdatesPerFrame)].GetValue<int>(); } set { this[nameof(MaxUpdatesPerFrame)].SetValue<int>(value); } }
        public bool bShouldUpdateAwareness { get { return this[nameof(bShouldUpdateAwareness)].Flag; } set { this[nameof(bShouldUpdateAwareness)].Flag = value; } }
        public Array<AIControllerGunfire> Controllers { get { return new Array<AIControllerGunfire>(this[nameof(Controllers)].Address); } }
        public Array<AIAwarenessComponent> AwarenessComponents { get { return new Array<AIAwarenessComponent>(this[nameof(AwarenessComponents)].Address); } }
        public Array<AIAwarenessComponent> AwarenessComponentsToUpdate { get { return new Array<AIAwarenessComponent>(this[nameof(AwarenessComponentsToUpdate)].Address); } }
        public void SendAwarenessSignalSegment(EAwarenessSignal Type, Actor Source, Vector From, Vector To, float Radius) { Invoke(nameof(SendAwarenessSignalSegment), Type, Source, From, To, Radius); }
        public void SendAwarenessSignal(EAwarenessSignal Type, Actor Source, Vector Position, float Radius, bool UseSourceForLastKnownPosition, bool bApplySightRangeBonus) { Invoke(nameof(SendAwarenessSignal), Type, Source, Position, Radius, UseSourceForLastKnownPosition, bApplySightRangeBonus); }
        public AIAwarenessManager GetInstance(Object WorldContextObject) { return Invoke<AIAwarenessManager>(nameof(GetInstance), WorldContextObject); }
    }
    public class AICharacter : CharacterGunfire
    {
        public AICharacter(nint addr) : base(addr) { }
        public BlackboardData Blackboard { get { return this[nameof(Blackboard)].As<BlackboardData>(); } set { this["Blackboard"] = value; } }
        public AIPathPoint SpawnPath { get { return this[nameof(SpawnPath)].As<AIPathPoint>(); } set { this["SpawnPath"] = value; } }
        public AIPathPoint PatrolPath { get { return this[nameof(PatrolPath)].As<AIPathPoint>(); } set { this["PatrolPath"] = value; } }
        public float PerceptionScalar { get { return this[nameof(PerceptionScalar)].GetValue<float>(); } set { this[nameof(PerceptionScalar)].SetValue<float>(value); } }
        public Object CombatClass { get { return this[nameof(CombatClass)]; } set { this[nameof(CombatClass)] = value; } }
        public bool NoDamageWhenNotPlayerVisible { get { return this[nameof(NoDamageWhenNotPlayerVisible)].Flag; } set { this[nameof(NoDamageWhenNotPlayerVisible)].Flag = value; } }
        public float NoDamageWhenNotPlayerDamageScalar { get { return this[nameof(NoDamageWhenNotPlayerDamageScalar)].GetValue<float>(); } set { this[nameof(NoDamageWhenNotPlayerDamageScalar)].SetValue<float>(value); } }
        public float NoDamageWhenNotPlayerVisibleMaxRange { get { return this[nameof(NoDamageWhenNotPlayerVisibleMaxRange)].GetValue<float>(); } set { this[nameof(NoDamageWhenNotPlayerVisibleMaxRange)].SetValue<float>(value); } }
        public Object POITag { get { return this[nameof(POITag)]; } set { this[nameof(POITag)] = value; } }
        public Array<Object> CurrentPOIAnimationTags { get { return new Array<Object>(this[nameof(CurrentPOIAnimationTags)].Address); } }
        public void OnRep_CurrentPOIAnimTags() { Invoke(nameof(OnRep_CurrentPOIAnimTags)); }
        public void DifficultyChanged() { Invoke(nameof(DifficultyChanged)); }
    }
    public class AIGoalActor : Actor
    {
        public AIGoalActor(nint addr) : base(addr) { }
        public Pawn Pawn { get { return this[nameof(Pawn)].As<Pawn>(); } set { this["Pawn"] = value; } }
    }
    public class AIControllerGunfire : AIController
    {
        public AIControllerGunfire(nint addr) : base(addr) { }
        public bool bSeeksTargets { get { return this[nameof(bSeeksTargets)].Flag; } set { this[nameof(bSeeksTargets)].Flag = value; } }
        public bool Persistent { get { return this[nameof(Persistent)].Flag; } set { this[nameof(Persistent)].Flag = value; } }
        public float SightRange { get { return this[nameof(SightRange)].GetValue<float>(); } set { this[nameof(SightRange)].SetValue<float>(value); } }
        public float SightAngle { get { return this[nameof(SightAngle)].GetValue<float>(); } set { this[nameof(SightAngle)].SetValue<float>(value); } }
        public float LostSightRange { get { return this[nameof(LostSightRange)].GetValue<float>(); } set { this[nameof(LostSightRange)].SetValue<float>(value); } }
        public float BonusLostSightRange { get { return this[nameof(BonusLostSightRange)].GetValue<float>(); } set { this[nameof(BonusLostSightRange)].SetValue<float>(value); } }
        public float NearSightRange { get { return this[nameof(NearSightRange)].GetValue<float>(); } set { this[nameof(NearSightRange)].SetValue<float>(value); } }
        public bool bNearSightRequiresLoS { get { return this[nameof(bNearSightRequiresLoS)].Flag; } set { this[nameof(bNearSightRequiresLoS)].Flag = value; } }
        public float SphereLOSRadius { get { return this[nameof(SphereLOSRadius)].GetValue<float>(); } set { this[nameof(SphereLOSRadius)].SetValue<float>(value); } }
        public float SphereLOFRadius { get { return this[nameof(SphereLOFRadius)].GetValue<float>(); } set { this[nameof(SphereLOFRadius)].SetValue<float>(value); } }
        public float HearingScalar { get { return this[nameof(HearingScalar)].GetValue<float>(); } set { this[nameof(HearingScalar)].SetValue<float>(value); } }
        public float HearingOcclusionScalar { get { return this[nameof(HearingOcclusionScalar)].GetValue<float>(); } set { this[nameof(HearingOcclusionScalar)].SetValue<float>(value); } }
        public float ThreatWindow { get { return this[nameof(ThreatWindow)].GetValue<float>(); } set { this[nameof(ThreatWindow)].SetValue<float>(value); } }
        public float ThreatBonus { get { return this[nameof(ThreatBonus)].GetValue<float>(); } set { this[nameof(ThreatBonus)].SetValue<float>(value); } }
        public float AlertTimeout { get { return this[nameof(AlertTimeout)].GetValue<float>(); } set { this[nameof(AlertTimeout)].SetValue<float>(value); } }
        public float AlertGiveUpDistance { get { return this[nameof(AlertGiveUpDistance)].GetValue<float>(); } set { this[nameof(AlertGiveUpDistance)].SetValue<float>(value); } }
        public float AlertGiveUpTimeout { get { return this[nameof(AlertGiveUpTimeout)].GetValue<float>(); } set { this[nameof(AlertGiveUpTimeout)].SetValue<float>(value); } }
        public float AwareDistanceThreshold { get { return this[nameof(AwareDistanceThreshold)].GetValue<float>(); } set { this[nameof(AwareDistanceThreshold)].SetValue<float>(value); } }
        public float AwarePulseRadius { get { return this[nameof(AwarePulseRadius)].GetValue<float>(); } set { this[nameof(AwarePulseRadius)].SetValue<float>(value); } }
        public bool EvaluateFriendlyTargets { get { return this[nameof(EvaluateFriendlyTargets)].Flag; } set { this[nameof(EvaluateFriendlyTargets)].Flag = value; } }
        public EPlayerRelevancyMode PlayerRelevancy { get { return (EPlayerRelevancyMode)this[nameof(PlayerRelevancy)].GetValue<int>(); } set { this[nameof(PlayerRelevancy)].SetValue<int>((int)value); } }
        public bool ForceEvaluatePlayers { get { return this[nameof(ForceEvaluatePlayers)].Flag; } set { this[nameof(ForceEvaluatePlayers)].Flag = value; } }
        public bool PathToLastKnownPosition { get { return this[nameof(PathToLastKnownPosition)].Flag; } set { this[nameof(PathToLastKnownPosition)].Flag = value; } }
        public float PerceptionScalar { get { return this[nameof(PerceptionScalar)].GetValue<float>(); } set { this[nameof(PerceptionScalar)].SetValue<float>(value); } }
        public Object EyeSocket { get { return this[nameof(EyeSocket)]; } set { this[nameof(EyeSocket)] = value; } }
        public float CoverAimAdjustDistance { get { return this[nameof(CoverAimAdjustDistance)].GetValue<float>(); } set { this[nameof(CoverAimAdjustDistance)].SetValue<float>(value); } }
        public Object DefaultTargetSelector { get { return this[nameof(DefaultTargetSelector)]; } set { this[nameof(DefaultTargetSelector)] = value; } }
        public Object CurrentTargetSelector { get { return this[nameof(CurrentTargetSelector)]; } set { this[nameof(CurrentTargetSelector)] = value; } }
        public ENodePathStatus NodePathStatus { get { return (ENodePathStatus)this[nameof(NodePathStatus)].GetValue<int>(); } set { this[nameof(NodePathStatus)].SetValue<int>((int)value); } }
        public bool OverridenByCinematic { get { return this[nameof(OverridenByCinematic)].Flag; } set { this[nameof(OverridenByCinematic)].Flag = value; } }
        public Object OnPawnUnpossessed { get { return this[nameof(OnPawnUnpossessed)]; } set { this[nameof(OnPawnUnpossessed)] = value; } }
        public Object RelevantActorClass { get { return this[nameof(RelevantActorClass)]; } set { this[nameof(RelevantActorClass)] = value; } }
        public Object CurrentTarget { get { return this[nameof(CurrentTarget)]; } set { this[nameof(CurrentTarget)] = value; } }
        public Object ThreatLeader { get { return this[nameof(ThreatLeader)]; } set { this[nameof(ThreatLeader)] = value; } }
        public AITacticalPoint TacticalPoint { get { return this[nameof(TacticalPoint)].As<AITacticalPoint>(); } set { this["TacticalPoint"] = value; } }
        public bool TacticalPointIsValid { get { return this[nameof(TacticalPointIsValid)].Flag; } set { this[nameof(TacticalPointIsValid)].Flag = value; } }
        public AIGoalActor PathToActor { get { return this[nameof(PathToActor)].As<AIGoalActor>(); } set { this["PathToActor"] = value; } }
        public AIPathPoint PathPoint { get { return this[nameof(PathPoint)].As<AIPathPoint>(); } set { this["PathPoint"] = value; } }
        public void UpdateAwareness(float DeltaSeconds) { Invoke(nameof(UpdateAwareness), DeltaSeconds); }
        public void UnlockCurrentTarget() { Invoke(nameof(UnlockCurrentTarget)); }
        public bool TestPathTo(Vector Location) { return Invoke<bool>(nameof(TestPathTo), Location); }
        public void SetTargetSelector(Object NewTargetSelector, bool bUpdateTarget) { Invoke(nameof(SetTargetSelector), NewTargetSelector, bUpdateTarget); }
        public void SetSpawnLocation(Vector SpawnLocation) { Invoke(nameof(SetSpawnLocation), SpawnLocation); }
        public void SetRelevantActorFilterClass(Object FilterClass) { Invoke(nameof(SetRelevantActorFilterClass), FilterClass); }
        public void SetNavigationFilter(Object NavFilter) { Invoke(nameof(SetNavigationFilter), NavFilter); }
        public void SetCurrentTarget(Actor Actor, bool bLockOn) { Invoke(nameof(SetCurrentTarget), Actor, bLockOn); }
        public void SendAwarenessSignal(EAwarenessSignal Type, Actor Source, Vector Position, float Radius, bool UseSourceForLastKnownPosition, bool bApplySightRangeBonus) { Invoke(nameof(SendAwarenessSignal), Type, Source, Position, Radius, UseSourceForLastKnownPosition, bApplySightRangeBonus); }
        public void ResetThreat() { Invoke(nameof(ResetThreat)); }
        public void ResetAwareness() { Invoke(nameof(ResetAwareness)); }
        public void OnSetTacticalPoint(AITacticalPoint NewTacticalPoint) { Invoke(nameof(OnSetTacticalPoint), NewTacticalPoint); }
        public void OnFactionChanged(CharacterGunfire InCharacter) { Invoke(nameof(OnFactionChanged), InCharacter); }
        public void OnClearTacticalPoint() { Invoke(nameof(OnClearTacticalPoint)); }
        public void LockCurrentTarget() { Invoke(nameof(LockCurrentTarget)); }
        public Actor K2_GetBestTarget(Object Selector) { return Invoke<Actor>(nameof(K2_GetBestTarget), Selector); }
        public bool IsTargetLocked() { return Invoke<bool>(nameof(IsTargetLocked)); }
        public bool HasLineOfSightToAnyPlayer() { return Invoke<bool>(nameof(HasLineOfSightToAnyPlayer)); }
        public bool HasLineOfSight(Actor Actor) { return Invoke<bool>(nameof(HasLineOfSight), Actor); }
        public Actor GetThreatLeader() { return Invoke<Actor>(nameof(GetThreatLeader)); }
        public bool GetTargetChangedThisFrame() { return Invoke<bool>(nameof(GetTargetChangedThisFrame)); }
        public bool GetTacticalPointValid() { return Invoke<bool>(nameof(GetTacticalPointValid)); }
        public AITacticalPoint GetTacticalPoint() { return Invoke<AITacticalPoint>(nameof(GetTacticalPoint)); }
        public Actor GetPathTarget(Vector TargetPos, Object PathTargetName) { return Invoke<Actor>(nameof(GetPathTarget), TargetPos, PathTargetName); }
        public AIPathPoint GetPathPoint() { return Invoke<AIPathPoint>(nameof(GetPathPoint)); }
        public Array<AIControllerGunfire> GetNearbyAI(Object WorldContextObject, Vector Origin, float Radius, Array<AIControllerGunfire> IgnoreList) { return Invoke<Array<AIControllerGunfire>>(nameof(GetNearbyAI), WorldContextObject, Origin, Radius, IgnoreList); }
        public Object GetNavigationFilter() { return Invoke<Object>(nameof(GetNavigationFilter)); }
        public byte GetLastPathFollowingCode() { return Invoke<byte>(nameof(GetLastPathFollowingCode)); }
        public Object GetCurrentTargetSelector() { return Invoke<Object>(nameof(GetCurrentTargetSelector)); }
        public Actor GetCurrentTarget() { return Invoke<Actor>(nameof(GetCurrentTarget)); }
        public void AddThreat(Actor ThreatCharacter, float Amount, bool bApplySightRangeBonus) { Invoke(nameof(AddThreat), ThreatCharacter, Amount, bApplySightRangeBonus); }
        public void AddPersistentTarget(Actor Target) { Invoke(nameof(AddPersistentTarget), Target); }
    }
    public class AICoordinatorBase : ActorComponent
    {
        public AICoordinatorBase(nint addr) : base(addr) { }
        public Object DefaultCombatClass { get { return this[nameof(DefaultCombatClass)]; } set { this[nameof(DefaultCombatClass)] = value; } }
        public Object PlayerCombatClass { get { return this[nameof(PlayerCombatClass)]; } set { this[nameof(PlayerCombatClass)] = value; } }
        public Object OnRegisterAttack { get { return this[nameof(OnRegisterAttack)]; } set { this[nameof(OnRegisterAttack)] = value; } }
        public bool IsTargeted(Actor Actor) { return Invoke<bool>(nameof(IsTargeted), Actor); }
        public AICoordinatorBase GetAICoordinator(Object WorldContextObject) { return Invoke<AICoordinatorBase>(nameof(GetAICoordinator), WorldContextObject); }
    }
    public class AICoordinatorMelee : AICoordinatorBase
    {
        public AICoordinatorMelee(nint addr) : base(addr) { }
    }
    public class AICoordinatorRanged : AICoordinatorBase
    {
        public AICoordinatorRanged(nint addr) : base(addr) { }
    }
    public class AIDataContainer : Object
    {
        public AIDataContainer(nint addr) : base(addr) { }
        public Array<AITacticalPoint> TacticalPoints { get { return new Array<AITacticalPoint>(this[nameof(TacticalPoints)].Address); } }
        public Array<AINavigationLink> NavLinks { get { return new Array<AINavigationLink>(this[nameof(NavLinks)].Address); } }
        public Array<SpawnPointList> SpawnPoints { get { return new Array<SpawnPointList>(this[nameof(SpawnPoints)].Address); } }
        public Array<OwnedAIData> OwnedInfo { get { return new Array<OwnedAIData>(this[nameof(OwnedInfo)].Address); } }
    }
    public class AIData : Actor
    {
        public AIData(nint addr) : base(addr) { }
        public bool DrawTacticalPoints { get { return this[nameof(DrawTacticalPoints)].Flag; } set { this[nameof(DrawTacticalPoints)].Flag = value; } }
        public bool DrawTraversalLinks { get { return this[nameof(DrawTraversalLinks)].Flag; } set { this[nameof(DrawTraversalLinks)].Flag = value; } }
        public bool DrawSpawnPoints { get { return this[nameof(DrawSpawnPoints)].Flag; } set { this[nameof(DrawSpawnPoints)].Flag = value; } }
        public AIDataContainer Data { get { return this[nameof(Data)].As<AIDataContainer>(); } set { this["Data"] = value; } }
    }
    public class AIDataComponent : ActorComponent
    {
        public AIDataComponent(nint addr) : base(addr) { }
        public AIData AIData { get { return this[nameof(AIData)].As<AIData>(); } set { this["AIData"] = value; } }
        public void SetState(bool Enabled) { Invoke(nameof(SetState), Enabled); }
    }
    public class AIDataGenerationSettings : Object
    {
        public AIDataGenerationSettings(nint addr) : base(addr) { }
        public Object NavAgentName { get { return this[nameof(NavAgentName)]; } set { this[nameof(NavAgentName)] = value; } }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public bool QueryComplexCollision { get { return this[nameof(QueryComplexCollision)].Flag; } set { this[nameof(QueryComplexCollision)].Flag = value; } }
        public float CoverCheckIncrement { get { return this[nameof(CoverCheckIncrement)].GetValue<float>(); } set { this[nameof(CoverCheckIncrement)].SetValue<float>(value); } }
        public bool bGenerateCover { get { return this[nameof(bGenerateCover)].Flag; } set { this[nameof(bGenerateCover)].Flag = value; } }
        public float MinimumCoverWidth { get { return this[nameof(MinimumCoverWidth)].GetValue<float>(); } set { this[nameof(MinimumCoverWidth)].SetValue<float>(value); } }
        public float CoverTestDistance { get { return this[nameof(CoverTestDistance)].GetValue<float>(); } set { this[nameof(CoverTestDistance)].SetValue<float>(value); } }
        public float LongEdgeLength { get { return this[nameof(LongEdgeLength)].GetValue<float>(); } set { this[nameof(LongEdgeLength)].SetValue<float>(value); } }
        public float LowCoverHeight { get { return this[nameof(LowCoverHeight)].GetValue<float>(); } set { this[nameof(LowCoverHeight)].SetValue<float>(value); } }
        public float LowCoverOpenTestDistance { get { return this[nameof(LowCoverOpenTestDistance)].GetValue<float>(); } set { this[nameof(LowCoverOpenTestDistance)].SetValue<float>(value); } }
        public float LowCoverOpenTestHeight { get { return this[nameof(LowCoverOpenTestHeight)].GetValue<float>(); } set { this[nameof(LowCoverOpenTestHeight)].SetValue<float>(value); } }
        public float LowCoverOpenTestSize { get { return this[nameof(LowCoverOpenTestSize)].GetValue<float>(); } set { this[nameof(LowCoverOpenTestSize)].SetValue<float>(value); } }
        public float HighCoverHeight { get { return this[nameof(HighCoverHeight)].GetValue<float>(); } set { this[nameof(HighCoverHeight)].SetValue<float>(value); } }
        public float HighCornerCoverGap { get { return this[nameof(HighCornerCoverGap)].GetValue<float>(); } set { this[nameof(HighCornerCoverGap)].SetValue<float>(value); } }
        public float HighCornerCoverBottom { get { return this[nameof(HighCornerCoverBottom)].GetValue<float>(); } set { this[nameof(HighCornerCoverBottom)].SetValue<float>(value); } }
        public Object FallNavArea { get { return this[nameof(FallNavArea)]; } set { this[nameof(FallNavArea)] = value; } }
        public float MaximumFallDistance { get { return this[nameof(MaximumFallDistance)].GetValue<float>(); } set { this[nameof(MaximumFallDistance)].SetValue<float>(value); } }
        public Array<Object> VaultSettings { get { return new Array<Object>(this[nameof(VaultSettings)].Address); } }
        public Array<SpawnGenerator> SpawnGenerators { get { return new Array<SpawnGenerator>(this[nameof(SpawnGenerators)].Address); } }
    }
    public class AIDataRenderingComponent : PrimitiveComponent
    {
        public AIDataRenderingComponent(nint addr) : base(addr) { }
    }
    public class AINavArea : NavArea
    {
        public AINavArea(nint addr) : base(addr) { }
        public bool IsNullArea { get { return this[nameof(IsNullArea)].Flag; } set { this[nameof(IsNullArea)].Flag = value; } }
        public ENavAreaFlag AreaFlag { get { return (ENavAreaFlag)this[nameof(AreaFlag)].GetValue<int>(); } set { this[nameof(AreaFlag)].SetValue<int>((int)value); } }
    }
    public class AIPathPoint : Actor
    {
        public AIPathPoint(nint addr) : base(addr) { }
        public AIPathPoint Next { get { return this[nameof(Next)].As<AIPathPoint>(); } set { this["Next"] = value; } }
        public Array<AIPathBranchPoint> Branches { get { return new Array<AIPathBranchPoint>(this[nameof(Branches)].Address); } }
        public float WaitTimeMin { get { return this[nameof(WaitTimeMin)].GetValue<float>(); } set { this[nameof(WaitTimeMin)].SetValue<float>(value); } }
        public float WaitTimeMax { get { return this[nameof(WaitTimeMax)].GetValue<float>(); } set { this[nameof(WaitTimeMax)].SetValue<float>(value); } }
        public bool FacePathPointDirection { get { return this[nameof(FacePathPointDirection)].Flag; } set { this[nameof(FacePathPointDirection)].Flag = value; } }
        public Array<Object> WaitTags { get { return new Array<Object>(this[nameof(WaitTags)].Address); } }
        public Array<Object> PathTags { get { return new Array<Object>(this[nameof(PathTags)].Address); } }
        public Color PathColor { get { return this[nameof(PathColor)].As<Color>(); } set { this["PathColor"] = value; } }
        public AIPathPoint GetNext(AIPathPoint Prev) { return Invoke<AIPathPoint>(nameof(GetNext), Prev); }
    }
    public class AIPOIType : Object
    {
        public AIPOIType(nint addr) : base(addr) { }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public Object AnimationTag { get { return this[nameof(AnimationTag)]; } set { this[nameof(AnimationTag)] = value; } }
    }
    public class AIPointOfInterest : Actor
    {
        public AIPointOfInterest(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public Array<Object> ActorTagsWhileInUse { get { return new Array<Object>(this[nameof(ActorTagsWhileInUse)].Address); } }
        public Array<Object> AnimTagsWhileInUse { get { return new Array<Object>(this[nameof(AnimTagsWhileInUse)].Address); } }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public float MinUseTime { get { return this[nameof(MinUseTime)].GetValue<float>(); } set { this[nameof(MinUseTime)].SetValue<float>(value); } }
        public float MaxUseTime { get { return this[nameof(MaxUseTime)].GetValue<float>(); } set { this[nameof(MaxUseTime)].SetValue<float>(value); } }
        public float CooldownMin { get { return this[nameof(CooldownMin)].GetValue<float>(); } set { this[nameof(CooldownMin)].SetValue<float>(value); } }
        public float CooldownMax { get { return this[nameof(CooldownMax)].GetValue<float>(); } set { this[nameof(CooldownMax)].SetValue<float>(value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public bool UsePathDistance { get { return this[nameof(UsePathDistance)].Flag; } set { this[nameof(UsePathDistance)].Flag = value; } }
        public bool ScopedToLevel { get { return this[nameof(ScopedToLevel)].Flag; } set { this[nameof(ScopedToLevel)].Flag = value; } }
        public AIPathPoint PatrolPath { get { return this[nameof(PatrolPath)].As<AIPathPoint>(); } set { this["PatrolPath"] = value; } }
        public bool AllowSnapping { get { return this[nameof(AllowSnapping)].Flag; } set { this[nameof(AllowSnapping)].Flag = value; } }
        public Actor Occupant { get { return this[nameof(Occupant)].As<Actor>(); } set { this["Occupant"] = value; } }
        public void SetEnabled(bool IsEnabled) { Invoke(nameof(SetEnabled), IsEnabled); }
        public bool OnValidate(Actor Actor) { return Invoke<bool>(nameof(OnValidate), Actor); }
        public void OnOccupied(Actor Actor) { Invoke(nameof(OnOccupied), Actor); }
        public void OnEndUse() { Invoke(nameof(OnEndUse)); }
        public void OnBeginUse() { Invoke(nameof(OnBeginUse)); }
        public void EndUse(bool SetCooldown) { Invoke(nameof(EndUse), SetCooldown); }
        public void BeginUse() { Invoke(nameof(BeginUse)); }
    }
    public class AIPointOfInterestManager : ActorComponent
    {
        public AIPointOfInterestManager(nint addr) : base(addr) { }
        public Array<AIPointOfInterest> PointsOfInterest { get { return new Array<AIPointOfInterest>(this[nameof(PointsOfInterest)].Address); } }
        public bool HasPointsInNavRange(Actor Actor, Vector SourceLocation, float NavRange, float SnapDistance, Object POIType) { return Invoke<bool>(nameof(HasPointsInNavRange), Actor, SourceLocation, NavRange, SnapDistance, POIType); }
        public void GetPointsSweep(Actor Source, Vector Start, Vector End, float Radius, Object POIType, Array<AIPointOfInterest> POIs) { Invoke(nameof(GetPointsSweep), Source, Start, End, Radius, POIType, POIs); }
        public void GetPointsInNavRange(Actor Actor, Vector SourceLocation, float NavRange, float SnapDistance, Object POIType, Array<AIPointOfInterest> POIs) { Invoke(nameof(GetPointsInNavRange), Actor, SourceLocation, NavRange, SnapDistance, POIType, POIs); }
        public AIPointOfInterestManager GetInstance(Object WorldContextObject) { return Invoke<AIPointOfInterestManager>(nameof(GetInstance), WorldContextObject); }
        public void EnablePointsOfInterestInGroup(Object GroupName, bool DeactivateOtherGroups) { Invoke(nameof(EnablePointsOfInterestInGroup), GroupName, DeactivateOtherGroups); }
    }
    public class AIPointOfInterestComponent : ActorComponent
    {
        public AIPointOfInterestComponent(nint addr) : base(addr) { }
        public Array<Object> ValidTypes { get { return new Array<Object>(this[nameof(ValidTypes)].Address); } }
        public float MinUpdateDelay { get { return this[nameof(MinUpdateDelay)].GetValue<float>(); } set { this[nameof(MinUpdateDelay)].SetValue<float>(value); } }
        public float MaxUpdateDelay { get { return this[nameof(MaxUpdateDelay)].GetValue<float>(); } set { this[nameof(MaxUpdateDelay)].SetValue<float>(value); } }
        public AIPointOfInterest DestinationPOI { get { return this[nameof(DestinationPOI)].As<AIPointOfInterest>(); } set { this["DestinationPOI"] = value; } }
        public AIPointOfInterest QueuedPOI { get { return this[nameof(QueuedPOI)].As<AIPointOfInterest>(); } set { this["QueuedPOI"] = value; } }
        public bool bSnapToInitialDestination { get { return this[nameof(bSnapToInitialDestination)].Flag; } set { this[nameof(bSnapToInitialDestination)].Flag = value; } }
    }
    public class AIPOICondition : Condition
    {
        public AIPOICondition(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public bool Any { get { return this[nameof(Any)].Flag; } set { this[nameof(Any)].Flag = value; } }
    }
    public class AITacticalPointDebugComponent : ActorComponent
    {
        public AITacticalPointDebugComponent(nint addr) : base(addr) { }
    }
    public class AITacticalPointContainerInterface : Interface
    {
        public AITacticalPointContainerInterface(nint addr) : base(addr) { }
    }
    public class AITacticalPointManager : WorldSubsystem
    {
        public AITacticalPointManager(nint addr) : base(addr) { }
    }
    public class BTDecorator_Condition : BTDecorator
    {
        public BTDecorator_Condition(nint addr) : base(addr) { }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class BTTask_SetActorState : BTTaskNode
    {
        public BTTask_SetActorState(nint addr) : base(addr) { }
        public Object StateNameID { get { return this[nameof(StateNameID)]; } set { this[nameof(StateNameID)] = value; } }
        public bool WaitForComplete { get { return this[nameof(WaitForComplete)].Flag; } set { this[nameof(WaitForComplete)].Flag = value; } }
    }
    public class AIDistanceCondition : Condition
    {
        public AIDistanceCondition(nint addr) : base(addr) { }
        public EAIDistanceType Type { get { return (EAIDistanceType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object BlackboardKey { get { return this[nameof(BlackboardKey)]; } set { this[nameof(BlackboardKey)] = value; } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public bool TwoDimensional { get { return this[nameof(TwoDimensional)].Flag; } set { this[nameof(TwoDimensional)].Flag = value; } }
    }
    public class AIHasBetterTargetCondition : Condition
    {
        public AIHasBetterTargetCondition(nint addr) : base(addr) { }
    }
    public class AIHasNavigationStateCondition : Condition
    {
        public AIHasNavigationStateCondition(nint addr) : base(addr) { }
        public ENavigationType NavigationType { get { return (ENavigationType)this[nameof(NavigationType)].GetValue<int>(); } set { this[nameof(NavigationType)].SetValue<int>((int)value); } }
    }
    public class AIHasPatrolPathCondition : Condition
    {
        public AIHasPatrolPathCondition(nint addr) : base(addr) { }
    }
    public class AIIsJumpComplete : Condition
    {
        public AIIsJumpComplete(nint addr) : base(addr) { }
    }
    public class AIJumpCondition : Condition
    {
        public AIJumpCondition(nint addr) : base(addr) { }
        public ActorStateID JumpState { get { return this[nameof(JumpState)].As<ActorStateID>(); } set { this["JumpState"] = value; } }
    }
    public class SharedLadderCondition : Condition
    {
        public SharedLadderCondition(nint addr) : base(addr) { }
        public LadderCacheComponent GetLadderCache(Actor Actor) { return Invoke<LadderCacheComponent>(nameof(GetLadderCache), Actor); }
    }
    public class AILadderCondition : SharedLadderCondition
    {
        public AILadderCondition(nint addr) : base(addr) { }
        public ENavAreaFlag AreaFlag { get { return (ENavAreaFlag)this[nameof(AreaFlag)].GetValue<int>(); } set { this[nameof(AreaFlag)].SetValue<int>((int)value); } }
        public ELadderPathSearch PathSearch { get { return (ELadderPathSearch)this[nameof(PathSearch)].GetValue<int>(); } set { this[nameof(PathSearch)].SetValue<int>((int)value); } }
        public ELadderPathToValidate PathToValidate { get { return (ELadderPathToValidate)this[nameof(PathToValidate)].GetValue<int>(); } set { this[nameof(PathToValidate)].SetValue<int>((int)value); } }
        public bool BestPath { get { return this[nameof(BestPath)].Flag; } set { this[nameof(BestPath)].Flag = value; } }
    }
    public class LadderOccupancyCondition : SharedLadderCondition
    {
        public LadderOccupancyCondition(nint addr) : base(addr) { }
        public ELadderOccupancySearch Search { get { return (ELadderOccupancySearch)this[nameof(Search)].GetValue<int>(); } set { this[nameof(Search)].SetValue<int>((int)value); } }
    }
    public class AINavAreaCondition : Condition
    {
        public AINavAreaCondition(nint addr) : base(addr) { }
        public Object AreaClass { get { return this[nameof(AreaClass)]; } set { this[nameof(AreaClass)] = value; } }
        public float LookAheadDistance { get { return this[nameof(LookAheadDistance)].GetValue<float>(); } set { this[nameof(LookAheadDistance)].SetValue<float>(value); } }
    }
    public class AINavLinkCondition : Condition
    {
        public AINavLinkCondition(nint addr) : base(addr) { }
        public bool bFilterByAreaFlag { get { return this[nameof(bFilterByAreaFlag)].Flag; } set { this[nameof(bFilterByAreaFlag)].Flag = value; } }
        public ENavAreaFlag AreaFlag { get { return (ENavAreaFlag)this[nameof(AreaFlag)].GetValue<int>(); } set { this[nameof(AreaFlag)].SetValue<int>((int)value); } }
        public float LookAheadDistance { get { return this[nameof(LookAheadDistance)].GetValue<float>(); } set { this[nameof(LookAheadDistance)].SetValue<float>(value); } }
    }
    public class AINodePathCondition : Condition
    {
        public AINodePathCondition(nint addr) : base(addr) { }
        public ENodePathStatus Status { get { return (ENodePathStatus)this[nameof(Status)].GetValue<int>(); } set { this[nameof(Status)].SetValue<int>((int)value); } }
    }
    public class AIPathActionCondition : Condition
    {
        public AIPathActionCondition(nint addr) : base(addr) { }
        public byte Action { get { return this[nameof(Action)].GetValue<byte>(); } set { this[nameof(Action)].SetValue<byte>(value); } }
    }
    public class AIPathResultCondition : Condition
    {
        public AIPathResultCondition(nint addr) : base(addr) { }
    }
    public class AIPathStatusCondition : Condition
    {
        public AIPathStatusCondition(nint addr) : base(addr) { }
        public byte Status { get { return this[nameof(Status)].GetValue<byte>(); } set { this[nameof(Status)].SetValue<byte>(value); } }
    }
    public class AITacticalPointCondition : Condition
    {
        public AITacticalPointCondition(nint addr) : base(addr) { }
        public EAITacticalPointType TacticalPointType { get { return (EAITacticalPointType)this[nameof(TacticalPointType)].GetValue<int>(); } set { this[nameof(TacticalPointType)].SetValue<int>((int)value); } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
    }
    public class AITargetChangedCondition : Condition
    {
        public AITargetChangedCondition(nint addr) : base(addr) { }
    }
    public class AITargetCondition : Condition
    {
        public AITargetCondition(nint addr) : base(addr) { }
        public Object TargetSelector { get { return this[nameof(TargetSelector)]; } set { this[nameof(TargetSelector)] = value; } }
        public EAwarenessState AwarenessState { get { return (EAwarenessState)this[nameof(AwarenessState)].GetValue<int>(); } set { this[nameof(AwarenessState)].SetValue<int>((int)value); } }
        public Object PathTarget { get { return this[nameof(PathTarget)]; } set { this[nameof(PathTarget)] = value; } }
    }
    public class HasTargetCondition : Condition
    {
        public HasTargetCondition(nint addr) : base(addr) { }
    }
    public class RangeToTargetCondition : Condition
    {
        public RangeToTargetCondition(nint addr) : base(addr) { }
        public Object BlackboardKey { get { return this[nameof(BlackboardKey)]; } set { this[nameof(BlackboardKey)] = value; } }
        public bool bIgnoreSoftTarget { get { return this[nameof(bIgnoreSoftTarget)].Flag; } set { this[nameof(bIgnoreSoftTarget)].Flag = value; } }
        public bool bEdgeToEdge { get { return this[nameof(bEdgeToEdge)].Flag; } set { this[nameof(bEdgeToEdge)].Flag = value; } }
        public float RangeMin { get { return this[nameof(RangeMin)].GetValue<float>(); } set { this[nameof(RangeMin)].SetValue<float>(value); } }
        public float RangeMax { get { return this[nameof(RangeMax)].GetValue<float>(); } set { this[nameof(RangeMax)].SetValue<float>(value); } }
        public float HeightDiff { get { return this[nameof(HeightDiff)].GetValue<float>(); } set { this[nameof(HeightDiff)].SetValue<float>(value); } }
        public bool bHeightEdgeToEdge { get { return this[nameof(bHeightEdgeToEdge)].Flag; } set { this[nameof(bHeightEdgeToEdge)].Flag = value; } }
        public float AngleRef { get { return this[nameof(AngleRef)].GetValue<float>(); } set { this[nameof(AngleRef)].SetValue<float>(value); } }
        public float Arc { get { return this[nameof(Arc)].GetValue<float>(); } set { this[nameof(Arc)].SetValue<float>(value); } }
        public EVisState VisState { get { return (EVisState)this[nameof(VisState)].GetValue<int>(); } set { this[nameof(VisState)].SetValue<int>((int)value); } }
        public EYesNo HasDirectPath { get { return (EYesNo)this[nameof(HasDirectPath)].GetValue<int>(); } set { this[nameof(HasDirectPath)].SetValue<int>((int)value); } }
        public EYesNo HasLOS { get { return (EYesNo)this[nameof(HasLOS)].GetValue<int>(); } set { this[nameof(HasLOS)].SetValue<int>((int)value); } }
        public EYesNo HasSphereLOS { get { return (EYesNo)this[nameof(HasSphereLOS)].GetValue<int>(); } set { this[nameof(HasSphereLOS)].SetValue<int>((int)value); } }
        public EYesNo HasLOF { get { return (EYesNo)this[nameof(HasLOF)].GetValue<int>(); } set { this[nameof(HasLOF)].SetValue<int>((int)value); } }
        public EYesNo InView { get { return (EYesNo)this[nameof(InView)].GetValue<int>(); } set { this[nameof(InView)].SetValue<int>((int)value); } }
    }
    public class PathFollowingComponentGunfire : PathFollowingComponent
    {
        public PathFollowingComponentGunfire(nint addr) : base(addr) { }
    }
    public class PathSharingManager : Object
    {
        public PathSharingManager(nint addr) : base(addr) { }
    }
    public class PathSharingFilter : NavigationQueryFilter
    {
        public PathSharingFilter(nint addr) : base(addr) { }
        public float PathSharingPenaltyScalar { get { return this[nameof(PathSharingPenaltyScalar)].GetValue<float>(); } set { this[nameof(PathSharingPenaltyScalar)].SetValue<float>(value); } }
    }
    public class PathSharingFilter_Default : PathSharingFilter
    {
        public PathSharingFilter_Default(nint addr) : base(addr) { }
    }
    public class AIAttackStateDecorator : ActorStateDecorator
    {
        public AIAttackStateDecorator(nint addr) : base(addr) { }
        public EAttackType AttackType { get { return (EAttackType)this[nameof(AttackType)].GetValue<int>(); } set { this[nameof(AttackType)].SetValue<int>((int)value); } }
        public int AttackPressure { get { return this[nameof(AttackPressure)].GetValue<int>(); } set { this[nameof(AttackPressure)].SetValue<int>(value); } }
        public bool ValidatePressure { get { return this[nameof(ValidatePressure)].Flag; } set { this[nameof(ValidatePressure)].Flag = value; } }
    }
    public class AIConvergeToStateDecorator : ActorStateDecorator
    {
        public AIConvergeToStateDecorator(nint addr) : base(addr) { }
        public EConvergeToType ConvergeTo { get { return (EConvergeToType)this[nameof(ConvergeTo)].GetValue<int>(); } set { this[nameof(ConvergeTo)].SetValue<int>((int)value); } }
        public Object BlackboardKey { get { return this[nameof(BlackboardKey)]; } set { this[nameof(BlackboardKey)] = value; } }
        public float ConvergeTime { get { return this[nameof(ConvergeTime)].GetValue<float>(); } set { this[nameof(ConvergeTime)].SetValue<float>(value); } }
        public bool ConvergeEasesIn { get { return this[nameof(ConvergeEasesIn)].Flag; } set { this[nameof(ConvergeEasesIn)].Flag = value; } }
        public float ConvergeEaseExponent { get { return this[nameof(ConvergeEaseExponent)].GetValue<float>(); } set { this[nameof(ConvergeEaseExponent)].SetValue<float>(value); } }
        public bool ConvergeXY { get { return this[nameof(ConvergeXY)].Flag; } set { this[nameof(ConvergeXY)].Flag = value; } }
        public bool ConvergeZ { get { return this[nameof(ConvergeZ)].Flag; } set { this[nameof(ConvergeZ)].Flag = value; } }
        public bool ConvergeHeading { get { return this[nameof(ConvergeHeading)].Flag; } set { this[nameof(ConvergeHeading)].Flag = value; } }
        public bool ConvereHeadingFaceTarget { get { return this[nameof(ConvereHeadingFaceTarget)].Flag; } set { this[nameof(ConvereHeadingFaceTarget)].Flag = value; } }
        public bool UpdateTarget { get { return this[nameof(UpdateTarget)].Flag; } set { this[nameof(UpdateTarget)].Flag = value; } }
        public bool StopUpdatingWhenConverged { get { return this[nameof(StopUpdatingWhenConverged)].Flag; } set { this[nameof(StopUpdatingWhenConverged)].Flag = value; } }
        public Vector ConvergeOffset { get { return this[nameof(ConvergeOffset)].As<Vector>(); } set { this["ConvergeOffset"] = value; } }
        public float ConvergeHeadingOffset { get { return this[nameof(ConvergeHeadingOffset)].GetValue<float>(); } set { this[nameof(ConvergeHeadingOffset)].SetValue<float>(value); } }
    }
    public class AIEnvQueryStateDecorator : ActorStateDecorator
    {
        public AIEnvQueryStateDecorator(nint addr) : base(addr) { }
        public Array<EQSParametrizedQueryExecutionRequest> Queries { get { return new Array<EQSParametrizedQueryExecutionRequest>(this[nameof(Queries)].Address); } }
        public EEnvQueryDecoratorAction Action { get { return (EEnvQueryDecoratorAction)this[nameof(Action)].GetValue<int>(); } set { this[nameof(Action)].SetValue<int>((int)value); } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public float MinTimeout { get { return this[nameof(MinTimeout)].GetValue<float>(); } set { this[nameof(MinTimeout)].SetValue<float>(value); } }
        public float MaxTimeout { get { return this[nameof(MaxTimeout)].GetValue<float>(); } set { this[nameof(MaxTimeout)].SetValue<float>(value); } }
        public float ValidateInterval { get { return this[nameof(ValidateInterval)].GetValue<float>(); } set { this[nameof(ValidateInterval)].SetValue<float>(value); } }
        public float RetryInterval { get { return this[nameof(RetryInterval)].GetValue<float>(); } set { this[nameof(RetryInterval)].SetValue<float>(value); } }
        public float NewPointScoreThreshold { get { return this[nameof(NewPointScoreThreshold)].GetValue<float>(); } set { this[nameof(NewPointScoreThreshold)].SetValue<float>(value); } }
        public float NewPointScoreThresholdWhilePathing { get { return this[nameof(NewPointScoreThresholdWhilePathing)].GetValue<float>(); } set { this[nameof(NewPointScoreThresholdWhilePathing)].SetValue<float>(value); } }
        public bool PathToTargetOnFail { get { return this[nameof(PathToTargetOnFail)].Flag; } set { this[nameof(PathToTargetOnFail)].Flag = value; } }
        public float PathToTargetOnFailCompleteRange { get { return this[nameof(PathToTargetOnFailCompleteRange)].GetValue<float>(); } set { this[nameof(PathToTargetOnFailCompleteRange)].SetValue<float>(value); } }
        public Object BlackboardKey { get { return this[nameof(BlackboardKey)]; } set { this[nameof(BlackboardKey)] = value; } }
        public Object StatusKey { get { return this[nameof(StatusKey)]; } set { this[nameof(StatusKey)] = value; } }
        public Conditions UpdateConditions { get { return this[nameof(UpdateConditions)].As<Conditions>(); } set { this["UpdateConditions"] = value; } }
        public Array<EnvQuery> RetestQueries { get { return new Array<EnvQuery>(this[nameof(RetestQueries)].Address); } }
    }
    public class AIFollowTargetStateDecorator : ActorStateDecorator
    {
        public AIFollowTargetStateDecorator(nint addr) : base(addr) { }
        public Object FollowTarget { get { return this[nameof(FollowTarget)]; } set { this[nameof(FollowTarget)] = value; } }
        public Object FollowLocationKey { get { return this[nameof(FollowLocationKey)]; } set { this[nameof(FollowLocationKey)] = value; } }
        public float MinRadius { get { return this[nameof(MinRadius)].GetValue<float>(); } set { this[nameof(MinRadius)].SetValue<float>(value); } }
        public float MaxRadius { get { return this[nameof(MaxRadius)].GetValue<float>(); } set { this[nameof(MaxRadius)].SetValue<float>(value); } }
        public float MinHeight { get { return this[nameof(MinHeight)].GetValue<float>(); } set { this[nameof(MinHeight)].SetValue<float>(value); } }
        public float MaxHeight { get { return this[nameof(MaxHeight)].GetValue<float>(); } set { this[nameof(MaxHeight)].SetValue<float>(value); } }
        public float FollowAngle { get { return this[nameof(FollowAngle)].GetValue<float>(); } set { this[nameof(FollowAngle)].SetValue<float>(value); } }
        public float AdditionalFollowerAngleOffset { get { return this[nameof(AdditionalFollowerAngleOffset)].GetValue<float>(); } set { this[nameof(AdditionalFollowerAngleOffset)].SetValue<float>(value); } }
        public float FollowAngleInterpSpeed { get { return this[nameof(FollowAngleInterpSpeed)].GetValue<float>(); } set { this[nameof(FollowAngleInterpSpeed)].SetValue<float>(value); } }
        public float StopDistanceThreshold { get { return this[nameof(StopDistanceThreshold)].GetValue<float>(); } set { this[nameof(StopDistanceThreshold)].SetValue<float>(value); } }
        public bool MatchSpeed { get { return this[nameof(MatchSpeed)].Flag; } set { this[nameof(MatchSpeed)].Flag = value; } }
        public float MinSpeed { get { return this[nameof(MinSpeed)].GetValue<float>(); } set { this[nameof(MinSpeed)].SetValue<float>(value); } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float MatchDistance { get { return this[nameof(MatchDistance)].GetValue<float>(); } set { this[nameof(MatchDistance)].SetValue<float>(value); } }
        public float NearTargetDistance { get { return this[nameof(NearTargetDistance)].GetValue<float>(); } set { this[nameof(NearTargetDistance)].SetValue<float>(value); } }
        public float SpeedEaseOutScalar { get { return this[nameof(SpeedEaseOutScalar)].GetValue<float>(); } set { this[nameof(SpeedEaseOutScalar)].SetValue<float>(value); } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public float MovingAcceptanceRadius { get { return this[nameof(MovingAcceptanceRadius)].GetValue<float>(); } set { this[nameof(MovingAcceptanceRadius)].SetValue<float>(value); } }
        public bool bAllowDirectMoves { get { return this[nameof(bAllowDirectMoves)].Flag; } set { this[nameof(bAllowDirectMoves)].Flag = value; } }
    }
    public class AIFollowSubsystem : WorldSubsystem
    {
        public AIFollowSubsystem(nint addr) : base(addr) { }
        public Array<FollowTargetData> FollowTargets { get { return new Array<FollowTargetData>(this[nameof(FollowTargets)].Address); } }
    }
    public class AIMoveForwardStateDecorator : ActorStateDecorator
    {
        public AIMoveForwardStateDecorator(nint addr) : base(addr) { }
        public bool bIgnorePlayerInput { get { return this[nameof(bIgnorePlayerInput)].Flag; } set { this[nameof(bIgnorePlayerInput)].Flag = value; } }
        public float InputThreshold { get { return this[nameof(InputThreshold)].GetValue<float>(); } set { this[nameof(InputThreshold)].SetValue<float>(value); } }
        public bool KeepVelocityOnEnter { get { return this[nameof(KeepVelocityOnEnter)].Flag; } set { this[nameof(KeepVelocityOnEnter)].Flag = value; } }
    }
    public class AINavigationFilterDecorator : ActorStateDecorator
    {
        public AINavigationFilterDecorator(nint addr) : base(addr) { }
        public Object FilterOverride { get { return this[nameof(FilterOverride)]; } set { this[nameof(FilterOverride)] = value; } }
    }
    public class AINavigationStateDecorator : ActorStateDecorator
    {
        public AINavigationStateDecorator(nint addr) : base(addr) { }
        public ENavigationType NavigationType { get { return (ENavigationType)this[nameof(NavigationType)].GetValue<int>(); } set { this[nameof(NavigationType)].SetValue<int>((int)value); } }
        public bool bRestoreOnExit { get { return this[nameof(bRestoreOnExit)].Flag; } set { this[nameof(bRestoreOnExit)].Flag = value; } }
    }
    public class AIPathToStateDecorator : ActorStateDecorator
    {
        public AIPathToStateDecorator(nint addr) : base(addr) { }
        public Object PathTarget { get { return this[nameof(PathTarget)]; } set { this[nameof(PathTarget)] = value; } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public float AcceptanceRadiusMax { get { return this[nameof(AcceptanceRadiusMax)].GetValue<float>(); } set { this[nameof(AcceptanceRadiusMax)].SetValue<float>(value); } }
        public float MinDestinationHeightOffset { get { return this[nameof(MinDestinationHeightOffset)].GetValue<float>(); } set { this[nameof(MinDestinationHeightOffset)].SetValue<float>(value); } }
        public float MaxDestinationHeightOffset { get { return this[nameof(MaxDestinationHeightOffset)].GetValue<float>(); } set { this[nameof(MaxDestinationHeightOffset)].SetValue<float>(value); } }
        public bool StopOnOverlap { get { return this[nameof(StopOnOverlap)].Flag; } set { this[nameof(StopOnOverlap)].Flag = value; } }
        public bool IncludeGoalRadius { get { return this[nameof(IncludeGoalRadius)].Flag; } set { this[nameof(IncludeGoalRadius)].Flag = value; } }
        public float OrientToTargetRadius { get { return this[nameof(OrientToTargetRadius)].GetValue<float>(); } set { this[nameof(OrientToTargetRadius)].SetValue<float>(value); } }
        public float PathRestartDistance { get { return this[nameof(PathRestartDistance)].GetValue<float>(); } set { this[nameof(PathRestartDistance)].SetValue<float>(value); } }
        public bool AdjustByTargetAgentHalfHeight { get { return this[nameof(AdjustByTargetAgentHalfHeight)].Flag; } set { this[nameof(AdjustByTargetAgentHalfHeight)].Flag = value; } }
        public bool ProjectDestinationToNavMesh { get { return this[nameof(ProjectDestinationToNavMesh)].Flag; } set { this[nameof(ProjectDestinationToNavMesh)].Flag = value; } }
        public Vector ProjectExtent { get { return this[nameof(ProjectExtent)].As<Vector>(); } set { this["ProjectExtent"] = value; } }
    }
    public class AIPatrolStateDecorator : ActorStateDecorator
    {
        public AIPatrolStateDecorator(nint addr) : base(addr) { }
        public Object Path { get { return this[nameof(Path)]; } set { this[nameof(Path)] = value; } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public bool StartPathAtNearestPoint { get { return this[nameof(StartPathAtNearestPoint)].Flag; } set { this[nameof(StartPathAtNearestPoint)].Flag = value; } }
        public bool AllowPartialPath { get { return this[nameof(AllowPartialPath)].Flag; } set { this[nameof(AllowPartialPath)].Flag = value; } }
        public bool PingPong { get { return this[nameof(PingPong)].Flag; } set { this[nameof(PingPong)].Flag = value; } }
        public bool OverrideSpawnLocation { get { return this[nameof(OverrideSpawnLocation)].Flag; } set { this[nameof(OverrideSpawnLocation)].Flag = value; } }
        public bool OverrideFacing { get { return this[nameof(OverrideFacing)].Flag; } set { this[nameof(OverrideFacing)].Flag = value; } }
    }
    public class AIPerceptionStateDecorator : ActorStateDecorator
    {
        public AIPerceptionStateDecorator(nint addr) : base(addr) { }
        public float PerceptionScalar { get { return this[nameof(PerceptionScalar)].GetValue<float>(); } set { this[nameof(PerceptionScalar)].SetValue<float>(value); } }
        public float HearingScalar { get { return this[nameof(HearingScalar)].GetValue<float>(); } set { this[nameof(HearingScalar)].SetValue<float>(value); } }
        public float SightRange { get { return this[nameof(SightRange)].GetValue<float>(); } set { this[nameof(SightRange)].SetValue<float>(value); } }
        public float LostSightRange { get { return this[nameof(LostSightRange)].GetValue<float>(); } set { this[nameof(LostSightRange)].SetValue<float>(value); } }
        public float SightAngle { get { return this[nameof(SightAngle)].GetValue<float>(); } set { this[nameof(SightAngle)].SetValue<float>(value); } }
        public bool bRestoreOnExit { get { return this[nameof(bRestoreOnExit)].Flag; } set { this[nameof(bRestoreOnExit)].Flag = value; } }
    }
    public class AIShootStateDecorator : ActorStateDecorator
    {
        public AIShootStateDecorator(nint addr) : base(addr) { }
        public Object WeaponType { get { return this[nameof(WeaponType)]; } set { this[nameof(WeaponType)] = value; } }
        public float ReadyTime { get { return this[nameof(ReadyTime)].GetValue<float>(); } set { this[nameof(ReadyTime)].SetValue<float>(value); } }
        public Object ReadyStartEvent { get { return this[nameof(ReadyStartEvent)]; } set { this[nameof(ReadyStartEvent)] = value; } }
        public float ReadyLingerTime { get { return this[nameof(ReadyLingerTime)].GetValue<float>(); } set { this[nameof(ReadyLingerTime)].SetValue<float>(value); } }
        public byte Pressure { get { return this[nameof(Pressure)].GetValue<byte>(); } set { this[nameof(Pressure)].SetValue<byte>(value); } }
        public bool ShotRequiresLOS { get { return this[nameof(ShotRequiresLOS)].Flag; } set { this[nameof(ShotRequiresLOS)].Flag = value; } }
        public float BlindShootDivergeDistance { get { return this[nameof(BlindShootDivergeDistance)].GetValue<float>(); } set { this[nameof(BlindShootDivergeDistance)].SetValue<float>(value); } }
        public Object Cooldown { get { return this[nameof(Cooldown)]; } set { this[nameof(Cooldown)] = value; } }
        public float CooldownMin { get { return this[nameof(CooldownMin)].GetValue<float>(); } set { this[nameof(CooldownMin)].SetValue<float>(value); } }
        public float CooldownMax { get { return this[nameof(CooldownMax)].GetValue<float>(); } set { this[nameof(CooldownMax)].SetValue<float>(value); } }
        public bool ValidateArc { get { return this[nameof(ValidateArc)].Flag; } set { this[nameof(ValidateArc)].Flag = value; } }
        public Object ArcPivotBone { get { return this[nameof(ArcPivotBone)]; } set { this[nameof(ArcPivotBone)] = value; } }
        public float ArcYaw { get { return this[nameof(ArcYaw)].GetValue<float>(); } set { this[nameof(ArcYaw)].SetValue<float>(value); } }
        public float ArcYawOffset { get { return this[nameof(ArcYawOffset)].GetValue<float>(); } set { this[nameof(ArcYawOffset)].SetValue<float>(value); } }
        public float ArcPitch { get { return this[nameof(ArcPitch)].GetValue<float>(); } set { this[nameof(ArcPitch)].SetValue<float>(value); } }
        public float ArcPitchOffset { get { return this[nameof(ArcPitchOffset)].GetValue<float>(); } set { this[nameof(ArcPitchOffset)].SetValue<float>(value); } }
    }
    public class AISpawnPointDecorator : ActorStateDecorator
    {
        public AISpawnPointDecorator(nint addr) : base(addr) { }
        public Object SpawnPointTag { get { return this[nameof(SpawnPointTag)]; } set { this[nameof(SpawnPointTag)] = value; } }
        public float MinRangeToPlayers { get { return this[nameof(MinRangeToPlayers)].GetValue<float>(); } set { this[nameof(MinRangeToPlayers)].SetValue<float>(value); } }
        public float MaxRangeToPlayers { get { return this[nameof(MaxRangeToPlayers)].GetValue<float>(); } set { this[nameof(MaxRangeToPlayers)].SetValue<float>(value); } }
        public Object BlackboardKey { get { return this[nameof(BlackboardKey)]; } set { this[nameof(BlackboardKey)] = value; } }
    }
    public class AIStrafeTargetStateDecorator : ActorStateDecorator
    {
        public AIStrafeTargetStateDecorator(nint addr) : base(addr) { }
        public float MinRadius { get { return this[nameof(MinRadius)].GetValue<float>(); } set { this[nameof(MinRadius)].SetValue<float>(value); } }
        public float MaxRadius { get { return this[nameof(MaxRadius)].GetValue<float>(); } set { this[nameof(MaxRadius)].SetValue<float>(value); } }
        public float MinOutsiderRadius { get { return this[nameof(MinOutsiderRadius)].GetValue<float>(); } set { this[nameof(MinOutsiderRadius)].SetValue<float>(value); } }
        public float MaxOutsiderRadius { get { return this[nameof(MaxOutsiderRadius)].GetValue<float>(); } set { this[nameof(MaxOutsiderRadius)].SetValue<float>(value); } }
        public float MinHeight { get { return this[nameof(MinHeight)].GetValue<float>(); } set { this[nameof(MinHeight)].SetValue<float>(value); } }
        public float MaxHeight { get { return this[nameof(MaxHeight)].GetValue<float>(); } set { this[nameof(MaxHeight)].SetValue<float>(value); } }
        public float MinOutsiderHeight { get { return this[nameof(MinOutsiderHeight)].GetValue<float>(); } set { this[nameof(MinOutsiderHeight)].SetValue<float>(value); } }
        public float MaxOutsiderHeight { get { return this[nameof(MaxOutsiderHeight)].GetValue<float>(); } set { this[nameof(MaxOutsiderHeight)].SetValue<float>(value); } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public bool StopOnOverlap { get { return this[nameof(StopOnOverlap)].Flag; } set { this[nameof(StopOnOverlap)].Flag = value; } }
        public float OutOfRangeScalar { get { return this[nameof(OutOfRangeScalar)].GetValue<float>(); } set { this[nameof(OutOfRangeScalar)].SetValue<float>(value); } }
    }
    public class AITargetSelectorStateDecorator : ActorStateDecorator
    {
        public AITargetSelectorStateDecorator(nint addr) : base(addr) { }
        public Object TargetSelector { get { return this[nameof(TargetSelector)]; } set { this[nameof(TargetSelector)] = value; } }
        public bool bLockTarget { get { return this[nameof(bLockTarget)].Flag; } set { this[nameof(bLockTarget)].Flag = value; } }
    }
    public class AIUpdateTargetStateDecorator : ActorStateDecorator
    {
        public AIUpdateTargetStateDecorator(nint addr) : base(addr) { }
    }
    public class AIWanderStateDecorator : ActorStateDecorator
    {
        public AIWanderStateDecorator(nint addr) : base(addr) { }
        public float WanderRangeMin { get { return this[nameof(WanderRangeMin)].GetValue<float>(); } set { this[nameof(WanderRangeMin)].SetValue<float>(value); } }
        public float WanderRangeMax { get { return this[nameof(WanderRangeMax)].GetValue<float>(); } set { this[nameof(WanderRangeMax)].SetValue<float>(value); } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public bool OneShot { get { return this[nameof(OneShot)].Flag; } set { this[nameof(OneShot)].Flag = value; } }
        public float WaitTimeMin { get { return this[nameof(WaitTimeMin)].GetValue<float>(); } set { this[nameof(WaitTimeMin)].SetValue<float>(value); } }
        public float WaitTimeMax { get { return this[nameof(WaitTimeMax)].GetValue<float>(); } set { this[nameof(WaitTimeMax)].SetValue<float>(value); } }
        public Object WanderOriginOverride { get { return this[nameof(WanderOriginOverride)]; } set { this[nameof(WanderOriginOverride)] = value; } }
    }
    public class AIJumpState : AnimActorState
    {
        public AIJumpState(nint addr) : base(addr) { }
        public EJumpType Type { get { return (EJumpType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public PositionValue Destination { get { return this[nameof(Destination)].As<PositionValue>(); } set { this["Destination"] = value; } }
        public float DestinationOffset { get { return this[nameof(DestinationOffset)].GetValue<float>(); } set { this[nameof(DestinationOffset)].SetValue<float>(value); } }
        public float LerpTime { get { return this[nameof(LerpTime)].GetValue<float>(); } set { this[nameof(LerpTime)].SetValue<float>(value); } }
        public EAutoArcType ArcMethod { get { return (EAutoArcType)this[nameof(ArcMethod)].GetValue<int>(); } set { this[nameof(ArcMethod)].SetValue<int>((int)value); } }
        public float ArcHeight { get { return this[nameof(ArcHeight)].GetValue<float>(); } set { this[nameof(ArcHeight)].SetValue<float>(value); } }
        public float JumpSpeed { get { return this[nameof(JumpSpeed)].GetValue<float>(); } set { this[nameof(JumpSpeed)].SetValue<float>(value); } }
        public bool LeadTarget { get { return this[nameof(LeadTarget)].Flag; } set { this[nameof(LeadTarget)].Flag = value; } }
        public bool RequirePath { get { return this[nameof(RequirePath)].Flag; } set { this[nameof(RequirePath)].Flag = value; } }
        public bool ValidateJump { get { return this[nameof(ValidateJump)].Flag; } set { this[nameof(ValidateJump)].Flag = value; } }
        public bool LerpEaseIn { get { return this[nameof(LerpEaseIn)].Flag; } set { this[nameof(LerpEaseIn)].Flag = value; } }
        public float LerpEaseExponent { get { return this[nameof(LerpEaseExponent)].GetValue<float>(); } set { this[nameof(LerpEaseExponent)].SetValue<float>(value); } }
        public bool bLockPositionToArc { get { return this[nameof(bLockPositionToArc)].Flag; } set { this[nameof(bLockPositionToArc)].Flag = value; } }
        public Object LandingWindow { get { return this[nameof(LandingWindow)]; } set { this[nameof(LandingWindow)] = value; } }
        public bool IsAIJumpComplete(StateMachineComponent StateMachine) { return Invoke<bool>(nameof(IsAIJumpComplete), StateMachine); }
    }
    public class AINavLinkState : AnimActorState
    {
        public AINavLinkState(nint addr) : base(addr) { }
        public bool SnapStartPositionToGround { get { return this[nameof(SnapStartPositionToGround)].Flag; } set { this[nameof(SnapStartPositionToGround)].Flag = value; } }
        public Vector Offset { get { return this[nameof(Offset)].As<Vector>(); } set { this["Offset"] = value; } }
        public float LerpTime { get { return this[nameof(LerpTime)].GetValue<float>(); } set { this[nameof(LerpTime)].SetValue<float>(value); } }
        public bool LerpEasesIn { get { return this[nameof(LerpEasesIn)].Flag; } set { this[nameof(LerpEasesIn)].Flag = value; } }
        public float LerpEaseExponent { get { return this[nameof(LerpEaseExponent)].GetValue<float>(); } set { this[nameof(LerpEaseExponent)].SetValue<float>(value); } }
        public Object CollisionEnableWindow { get { return this[nameof(CollisionEnableWindow)]; } set { this[nameof(CollisionEnableWindow)] = value; } }
        public bool StopMovementOnExit { get { return this[nameof(StopMovementOnExit)].Flag; } set { this[nameof(StopMovementOnExit)].Flag = value; } }
        public bool bSnapToVaultGeometry { get { return this[nameof(bSnapToVaultGeometry)].Flag; } set { this[nameof(bSnapToVaultGeometry)].Flag = value; } }
        public Object VaultSettings { get { return this[nameof(VaultSettings)]; } set { this[nameof(VaultSettings)] = value; } }
        public EVaultType VaultType { get { return (EVaultType)this[nameof(VaultType)].GetValue<int>(); } set { this[nameof(VaultType)].SetValue<int>((int)value); } }
    }
    public class AICharacterNearbyTargetSelector : AITargetSelector
    {
        public AICharacterNearbyTargetSelector(nint addr) : base(addr) { }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public float CurrentTargetScalar { get { return this[nameof(CurrentTargetScalar)].GetValue<float>(); } set { this[nameof(CurrentTargetScalar)].SetValue<float>(value); } }
        public float CurrentTargetRangeScalar { get { return this[nameof(CurrentTargetRangeScalar)].GetValue<float>(); } set { this[nameof(CurrentTargetRangeScalar)].SetValue<float>(value); } }
        public Object RequireTag { get { return this[nameof(RequireTag)]; } set { this[nameof(RequireTag)] = value; } }
        public Object ValidateCooldown { get { return this[nameof(ValidateCooldown)]; } set { this[nameof(ValidateCooldown)] = value; } }
        public bool bIgnoreCooldownForCurrentTarget { get { return this[nameof(bIgnoreCooldownForCurrentTarget)].Flag; } set { this[nameof(bIgnoreCooldownForCurrentTarget)].Flag = value; } }
    }
    public class AICompanionTargetSelector : AIDefaultTargetSelector
    {
        public AICompanionTargetSelector(nint addr) : base(addr) { }
        public Object PathTarget { get { return this[nameof(PathTarget)]; } set { this[nameof(PathTarget)] = value; } }
        public Vector2D DistanceThresholds { get { return this[nameof(DistanceThresholds)].As<Vector2D>(); } set { this["DistanceThresholds"] = value; } }
        public bool bIgnoreOutOfRangeTargets { get { return this[nameof(bIgnoreOutOfRangeTargets)].Flag; } set { this[nameof(bIgnoreOutOfRangeTargets)].Flag = value; } }
        public float CurrentTargetRangeTolerance { get { return this[nameof(CurrentTargetRangeTolerance)].GetValue<float>(); } set { this[nameof(CurrentTargetRangeTolerance)].SetValue<float>(value); } }
        public float PlayerDistanceMaxPenalty { get { return this[nameof(PlayerDistanceMaxPenalty)].GetValue<float>(); } set { this[nameof(PlayerDistanceMaxPenalty)].SetValue<float>(value); } }
        public float GrapplingEnemyBonusScore { get { return this[nameof(GrapplingEnemyBonusScore)].GetValue<float>(); } set { this[nameof(GrapplingEnemyBonusScore)].SetValue<float>(value); } }
        public bool bCullNeverVisibleTargets { get { return this[nameof(bCullNeverVisibleTargets)].Flag; } set { this[nameof(bCullNeverVisibleTargets)].Flag = value; } }
        public Array<Object> PriorityTargetCombatClasses { get { return new Array<Object>(this[nameof(PriorityTargetCombatClasses)].Address); } }
        public float PriorityTargetBonusRange { get { return this[nameof(PriorityTargetBonusRange)].GetValue<float>(); } set { this[nameof(PriorityTargetBonusRange)].SetValue<float>(value); } }
        public ConditionList LowPriorityTargetConditions { get { return this[nameof(LowPriorityTargetConditions)].As<ConditionList>(); } set { this["LowPriorityTargetConditions"] = value; } }
        public float LowPriorityTargetPenalty { get { return this[nameof(LowPriorityTargetPenalty)].GetValue<float>(); } set { this[nameof(LowPriorityTargetPenalty)].SetValue<float>(value); } }
    }
    public class AIFollowTargetSelector : AITargetSelector
    {
        public AIFollowTargetSelector(nint addr) : base(addr) { }
        public float DistanceThreshold { get { return this[nameof(DistanceThreshold)].GetValue<float>(); } set { this[nameof(DistanceThreshold)].SetValue<float>(value); } }
        public float CurrentTargetWeight { get { return this[nameof(CurrentTargetWeight)].GetValue<float>(); } set { this[nameof(CurrentTargetWeight)].SetValue<float>(value); } }
        public float HostWeightScalar { get { return this[nameof(HostWeightScalar)].GetValue<float>(); } set { this[nameof(HostWeightScalar)].SetValue<float>(value); } }
    }
    public class AIHealTargetSelector : AITargetSelector
    {
        public AIHealTargetSelector(nint addr) : base(addr) { }
        public float HealthPctThreshold { get { return this[nameof(HealthPctThreshold)].GetValue<float>(); } set { this[nameof(HealthPctThreshold)].SetValue<float>(value); } }
        public Object RequireTag { get { return this[nameof(RequireTag)]; } set { this[nameof(RequireTag)] = value; } }
    }
    public class AINearbyPlayerTargetSelector : AITargetSelector
    {
        public AINearbyPlayerTargetSelector(nint addr) : base(addr) { }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public bool CullNotVisible { get { return this[nameof(CullNotVisible)].Flag; } set { this[nameof(CullNotVisible)].Flag = value; } }
    }
    public class AIResurrectTargetSelector : AITargetSelector
    {
        public AIResurrectTargetSelector(nint addr) : base(addr) { }
        public Object RequireTag { get { return this[nameof(RequireTag)]; } set { this[nameof(RequireTag)] = value; } }
        public EResurrectTargetType Type { get { return (EResurrectTargetType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public bool bRequiresSight { get { return this[nameof(bRequiresSight)].Flag; } set { this[nameof(bRequiresSight)].Flag = value; } }
        public float DistanceThreshold { get { return this[nameof(DistanceThreshold)].GetValue<float>(); } set { this[nameof(DistanceThreshold)].SetValue<float>(value); } }
        public float RevivingCharacterScorePenalty { get { return this[nameof(RevivingCharacterScorePenalty)].GetValue<float>(); } set { this[nameof(RevivingCharacterScorePenalty)].SetValue<float>(value); } }
        public bool bOnlyIfRevivable { get { return this[nameof(bOnlyIfRevivable)].Flag; } set { this[nameof(bOnlyIfRevivable)].Flag = value; } }
        public float OwnerExtraScore { get { return this[nameof(OwnerExtraScore)].GetValue<float>(); } set { this[nameof(OwnerExtraScore)].SetValue<float>(value); } }
        public ConditionList TargetingConditions { get { return this[nameof(TargetingConditions)].As<ConditionList>(); } set { this["TargetingConditions"] = value; } }
        public ConditionList NewTargetConditions { get { return this[nameof(NewTargetConditions)].As<ConditionList>(); } set { this["NewTargetConditions"] = value; } }
    }
    public class InheritableTaggedObject : InheritableObject
    {
        public InheritableTaggedObject(nint addr) : base(addr) { }
    }
    public class AnimationAssetTagged : InheritableTaggedObject
    {
        public AnimationAssetTagged(nint addr) : base(addr) { }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public bool bShouldOverrideBlendTime { get { return this[nameof(bShouldOverrideBlendTime)].Flag; } set { this[nameof(bShouldOverrideBlendTime)].Flag = value; } }
        public float BlendTimeOverride { get { return this[nameof(BlendTimeOverride)].GetValue<float>(); } set { this[nameof(BlendTimeOverride)].SetValue<float>(value); } }
        public bool bShouldOverrideBlendOut { get { return this[nameof(bShouldOverrideBlendOut)].Flag; } set { this[nameof(bShouldOverrideBlendOut)].Flag = value; } }
        public float BlendOutOverride { get { return this[nameof(BlendOutOverride)].GetValue<float>(); } set { this[nameof(BlendOutOverride)].SetValue<float>(value); } }
        public bool bShouldOverrideAutoBlendOut { get { return this[nameof(bShouldOverrideAutoBlendOut)].Flag; } set { this[nameof(bShouldOverrideAutoBlendOut)].Flag = value; } }
        public bool bAutoBlendOutOverride { get { return this[nameof(bAutoBlendOutOverride)].Flag; } set { this[nameof(bAutoBlendOutOverride)].Flag = value; } }
    }
    public class AnimationTagged : AnimationAssetTagged
    {
        public AnimationTagged(nint addr) : base(addr) { }
        public Array<AnimSequenceBase> Animations { get { return new Array<AnimSequenceBase>(this[nameof(Animations)].Address); } }
        public Array<AnimSequenceBase> SlaveAnimations { get { return new Array<AnimSequenceBase>(this[nameof(SlaveAnimations)].Address); } }
    }
    public class BlendspaceTagged : AnimationAssetTagged
    {
        public BlendspaceTagged(nint addr) : base(addr) { }
        public Array<AnimationSetBlendspace> BlendSpaces { get { return new Array<AnimationSetBlendspace>(this[nameof(BlendSpaces)].Address); } }
    }
    public class InheritableNamedObject : InheritableObject
    {
        public InheritableNamedObject(nint addr) : base(addr) { }
        public Guid UniqueId { get { return this[nameof(UniqueId)].As<Guid>(); } set { this["UniqueId"] = value; } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
    }
    public class InheritableNameTagObject : InheritableNamedObject
    {
        public InheritableNameTagObject(nint addr) : base(addr) { }
        public Array<InheritableTaggedObject> Entries { get { return new Array<InheritableTaggedObject>(this[nameof(Entries)].Address); } }
    }
    public class AnimationNamed : InheritableNameTagObject
    {
        public AnimationNamed(nint addr) : base(addr) { }
        public float StartTime { get { return this[nameof(StartTime)].GetValue<float>(); } set { this[nameof(StartTime)].SetValue<float>(value); } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public float BlendOut { get { return this[nameof(BlendOut)].GetValue<float>(); } set { this[nameof(BlendOut)].SetValue<float>(value); } }
        public bool Loop { get { return this[nameof(Loop)].Flag; } set { this[nameof(Loop)].Flag = value; } }
        public bool ResetOnReplay { get { return this[nameof(ResetOnReplay)].Flag; } set { this[nameof(ResetOnReplay)].Flag = value; } }
        public Object SyncGroupName { get { return this[nameof(SyncGroupName)]; } set { this[nameof(SyncGroupName)] = value; } }
        public bool AutoBlendOutMontage { get { return this[nameof(AutoBlendOutMontage)].Flag; } set { this[nameof(AutoBlendOutMontage)].Flag = value; } }
        public EAnimationNamedSelectionMode SelectionMode { get { return (EAnimationNamedSelectionMode)this[nameof(SelectionMode)].GetValue<int>(); } set { this[nameof(SelectionMode)].SetValue<int>((int)value); } }
        public EDirectionalAnimationComponent DirectionalComponent { get { return (EDirectionalAnimationComponent)this[nameof(DirectionalComponent)].GetValue<int>(); } set { this[nameof(DirectionalComponent)].SetValue<int>((int)value); } }
        public bool bApplyDistanceMatching { get { return this[nameof(bApplyDistanceMatching)].Flag; } set { this[nameof(bApplyDistanceMatching)].Flag = value; } }
        public bool bDynamicallyUpdateEachFrame { get { return this[nameof(bDynamicallyUpdateEachFrame)].Flag; } set { this[nameof(bDynamicallyUpdateEachFrame)].Flag = value; } }
        public float DynamicUpdatesBlendTimeOverride { get { return this[nameof(DynamicUpdatesBlendTimeOverride)].GetValue<float>(); } set { this[nameof(DynamicUpdatesBlendTimeOverride)].SetValue<float>(value); } }
    }
    public class InheritableNamedAsset : InheritableAsset
    {
        public InheritableNamedAsset(nint addr) : base(addr) { }
        public Array<InheritableNamedObject> Entries { get { return new Array<InheritableNamedObject>(this[nameof(Entries)].Address); } }
    }
    public class InheritableNameTagAsset : InheritableNamedAsset
    {
        public InheritableNameTagAsset(nint addr) : base(addr) { }
    }
    public class AnimationSet : InheritableNameTagAsset
    {
        public AnimationSet(nint addr) : base(addr) { }
        public Skeleton Skeleton { get { return this[nameof(Skeleton)].As<Skeleton>(); } set { this["Skeleton"] = value; } }
        public Array<AnimationID> AnimationsIDs { get { return new Array<AnimationID>(this[nameof(AnimationsIDs)].Address); } }
    }
    public class AnimationUtil : Object
    {
        public AnimationUtil(nint addr) : base(addr) { }
        public Rotator UE4ToAutodeskRotation(Rotator Rotation) { return Invoke<Rotator>(nameof(UE4ToAutodeskRotation), Rotation); }
        public void TransferPoseToPoseableMesh(SkeletalMeshComponent Source, PoseableMeshComponent Target) { Invoke(nameof(TransferPoseToPoseableMesh), Source, Target); }
        public void SetDampingForBone(SkeletalMeshComponent Mesh, Object BoneName, float LinearDamping, float AngularDamping) { Invoke(nameof(SetDampingForBone), Mesh, BoneName, LinearDamping, AngularDamping); }
        public void SetDampingForAllBones(SkeletalMeshComponent Mesh, float LinearDamping, float AngularDamping) { Invoke(nameof(SetDampingForAllBones), Mesh, LinearDamping, AngularDamping); }
        public void SetCollisionResponsesForBone(SkeletalMeshComponent SkeletalMesh, Object BoneName, CollisionResponseContainer Responses) { Invoke(nameof(SetCollisionResponsesForBone), SkeletalMesh, BoneName, Responses); }
        public void SetCollisionResponseForBone(SkeletalMeshComponent SkeletalMesh, Object BoneName, byte Channel, byte Response) { Invoke(nameof(SetCollisionResponseForBone), SkeletalMesh, BoneName, Channel, Response); }
        public void SetAllCollisionResponsesForBone(SkeletalMeshComponent SkeletalMesh, Object BoneName, byte Response) { Invoke(nameof(SetAllCollisionResponsesForBone), SkeletalMesh, BoneName, Response); }
        public void ResetCollisionResponsesForBone(SkeletalMeshComponent SkeletalMesh, Object BoneName) { Invoke(nameof(ResetCollisionResponsesForBone), SkeletalMesh, BoneName); }
        public void ResetAnimInstance(SkeletalMeshComponent SkeletalMesh) { Invoke(nameof(ResetAnimInstance), SkeletalMesh); }
        public void ResetActorDynamics(Actor Actor) { Invoke(nameof(ResetActorDynamics), Actor); }
        public bool HasAnyRootMotion(Character Character) { return Invoke<bool>(nameof(HasAnyRootMotion), Character); }
        public bool HasAnyRenderedSlaveMeshes(SkinnedMeshComponent Mesh) { return Invoke<bool>(nameof(HasAnyRenderedSlaveMeshes), Mesh); }
        public CollisionResponseContainer GetCollisionResponsesForBone(SkeletalMeshComponent SkeletalMesh, Object BoneName) { return Invoke<CollisionResponseContainer>(nameof(GetCollisionResponsesForBone), SkeletalMesh, BoneName); }
        public byte GetCollisionResponseForBone(SkeletalMeshComponent SkeletalMesh, Object BoneName, byte Channel) { return Invoke<byte>(nameof(GetCollisionResponseForBone), SkeletalMesh, BoneName, Channel); }
        public bool GetBoneTransform(SkeletalMeshComponent SkeletalMesh, Object BoneName, Transform Transform, byte TransformSpace) { return Invoke<bool>(nameof(GetBoneTransform), SkeletalMesh, BoneName, Transform, TransformSpace); }
        public bool GetBoneRefTransform(SkeletalMeshComponent SkeletalMesh, Object BoneName, Transform Transform) { return Invoke<bool>(nameof(GetBoneRefTransform), SkeletalMesh, BoneName, Transform); }
    }
    public class ConditionalNotifyInterface : Interface
    {
        public ConditionalNotifyInterface(nint addr) : base(addr) { }
    }
    public class AnimMetaDataGunfire : AnimMetaData
    {
        public AnimMetaDataGunfire(nint addr) : base(addr) { }
    }
    public class ConditionalAnimNotifyState : AnimNotifyState
    {
        public ConditionalAnimNotifyState(nint addr) : base(addr) { }
        public ENotifyOptimizationType OptimizationType { get { return (ENotifyOptimizationType)this[nameof(OptimizationType)].GetValue<int>(); } set { this[nameof(OptimizationType)].SetValue<int>((int)value); } }
        public bool bShowInPreview { get { return this[nameof(bShowInPreview)].Flag; } set { this[nameof(bShowInPreview)].Flag = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class AnimNotifyState_ActorCustomization : ConditionalAnimNotifyState
    {
        public AnimNotifyState_ActorCustomization(nint addr) : base(addr) { }
        public Object CustomizationSlot { get { return this[nameof(CustomizationSlot)]; } set { this[nameof(CustomizationSlot)] = value; } }
        public Object VisualID { get { return this[nameof(VisualID)]; } set { this[nameof(VisualID)] = value; } }
        public Object EquipmentType { get { return this[nameof(EquipmentType)]; } set { this[nameof(EquipmentType)] = value; } }
        public bool UseEquipmentCustomizationSet { get { return this[nameof(UseEquipmentCustomizationSet)].Flag; } set { this[nameof(UseEquipmentCustomizationSet)].Flag = value; } }
    }
    public class AnimNotifyState_AnimTag : ConditionalAnimNotifyState
    {
        public AnimNotifyState_AnimTag(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public bool RemoveAtEnd { get { return this[nameof(RemoveAtEnd)].Flag; } set { this[nameof(RemoveAtEnd)].Flag = value; } }
    }
    public class AnimNotifyState_FaceTarget : ConditionalAnimNotifyState
    {
        public AnimNotifyState_FaceTarget(nint addr) : base(addr) { }
        public CharacterFacing Facing { get { return (CharacterFacing)this[nameof(Facing)].GetValue<int>(); } set { this[nameof(Facing)].SetValue<int>((int)value); } }
        public bool SetFacingOnExit { get { return this[nameof(SetFacingOnExit)].Flag; } set { this[nameof(SetFacingOnExit)].Flag = value; } }
        public CharacterFacing FacingOnExit { get { return (CharacterFacing)this[nameof(FacingOnExit)].GetValue<int>(); } set { this[nameof(FacingOnExit)].SetValue<int>((int)value); } }
        public bool RestoreFacingOnExit { get { return this[nameof(RestoreFacingOnExit)].Flag; } set { this[nameof(RestoreFacingOnExit)].Flag = value; } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
    }
    public class AnimNotifyState_MaterialParam : ConditionalAnimNotifyState
    {
        public AnimNotifyState_MaterialParam(nint addr) : base(addr) { }
        public Object ComponentName { get { return this[nameof(ComponentName)]; } set { this[nameof(ComponentName)] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public Object MaterialParam { get { return this[nameof(MaterialParam)]; } set { this[nameof(MaterialParam)] = value; } }
        public float From { get { return this[nameof(From)].GetValue<float>(); } set { this[nameof(From)].SetValue<float>(value); } }
        public float To { get { return this[nameof(To)].GetValue<float>(); } set { this[nameof(To)].SetValue<float>(value); } }
        public EEaseType EaseType { get { return (EEaseType)this[nameof(EaseType)].GetValue<int>(); } set { this[nameof(EaseType)].SetValue<int>((int)value); } }
        public float Exponent { get { return this[nameof(Exponent)].GetValue<float>(); } set { this[nameof(Exponent)].SetValue<float>(value); } }
    }
    public class AnimNotifyState_NiagaraTrail : AnimNotifyState_TimedNiagaraEffect
    {
        public AnimNotifyState_NiagaraTrail(nint addr) : base(addr) { }
        public Object SkeletalMeshPropertyName { get { return this[nameof(SkeletalMeshPropertyName)]; } set { this[nameof(SkeletalMeshPropertyName)] = value; } }
        public Object BottomSocketName { get { return this[nameof(BottomSocketName)]; } set { this[nameof(BottomSocketName)] = value; } }
        public Object TopSocketName { get { return this[nameof(TopSocketName)]; } set { this[nameof(TopSocketName)] = value; } }
        public Object LifetimePropertyName { get { return this[nameof(LifetimePropertyName)]; } set { this[nameof(LifetimePropertyName)] = value; } }
        public float Lifetime { get { return this[nameof(Lifetime)].GetValue<float>(); } set { this[nameof(Lifetime)].SetValue<float>(value); } }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
        public bool bSoftDestroy { get { return this[nameof(bSoftDestroy)].Flag; } set { this[nameof(bSoftDestroy)].Flag = value; } }
        public ENotifyOptimizationType OptimizationType { get { return (ENotifyOptimizationType)this[nameof(OptimizationType)].GetValue<int>(); } set { this[nameof(OptimizationType)].SetValue<int>((int)value); } }
        public bool bShowInPreview { get { return this[nameof(bShowInPreview)].Flag; } set { this[nameof(bShowInPreview)].Flag = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public NiagaraComponent NiagaraComponent { get { return this[nameof(NiagaraComponent)].As<NiagaraComponent>(); } set { this["NiagaraComponent"] = value; } }
    }
    public class AnimNotifyState_ResetLookPoses : ConditionalAnimNotifyState
    {
        public AnimNotifyState_ResetLookPoses(nint addr) : base(addr) { }
    }
    public class StateTransientAnimNotifyState : ConditionalAnimNotifyState
    {
        public StateTransientAnimNotifyState(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_SetCameraState : StateTransientAnimNotifyState
    {
        public AnimNotifyState_SetCameraState(nint addr) : base(addr) { }
        public Object Camera { get { return this[nameof(Camera)]; } set { this[nameof(Camera)] = value; } }
        public float BlendInTime { get { return this[nameof(BlendInTime)].GetValue<float>(); } set { this[nameof(BlendInTime)].SetValue<float>(value); } }
        public float BlendOutTime { get { return this[nameof(BlendOutTime)].GetValue<float>(); } set { this[nameof(BlendOutTime)].SetValue<float>(value); } }
        public Object OptionalExitCamera { get { return this[nameof(OptionalExitCamera)]; } set { this[nameof(OptionalExitCamera)] = value; } }
        public Object OldState { get { return this[nameof(OldState)]; } set { this[nameof(OldState)] = value; } }
    }
    public class AnimNotifyState_SetClothBlend : ConditionalAnimNotifyState
    {
        public AnimNotifyState_SetClothBlend(nint addr) : base(addr) { }
        public Object ComponentName { get { return this[nameof(ComponentName)]; } set { this[nameof(ComponentName)] = value; } }
        public float BlendAmount { get { return this[nameof(BlendAmount)].GetValue<float>(); } set { this[nameof(BlendAmount)].SetValue<float>(value); } }
        public float FinalBlendAmount { get { return this[nameof(FinalBlendAmount)].GetValue<float>(); } set { this[nameof(FinalBlendAmount)].SetValue<float>(value); } }
        public bool ShouldReenableClothSimOnStart { get { return this[nameof(ShouldReenableClothSimOnStart)].Flag; } set { this[nameof(ShouldReenableClothSimOnStart)].Flag = value; } }
    }
    public class AnimNotifyState_SoundTag : ConditionalAnimNotifyState
    {
        public AnimNotifyState_SoundTag(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public bool bRemoveAtEnd { get { return this[nameof(bRemoveAtEnd)].Flag; } set { this[nameof(bRemoveAtEnd)].Flag = value; } }
    }
    public class AnimNotifyState_StateWindow : StateTransientAnimNotifyState
    {
        public AnimNotifyState_StateWindow(nint addr) : base(addr) { }
        public Object Window { get { return this[nameof(Window)]; } set { this[nameof(Window)] = value; } }
    }
    public class AnimNotifyState_TagWindow : StateTransientAnimNotifyState
    {
        public AnimNotifyState_TagWindow(nint addr) : base(addr) { }
        public Object CharacterTag { get { return this[nameof(CharacterTag)]; } set { this[nameof(CharacterTag)] = value; } }
    }
    public class AnimNotifyState_TargetAlign : ConditionalAnimNotifyState
    {
        public AnimNotifyState_TargetAlign(nint addr) : base(addr) { }
        public float PitchOffset { get { return this[nameof(PitchOffset)].GetValue<float>(); } set { this[nameof(PitchOffset)].SetValue<float>(value); } }
        public float YawOffset { get { return this[nameof(YawOffset)].GetValue<float>(); } set { this[nameof(YawOffset)].SetValue<float>(value); } }
        public Object AlignBoneOverride { get { return this[nameof(AlignBoneOverride)]; } set { this[nameof(AlignBoneOverride)] = value; } }
    }
    public class AnimNotifyState_TimeDilationState : StateTransientAnimNotifyState
    {
        public AnimNotifyState_TimeDilationState(nint addr) : base(addr) { }
        public bool Global { get { return this[nameof(Global)].Flag; } set { this[nameof(Global)].Flag = value; } }
        public bool OverrideStartTimeDilation { get { return this[nameof(OverrideStartTimeDilation)].Flag; } set { this[nameof(OverrideStartTimeDilation)].Flag = value; } }
        public float StartTimeDilation { get { return this[nameof(StartTimeDilation)].GetValue<float>(); } set { this[nameof(StartTimeDilation)].SetValue<float>(value); } }
        public float EndTimeDilation { get { return this[nameof(EndTimeDilation)].GetValue<float>(); } set { this[nameof(EndTimeDilation)].SetValue<float>(value); } }
        public bool bUseOnExitDilation { get { return this[nameof(bUseOnExitDilation)].Flag; } set { this[nameof(bUseOnExitDilation)].Flag = value; } }
        public float OnExitDilation { get { return this[nameof(OnExitDilation)].GetValue<float>(); } set { this[nameof(OnExitDilation)].SetValue<float>(value); } }
        public bool IsEaseIn { get { return this[nameof(IsEaseIn)].Flag; } set { this[nameof(IsEaseIn)].Flag = value; } }
        public float SmoothingExponent { get { return this[nameof(SmoothingExponent)].GetValue<float>(); } set { this[nameof(SmoothingExponent)].SetValue<float>(value); } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotifyState_WeaponPhantom : ConditionalAnimNotifyState
    {
        public AnimNotifyState_WeaponPhantom(nint addr) : base(addr) { }
        public Object ShapeName { get { return this[nameof(ShapeName)]; } set { this[nameof(ShapeName)] = value; } }
        public Array<Object> SecondaryShapes { get { return new Array<Object>(this[nameof(SecondaryShapes)].Address); } }
        public Array<WeaponPhantomShapeByName> Shapes { get { return new Array<WeaponPhantomShapeByName>(this[nameof(Shapes)].Address); } }
        public bool CauseIsWeaponInHand { get { return this[nameof(CauseIsWeaponInHand)].Flag; } set { this[nameof(CauseIsWeaponInHand)].Flag = value; } }
        public Object Cause { get { return this[nameof(Cause)]; } set { this[nameof(Cause)] = value; } }
        public ImpactEffectDescriptor ImpactEffect { get { return this[nameof(ImpactEffect)].As<ImpactEffectDescriptor>(); } set { this["ImpactEffect"] = value; } }
        public Object ImpactDirection { get { return this[nameof(ImpactDirection)]; } set { this[nameof(ImpactDirection)] = value; } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public float DamageMod { get { return this[nameof(DamageMod)].GetValue<float>(); } set { this[nameof(DamageMod)].SetValue<float>(value); } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public bool Unblockable { get { return this[nameof(Unblockable)].Flag; } set { this[nameof(Unblockable)].Flag = value; } }
        public bool Blockable { get { return this[nameof(Blockable)].Flag; } set { this[nameof(Blockable)].Flag = value; } }
        public bool Evadable { get { return this[nameof(Evadable)].Flag; } set { this[nameof(Evadable)].Flag = value; } }
        public Object GroupName { get { return this[nameof(GroupName)]; } set { this[nameof(GroupName)] = value; } }
        public int GroupPriority { get { return this[nameof(GroupPriority)].GetValue<int>(); } set { this[nameof(GroupPriority)].SetValue<int>(value); } }
        public int PowerOverride { get { return this[nameof(PowerOverride)].GetValue<int>(); } set { this[nameof(PowerOverride)].SetValue<int>(value); } }
        public float HitCooldown { get { return this[nameof(HitCooldown)].GetValue<float>(); } set { this[nameof(HitCooldown)].SetValue<float>(value); } }
        public bool bPersistentCooldown { get { return this[nameof(bPersistentCooldown)].Flag; } set { this[nameof(bPersistentCooldown)].Flag = value; } }
        public Object EffectBone { get { return this[nameof(EffectBone)]; } set { this[nameof(EffectBone)] = value; } }
        public EEffectSpawnDirection EffectSpawnDirection { get { return (EEffectSpawnDirection)this[nameof(EffectSpawnDirection)].GetValue<int>(); } set { this[nameof(EffectSpawnDirection)].SetValue<int>((int)value); } }
        public Rotator EffectOrientation { get { return this[nameof(EffectOrientation)].As<Rotator>(); } set { this["EffectOrientation"] = value; } }
        public EWeaponPhantomType PhantomType { get { return (EWeaponPhantomType)this[nameof(PhantomType)].GetValue<int>(); } set { this[nameof(PhantomType)].SetValue<int>((int)value); } }
        public float DiscretePhantomFPS { get { return this[nameof(DiscretePhantomFPS)].GetValue<float>(); } set { this[nameof(DiscretePhantomFPS)].SetValue<float>(value); } }
        public bool bIncludeRootMotion { get { return this[nameof(bIncludeRootMotion)].Flag; } set { this[nameof(bIncludeRootMotion)].Flag = value; } }
        public bool bCacheDiscreteAnimation { get { return this[nameof(bCacheDiscreteAnimation)].Flag; } set { this[nameof(bCacheDiscreteAnimation)].Flag = value; } }
        public Array<PhantomKeyframe> DiscreteKeyframeCache { get { return new Array<PhantomKeyframe>(this[nameof(DiscreteKeyframeCache)].Address); } }
    }
    public class ConditionalAnimNotify : AnimNotify
    {
        public ConditionalAnimNotify(nint addr) : base(addr) { }
        public ENotifyOptimizationType OptimizationType { get { return (ENotifyOptimizationType)this[nameof(OptimizationType)].GetValue<int>(); } set { this[nameof(OptimizationType)].SetValue<int>((int)value); } }
        public bool bShowInPreview { get { return this[nameof(bShowInPreview)].Flag; } set { this[nameof(bShowInPreview)].Flag = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class StateTransientAnimNotify : ConditionalAnimNotify
    {
        public StateTransientAnimNotify(nint addr) : base(addr) { }
    }
    public class AnimNotify_ActionEvent : StateTransientAnimNotify
    {
        public AnimNotify_ActionEvent(nint addr) : base(addr) { }
        public Object ActionType { get { return this[nameof(ActionType)]; } set { this[nameof(ActionType)] = value; } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotify_ActorCustomization : ConditionalAnimNotify
    {
        public AnimNotify_ActorCustomization(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object EquipmentType { get { return this[nameof(EquipmentType)]; } set { this[nameof(EquipmentType)] = value; } }
        public bool UseEquipmentCustomizationSet { get { return this[nameof(UseEquipmentCustomizationSet)].Flag; } set { this[nameof(UseEquipmentCustomizationSet)].Flag = value; } }
    }
    public class AnimNotify_AnimatedCameraAbort : ConditionalAnimNotify
    {
        public AnimNotify_AnimatedCameraAbort(nint addr) : base(addr) { }
        public Object NextCamera { get { return this[nameof(NextCamera)]; } set { this[nameof(NextCamera)] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
    }
    public class AnimNotify_AnimatedCameraCut : ConditionalAnimNotify
    {
        public AnimNotify_AnimatedCameraCut(nint addr) : base(addr) { }
        public Object CameraBone { get { return this[nameof(CameraBone)]; } set { this[nameof(CameraBone)] = value; } }
        public float CameraFOV { get { return this[nameof(CameraFOV)].GetValue<float>(); } set { this[nameof(CameraFOV)].SetValue<float>(value); } }
    }
    public class AnimNotify_AnimatedCameraCutFOVTransition : ConditionalAnimNotifyState
    {
        public AnimNotify_AnimatedCameraCutFOVTransition(nint addr) : base(addr) { }
        public Object CameraBone { get { return this[nameof(CameraBone)]; } set { this[nameof(CameraBone)] = value; } }
        public float StartingCameraFOV { get { return this[nameof(StartingCameraFOV)].GetValue<float>(); } set { this[nameof(StartingCameraFOV)].SetValue<float>(value); } }
        public float EndingCameraFOV { get { return this[nameof(EndingCameraFOV)].GetValue<float>(); } set { this[nameof(EndingCameraFOV)].SetValue<float>(value); } }
        public CurveFloat FOVPercentCurve { get { return this[nameof(FOVPercentCurve)].As<CurveFloat>(); } set { this["FOVPercentCurve"] = value; } }
    }
    public class AnimNotify_ApplyVitalityDelta : StateTransientAnimNotify
    {
        public AnimNotify_ApplyVitalityDelta(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public float VitalityDelta { get { return this[nameof(VitalityDelta)].GetValue<float>(); } set { this[nameof(VitalityDelta)].SetValue<float>(value); } }
        public StatValue VitalityScalar { get { return this[nameof(VitalityScalar)].As<StatValue>(); } set { this["VitalityScalar"] = value; } }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
    }
    public class AnimNotify_Awareness : ConditionalAnimNotify
    {
        public AnimNotify_Awareness(nint addr) : base(addr) { }
        public EAwarenessSource Source { get { return (EAwarenessSource)this[nameof(Source)].GetValue<int>(); } set { this[nameof(Source)].SetValue<int>((int)value); } }
        public EAwarenessSignal SignalType { get { return (EAwarenessSignal)this[nameof(SignalType)].GetValue<int>(); } set { this[nameof(SignalType)].SetValue<int>((int)value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class AnimNotify_CameraEffect : ConditionalAnimNotify
    {
        public AnimNotify_CameraEffect(nint addr) : base(addr) { }
        public NiagaraSystem ParticleSystem { get { return this[nameof(ParticleSystem)].As<NiagaraSystem>(); } set { this["ParticleSystem"] = value; } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public int Channel { get { return this[nameof(Channel)].GetValue<int>(); } set { this[nameof(Channel)].SetValue<int>(value); } }
        public Object ParticleIntensityParamMap { get { return this[nameof(ParticleIntensityParamMap)]; } set { this[nameof(ParticleIntensityParamMap)] = value; } }
        public bool OnlyFireInWater { get { return this[nameof(OnlyFireInWater)].Flag; } set { this[nameof(OnlyFireInWater)].Flag = value; } }
    }
    public class AnimNotify_CameraShake : StateTransientAnimNotify
    {
        public AnimNotify_CameraShake(nint addr) : base(addr) { }
        public Object Shake { get { return this[nameof(Shake)]; } set { this[nameof(Shake)] = value; } }
        public Object RefBone { get { return this[nameof(RefBone)]; } set { this[nameof(RefBone)] = value; } }
        public float InnerRadius { get { return this[nameof(InnerRadius)].GetValue<float>(); } set { this[nameof(InnerRadius)].SetValue<float>(value); } }
        public float OuterRadius { get { return this[nameof(OuterRadius)].GetValue<float>(); } set { this[nameof(OuterRadius)].SetValue<float>(value); } }
        public float Falloff { get { return this[nameof(Falloff)].GetValue<float>(); } set { this[nameof(Falloff)].SetValue<float>(value); } }
        public bool OrientShakeTowardsEpicenter { get { return this[nameof(OrientShakeTowardsEpicenter)].Flag; } set { this[nameof(OrientShakeTowardsEpicenter)].Flag = value; } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
        public bool bIgnoreBlendOut { get { return this[nameof(bIgnoreBlendOut)].Flag; } set { this[nameof(bIgnoreBlendOut)].Flag = value; } }
    }
    public class AnimNotify_CharacterEvent : StateTransientAnimNotify
    {
        public AnimNotify_CharacterEvent(nint addr) : base(addr) { }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public bool ServerOnly { get { return this[nameof(ServerOnly)].Flag; } set { this[nameof(ServerOnly)].Flag = value; } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotify_DoAction : StateTransientAnimNotify
    {
        public AnimNotify_DoAction(nint addr) : base(addr) { }
        public Object Action { get { return this[nameof(Action)]; } set { this[nameof(Action)] = value; } }
        public bool DoActionOnTarget { get { return this[nameof(DoActionOnTarget)].Flag; } set { this[nameof(DoActionOnTarget)].Flag = value; } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotify_EnableHitLocation : ConditionalAnimNotify
    {
        public AnimNotify_EnableHitLocation(nint addr) : base(addr) { }
        public Object HitLocationNameID { get { return this[nameof(HitLocationNameID)]; } set { this[nameof(HitLocationNameID)] = value; } }
        public bool bEnable { get { return this[nameof(bEnable)].Flag; } set { this[nameof(bEnable)].Flag = value; } }
    }
    public class AnimNotify_ForceFeedback : StateTransientAnimNotify
    {
        public AnimNotify_ForceFeedback(nint addr) : base(addr) { }
        public ForceFeedbackEffect ForceFeedback { get { return this[nameof(ForceFeedback)].As<ForceFeedbackEffect>(); } set { this["ForceFeedback"] = value; } }
        public bool bAOE { get { return this[nameof(bAOE)].Flag; } set { this[nameof(bAOE)].Flag = value; } }
        public Object bone { get { return this[nameof(bone)]; } set { this[nameof(bone)] = value; } }
        public ForceFeedbackAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<ForceFeedbackAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotify_ImpactEffect : ConditionalAnimNotify
    {
        public AnimNotify_ImpactEffect(nint addr) : base(addr) { }
        public EAnimImpactType Type { get { return (EAnimImpactType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object bone { get { return this[nameof(bone)]; } set { this[nameof(bone)] = value; } }
        public GunfireAudioPlayParams AudioPlayParams { get { return this[nameof(AudioPlayParams)].As<GunfireAudioPlayParams>(); } set { this["AudioPlayParams"] = value; } }
        public EAnimImpactTraceDirection TraceDirection { get { return (EAnimImpactTraceDirection)this[nameof(TraceDirection)].GetValue<int>(); } set { this[nameof(TraceDirection)].SetValue<int>((int)value); } }
        public float UpTraceOffset { get { return this[nameof(UpTraceOffset)].GetValue<float>(); } set { this[nameof(UpTraceOffset)].SetValue<float>(value); } }
    }
    public class AnimNotify_Impulse : ConditionalAnimNotify
    {
        public AnimNotify_Impulse(nint addr) : base(addr) { }
        public bool bIsJump { get { return this[nameof(bIsJump)].Flag; } set { this[nameof(bIsJump)].Flag = value; } }
        public bool bAbsoluteJumpImpulse { get { return this[nameof(bAbsoluteJumpImpulse)].Flag; } set { this[nameof(bAbsoluteJumpImpulse)].Flag = value; } }
        public float JumpImpulse { get { return this[nameof(JumpImpulse)].GetValue<float>(); } set { this[nameof(JumpImpulse)].SetValue<float>(value); } }
        public Vector RelativeImpulse { get { return this[nameof(RelativeImpulse)].As<Vector>(); } set { this["RelativeImpulse"] = value; } }
    }
    public class AnimNotify_ItemEvent : StateTransientAnimNotify
    {
        public AnimNotify_ItemEvent(nint addr) : base(addr) { }
        public Object ItemType { get { return this[nameof(ItemType)]; } set { this[nameof(ItemType)] = value; } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public bool MustBeInHand { get { return this[nameof(MustBeInHand)].Flag; } set { this[nameof(MustBeInHand)].Flag = value; } }
        public bool bIsModEvent { get { return this[nameof(bIsModEvent)].Flag; } set { this[nameof(bIsModEvent)].Flag = value; } }
        public int InvokeOnModSlot { get { return this[nameof(InvokeOnModSlot)].GetValue<int>(); } set { this[nameof(InvokeOnModSlot)].SetValue<int>(value); } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotify_NamedActorEvent : StateTransientAnimNotify
    {
        public AnimNotify_NamedActorEvent(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Array<Object> ActorTags { get { return new Array<Object>(this[nameof(ActorTags)].Address); } }
        public float MaximumDistance { get { return this[nameof(MaximumDistance)].GetValue<float>(); } set { this[nameof(MaximumDistance)].SetValue<float>(value); } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public Object Trigger { get { return this[nameof(Trigger)]; } set { this[nameof(Trigger)] = value; } }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
    }
    public class AnimNotify_PlayActorCustomizationParticleEffect : ConditionalAnimNotify
    {
        public AnimNotify_PlayActorCustomizationParticleEffect(nint addr) : base(addr) { }
        public Array<TagParticleEffectPair> ParticleSystems { get { return new Array<TagParticleEffectPair>(this[nameof(ParticleSystems)].Address); } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public bool Attached { get { return this[nameof(Attached)].Flag; } set { this[nameof(Attached)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
    }
    public class AnimNotify_PlaySoundParameter : ConditionalAnimNotify
    {
        public AnimNotify_PlaySoundParameter(nint addr) : base(addr) { }
        public bool bFilterDuringCinematics { get { return this[nameof(bFilterDuringCinematics)].Flag; } set { this[nameof(bFilterDuringCinematics)].Flag = value; } }
        public SoundGunfire Sound { get { return this[nameof(Sound)].As<SoundGunfire>(); } set { this["Sound"] = value; } }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public GunfireAudioPlayParams PlayParams { get { return this[nameof(PlayParams)].As<GunfireAudioPlayParams>(); } set { this["PlayParams"] = value; } }
        public GunfireAudioAttachParams AttachParams { get { return this[nameof(AttachParams)].As<GunfireAudioAttachParams>(); } set { this["AttachParams"] = value; } }
    }
    public class AnimNotify_PlaySoundSetSound : StateTransientAnimNotify
    {
        public AnimNotify_PlaySoundSetSound(nint addr) : base(addr) { }
        public bool bStateTransient { get { return this[nameof(bStateTransient)].Flag; } set { this[nameof(bStateTransient)].Flag = value; } }
        public bool bFilterDuringCinematics { get { return this[nameof(bFilterDuringCinematics)].Flag; } set { this[nameof(bFilterDuringCinematics)].Flag = value; } }
        public Object SoundIDName { get { return this[nameof(SoundIDName)]; } set { this[nameof(SoundIDName)] = value; } }
        public GunfireAudioPlayParams PlayParams { get { return this[nameof(PlayParams)].As<GunfireAudioPlayParams>(); } set { this["PlayParams"] = value; } }
        public GunfireAudioAttachParams AttachParams { get { return this[nameof(AttachParams)].As<GunfireAudioAttachParams>(); } set { this["AttachParams"] = value; } }
        public Object EquipmentType { get { return this[nameof(EquipmentType)]; } set { this[nameof(EquipmentType)] = value; } }
        public bool bIncludeEquippedMods { get { return this[nameof(bIncludeEquippedMods)].Flag; } set { this[nameof(bIncludeEquippedMods)].Flag = value; } }
        public bool bUseMainMesh { get { return this[nameof(bUseMainMesh)].Flag; } set { this[nameof(bUseMainMesh)].Flag = value; } }
        public int EquipmentSocketIndex { get { return this[nameof(EquipmentSocketIndex)].GetValue<int>(); } set { this[nameof(EquipmentSocketIndex)].SetValue<int>(value); } }
    }
    public class AnimNotify_Ragdoll : ConditionalAnimNotify
    {
        public AnimNotify_Ragdoll(nint addr) : base(addr) { }
        public bool OnlyIfDead { get { return this[nameof(OnlyIfDead)].Flag; } set { this[nameof(OnlyIfDead)].Flag = value; } }
        public Object RootBoneName { get { return this[nameof(RootBoneName)]; } set { this[nameof(RootBoneName)] = value; } }
    }
    public class AnimNotify_ScaleGravity : ConditionalAnimNotify
    {
        public AnimNotify_ScaleGravity(nint addr) : base(addr) { }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
    }
    public class AnimNotify_SetComponentVisible : ConditionalAnimNotify
    {
        public AnimNotify_SetComponentVisible(nint addr) : base(addr) { }
        public Object ComponentName { get { return this[nameof(ComponentName)]; } set { this[nameof(ComponentName)] = value; } }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
    }
    public class AnimNotify_SetMovementMode : StateTransientAnimNotify
    {
        public AnimNotify_SetMovementMode(nint addr) : base(addr) { }
        public byte Mode { get { return this[nameof(Mode)].GetValue<byte>(); } set { this[nameof(Mode)].SetValue<byte>(value); } }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
    }
    public class AnimNotify_SetNavigationState : StateTransientAnimNotify
    {
        public AnimNotify_SetNavigationState(nint addr) : base(addr) { }
        public ENavigationType NavType { get { return (ENavigationType)this[nameof(NavType)].GetValue<int>(); } set { this[nameof(NavType)].SetValue<int>((int)value); } }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
    }
    public class AnimNotify_StateParticleEffect : AnimNotify_PlayNiagaraEffect
    {
        public AnimNotify_StateParticleEffect(nint addr) : base(addr) { }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
        public bool bSoftDestroy { get { return this[nameof(bSoftDestroy)].Flag; } set { this[nameof(bSoftDestroy)].Flag = value; } }
        public ENotifyOptimizationType OptimizationType { get { return (ENotifyOptimizationType)this[nameof(OptimizationType)].GetValue<int>(); } set { this[nameof(OptimizationType)].SetValue<int>((int)value); } }
        public bool bShowInPreview { get { return this[nameof(bShowInPreview)].Flag; } set { this[nameof(bShowInPreview)].Flag = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class AnimNotify_StateSound : StateTransientAnimNotify
    {
        public AnimNotify_StateSound(nint addr) : base(addr) { }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
        public bool bFilterDuringCinematics { get { return this[nameof(bFilterDuringCinematics)].Flag; } set { this[nameof(bFilterDuringCinematics)].Flag = value; } }
        public SoundGunfire Sound { get { return this[nameof(Sound)].As<SoundGunfire>(); } set { this["Sound"] = value; } }
        public GunfireAudioPlayParams PlayParams { get { return this[nameof(PlayParams)].As<GunfireAudioPlayParams>(); } set { this["PlayParams"] = value; } }
        public GunfireAudioAttachParams AttachParams { get { return this[nameof(AttachParams)].As<GunfireAudioAttachParams>(); } set { this["AttachParams"] = value; } }
        public float FadeOut { get { return this[nameof(FadeOut)].GetValue<float>(); } set { this[nameof(FadeOut)].SetValue<float>(value); } }
        public bool bAllowLooping { get { return this[nameof(bAllowLooping)].Flag; } set { this[nameof(bAllowLooping)].Flag = value; } }
    }
    public class AnimNotify_StowWeapon : StateTransientAnimNotify
    {
        public AnimNotify_StowWeapon(nint addr) : base(addr) { }
        public Object Weapon { get { return this[nameof(Weapon)]; } set { this[nameof(Weapon)] = value; } }
        public bool Stowed { get { return this[nameof(Stowed)].Flag; } set { this[nameof(Stowed)].Flag = value; } }
        public bool ApplyToInventory { get { return this[nameof(ApplyToInventory)].Flag; } set { this[nameof(ApplyToInventory)].Flag = value; } }
        public bool bIsStateTransient { get { return this[nameof(bIsStateTransient)].Flag; } set { this[nameof(bIsStateTransient)].Flag = value; } }
    }
    public class AnimNotify_TargetConverge : StateTransientAnimNotify
    {
        public AnimNotify_TargetConverge(nint addr) : base(addr) { }
        public TargetConvergeSettings Settings { get { return this[nameof(Settings)].As<TargetConvergeSettings>(); } set { this["Settings"] = value; } }
    }
    public class AnimNotify_TimeDilation : StateTransientAnimNotify
    {
        public AnimNotify_TimeDilation(nint addr) : base(addr) { }
        public float TimeDilation { get { return this[nameof(TimeDilation)].GetValue<float>(); } set { this[nameof(TimeDilation)].SetValue<float>(value); } }
        public bool Global { get { return this[nameof(Global)].Flag; } set { this[nameof(Global)].Flag = value; } }
    }
    public class AnimNotify_TriggerNearbyEmitters : ConditionalAnimNotify
    {
        public AnimNotify_TriggerNearbyEmitters(nint addr) : base(addr) { }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float Height { get { return this[nameof(Height)].GetValue<float>(); } set { this[nameof(Height)].SetValue<float>(value); } }
        public int MinCount { get { return this[nameof(MinCount)].GetValue<int>(); } set { this[nameof(MinCount)].SetValue<int>(value); } }
        public int MaxCount { get { return this[nameof(MaxCount)].GetValue<int>(); } set { this[nameof(MaxCount)].SetValue<int>(value); } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
    }
    public class AnimNotify_UpdateDynamics : ConditionalAnimNotify
    {
        public AnimNotify_UpdateDynamics(nint addr) : base(addr) { }
        public bool Pause { get { return this[nameof(Pause)].Flag; } set { this[nameof(Pause)].Flag = value; } }
        public bool Reset { get { return this[nameof(Reset)].Flag; } set { this[nameof(Reset)].Flag = value; } }
        public bool Teleport { get { return this[nameof(Teleport)].Flag; } set { this[nameof(Teleport)].Flag = value; } }
    }
    public class DirectionalAnimData : AnimMetaDataGunfire
    {
        public DirectionalAnimData(nint addr) : base(addr) { }
        public float Direction { get { return this[nameof(Direction)].GetValue<float>(); } set { this[nameof(Direction)].SetValue<float>(value); } }
        public float VerticalDirection { get { return this[nameof(VerticalDirection)].GetValue<float>(); } set { this[nameof(VerticalDirection)].SetValue<float>(value); } }
        public EDirectionSide Side { get { return (EDirectionSide)this[nameof(Side)].GetValue<int>(); } set { this[nameof(Side)].SetValue<int>((int)value); } }
        public int Limb { get { return this[nameof(Limb)].GetValue<int>(); } set { this[nameof(Limb)].SetValue<int>(value); } }
        public bool bAllowsBlending { get { return this[nameof(bAllowsBlending)].Flag; } set { this[nameof(bAllowsBlending)].Flag = value; } }
        public float LeftwardArc { get { return this[nameof(LeftwardArc)].GetValue<float>(); } set { this[nameof(LeftwardArc)].SetValue<float>(value); } }
        public float RightwardArc { get { return this[nameof(RightwardArc)].GetValue<float>(); } set { this[nameof(RightwardArc)].SetValue<float>(value); } }
        public float UpwardArc { get { return this[nameof(UpwardArc)].GetValue<float>(); } set { this[nameof(UpwardArc)].SetValue<float>(value); } }
        public float DownwardArc { get { return this[nameof(DownwardArc)].GetValue<float>(); } set { this[nameof(DownwardArc)].SetValue<float>(value); } }
        public bool bOverrideFootBones { get { return this[nameof(bOverrideFootBones)].Flag; } set { this[nameof(bOverrideFootBones)].Flag = value; } }
        public Array<Object> FootBones { get { return new Array<Object>(this[nameof(FootBones)].Address); } }
        public bool bEnableDistanceMatching { get { return this[nameof(bEnableDistanceMatching)].Flag; } set { this[nameof(bEnableDistanceMatching)].Flag = value; } }
        public float DistanceThreshold { get { return this[nameof(DistanceThreshold)].GetValue<float>(); } set { this[nameof(DistanceThreshold)].SetValue<float>(value); } }
        public Object DistanceMatchingCurveName { get { return this[nameof(DistanceMatchingCurveName)]; } set { this[nameof(DistanceMatchingCurveName)] = value; } }
        public bool bOverrideDistanceMatchingBoneName { get { return this[nameof(bOverrideDistanceMatchingBoneName)].Flag; } set { this[nameof(bOverrideDistanceMatchingBoneName)].Flag = value; } }
        public Object DistanceMatchingBoneName { get { return this[nameof(DistanceMatchingBoneName)]; } set { this[nameof(DistanceMatchingBoneName)] = value; } }
        public bool bOverrideDistanceMatchingMaxStartTime { get { return this[nameof(bOverrideDistanceMatchingMaxStartTime)].Flag; } set { this[nameof(bOverrideDistanceMatchingMaxStartTime)].Flag = value; } }
        public float DistanceMatchingMaxStartTime { get { return this[nameof(DistanceMatchingMaxStartTime)].GetValue<float>(); } set { this[nameof(DistanceMatchingMaxStartTime)].SetValue<float>(value); } }
        public float LeadDistanceScalar { get { return this[nameof(LeadDistanceScalar)].GetValue<float>(); } set { this[nameof(LeadDistanceScalar)].SetValue<float>(value); } }
        public Vector EndingLocation { get { return this[nameof(EndingLocation)].As<Vector>(); } set { this["EndingLocation"] = value; } }
        public Vector StartingLocation { get { return this[nameof(StartingLocation)].As<Vector>(); } set { this["StartingLocation"] = value; } }
        public RichCurve ReparamTable { get { return this[nameof(ReparamTable)].As<RichCurve>(); } set { this["ReparamTable"] = value; } }
        public Array<Vector> RelativeFootLocations { get { return new Array<Vector>(this[nameof(RelativeFootLocations)].Address); } }
    }
    public class RootMotionAnimData : AnimMetaDataGunfire
    {
        public RootMotionAnimData(nint addr) : base(addr) { }
        public bool bHasComputedData { get { return this[nameof(bHasComputedData)].Flag; } set { this[nameof(bHasComputedData)].Flag = value; } }
        public bool bHasSignificantTranslation { get { return this[nameof(bHasSignificantTranslation)].Flag; } set { this[nameof(bHasSignificantTranslation)].Flag = value; } }
        public bool bHasSignificantRotation { get { return this[nameof(bHasSignificantRotation)].Flag; } set { this[nameof(bHasSignificantRotation)].Flag = value; } }
        public bool bHasSignificantRootMotion { get { return this[nameof(bHasSignificantRootMotion)].Flag; } set { this[nameof(bHasSignificantRootMotion)].Flag = value; } }
        public Transform RootMotionDelta { get { return this[nameof(RootMotionDelta)].As<Transform>(); } set { this["RootMotionDelta"] = value; } }
        public Transform StartTransform { get { return this[nameof(StartTransform)].As<Transform>(); } set { this["StartTransform"] = value; } }
        public Transform EndTransform { get { return this[nameof(EndTransform)].As<Transform>(); } set { this["EndTransform"] = value; } }
        public float TranslationDistance { get { return this[nameof(TranslationDistance)].GetValue<float>(); } set { this[nameof(TranslationDistance)].SetValue<float>(value); } }
        public Vector TranslationDirection { get { return this[nameof(TranslationDirection)].As<Vector>(); } set { this["TranslationDirection"] = value; } }
        public float RotationDegrees { get { return this[nameof(RotationDegrees)].GetValue<float>(); } set { this[nameof(RotationDegrees)].SetValue<float>(value); } }
        public Box TranslationBounds { get { return this[nameof(TranslationBounds)].As<Box>(); } set { this["TranslationBounds"] = value; } }
        public float RootMotionStartTime { get { return this[nameof(RootMotionStartTime)].GetValue<float>(); } set { this[nameof(RootMotionStartTime)].SetValue<float>(value); } }
        public float RootMotionStopTime { get { return this[nameof(RootMotionStopTime)].GetValue<float>(); } set { this[nameof(RootMotionStopTime)].SetValue<float>(value); } }
    }
    public class AudioComponentGunfireUserData : AssetUserData
    {
        public AudioComponentGunfireUserData(nint addr) : base(addr) { }
        public Object OnAudioFinished { get { return this[nameof(OnAudioFinished)]; } set { this[nameof(OnAudioFinished)] = value; } }
    }
    public class GunfireAudioSystem : Object
    {
        public GunfireAudioSystem(nint addr) : base(addr) { }
        public Object PImpl { get { return this[nameof(PImpl)].As<Object>(); } set { this["PImpl"] = value; } }
        public bool UseSound() { return Invoke<bool>(nameof(UseSound)); }
        public void StopSound(Object WorldContextObject, GunfireAudioPlayingID PlayingID, GunfireAudioStopParams StopParams) { Invoke(nameof(StopSound), WorldContextObject, PlayingID, StopParams); }
        public AudioComponentGunfire SpawnSoundAttached(SoundGunfire Sound, SceneComponent AttachToComponent, GunfireAudioPlayParams PlayParams, GunfireAudioAttachParams AttachParams) { return Invoke<AudioComponentGunfire>(nameof(SpawnSoundAttached), Sound, AttachToComponent, PlayParams, AttachParams); }
        public AudioComponentGunfire SpawnSoundAtLocation(Object WorldContextObject, SoundGunfire Sound, Vector Location, GunfireAudioPlayParams PlayParams) { return Invoke<AudioComponentGunfire>(nameof(SpawnSoundAtLocation), WorldContextObject, Sound, Location, PlayParams); }
        public AudioComponentGunfire SpawnSound2D(Object WorldContextObject, SoundGunfire Sound, GunfireAudioPlayParams PlayParams) { return Invoke<AudioComponentGunfire>(nameof(SpawnSound2D), WorldContextObject, Sound, PlayParams); }
        public bool Sound_IsValid(SoundGunfire Sound) { return Invoke<bool>(nameof(Sound_IsValid), Sound); }
        public bool Sound_IsPlaying(SoundGunfire Sound) { return Invoke<bool>(nameof(Sound_IsPlaying), Sound); }
        public bool Sound_IsLooping(SoundGunfire Sound) { return Invoke<bool>(nameof(Sound_IsLooping), Sound); }
        public float Sound_GetSampleRate(SoundGunfire Sound) { return Invoke<float>(nameof(Sound_GetSampleRate), Sound); }
        public float Sound_GetDuration(SoundGunfire Sound) { return Invoke<float>(nameof(Sound_GetDuration), Sound); }
        public float Sound_GetAttenuation(SoundGunfire Sound) { return Invoke<float>(nameof(Sound_GetAttenuation), Sound); }
        public void SetTransientMasterVolume(float Value) { Invoke(nameof(SetTransientMasterVolume), Value); }
        public GunfireAudioPlayingID PlaySoundAtLocation(Object WorldContextObject, SoundGunfire Sound, Vector Location, GunfireAudioPlayParams PlayParams) { return Invoke<GunfireAudioPlayingID>(nameof(PlaySoundAtLocation), WorldContextObject, Sound, Location, PlayParams); }
        public GunfireAudioPlayingID PlaySound2D(Object WorldContextObject, SoundGunfire Sound, GunfireAudioPlayParams PlayParams) { return Invoke<GunfireAudioPlayingID>(nameof(PlaySound2D), WorldContextObject, Sound, PlayParams); }
        public bool IsCompatibleSound(Object Object) { return Invoke<bool>(nameof(IsCompatibleSound), Object); }
        public bool IsCompatibleAudioVolume(Volume Volume) { return Invoke<bool>(nameof(IsCompatibleAudioVolume), Volume); }
        public bool IsCompatibleAudioComponent(SceneComponent Component) { return Invoke<bool>(nameof(IsCompatibleAudioComponent), Component); }
        public Object GetSubtitleComponentClass() { return Invoke<Object>(nameof(GetSubtitleComponentClass)); }
        public Object GetSoundClass() { return Invoke<Object>(nameof(GetSoundClass)); }
        public Object GetAudioVolumeClass() { return Invoke<Object>(nameof(GetAudioVolumeClass)); }
        public Object GetAudioInterface() { return Invoke<Object>(nameof(GetAudioInterface)); }
        public Object GetAudioComponentClass() { return Invoke<Object>(nameof(GetAudioComponentClass)); }
        public void AudioComponent_Stop(AudioComponentGunfire AudioComponent, GunfireAudioStopParams StopParams, GunfireAudioPlayingID PlayingID) { Invoke(nameof(AudioComponent_Stop), AudioComponent, StopParams, PlayingID); }
        public void AudioComponent_SetVolumeMultiplier(AudioComponentGunfire AudioComponent, float Value) { Invoke(nameof(AudioComponent_SetVolumeMultiplier), AudioComponent, Value); }
        public void AudioComponent_SetSound(AudioComponentGunfire AudioComponent, SoundGunfire NewSound) { Invoke(nameof(AudioComponent_SetSound), AudioComponent, NewSound); }
        public void AudioComponent_SetPitchMultiplier(AudioComponentGunfire AudioComponent, float Value) { Invoke(nameof(AudioComponent_SetPitchMultiplier), AudioComponent, Value); }
        public void AudioComponent_SetParameter(AudioComponentGunfire AudioComponent, Object Name, float Value) { Invoke(nameof(AudioComponent_SetParameter), AudioComponent, Name, Value); }
        public void AudioComponent_SetAutoDestroy(AudioComponentGunfire AudioComponent, bool bAutoDestroy) { Invoke(nameof(AudioComponent_SetAutoDestroy), AudioComponent, bAutoDestroy); }
        public GunfireAudioPlayingID AudioComponent_PlaySound(AudioComponentGunfire AudioComponent, SoundGunfire Sound, GunfireAudioPlayParams PlayParams) { return Invoke<GunfireAudioPlayingID>(nameof(AudioComponent_PlaySound), AudioComponent, Sound, PlayParams); }
        public GunfireAudioPlayingID AudioComponent_Play(AudioComponentGunfire AudioComponent, GunfireAudioPlayParams PlayParams) { return Invoke<GunfireAudioPlayingID>(nameof(AudioComponent_Play), AudioComponent, PlayParams); }
        public void AudioComponent_OnFinished_Unbind(AudioComponentGunfire AudioComponent, Object Object) { Invoke(nameof(AudioComponent_OnFinished_Unbind), AudioComponent, Object); }
        public void AudioComponent_OnFinished_Bind(AudioComponentGunfire AudioComponent, Object Callback) { Invoke(nameof(AudioComponent_OnFinished_Bind), AudioComponent, Callback); }
        public bool AudioComponent_IsValid(AudioComponentGunfire AudioComponent) { return Invoke<bool>(nameof(AudioComponent_IsValid), AudioComponent); }
        public bool AudioComponent_IsPlaying(AudioComponentGunfire AudioComponent) { return Invoke<bool>(nameof(AudioComponent_IsPlaying), AudioComponent); }
        public float AudioComponent_GetVolumeMultiplier(AudioComponentGunfire AudioComponent) { return Invoke<float>(nameof(AudioComponent_GetVolumeMultiplier), AudioComponent); }
        public SoundGunfire AudioComponent_GetSound(AudioComponentGunfire AudioComponent) { return Invoke<SoundGunfire>(nameof(AudioComponent_GetSound), AudioComponent); }
        public float AudioComponent_GetPitchMultiplier(AudioComponentGunfire AudioComponent) { return Invoke<float>(nameof(AudioComponent_GetPitchMultiplier), AudioComponent); }
        public GunfireAudioPlayingID AudioComponent_GetLastPlayingId(AudioComponentGunfire AudioComponent) { return Invoke<GunfireAudioPlayingID>(nameof(AudioComponent_GetLastPlayingId), AudioComponent); }
        public void AudioComponent_ForceInternalTransformUpdate(AudioComponentGunfire AudioComponent) { Invoke(nameof(AudioComponent_ForceInternalTransformUpdate), AudioComponent); }
        public void AudioComponent_AdjustVolume(AudioComponentGunfire AudioComponent, float AdjustVolumeDuration, float AdjustVolumeLevel) { Invoke(nameof(AudioComponent_AdjustVolume), AudioComponent, AdjustVolumeDuration, AdjustVolumeLevel); }
    }
    public class DialogLine : InheritableObject
    {
        public DialogLine(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public SoftSoundGunfire Dialog { get { return this[nameof(Dialog)].As<SoftSoundGunfire>(); } set { this["Dialog"] = value; } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
    }
    public class SoundEntryBase : InheritableTaggedObject
    {
        public SoundEntryBase(nint addr) : base(addr) { }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
    }
    public class SoundEntry : SoundEntryBase
    {
        public SoundEntry(nint addr) : base(addr) { }
        public Array<SoftSoundGunfire> Sounds { get { return new Array<SoftSoundGunfire>(this[nameof(Sounds)].Address); } }
        public bool PreloadSounds { get { return this[nameof(PreloadSounds)].Flag; } set { this[nameof(PreloadSounds)].Flag = value; } }
    }
    public class DialogEntry : SoundEntryBase
    {
        public DialogEntry(nint addr) : base(addr) { }
        public Object Speaker { get { return this[nameof(Speaker)]; } set { this[nameof(Speaker)] = value; } }
        public Object VocalRange { get { return this[nameof(VocalRange)]; } set { this[nameof(VocalRange)] = value; } }
        public bool IsCinematic { get { return this[nameof(IsCinematic)].Flag; } set { this[nameof(IsCinematic)].Flag = value; } }
        public Array<DialogLine> DialogLines { get { return new Array<DialogLine>(this[nameof(DialogLines)].Address); } }
    }
    public class SoundID : InheritableNameTagObject
    {
        public SoundID(nint addr) : base(addr) { }
    }
    public class SoundSet : InheritableNameTagAsset
    {
        public SoundSet(nint addr) : base(addr) { }
        public Array<Object> PreloadSounds { get { return new Array<Object>(this[nameof(PreloadSounds)].Address); } }
    }
    public class SoundSetComponent : ActorComponent
    {
        public SoundSetComponent(nint addr) : base(addr) { }
        public SoundSet SoundSet { get { return this[nameof(SoundSet)].As<SoundSet>(); } set { this["SoundSet"] = value; } }
        public Array<Object> SoundTags { get { return new Array<Object>(this[nameof(SoundTags)].Address); } }
        public MeshComponent MeshComp { get { return this[nameof(MeshComp)].As<MeshComponent>(); } set { this["MeshComp"] = value; } }
        public void RemoveSoundTag(Object SoundTag) { Invoke(nameof(RemoveSoundTag), SoundTag); }
        public GunfireAudioPlayingID PlaySound2D(Object SoundIDName, GunfireAudioPlayParams PlayParams) { return Invoke<GunfireAudioPlayingID>(nameof(PlaySound2D), SoundIDName, PlayParams); }
        public GunfireAudioPlayingID PlaySound(Object SoundIDName, GunfireAudioPlayParams PlayParams, GunfireAudioAttachParams AttachParams) { return Invoke<GunfireAudioPlayingID>(nameof(PlaySound), SoundIDName, PlayParams, AttachParams); }
        public bool HasSoundTag(Object SoundTag) { return Invoke<bool>(nameof(HasSoundTag), SoundTag); }
        public Array<Object> GetSoundTags() { return Invoke<Array<Object>>(nameof(GetSoundTags)); }
        public SoftSoundGunfire GetSoundSoft(Object SoundIDName) { return Invoke<SoftSoundGunfire>(nameof(GetSoundSoft), SoundIDName); }
        public SoundGunfire GetSound(Object SoundIDName) { return Invoke<SoundGunfire>(nameof(GetSound), SoundIDName); }
        public void AddUniqueSoundTag(Object SoundTag) { Invoke(nameof(AddUniqueSoundTag), SoundTag); }
    }
    public class AmbientAudioComponent : AudioComponent
    {
        public AmbientAudioComponent(nint addr) : base(addr) { }
        public Object OnBeginActiveSound { get { return this[nameof(OnBeginActiveSound)]; } set { this[nameof(OnBeginActiveSound)] = value; } }
        public Object OnEndActiveSound { get { return this[nameof(OnEndActiveSound)]; } set { this[nameof(OnEndActiveSound)] = value; } }
    }
    public class AmbientAudioManager : Object
    {
        public AmbientAudioManager(nint addr) : base(addr) { }
        public Object ActiveMixes { get { return this[nameof(ActiveMixes)]; } set { this[nameof(ActiveMixes)] = value; } }
        public Array<Object> InactiveMixes { get { return new Array<Object>(this[nameof(InactiveMixes)].Address); } }
        public SoundMix BaseMix { get { return this[nameof(BaseMix)].As<SoundMix>(); } set { this["BaseMix"] = value; } }
    }
    public class AudioStateID : Object
    {
        public AudioStateID(nint addr) : base(addr) { }
    }
    public class AudioState_Default : AudioStateID
    {
        public AudioState_Default(nint addr) : base(addr) { }
    }
    public class AudioCustomVolume : AudioVolume
    {
        public AudioCustomVolume(nint addr) : base(addr) { }
        public Array<AudioCustomVolume> HasPriorityOver { get { return new Array<AudioCustomVolume>(this[nameof(HasPriorityOver)].Address); } }
        public bool bInfiniteExtent { get { return this[nameof(bInfiniteExtent)].Flag; } set { this[nameof(bInfiniteExtent)].Flag = value; } }
        public int LevelDepth { get { return this[nameof(LevelDepth)].GetValue<int>(); } set { this[nameof(LevelDepth)].SetValue<int>(value); } }
        public WorldSoundSet WorldSoundSet { get { return this[nameof(WorldSoundSet)].As<WorldSoundSet>(); } set { this["WorldSoundSet"] = value; } }
        public Array<WorldSound> WorldSounds { get { return new Array<WorldSound>(this[nameof(WorldSounds)].Address); } }
        public byte AttenShape { get { return this[nameof(AttenShape)].GetValue<byte>(); } set { this[nameof(AttenShape)].SetValue<byte>(value); } }
        public Vector AttenExtents { get { return this[nameof(AttenExtents)].As<Vector>(); } set { this["AttenExtents"] = value; } }
        public MusicSetAsset MusicSet { get { return this[nameof(MusicSet)].As<MusicSetAsset>(); } set { this["MusicSet"] = value; } }
        public Array<AudioState> States { get { return new Array<AudioState>(this[nameof(States)].Address); } }
        public SoundAttenuation AttenuationSettings { get { return this[nameof(AttenuationSettings)].As<SoundAttenuation>(); } set { this["AttenuationSettings"] = value; } }
        public bool bOverrideFalloff { get { return this[nameof(bOverrideFalloff)].Flag; } set { this[nameof(bOverrideFalloff)].Flag = value; } }
        public float FalloffOverride { get { return this[nameof(FalloffOverride)].GetValue<float>(); } set { this[nameof(FalloffOverride)].SetValue<float>(value); } }
        public Object CurrentStateID { get { return this[nameof(CurrentStateID)]; } set { this[nameof(CurrentStateID)] = value; } }
        public AmbientAudioComponent PrimaryAudioComponent { get { return this[nameof(PrimaryAudioComponent)].As<AmbientAudioComponent>(); } set { this["PrimaryAudioComponent"] = value; } }
        public AudioComponent OnEnterAudioComponent { get { return this[nameof(OnEnterAudioComponent)].As<AudioComponent>(); } set { this["OnEnterAudioComponent"] = value; } }
        public AudioComponent OnExitAudioComponent { get { return this[nameof(OnExitAudioComponent)].As<AudioComponent>(); } set { this["OnExitAudioComponent"] = value; } }
        public WorldSoundComponent WorldSoundComponent { get { return this[nameof(WorldSoundComponent)].As<WorldSoundComponent>(); } set { this["WorldSoundComponent"] = value; } }
        public void SetState(Object StateID, bool bPlayTransitions) { Invoke(nameof(SetState), StateID, bPlayTransitions); }
        public void OnEndActiveVolume() { Invoke(nameof(OnEndActiveVolume)); }
        public void OnBeginActiveVolume() { Invoke(nameof(OnBeginActiveVolume)); }
        public bool IsActiveVolume() { return Invoke<bool>(nameof(IsActiveVolume)); }
    }
    public class GunfireAudioUnrealImpl : Object
    {
        public GunfireAudioUnrealImpl(nint addr) : base(addr) { }
        public void OnAudioFinished(AudioComponent UnrealAudioComponent) { Invoke(nameof(OnAudioFinished), UnrealAudioComponent); }
    }
    public class InterpolatedSoundMix : SoundMix
    {
        public InterpolatedSoundMix(nint addr) : base(addr) { }
        public AudioEQEffect BeginEQ { get { return this[nameof(BeginEQ)].As<AudioEQEffect>(); } set { this["BeginEQ"] = value; } }
        public AudioEQEffect EndEQ { get { return this[nameof(EndEQ)].As<AudioEQEffect>(); } set { this["EndEQ"] = value; } }
        public Array<InterpolatedSoundClassAdjuster> InterpolatedSoundClassEffects { get { return new Array<InterpolatedSoundClassAdjuster>(this[nameof(InterpolatedSoundClassEffects)].Address); } }
        public CurveFloat EQCurve { get { return this[nameof(EQCurve)].As<CurveFloat>(); } set { this["EQCurve"] = value; } }
        public float InitialInterpolatePos { get { return this[nameof(InitialInterpolatePos)].GetValue<float>(); } set { this[nameof(InitialInterpolatePos)].SetValue<float>(value); } }
        public void SetInterpolatePos(float Pos) { Invoke(nameof(SetInterpolatePos), Pos); }
    }
    public class WorldSoundComponent : ActorComponent
    {
        public WorldSoundComponent(nint addr) : base(addr) { }
        public SoundClass SoundClassOverride { get { return this[nameof(SoundClassOverride)].As<SoundClass>(); } set { this["SoundClassOverride"] = value; } }
        public Array<WorldSound> AudioList { get { return new Array<WorldSound>(this[nameof(AudioList)].Address); } }
        public void SetAudioList(Array<WorldSound> NewAudioList, bool bReset) { Invoke(nameof(SetAudioList), NewAudioList, bReset); }
        public void ResetTimers() { Invoke(nameof(ResetTimers)); }
    }
    public class WorldSoundEntry : Object
    {
        public WorldSoundEntry(nint addr) : base(addr) { }
        public WorldSound Sound { get { return this[nameof(Sound)].As<WorldSound>(); } set { this["Sound"] = value; } }
    }
    public class WorldSoundID : Object
    {
        public WorldSoundID(nint addr) : base(addr) { }
        public Array<Object> States { get { return new Array<Object>(this[nameof(States)].Address); } }
        public Array<WorldSoundEntry> Entries { get { return new Array<WorldSoundEntry>(this[nameof(Entries)].Address); } }
    }
    public class WorldSoundSet : DataAsset
    {
        public WorldSoundSet(nint addr) : base(addr) { }
        public Array<WorldSoundID> SoundIDs { get { return new Array<WorldSoundID>(this[nameof(SoundIDs)].Address); } }
        public WorldSoundSet ParentSet { get { return this[nameof(ParentSet)].As<WorldSoundSet>(); } set { this["ParentSet"] = value; } }
        public Object SoundMap { get { return this[nameof(SoundMap)]; } set { this[nameof(SoundMap)] = value; } }
        public WorldSoundList GlobalSoundList { get { return this[nameof(GlobalSoundList)].As<WorldSoundList>(); } set { this["GlobalSoundList"] = value; } }
    }
    public class GunfireAudioWwiseImpl : Object
    {
        public GunfireAudioWwiseImpl(nint addr) : base(addr) { }
        public void UnregisterForDoppler(long GameObjectId, int PlayingID) { Invoke(nameof(UnregisterForDoppler), GameObjectId, PlayingID); }
        public void SetVolumeMultiplierByPlayingId(int PlayingID, float Multiplier, int InterpolationTimeMs) { Invoke(nameof(SetVolumeMultiplierByPlayingId), PlayingID, Multiplier, InterpolationTimeMs); }
        public void SetVolumeMultiplierByGameObjectId(long GameObjectId, float Multiplier, int InterpolationTimeMs) { Invoke(nameof(SetVolumeMultiplierByGameObjectId), GameObjectId, Multiplier, InterpolationTimeMs); }
        public bool SetSwitchForGameObjectId(long GameObjectId, Object Group, Object State) { return Invoke<bool>(nameof(SetSwitchForGameObjectId), GameObjectId, Group, State); }
        public bool SetSwitchByIdForGameObjectId(long GameObjectId, int GroupShortID, int StateShortId) { return Invoke<bool>(nameof(SetSwitchByIdForGameObjectId), GameObjectId, GroupShortID, StateShortId); }
        public void SetPitchMultiplierByPlayingId(int PlayingID, float Multiplier, int InterpolationTimeMs) { Invoke(nameof(SetPitchMultiplierByPlayingId), PlayingID, Multiplier, InterpolationTimeMs); }
        public void SetPitchMultiplierByGameObjectId(long GameObjectId, float Multiplier, int InterpolationTimeMs) { Invoke(nameof(SetPitchMultiplierByGameObjectId), GameObjectId, Multiplier, InterpolationTimeMs); }
        public void RegisterForDoppler(long GameObjectId, int PlayingID, Object RTPCName) { Invoke(nameof(RegisterForDoppler), GameObjectId, PlayingID, RTPCName); }
        public void OnSetTransientMasterVolume(float Value) { Invoke(nameof(OnSetTransientMasterVolume), Value); }
        public void OnInterfaceInstalled() { Invoke(nameof(OnInterfaceInstalled)); }
        public void OnEventPosted(Object Context, long GameObjectId, int PlayingID, GunfireAudioPlayParams PlayParams) { Invoke(nameof(OnEventPosted), Context, GameObjectId, PlayingID, PlayParams); }
        public void OnEndPIE() { Invoke(nameof(OnEndPIE)); }
        public void OnBeginPIE() { Invoke(nameof(OnBeginPIE)); }
        public void OnBeforeEventPosted(Object Context, long GameObjectId, GunfireAudioPlayParams PlayParams) { Invoke(nameof(OnBeforeEventPosted), Context, GameObjectId, PlayParams); }
        public float GetVolumeMultiplierByPlayingId(int PlayingID) { return Invoke<float>(nameof(GetVolumeMultiplierByPlayingId), PlayingID); }
        public float GetVolumeMultiplierByGameObjectId(long GameObjectId) { return Invoke<float>(nameof(GetVolumeMultiplierByGameObjectId), GameObjectId); }
        public float GetPitchMultiplierByPlayingId(int PlayingID) { return Invoke<float>(nameof(GetPitchMultiplierByPlayingId), PlayingID); }
        public float GetPitchMultiplierByGameObjectId(long GameObjectId) { return Invoke<float>(nameof(GetPitchMultiplierByGameObjectId), GameObjectId); }
        public AudioComponentGunfire GetAudioComponentByGameObjectId(long GameObjectId) { return Invoke<AudioComponentGunfire>(nameof(GetAudioComponentByGameObjectId), GameObjectId); }
    }
    public class BoidComponent : ActorComponent
    {
        public BoidComponent(nint addr) : base(addr) { }
        public Object OnGoalArrived { get { return this[nameof(OnGoalArrived)]; } set { this[nameof(OnGoalArrived)] = value; } }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public RecastNavMesh NavMesh { get { return this[nameof(NavMesh)].As<RecastNavMesh>(); } set { this["NavMesh"] = value; } }
        public NavigationData NavData { get { return this[nameof(NavData)].As<NavigationData>(); } set { this["NavData"] = value; } }
        public PawnMovementComponent BoidMovementComponent { get { return this[nameof(BoidMovementComponent)].As<PawnMovementComponent>(); } set { this["BoidMovementComponent"] = value; } }
        public EBoidMoveType MoveType { get { return (EBoidMoveType)this[nameof(MoveType)].GetValue<int>(); } set { this[nameof(MoveType)].SetValue<int>((int)value); } }
        public BoidSettings AirSettings { get { return this[nameof(AirSettings)].As<BoidSettings>(); } set { this["AirSettings"] = value; } }
        public BoidSettings GroundSettings { get { return this[nameof(GroundSettings)].As<BoidSettings>(); } set { this["GroundSettings"] = value; } }
        public bool Flapping { get { return this[nameof(Flapping)].Flag; } set { this[nameof(Flapping)].Flag = value; } }
        public float FlapIntensity { get { return this[nameof(FlapIntensity)].GetValue<float>(); } set { this[nameof(FlapIntensity)].SetValue<float>(value); } }
        public Actor GoalActor { get { return this[nameof(GoalActor)].As<Actor>(); } set { this["GoalActor"] = value; } }
        public void Wander(float WanderRadius) { Invoke(nameof(Wander), WanderRadius); }
        public void SetSpawnPoint(Vector NewSpawnPoint) { Invoke(nameof(SetSpawnPoint), NewSpawnPoint); }
        public void SetMoveType(EBoidMoveType NewMoveType) { Invoke(nameof(SetMoveType), NewMoveType); }
        public void SetGoalLocation(Vector NewGoalLocation, bool NewStopOnGoal, float NewGoalInnerRadius, float NewGoalOuterRadius, float NewGoalSeekBoost, float NewGoalSeekBoostZ) { Invoke(nameof(SetGoalLocation), NewGoalLocation, NewStopOnGoal, NewGoalInnerRadius, NewGoalOuterRadius, NewGoalSeekBoost, NewGoalSeekBoostZ); }
        public void SetGoalDirection(Vector NewDirection) { Invoke(nameof(SetGoalDirection), NewDirection); }
        public void SetGoal(Actor NewGoal, bool NewStopOnGoal, float NewGoalInnerRadius, float NewGoalOuterRadius, float NewGoalSeekBoost, float NewGoalSeekBoostZ) { Invoke(nameof(SetGoal), NewGoal, NewStopOnGoal, NewGoalInnerRadius, NewGoalOuterRadius, NewGoalSeekBoost, NewGoalSeekBoostZ); }
        public void SetFlapIntensity(float NewFlapIntensity) { Invoke(nameof(SetFlapIntensity), NewFlapIntensity); }
        public void SetEnabled(bool NewEnabled) { Invoke(nameof(SetEnabled), NewEnabled); }
        public void SetBoidSettings(BoidSettings NewSettings) { Invoke(nameof(SetBoidSettings), NewSettings); }
        public void ClearGoal() { Invoke(nameof(ClearGoal)); }
    }
    public class BoidManager : GameInstanceSubsystem
    {
        public BoidManager(nint addr) : base(addr) { }
        public Array<BoidComponent> Boids { get { return new Array<BoidComponent>(this[nameof(Boids)].Address); } }
    }
    public class Boids : Actor
    {
        public Boids(nint addr) : base(addr) { }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
        public BillboardComponent BillboardComponent { get { return this[nameof(BillboardComponent)].As<BillboardComponent>(); } set { this["BillboardComponent"] = value; } }
        public SpawnSettings SpawnSettings { get { return this[nameof(SpawnSettings)].As<SpawnSettings>(); } set { this["SpawnSettings"] = value; } }
        public World World { get { return this[nameof(World)].As<World>(); } set { this["World"] = value; } }
        public Array<Actor> Boids_value { get { return new Array<Actor>(this[nameof(Boids)].Address); } }
        public Actor SpawnBoid() { return Invoke<Actor>(nameof(SpawnBoid)); }
        public void SetGoal(Actor Goal) { Invoke(nameof(SetGoal), Goal); }
        public void InitializeBoids() { Invoke(nameof(InitializeBoids)); }
        public void DestroyAllBoids() { Invoke(nameof(DestroyAllBoids)); }
        public void BoidSpawned(Actor Actor) { Invoke(nameof(BoidSpawned), Actor); }
    }
    public class AnimatedCameraComponent : CameraComponent
    {
        public AnimatedCameraComponent(nint addr) : base(addr) { }
        public void SetCamera(PlayerController TargetController) { Invoke(nameof(SetCamera), TargetController); }
        public void SetAnimatedCameraFOV(float CameraFOV) { Invoke(nameof(SetAnimatedCameraFOV), CameraFOV); }
        public void RestoreCamera(PlayerController TargetController, bool ResetToCurrentView) { Invoke(nameof(RestoreCamera), TargetController, ResetToCurrentView); }
        public void ExitAnimatedCamera() { Invoke(nameof(ExitAnimatedCamera)); }
        public void Exit() { Invoke(nameof(Exit)); }
        public void EnterAnimatedCamera(Object CameraBone, float CameraFOV) { Invoke(nameof(EnterAnimatedCamera), CameraBone, CameraFOV); }
        public void Enter() { Invoke(nameof(Enter)); }
        public void AnimatedCameraCut(Object CameraBone, float CameraFOV) { Invoke(nameof(AnimatedCameraCut), CameraBone, CameraFOV); }
    }
    public class AnimatedCameraState : CameraState
    {
        public AnimatedCameraState(nint addr) : base(addr) { }
        public Actor RefActor { get { return this[nameof(RefActor)].As<Actor>(); } set { this["RefActor"] = value; } }
        public Object CameraBone { get { return this[nameof(CameraBone)]; } set { this[nameof(CameraBone)] = value; } }
    }
    public class CameraModifier_SimulatedHMD : CameraModifier
    {
        public CameraModifier_SimulatedHMD(nint addr) : base(addr) { }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float PitchSpeed { get { return this[nameof(PitchSpeed)].GetValue<float>(); } set { this[nameof(PitchSpeed)].SetValue<float>(value); } }
        public float YawSpeed { get { return this[nameof(YawSpeed)].GetValue<float>(); } set { this[nameof(YawSpeed)].SetValue<float>(value); } }
        public InputComponent InputComponent { get { return this[nameof(InputComponent)].As<InputComponent>(); } set { this["InputComponent"] = value; } }
    }
    public class CameraStateDecorator : ActorStateDecorator
    {
        public CameraStateDecorator(nint addr) : base(addr) { }
        public Object Camera { get { return this[nameof(Camera)]; } set { this[nameof(Camera)] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public Array<CustomCameraBlend> CustomBlends { get { return new Array<CustomCameraBlend>(this[nameof(CustomBlends)].Address); } }
    }
    public class AnimatedCameraStateDecorator : ActorStateDecorator
    {
        public AnimatedCameraStateDecorator(nint addr) : base(addr) { }
        public bool ApplyToLocalPlayer { get { return this[nameof(ApplyToLocalPlayer)].Flag; } set { this[nameof(ApplyToLocalPlayer)].Flag = value; } }
        public bool AllowInput { get { return this[nameof(AllowInput)].Flag; } set { this[nameof(AllowInput)].Flag = value; } }
        public bool LockCameraStateChanges { get { return this[nameof(LockCameraStateChanges)].Flag; } set { this[nameof(LockCameraStateChanges)].Flag = value; } }
        public Object CameraBone { get { return this[nameof(CameraBone)]; } set { this[nameof(CameraBone)] = value; } }
        public float CameraFOV { get { return this[nameof(CameraFOV)].GetValue<float>(); } set { this[nameof(CameraFOV)].SetValue<float>(value); } }
        public float CameraBlendTime { get { return this[nameof(CameraBlendTime)].GetValue<float>(); } set { this[nameof(CameraBlendTime)].SetValue<float>(value); } }
        public float CameraBlendOutTime { get { return this[nameof(CameraBlendOutTime)].GetValue<float>(); } set { this[nameof(CameraBlendOutTime)].SetValue<float>(value); } }
        public ECincematicMode CinematicMode { get { return (ECincematicMode)this[nameof(CinematicMode)].GetValue<int>(); } set { this[nameof(CinematicMode)].SetValue<int>((int)value); } }
        public bool bAffectsInput { get { return this[nameof(bAffectsInput)].Flag; } set { this[nameof(bAffectsInput)].Flag = value; } }
        public bool bAffectsHUD { get { return this[nameof(bAffectsHUD)].Flag; } set { this[nameof(bAffectsHUD)].Flag = value; } }
    }
    public class CinematicTransitionCameraState : CameraState
    {
        public CinematicTransitionCameraState(nint addr) : base(addr) { }
        public void OnDamageEvent(DamageInfo DamageInfo) { Invoke(nameof(OnDamageEvent), DamageInfo); }
        public void OnCinematicEvent(PlayerControllerGunfire Player, bool bIsInCinematic) { Invoke(nameof(OnCinematicEvent), Player, bIsInCinematic); }
    }
    public class FixedCameraState : CameraState
    {
        public FixedCameraState(nint addr) : base(addr) { }
        public bool bForceOriginalCameraTransform { get { return this[nameof(bForceOriginalCameraTransform)].Flag; } set { this[nameof(bForceOriginalCameraTransform)].Flag = value; } }
        public bool bSimulateHMD { get { return this[nameof(bSimulateHMD)].Flag; } set { this[nameof(bSimulateHMD)].Flag = value; } }
    }
    public class FlyCameraController : PlayerController
    {
        public FlyCameraController(nint addr) : base(addr) { }
    }
    public class FocusCameraSettings : ActorComponent
    {
        public FocusCameraSettings(nint addr) : base(addr) { }
        public float DistanceMin { get { return this[nameof(DistanceMin)].GetValue<float>(); } set { this[nameof(DistanceMin)].SetValue<float>(value); } }
        public float DistanceMax { get { return this[nameof(DistanceMax)].GetValue<float>(); } set { this[nameof(DistanceMax)].SetValue<float>(value); } }
        public float PivotRatioToTarget { get { return this[nameof(PivotRatioToTarget)].GetValue<float>(); } set { this[nameof(PivotRatioToTarget)].SetValue<float>(value); } }
        public float HeightOffset { get { return this[nameof(HeightOffset)].GetValue<float>(); } set { this[nameof(HeightOffset)].SetValue<float>(value); } }
        public float LookAtOffset { get { return this[nameof(LookAtOffset)].GetValue<float>(); } set { this[nameof(LookAtOffset)].SetValue<float>(value); } }
        public float LeftRightOffset { get { return this[nameof(LeftRightOffset)].GetValue<float>(); } set { this[nameof(LeftRightOffset)].SetValue<float>(value); } }
    }
    public class FocusCameraState : CameraState
    {
        public FocusCameraState(nint addr) : base(addr) { }
        public float DistanceMin { get { return this[nameof(DistanceMin)].GetValue<float>(); } set { this[nameof(DistanceMin)].SetValue<float>(value); } }
        public float DistanceMax { get { return this[nameof(DistanceMax)].GetValue<float>(); } set { this[nameof(DistanceMax)].SetValue<float>(value); } }
        public float DistanceAdjustSmoothTime { get { return this[nameof(DistanceAdjustSmoothTime)].GetValue<float>(); } set { this[nameof(DistanceAdjustSmoothTime)].SetValue<float>(value); } }
        public float PivotRatioToTarget { get { return this[nameof(PivotRatioToTarget)].GetValue<float>(); } set { this[nameof(PivotRatioToTarget)].SetValue<float>(value); } }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float PitchDefault { get { return this[nameof(PitchDefault)].GetValue<float>(); } set { this[nameof(PitchDefault)].SetValue<float>(value); } }
        public bool LockPitchToTarget { get { return this[nameof(LockPitchToTarget)].Flag; } set { this[nameof(LockPitchToTarget)].Flag = value; } }
        public float PitchOffset { get { return this[nameof(PitchOffset)].GetValue<float>(); } set { this[nameof(PitchOffset)].SetValue<float>(value); } }
        public float HeightOffset { get { return this[nameof(HeightOffset)].GetValue<float>(); } set { this[nameof(HeightOffset)].SetValue<float>(value); } }
        public float LeftRightOffset { get { return this[nameof(LeftRightOffset)].GetValue<float>(); } set { this[nameof(LeftRightOffset)].SetValue<float>(value); } }
        public float LeftRightOffsetAdjustSmoothTime { get { return this[nameof(LeftRightOffsetAdjustSmoothTime)].GetValue<float>(); } set { this[nameof(LeftRightOffsetAdjustSmoothTime)].SetValue<float>(value); } }
        public float PivotSmoothTimeOnGround { get { return this[nameof(PivotSmoothTimeOnGround)].GetValue<float>(); } set { this[nameof(PivotSmoothTimeOnGround)].SetValue<float>(value); } }
        public float PivotSmoothTimeInAir { get { return this[nameof(PivotSmoothTimeInAir)].GetValue<float>(); } set { this[nameof(PivotSmoothTimeInAir)].SetValue<float>(value); } }
        public float RotationSmoothTime { get { return this[nameof(RotationSmoothTime)].GetValue<float>(); } set { this[nameof(RotationSmoothTime)].SetValue<float>(value); } }
        public float FadeCharacterDistance { get { return this[nameof(FadeCharacterDistance)].GetValue<float>(); } set { this[nameof(FadeCharacterDistance)].SetValue<float>(value); } }
        public float YawOffset { get { return this[nameof(YawOffset)].GetValue<float>(); } set { this[nameof(YawOffset)].SetValue<float>(value); } }
        public float YawOffsetProjectDist { get { return this[nameof(YawOffsetProjectDist)].GetValue<float>(); } set { this[nameof(YawOffsetProjectDist)].SetValue<float>(value); } }
        public float YawOffsetSmoothTime { get { return this[nameof(YawOffsetSmoothTime)].GetValue<float>(); } set { this[nameof(YawOffsetSmoothTime)].SetValue<float>(value); } }
        public bool LockNoTargetHeading { get { return this[nameof(LockNoTargetHeading)].Flag; } set { this[nameof(LockNoTargetHeading)].Flag = value; } }
    }
    public class MoveDetachedCameraState : CameraState
    {
        public MoveDetachedCameraState(nint addr) : base(addr) { }
        public float FadeCharacterDistance { get { return this[nameof(FadeCharacterDistance)].GetValue<float>(); } set { this[nameof(FadeCharacterDistance)].SetValue<float>(value); } }
        public bool SnapOnExit { get { return this[nameof(SnapOnExit)].Flag; } set { this[nameof(SnapOnExit)].Flag = value; } }
        public bool SnapWhenOutOfSight { get { return this[nameof(SnapWhenOutOfSight)].Flag; } set { this[nameof(SnapWhenOutOfSight)].Flag = value; } }
        public bool SnapOnFOV { get { return this[nameof(SnapOnFOV)].Flag; } set { this[nameof(SnapOnFOV)].Flag = value; } }
        public float SnapOnFOVDelay { get { return this[nameof(SnapOnFOVDelay)].GetValue<float>(); } set { this[nameof(SnapOnFOVDelay)].SetValue<float>(value); } }
        public bool TurnSmooth { get { return this[nameof(TurnSmooth)].Flag; } set { this[nameof(TurnSmooth)].Flag = value; } }
        public float TurnRate { get { return this[nameof(TurnRate)].GetValue<float>(); } set { this[nameof(TurnRate)].SetValue<float>(value); } }
        public float TurnIncrement { get { return this[nameof(TurnIncrement)].GetValue<float>(); } set { this[nameof(TurnIncrement)].SetValue<float>(value); } }
        public bool RoundToNearestIncrement { get { return this[nameof(RoundToNearestIncrement)].Flag; } set { this[nameof(RoundToNearestIncrement)].Flag = value; } }
        public ECameraFollow Follow { get { return (ECameraFollow)this[nameof(Follow)].GetValue<int>(); } set { this[nameof(Follow)].SetValue<int>((int)value); } }
        public Rotator RootRotation { get { return this[nameof(RootRotation)].As<Rotator>(); } set { this["RootRotation"] = value; } }
        public void Snap(StateCameraComponent CameraComponent, bool UseInputDir) { Invoke(nameof(Snap), CameraComponent, UseInputDir); }
        public void Rotate(float Angle) { Invoke(nameof(Rotate), Angle); }
    }
    public class PlatformCameraState : CameraState
    {
        public PlatformCameraState(nint addr) : base(addr) { }
        public float DistanceMin { get { return this[nameof(DistanceMin)].GetValue<float>(); } set { this[nameof(DistanceMin)].SetValue<float>(value); } }
        public float DistanceMax { get { return this[nameof(DistanceMax)].GetValue<float>(); } set { this[nameof(DistanceMax)].SetValue<float>(value); } }
        public float DistancePitchScalarMin { get { return this[nameof(DistancePitchScalarMin)].GetValue<float>(); } set { this[nameof(DistancePitchScalarMin)].SetValue<float>(value); } }
        public float DistancePitchScalarMax { get { return this[nameof(DistancePitchScalarMax)].GetValue<float>(); } set { this[nameof(DistancePitchScalarMax)].SetValue<float>(value); } }
        public float DistanceAdjustSmoothTime { get { return this[nameof(DistanceAdjustSmoothTime)].GetValue<float>(); } set { this[nameof(DistanceAdjustSmoothTime)].SetValue<float>(value); } }
        public float MinDistanceAdjustSmoothTime { get { return this[nameof(MinDistanceAdjustSmoothTime)].GetValue<float>(); } set { this[nameof(MinDistanceAdjustSmoothTime)].SetValue<float>(value); } }
        public float YawSpeed { get { return this[nameof(YawSpeed)].GetValue<float>(); } set { this[nameof(YawSpeed)].SetValue<float>(value); } }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float PitchSpeed { get { return this[nameof(PitchSpeed)].GetValue<float>(); } set { this[nameof(PitchSpeed)].SetValue<float>(value); } }
        public float CameraRotateSmoothTime { get { return this[nameof(CameraRotateSmoothTime)].GetValue<float>(); } set { this[nameof(CameraRotateSmoothTime)].SetValue<float>(value); } }
        public EBaseLocationMethod BaseLocation { get { return (EBaseLocationMethod)this[nameof(BaseLocation)].GetValue<int>(); } set { this[nameof(BaseLocation)].SetValue<int>((int)value); } }
        public float HeightOffset { get { return this[nameof(HeightOffset)].GetValue<float>(); } set { this[nameof(HeightOffset)].SetValue<float>(value); } }
        public float HeightOffsetAtPitchMin { get { return this[nameof(HeightOffsetAtPitchMin)].GetValue<float>(); } set { this[nameof(HeightOffsetAtPitchMin)].SetValue<float>(value); } }
        public float HeightOffsetAtPitchMax { get { return this[nameof(HeightOffsetAtPitchMax)].GetValue<float>(); } set { this[nameof(HeightOffsetAtPitchMax)].SetValue<float>(value); } }
        public float LeftRightOffset { get { return this[nameof(LeftRightOffset)].GetValue<float>(); } set { this[nameof(LeftRightOffset)].SetValue<float>(value); } }
        public float VelocityOffset { get { return this[nameof(VelocityOffset)].GetValue<float>(); } set { this[nameof(VelocityOffset)].SetValue<float>(value); } }
        public float VelocityRefMin { get { return this[nameof(VelocityRefMin)].GetValue<float>(); } set { this[nameof(VelocityRefMin)].SetValue<float>(value); } }
        public float VelocityRefMax { get { return this[nameof(VelocityRefMax)].GetValue<float>(); } set { this[nameof(VelocityRefMax)].SetValue<float>(value); } }
        public float VelocityOffsetSmoothTime { get { return this[nameof(VelocityOffsetSmoothTime)].GetValue<float>(); } set { this[nameof(VelocityOffsetSmoothTime)].SetValue<float>(value); } }
        public float PivotSmoothTimeOnGround { get { return this[nameof(PivotSmoothTimeOnGround)].GetValue<float>(); } set { this[nameof(PivotSmoothTimeOnGround)].SetValue<float>(value); } }
        public float PivotSmoothTimeInAir { get { return this[nameof(PivotSmoothTimeInAir)].GetValue<float>(); } set { this[nameof(PivotSmoothTimeInAir)].SetValue<float>(value); } }
        public float PivotSmoothTimeOverride { get { return this[nameof(PivotSmoothTimeOverride)].GetValue<float>(); } set { this[nameof(PivotSmoothTimeOverride)].SetValue<float>(value); } }
        public float LateralPivotSmooth { get { return this[nameof(LateralPivotSmooth)].GetValue<float>(); } set { this[nameof(LateralPivotSmooth)].SetValue<float>(value); } }
        public EAutoCenterCondition AutoCenterCondition { get { return (EAutoCenterCondition)this[nameof(AutoCenterCondition)].GetValue<int>(); } set { this[nameof(AutoCenterCondition)].SetValue<int>((int)value); } }
        public bool AutoCenterYaw { get { return this[nameof(AutoCenterYaw)].Flag; } set { this[nameof(AutoCenterYaw)].Flag = value; } }
        public bool GamepadOnlyAutoCenterYaw { get { return this[nameof(GamepadOnlyAutoCenterYaw)].Flag; } set { this[nameof(GamepadOnlyAutoCenterYaw)].Flag = value; } }
        public bool UseOwnerHeadingForAutoCenterYaw { get { return this[nameof(UseOwnerHeadingForAutoCenterYaw)].Flag; } set { this[nameof(UseOwnerHeadingForAutoCenterYaw)].Flag = value; } }
        public float AutoCenterYawInterpSpeed { get { return this[nameof(AutoCenterYawInterpSpeed)].GetValue<float>(); } set { this[nameof(AutoCenterYawInterpSpeed)].SetValue<float>(value); } }
        public float AutoCenterPitchInterpSpeed { get { return this[nameof(AutoCenterPitchInterpSpeed)].GetValue<float>(); } set { this[nameof(AutoCenterPitchInterpSpeed)].SetValue<float>(value); } }
        public float AutoCenterSmoothTime { get { return this[nameof(AutoCenterSmoothTime)].GetValue<float>(); } set { this[nameof(AutoCenterSmoothTime)].SetValue<float>(value); } }
        public float AutoCenterDelay { get { return this[nameof(AutoCenterDelay)].GetValue<float>(); } set { this[nameof(AutoCenterDelay)].SetValue<float>(value); } }
        public float AutoCenterPitch { get { return this[nameof(AutoCenterPitch)].GetValue<float>(); } set { this[nameof(AutoCenterPitch)].SetValue<float>(value); } }
        public float AutoCenterFallPitch { get { return this[nameof(AutoCenterFallPitch)].GetValue<float>(); } set { this[nameof(AutoCenterFallPitch)].SetValue<float>(value); } }
        public float AutoCenterFallRefStart { get { return this[nameof(AutoCenterFallRefStart)].GetValue<float>(); } set { this[nameof(AutoCenterFallRefStart)].SetValue<float>(value); } }
        public float AutoCenterFallRefEnd { get { return this[nameof(AutoCenterFallRefEnd)].GetValue<float>(); } set { this[nameof(AutoCenterFallRefEnd)].SetValue<float>(value); } }
        public float GroundSlopeScalar { get { return this[nameof(GroundSlopeScalar)].GetValue<float>(); } set { this[nameof(GroundSlopeScalar)].SetValue<float>(value); } }
        public float FadeCharacterDistance { get { return this[nameof(FadeCharacterDistance)].GetValue<float>(); } set { this[nameof(FadeCharacterDistance)].SetValue<float>(value); } }
        public bool AllowTargetLock { get { return this[nameof(AllowTargetLock)].Flag; } set { this[nameof(AllowTargetLock)].Flag = value; } }
        public float TargetLockYawInterpSpeed { get { return this[nameof(TargetLockYawInterpSpeed)].GetValue<float>(); } set { this[nameof(TargetLockYawInterpSpeed)].SetValue<float>(value); } }
        public float TargetLockPitchInterpSpeed { get { return this[nameof(TargetLockPitchInterpSpeed)].GetValue<float>(); } set { this[nameof(TargetLockPitchInterpSpeed)].SetValue<float>(value); } }
        public float TargetLockPitchOffset { get { return this[nameof(TargetLockPitchOffset)].GetValue<float>(); } set { this[nameof(TargetLockPitchOffset)].SetValue<float>(value); } }
        public float TargetLockYawOffset { get { return this[nameof(TargetLockYawOffset)].GetValue<float>(); } set { this[nameof(TargetLockYawOffset)].SetValue<float>(value); } }
        public bool DoCameraAvoidance { get { return this[nameof(DoCameraAvoidance)].Flag; } set { this[nameof(DoCameraAvoidance)].Flag = value; } }
        public float CameraAvoidanceAngleThresh { get { return this[nameof(CameraAvoidanceAngleThresh)].GetValue<float>(); } set { this[nameof(CameraAvoidanceAngleThresh)].SetValue<float>(value); } }
    }
    public class PlayerCameraManagerGunfire : PlayerCameraManager
    {
        public PlayerCameraManagerGunfire(nint addr) : base(addr) { }
        public Object OnStopCameraFadeEvent { get { return this[nameof(OnStopCameraFadeEvent)]; } set { this[nameof(OnStopCameraFadeEvent)] = value; } }
        public Object OnViewTargetPreChangeEvent { get { return this[nameof(OnViewTargetPreChangeEvent)]; } set { this[nameof(OnViewTargetPreChangeEvent)] = value; } }
        public Object OnViewTargetPostChangeEvent { get { return this[nameof(OnViewTargetPostChangeEvent)]; } set { this[nameof(OnViewTargetPostChangeEvent)] = value; } }
        public long CurrentEffectID { get { return this[nameof(CurrentEffectID)].GetValue<long>(); } set { this[nameof(CurrentEffectID)].SetValue<long>(value); } }
        public Array<CameraEffect> CurrentEffects { get { return new Array<CameraEffect>(this[nameof(CurrentEffects)].Address); } }
        public void SettingsRebuilt(GameUserSettingsGunfire UserSettings) { Invoke(nameof(SettingsRebuilt), UserSettings); }
        public void RemoveCameraEffect(int HandleID) { Invoke(nameof(RemoveCameraEffect), HandleID); }
        public void ModifyCameraEffectIntensity(int HandleID, Object ParticleIntensityParam, float ParticleIntensity, bool ResetSystem) { Invoke(nameof(ModifyCameraEffectIntensity), HandleID, ParticleIntensityParam, ParticleIntensity, ResetSystem); }
        public bool GetCameraEffectForHandleID(int HandleID, CameraEffect OutEffect) { return Invoke<bool>(nameof(GetCameraEffectForHandleID), HandleID, OutEffect); }
        public int AddCameraEffect(CameraEffect Effect, Actor EffectViewTarget) { return Invoke<int>(nameof(AddCameraEffect), Effect, EffectViewTarget); }
    }
    public class ThirdPersonCameraState : CameraState
    {
        public ThirdPersonCameraState(nint addr) : base(addr) { }
        public ETPSAimType AimType { get { return (ETPSAimType)this[nameof(AimType)].GetValue<int>(); } set { this[nameof(AimType)].SetValue<int>((int)value); } }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public float PitchSpeed { get { return this[nameof(PitchSpeed)].GetValue<float>(); } set { this[nameof(PitchSpeed)].SetValue<float>(value); } }
        public float MousePitchSpeedScalar { get { return this[nameof(MousePitchSpeedScalar)].GetValue<float>(); } set { this[nameof(MousePitchSpeedScalar)].SetValue<float>(value); } }
        public float PitchMinZoomScale { get { return this[nameof(PitchMinZoomScale)].GetValue<float>(); } set { this[nameof(PitchMinZoomScale)].SetValue<float>(value); } }
        public float PitchMaxZoomScale { get { return this[nameof(PitchMaxZoomScale)].GetValue<float>(); } set { this[nameof(PitchMaxZoomScale)].SetValue<float>(value); } }
        public float YawSpeed { get { return this[nameof(YawSpeed)].GetValue<float>(); } set { this[nameof(YawSpeed)].SetValue<float>(value); } }
        public float MouseYawSpeedScalar { get { return this[nameof(MouseYawSpeedScalar)].GetValue<float>(); } set { this[nameof(MouseYawSpeedScalar)].SetValue<float>(value); } }
        public float YawMin { get { return this[nameof(YawMin)].GetValue<float>(); } set { this[nameof(YawMin)].SetValue<float>(value); } }
        public float YawMax { get { return this[nameof(YawMax)].GetValue<float>(); } set { this[nameof(YawMax)].SetValue<float>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public float HeightOffset { get { return this[nameof(HeightOffset)].GetValue<float>(); } set { this[nameof(HeightOffset)].SetValue<float>(value); } }
        public bool bUseMeshUpVector { get { return this[nameof(bUseMeshUpVector)].Flag; } set { this[nameof(bUseMeshUpVector)].Flag = value; } }
        public float LeftRightOffset { get { return this[nameof(LeftRightOffset)].GetValue<float>(); } set { this[nameof(LeftRightOffset)].SetValue<float>(value); } }
        public float FadeCharacterDistance { get { return this[nameof(FadeCharacterDistance)].GetValue<float>(); } set { this[nameof(FadeCharacterDistance)].SetValue<float>(value); } }
        public Object CameraBone { get { return this[nameof(CameraBone)]; } set { this[nameof(CameraBone)] = value; } }
        public bool CameraBoneYawInverted { get { return this[nameof(CameraBoneYawInverted)].Flag; } set { this[nameof(CameraBoneYawInverted)].Flag = value; } }
        public bool AllowShoulderSwitch { get { return this[nameof(AllowShoulderSwitch)].Flag; } set { this[nameof(AllowShoulderSwitch)].Flag = value; } }
        public bool bSetWeaponOrientationOnExit { get { return this[nameof(bSetWeaponOrientationOnExit)].Flag; } set { this[nameof(bSetWeaponOrientationOnExit)].Flag = value; } }
        public ETPSCameraOrientation WeaponOrientationOnExit { get { return (ETPSCameraOrientation)this[nameof(WeaponOrientationOnExit)].GetValue<int>(); } set { this[nameof(WeaponOrientationOnExit)].SetValue<int>((int)value); } }
        public float ShoulderSwitchOrientationMemory { get { return this[nameof(ShoulderSwitchOrientationMemory)].GetValue<float>(); } set { this[nameof(ShoulderSwitchOrientationMemory)].SetValue<float>(value); } }
        public float ShoulderSwitchDelay { get { return this[nameof(ShoulderSwitchDelay)].GetValue<float>(); } set { this[nameof(ShoulderSwitchDelay)].SetValue<float>(value); } }
        public float AimRealignmentScalar { get { return this[nameof(AimRealignmentScalar)].GetValue<float>(); } set { this[nameof(AimRealignmentScalar)].SetValue<float>(value); } }
        public bool OrientTowardsHeading { get { return this[nameof(OrientTowardsHeading)].Flag; } set { this[nameof(OrientTowardsHeading)].Flag = value; } }
        public EOrientTowardsHeadingCondition OrientMode { get { return (EOrientTowardsHeadingCondition)this[nameof(OrientMode)].GetValue<int>(); } set { this[nameof(OrientMode)].SetValue<int>((int)value); } }
        public float OrientTowardsHeadingBlendTime { get { return this[nameof(OrientTowardsHeadingBlendTime)].GetValue<float>(); } set { this[nameof(OrientTowardsHeadingBlendTime)].SetValue<float>(value); } }
        public float OrientTowardsHeadingDelay { get { return this[nameof(OrientTowardsHeadingDelay)].GetValue<float>(); } set { this[nameof(OrientTowardsHeadingDelay)].SetValue<float>(value); } }
        public float OrientTowardsHeadingTime { get { return this[nameof(OrientTowardsHeadingTime)].GetValue<float>(); } set { this[nameof(OrientTowardsHeadingTime)].SetValue<float>(value); } }
        public Object OrientTowardsHeadingWindow { get { return this[nameof(OrientTowardsHeadingWindow)]; } set { this[nameof(OrientTowardsHeadingWindow)] = value; } }
        public float SwayAdjustSpeed { get { return this[nameof(SwayAdjustSpeed)].GetValue<float>(); } set { this[nameof(SwayAdjustSpeed)].SetValue<float>(value); } }
        public Vector2D GlobalSwayScale { get { return this[nameof(GlobalSwayScale)].As<Vector2D>(); } set { this["GlobalSwayScale"] = value; } }
        public float SwayPeriodScale { get { return this[nameof(SwayPeriodScale)].GetValue<float>(); } set { this[nameof(SwayPeriodScale)].SetValue<float>(value); } }
        public float GamepadCameraInputPower { get { return this[nameof(GamepadCameraInputPower)].GetValue<float>(); } set { this[nameof(GamepadCameraInputPower)].SetValue<float>(value); } }
        public float GamepadDeadZone { get { return this[nameof(GamepadDeadZone)].GetValue<float>(); } set { this[nameof(GamepadDeadZone)].SetValue<float>(value); } }
        public float InputSmooth { get { return this[nameof(InputSmooth)].GetValue<float>(); } set { this[nameof(InputSmooth)].SetValue<float>(value); } }
        public float InputSmoothNeutral { get { return this[nameof(InputSmoothNeutral)].GetValue<float>(); } set { this[nameof(InputSmoothNeutral)].SetValue<float>(value); } }
        public float InputDampingX { get { return this[nameof(InputDampingX)].GetValue<float>(); } set { this[nameof(InputDampingX)].SetValue<float>(value); } }
        public float InputDampingY { get { return this[nameof(InputDampingY)].GetValue<float>(); } set { this[nameof(InputDampingY)].SetValue<float>(value); } }
        public float InputSmoothWhileDamping { get { return this[nameof(InputSmoothWhileDamping)].GetValue<float>(); } set { this[nameof(InputSmoothWhileDamping)].SetValue<float>(value); } }
        public float AdhesionStrength { get { return this[nameof(AdhesionStrength)].GetValue<float>(); } set { this[nameof(AdhesionStrength)].SetValue<float>(value); } }
        public EAdhesionActivateMode AdhesionMode { get { return (EAdhesionActivateMode)this[nameof(AdhesionMode)].GetValue<int>(); } set { this[nameof(AdhesionMode)].SetValue<int>((int)value); } }
        public float AdhesionBlendTime { get { return this[nameof(AdhesionBlendTime)].GetValue<float>(); } set { this[nameof(AdhesionBlendTime)].SetValue<float>(value); } }
        public float DepthOfFieldStrength { get { return this[nameof(DepthOfFieldStrength)].GetValue<float>(); } set { this[nameof(DepthOfFieldStrength)].SetValue<float>(value); } }
        public float DepthOfFieldRange { get { return this[nameof(DepthOfFieldRange)].GetValue<float>(); } set { this[nameof(DepthOfFieldRange)].SetValue<float>(value); } }
        public Object DepthOfFieldWeaponType { get { return this[nameof(DepthOfFieldWeaponType)]; } set { this[nameof(DepthOfFieldWeaponType)] = value; } }
        public Object RangedWeaponType { get { return this[nameof(RangedWeaponType)]; } set { this[nameof(RangedWeaponType)] = value; } }
        public bool bShouldSnapTarget { get { return this[nameof(bShouldSnapTarget)].Flag; } set { this[nameof(bShouldSnapTarget)].Flag = value; } }
        public float SnapTargetTime { get { return this[nameof(SnapTargetTime)].GetValue<float>(); } set { this[nameof(SnapTargetTime)].SetValue<float>(value); } }
        public float SnapTargetMaxAdjustAngle { get { return this[nameof(SnapTargetMaxAdjustAngle)].GetValue<float>(); } set { this[nameof(SnapTargetMaxAdjustAngle)].SetValue<float>(value); } }
        public float FollowTimeAfterSnap { get { return this[nameof(FollowTimeAfterSnap)].GetValue<float>(); } set { this[nameof(FollowTimeAfterSnap)].SetValue<float>(value); } }
        public bool bIsCrouchCoverCameraState { get { return this[nameof(bIsCrouchCoverCameraState)].Flag; } set { this[nameof(bIsCrouchCoverCameraState)].Flag = value; } }
        public float CoverPitchMinHeightOffset { get { return this[nameof(CoverPitchMinHeightOffset)].GetValue<float>(); } set { this[nameof(CoverPitchMinHeightOffset)].SetValue<float>(value); } }
        public float CoverPitchMinDistance { get { return this[nameof(CoverPitchMinDistance)].GetValue<float>(); } set { this[nameof(CoverPitchMinDistance)].SetValue<float>(value); } }
        public float CoverPitchMinLeftRightOffset { get { return this[nameof(CoverPitchMinLeftRightOffset)].GetValue<float>(); } set { this[nameof(CoverPitchMinLeftRightOffset)].SetValue<float>(value); } }
        public TargetingComponent TargetingComponent { get { return this[nameof(TargetingComponent)].As<TargetingComponent>(); } set { this["TargetingComponent"] = value; } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public UserWidget ScopeWidgetInstance { get { return this[nameof(ScopeWidgetInstance)].As<UserWidget>(); } set { this["ScopeWidgetInstance"] = value; } }
        public RangedWeapon ScopedWeapon { get { return this[nameof(ScopedWeapon)].As<RangedWeapon>(); } set { this["ScopedWeapon"] = value; } }
        public MaterialInterface ScopePostProcess { get { return this[nameof(ScopePostProcess)].As<MaterialInterface>(); } set { this["ScopePostProcess"] = value; } }
        public void LookAt(SceneComponent Target, float BlendTime) { Invoke(nameof(LookAt), Target, BlendTime); }
    }
    public class PortalCameraState : ThirdPersonCameraState
    {
        public PortalCameraState(nint addr) : base(addr) { }
        public float BlendInTime { get { return this[nameof(BlendInTime)].GetValue<float>(); } set { this[nameof(BlendInTime)].SetValue<float>(value); } }
        public float BlendOutTime { get { return this[nameof(BlendOutTime)].GetValue<float>(); } set { this[nameof(BlendOutTime)].SetValue<float>(value); } }
        public bool bOverrideUprightBlendOutTime { get { return this[nameof(bOverrideUprightBlendOutTime)].Flag; } set { this[nameof(bOverrideUprightBlendOutTime)].Flag = value; } }
        public float UprightBlendOutTime { get { return this[nameof(UprightBlendOutTime)].GetValue<float>(); } set { this[nameof(UprightBlendOutTime)].SetValue<float>(value); } }
        public float BlendOutMinimumPitch { get { return this[nameof(BlendOutMinimumPitch)].GetValue<float>(); } set { this[nameof(BlendOutMinimumPitch)].SetValue<float>(value); } }
        public float EaseExp { get { return this[nameof(EaseExp)].GetValue<float>(); } set { this[nameof(EaseExp)].SetValue<float>(value); } }
        public float PortalSurfaceEpsilon { get { return this[nameof(PortalSurfaceEpsilon)].GetValue<float>(); } set { this[nameof(PortalSurfaceEpsilon)].SetValue<float>(value); } }
        public float PortalExtraHeightOffset { get { return this[nameof(PortalExtraHeightOffset)].GetValue<float>(); } set { this[nameof(PortalExtraHeightOffset)].SetValue<float>(value); } }
        public float BlendInMinDistance { get { return this[nameof(BlendInMinDistance)].GetValue<float>(); } set { this[nameof(BlendInMinDistance)].SetValue<float>(value); } }
        public float MinDistanceStartAlpha { get { return this[nameof(MinDistanceStartAlpha)].GetValue<float>(); } set { this[nameof(MinDistanceStartAlpha)].SetValue<float>(value); } }
        public float MinDistanceStopAlpha { get { return this[nameof(MinDistanceStopAlpha)].GetValue<float>(); } set { this[nameof(MinDistanceStopAlpha)].SetValue<float>(value); } }
        public float ExitWorldBlendingTime { get { return this[nameof(ExitWorldBlendingTime)].GetValue<float>(); } set { this[nameof(ExitWorldBlendingTime)].SetValue<float>(value); } }
        public Portal EntryPortal { get { return this[nameof(EntryPortal)].As<Portal>(); } set { this["EntryPortal"] = value; } }
        public Portal ExitPortal { get { return this[nameof(ExitPortal)].As<Portal>(); } set { this["ExitPortal"] = value; } }
    }
    public class SplineCameraComponent : SceneComponent
    {
        public SplineCameraComponent(nint addr) : base(addr) { }
    }
    public class SplineCameraSplineComponent : SplineComponent
    {
        public SplineCameraSplineComponent(nint addr) : base(addr) { }
        public Vector GetCameraVectorAtSplineInputKey(float InputKey, byte CoordinateSpace) { return Invoke<Vector>(nameof(GetCameraVectorAtSplineInputKey), InputKey, CoordinateSpace); }
    }
    public class SplineCameraVolume : Actor
    {
        public SplineCameraVolume(nint addr) : base(addr) { }
        public BoxComponent Volume { get { return this[nameof(Volume)].As<BoxComponent>(); } set { this["Volume"] = value; } }
        public SplineCameraSplineComponent ReferenceSpline { get { return this[nameof(ReferenceSpline)].As<SplineCameraSplineComponent>(); } set { this["ReferenceSpline"] = value; } }
        public SplineCameraSplineComponent CameraSpline { get { return this[nameof(CameraSpline)].As<SplineCameraSplineComponent>(); } set { this["CameraSpline"] = value; } }
        public SplineCameraSplineComponent CameraBackwardSpline { get { return this[nameof(CameraBackwardSpline)].As<SplineCameraSplineComponent>(); } set { this["CameraBackwardSpline"] = value; } }
        public bool bAutoActivateCamera { get { return this[nameof(bAutoActivateCamera)].Flag; } set { this[nameof(bAutoActivateCamera)].Flag = value; } }
        public bool bDynamicallyUpdate { get { return this[nameof(bDynamicallyUpdate)].Flag; } set { this[nameof(bDynamicallyUpdate)].Flag = value; } }
        public bool bPlayerTarget { get { return this[nameof(bPlayerTarget)].Flag; } set { this[nameof(bPlayerTarget)].Flag = value; } }
        public bool bUseStickyMovement { get { return this[nameof(bUseStickyMovement)].Flag; } set { this[nameof(bUseStickyMovement)].Flag = value; } }
        public float CameraSplineOffset { get { return this[nameof(CameraSplineOffset)].GetValue<float>(); } set { this[nameof(CameraSplineOffset)].SetValue<float>(value); } }
        public float CameraMaxSpeed { get { return this[nameof(CameraMaxSpeed)].GetValue<float>(); } set { this[nameof(CameraMaxSpeed)].SetValue<float>(value); } }
        public InterpCurveFloat CharacterToCameraReparamTable { get { return this[nameof(CharacterToCameraReparamTable)].As<InterpCurveFloat>(); } set { this["CharacterToCameraReparamTable"] = value; } }
        public InterpCurveFloat CharacterToCameraBackwardReparamTable { get { return this[nameof(CharacterToCameraBackwardReparamTable)].As<InterpCurveFloat>(); } set { this["CharacterToCameraBackwardReparamTable"] = value; } }
        public float EntryBlendTime { get { return this[nameof(EntryBlendTime)].GetValue<float>(); } set { this[nameof(EntryBlendTime)].SetValue<float>(value); } }
        public float EntryPositionBlendFactor { get { return this[nameof(EntryPositionBlendFactor)].GetValue<float>(); } set { this[nameof(EntryPositionBlendFactor)].SetValue<float>(value); } }
        public float EntryRotationBlendFactor { get { return this[nameof(EntryRotationBlendFactor)].GetValue<float>(); } set { this[nameof(EntryRotationBlendFactor)].SetValue<float>(value); } }
        public float PositionBlendFactor { get { return this[nameof(PositionBlendFactor)].GetValue<float>(); } set { this[nameof(PositionBlendFactor)].SetValue<float>(value); } }
        public float RotationBlendFactor { get { return this[nameof(RotationBlendFactor)].GetValue<float>(); } set { this[nameof(RotationBlendFactor)].SetValue<float>(value); } }
        public float ExitBlendTime { get { return this[nameof(ExitBlendTime)].GetValue<float>(); } set { this[nameof(ExitBlendTime)].SetValue<float>(value); } }
        public bool bUseDirectionalCameraSplines { get { return this[nameof(bUseDirectionalCameraSplines)].Flag; } set { this[nameof(bUseDirectionalCameraSplines)].Flag = value; } }
        public float CutTimeThreshold { get { return this[nameof(CutTimeThreshold)].GetValue<float>(); } set { this[nameof(CutTimeThreshold)].SetValue<float>(value); } }
        public bool bShouldCutCamera { get { return this[nameof(bShouldCutCamera)].Flag; } set { this[nameof(bShouldCutCamera)].Flag = value; } }
        public float DirectionChangeBlendTime { get { return this[nameof(DirectionChangeBlendTime)].GetValue<float>(); } set { this[nameof(DirectionChangeBlendTime)].SetValue<float>(value); } }
        public bool bAllowAdditiveControls { get { return this[nameof(bAllowAdditiveControls)].Flag; } set { this[nameof(bAllowAdditiveControls)].Flag = value; } }
        public float PlayerLookPitchMin { get { return this[nameof(PlayerLookPitchMin)].GetValue<float>(); } set { this[nameof(PlayerLookPitchMin)].SetValue<float>(value); } }
        public float PlayerLookPitchMax { get { return this[nameof(PlayerLookPitchMax)].GetValue<float>(); } set { this[nameof(PlayerLookPitchMax)].SetValue<float>(value); } }
        public float PlayerLookPitchSpeed { get { return this[nameof(PlayerLookPitchSpeed)].GetValue<float>(); } set { this[nameof(PlayerLookPitchSpeed)].SetValue<float>(value); } }
        public float PlayerLookPitchMouseSpeed { get { return this[nameof(PlayerLookPitchMouseSpeed)].GetValue<float>(); } set { this[nameof(PlayerLookPitchMouseSpeed)].SetValue<float>(value); } }
        public float PlayerLookYawMin { get { return this[nameof(PlayerLookYawMin)].GetValue<float>(); } set { this[nameof(PlayerLookYawMin)].SetValue<float>(value); } }
        public float PlayerLookYawMax { get { return this[nameof(PlayerLookYawMax)].GetValue<float>(); } set { this[nameof(PlayerLookYawMax)].SetValue<float>(value); } }
        public float PlayerLookYawSpeed { get { return this[nameof(PlayerLookYawSpeed)].GetValue<float>(); } set { this[nameof(PlayerLookYawSpeed)].SetValue<float>(value); } }
        public float PlayerLookYawMouseSpeed { get { return this[nameof(PlayerLookYawMouseSpeed)].GetValue<float>(); } set { this[nameof(PlayerLookYawMouseSpeed)].SetValue<float>(value); } }
        public bool AutoCenter { get { return this[nameof(AutoCenter)].Flag; } set { this[nameof(AutoCenter)].Flag = value; } }
        public float AutoCenterSmoothTime { get { return this[nameof(AutoCenterSmoothTime)].GetValue<float>(); } set { this[nameof(AutoCenterSmoothTime)].SetValue<float>(value); } }
        public float AutoCenterDelay { get { return this[nameof(AutoCenterDelay)].GetValue<float>(); } set { this[nameof(AutoCenterDelay)].SetValue<float>(value); } }
        public SplineCameraComponent SplineCameraComponent { get { return this[nameof(SplineCameraComponent)].As<SplineCameraComponent>(); } set { this["SplineCameraComponent"] = value; } }
        public CharacterGunfire Character { get { return this[nameof(Character)].As<CharacterGunfire>(); } set { this["Character"] = value; } }
        public PlayerController PlayerController { get { return this[nameof(PlayerController)].As<PlayerController>(); } set { this["PlayerController"] = value; } }
        public StateCameraComponent CameraManager { get { return this[nameof(CameraManager)].As<StateCameraComponent>(); } set { this["CameraManager"] = value; } }
        public bool Validate(CharacterGunfire InCharacter) { return Invoke<bool>(nameof(Validate), InCharacter); }
        public void OnDeactivate(CharacterGunfire InCharacter) { Invoke(nameof(OnDeactivate), InCharacter); }
        public void OnActivate(CharacterGunfire InCharacter) { Invoke(nameof(OnActivate), InCharacter); }
        public float GetNearestInputKey(Vector WorldLocation) { return Invoke<float>(nameof(GetNearestInputKey), WorldLocation); }
        public Vector GetCurrentSplinePosition() { return Invoke<Vector>(nameof(GetCurrentSplinePosition)); }
        public Vector GetCurrentSplineForwardVector() { return Invoke<Vector>(nameof(GetCurrentSplineForwardVector)); }
        public CharacterGunfire GetCharacter() { return Invoke<CharacterGunfire>(nameof(GetCharacter)); }
        public void EndOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(EndOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void Deactivate() { Invoke(nameof(Deactivate)); }
        public void BeginOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(BeginOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public bool Activate(CharacterGunfire InCharacter) { return Invoke<bool>(nameof(Activate), InCharacter); }
    }
    public class StationarySpectatorCameraState : CameraState
    {
        public StationarySpectatorCameraState(nint addr) : base(addr) { }
        public float PitchMin { get { return this[nameof(PitchMin)].GetValue<float>(); } set { this[nameof(PitchMin)].SetValue<float>(value); } }
        public float PitchMax { get { return this[nameof(PitchMax)].GetValue<float>(); } set { this[nameof(PitchMax)].SetValue<float>(value); } }
        public bool LockRoll { get { return this[nameof(LockRoll)].Flag; } set { this[nameof(LockRoll)].Flag = value; } }
    }
    public class SwimmingCameraState : ThirdPersonCameraState
    {
        public SwimmingCameraState(nint addr) : base(addr) { }
        public float WaterThickness { get { return this[nameof(WaterThickness)].GetValue<float>(); } set { this[nameof(WaterThickness)].SetValue<float>(value); } }
        public float EmergeTime { get { return this[nameof(EmergeTime)].GetValue<float>(); } set { this[nameof(EmergeTime)].SetValue<float>(value); } }
        public float EmergeEaseExp { get { return this[nameof(EmergeEaseExp)].GetValue<float>(); } set { this[nameof(EmergeEaseExp)].SetValue<float>(value); } }
        public float EmergeMaximumPitch { get { return this[nameof(EmergeMaximumPitch)].GetValue<float>(); } set { this[nameof(EmergeMaximumPitch)].SetValue<float>(value); } }
        public float SubmergeTime { get { return this[nameof(SubmergeTime)].GetValue<float>(); } set { this[nameof(SubmergeTime)].SetValue<float>(value); } }
        public float SubmergeEaseExp { get { return this[nameof(SubmergeEaseExp)].GetValue<float>(); } set { this[nameof(SubmergeEaseExp)].SetValue<float>(value); } }
        public float SubmergeMaximumPitch { get { return this[nameof(SubmergeMaximumPitch)].GetValue<float>(); } set { this[nameof(SubmergeMaximumPitch)].SetValue<float>(value); } }
        public float RotationBlendTime { get { return this[nameof(RotationBlendTime)].GetValue<float>(); } set { this[nameof(RotationBlendTime)].SetValue<float>(value); } }
        public float ExitExtraBlendTime { get { return this[nameof(ExitExtraBlendTime)].GetValue<float>(); } set { this[nameof(ExitExtraBlendTime)].SetValue<float>(value); } }
        public StateMachineComponent CachedStateMachine { get { return this[nameof(CachedStateMachine)].As<StateMachineComponent>(); } set { this["CachedStateMachine"] = value; } }
        public Actor PhysicsBounds { get { return this[nameof(PhysicsBounds)].As<Actor>(); } set { this["PhysicsBounds"] = value; } }
    }
    public class AchievementController : Object
    {
        public AchievementController(nint addr) : base(addr) { }
    }
    public class ChallengeRank : Object
    {
        public ChallengeRank(nint addr) : base(addr) { }
        public Array<ChallengeObjectiveBase> Objectives { get { return new Array<ChallengeObjectiveBase>(this[nameof(Objectives)].Address); } }
        public Array<ChallengeReward> Rewards { get { return new Array<ChallengeReward>(this[nameof(Rewards)].Address); } }
        public int Points { get { return this[nameof(Points)].GetValue<int>(); } set { this[nameof(Points)].SetValue<int>(value); } }
    }
    public class Challenge : Object
    {
        public Challenge(nint addr) : base(addr) { }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
        public EChallengeScope Scope { get { return (EChallengeScope)this[nameof(Scope)].GetValue<int>(); } set { this[nameof(Scope)].SetValue<int>((int)value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public bool Locked { get { return this[nameof(Locked)].Flag; } set { this[nameof(Locked)].Flag = value; } }
        public bool VisibleByDefault { get { return this[nameof(VisibleByDefault)].Flag; } set { this[nameof(VisibleByDefault)].Flag = value; } }
        public Array<ChallengeRank> ChallengeRanks { get { return new Array<ChallengeRank>(this[nameof(ChallengeRanks)].Address); } }
        public Array<ChallengeReward> Rewards { get { return new Array<ChallengeReward>(this[nameof(Rewards)].Address); } }
        public int GetTotalRanks() { return Invoke<int>(nameof(GetTotalRanks)); }
        public ChallengeRank GetRank(int RankId) { return Invoke<ChallengeRank>(nameof(GetRank), RankId); }
        public int GetPoints(int MaxRank) { return Invoke<int>(nameof(GetPoints), MaxRank); }
    }
    public class ChallengeTagInterface : Interface
    {
        public ChallengeTagInterface(nint addr) : base(addr) { }
        public void GatherChallengeTags(Array<Object> Tags) { Invoke(nameof(GatherChallengeTags), Tags); }
    }
    public class ChallengeBlueprintFunctions : BlueprintFunctionLibrary
    {
        public ChallengeBlueprintFunctions(nint addr) : base(addr) { }
        public void UnlockChallenges(Object WorldContextObject, ChallengeEvent ObjectiveId) { Invoke(nameof(UnlockChallenges), WorldContextObject, ObjectiveId); }
        public void IncrementObjectivesFromObject(Object WorldContextObject, ChallengeEvent ObjectiveId, Object Object, Array<Object> AdditionalTags, int Amount) { Invoke(nameof(IncrementObjectivesFromObject), WorldContextObject, ObjectiveId, Object, AdditionalTags, Amount); }
        public void IncrementObjectivesFor(PlayerController Controller, ChallengeEvent ObjectiveId, Array<Object> Tags, int Amount) { Invoke(nameof(IncrementObjectivesFor), Controller, ObjectiveId, Tags, Amount); }
        public void IncrementObjectives(Object WorldContextObject, ChallengeEvent ObjectiveId, Array<Object> Tags, int Amount) { Invoke(nameof(IncrementObjectives), WorldContextObject, ObjectiveId, Tags, Amount); }
        public void IncrementObjective(Object WorldContextObject, ChallengeObjectiveSelection ObjectiveSelection, int Amount) { Invoke(nameof(IncrementObjective), WorldContextObject, ObjectiveSelection, Amount); }
        public ChallengeObjective GetChallengeObjective(Object WorldContextObject, ChallengeObjectiveSelection ObjectiveSelection) { return Invoke<ChallengeObjective>(nameof(GetChallengeObjective), WorldContextObject, ObjectiveSelection); }
        public Array<Challenge> GetAllChallenges(Object WorldContextObject) { return Invoke<Array<Challenge>>(nameof(GetAllChallenges), WorldContextObject); }
    }
    public class ChallengeComponent : ActorComponent
    {
        public ChallengeComponent(nint addr) : base(addr) { }
        public Object OnChallengeUnlocked { get { return this[nameof(OnChallengeUnlocked)]; } set { this[nameof(OnChallengeUnlocked)] = value; } }
        public Object OnChallengeRevealed { get { return this[nameof(OnChallengeRevealed)]; } set { this[nameof(OnChallengeRevealed)] = value; } }
        public Object OnChallengeUpdated { get { return this[nameof(OnChallengeUpdated)]; } set { this[nameof(OnChallengeUpdated)] = value; } }
        public Object OnChallengeComplete { get { return this[nameof(OnChallengeComplete)]; } set { this[nameof(OnChallengeComplete)] = value; } }
        public Object OnChallengeRankCompleted { get { return this[nameof(OnChallengeRankCompleted)]; } set { this[nameof(OnChallengeRankCompleted)] = value; } }
        public Object OnChallengesReset { get { return this[nameof(OnChallengesReset)]; } set { this[nameof(OnChallengesReset)] = value; } }
        public ChallengeManager ChallengeManager { get { return this[nameof(ChallengeManager)].As<ChallengeManager>(); } set { this["ChallengeManager"] = value; } }
        public AchievementController AchievementController { get { return this[nameof(AchievementController)].As<AchievementController>(); } set { this["AchievementController"] = value; } }
        public Object ChallengeInstances { get { return this[nameof(ChallengeInstances)]; } set { this[nameof(ChallengeInstances)] = value; } }
        public Object ObjectiveProgress { get { return this[nameof(ObjectiveProgress)]; } set { this[nameof(ObjectiveProgress)] = value; } }
        public Array<Guid> RecollectableAchievements { get { return new Array<Guid>(this[nameof(RecollectableAchievements)].Address); } }
        public Array<Guid> ActiveServerObjectives { get { return new Array<Guid>(this[nameof(ActiveServerObjectives)].Address); } }
        public void ServerResetAllChallenges() { Invoke(nameof(ServerResetAllChallenges)); }
        public void ServerGiveRewardsForChallengeRank(ChallengeRank ChallengeRank) { Invoke(nameof(ServerGiveRewardsForChallengeRank), ChallengeRank); }
        public void RequestUpdateActiveServerObjectives(Array<int> ObjectivesToAdd, Array<int> ObjectivesToRemove) { Invoke(nameof(RequestUpdateActiveServerObjectives), ObjectivesToAdd, ObjectivesToRemove); }
        public bool HasChallengeInstance(Challenge Challenge) { return Invoke<bool>(nameof(HasChallengeInstance), Challenge); }
        public Array<Challenge> GetChallengesByCategory(ChallengeCategory Category, bool bVisibleOnly) { return Invoke<Array<Challenge>>(nameof(GetChallengesByCategory), Category, bVisibleOnly); }
        public ChallengeInstance GetChallengeInstance(Challenge Challenge) { return Invoke<ChallengeInstance>(nameof(GetChallengeInstance), Challenge); }
        public float GetCategoryProgress(ChallengeCategory Category, PointSet ChallengeProgress, PointSet PointProgress, bool bVisibleOnly) { return Invoke<float>(nameof(GetCategoryProgress), Category, ChallengeProgress, PointProgress, bVisibleOnly); }
        public void EventChallengeUpdated(Challenge Challenge) { Invoke(nameof(EventChallengeUpdated), Challenge); }
        public void EventChallengeUnlocked(Challenge Challenge) { Invoke(nameof(EventChallengeUnlocked), Challenge); }
        public void EventChallengesReset() { Invoke(nameof(EventChallengesReset)); }
        public void EventChallengeRevealed(Challenge Challenge) { Invoke(nameof(EventChallengeRevealed), Challenge); }
        public void EventChallengeRankCompleted(Challenge Challenge) { Invoke(nameof(EventChallengeRankCompleted), Challenge); }
        public void EventChallengeComplete(Challenge Challenge) { Invoke(nameof(EventChallengeComplete), Challenge); }
        public void ClientUnlockChallenge(Guid ChallengeId) { Invoke(nameof(ClientUnlockChallenge), ChallengeId); }
        public void ClientReceiveReward(Object RewardClass) { Invoke(nameof(ClientReceiveReward), RewardClass); }
        public void ClientIncrementObjective(int ObjectiveId, int Amount) { Invoke(nameof(ClientIncrementObjective), ObjectiveId, Amount); }
    }
    public class ChallengeInstance : Object
    {
        public ChallengeInstance(nint addr) : base(addr) { }
        public Challenge Challenge { get { return this[nameof(Challenge)].As<Challenge>(); } set { this["Challenge"] = value; } }
        public ChallengeComponent Component { get { return this[nameof(Component)].As<ChallengeComponent>(); } set { this["Component"] = value; } }
        public int CurrentRank { get { return this[nameof(CurrentRank)].GetValue<int>(); } set { this[nameof(CurrentRank)].SetValue<int>(value); } }
        public bool IsComplete() { return Invoke<bool>(nameof(IsComplete)); }
        public int GetTotalRanks() { return Invoke<int>(nameof(GetTotalRanks)); }
        public float GetRankProgress() { return Invoke<float>(nameof(GetRankProgress)); }
        public Array<ChallengeRankInstance> GetRankInstances() { return Invoke<Array<ChallengeRankInstance>>(nameof(GetRankInstances)); }
        public float GetOverallProgress() { return Invoke<float>(nameof(GetOverallProgress)); }
        public int GetObjectiveValue(ChallengeObjectiveBase Objective) { return Invoke<int>(nameof(GetObjectiveValue), Objective); }
        public float GetObjectiveProgress(ChallengeObjectiveBase Objective) { return Invoke<float>(nameof(GetObjectiveProgress), Objective); }
        public int GetCurrentRank() { return Invoke<int>(nameof(GetCurrentRank)); }
        public Guid GetChallengeID() { return Invoke<Guid>(nameof(GetChallengeID)); }
        public ChallengeComponent GetChallengeComponent() { return Invoke<ChallengeComponent>(nameof(GetChallengeComponent)); }
        public Challenge GetChallenge() { return Invoke<Challenge>(nameof(GetChallenge)); }
        public ChallengeRankInstance CreateRankInstance(int RankId) { return Invoke<ChallengeRankInstance>(nameof(CreateRankInstance), RankId); }
    }
    public class ChallengeManager : GameInstanceSubsystem
    {
        public ChallengeManager(nint addr) : base(addr) { }
        public Array<ChallengeList> ChallengeLists { get { return new Array<ChallengeList>(this[nameof(ChallengeLists)].Address); } }
        public Array<ChallengeComponent> ChallengeComponents { get { return new Array<ChallengeComponent>(this[nameof(ChallengeComponents)].Address); } }
        public ChallengeComponent LocalComponent { get { return this[nameof(LocalComponent)].As<ChallengeComponent>(); } set { this["LocalComponent"] = value; } }
        public bool bChallengeListReadyToLoad { get { return this[nameof(bChallengeListReadyToLoad)].Flag; } set { this[nameof(bChallengeListReadyToLoad)].Flag = value; } }
        public bool bGameInstanceReadyToLoad { get { return this[nameof(bGameInstanceReadyToLoad)].Flag; } set { this[nameof(bGameInstanceReadyToLoad)].Flag = value; } }
    }
    public class ChallengeObjectiveLink : ChallengeObjectiveBase
    {
        public ChallengeObjectiveLink(nint addr) : base(addr) { }
        public ChallengeLinkId ChallengeLink { get { return this[nameof(ChallengeLink)].As<ChallengeLinkId>(); } set { this["ChallengeLink"] = value; } }
    }
    public class ChallengeRankInstance : Object
    {
        public ChallengeRankInstance(nint addr) : base(addr) { }
        public ChallengeInstance ChallengeInstance { get { return this[nameof(ChallengeInstance)].As<ChallengeInstance>(); } set { this["ChallengeInstance"] = value; } }
        public ChallengeRank Rank { get { return this[nameof(Rank)].As<ChallengeRank>(); } set { this["Rank"] = value; } }
        public int RankId { get { return this[nameof(RankId)].GetValue<int>(); } set { this[nameof(RankId)].SetValue<int>(value); } }
        public bool IsComplete() { return Invoke<bool>(nameof(IsComplete)); }
        public Array<ChallengeObjectiveBase> GetObjectives() { return Invoke<Array<ChallengeObjectiveBase>>(nameof(GetObjectives)); }
        public Array<ChallengeObjectiveInstance> GetObjectiveInstances() { return Invoke<Array<ChallengeObjectiveInstance>>(nameof(GetObjectiveInstances)); }
        public ChallengeObjectiveInstance GetObjectiveInstance(ChallengeObjectiveBase Objective) { return Invoke<ChallengeObjectiveInstance>(nameof(GetObjectiveInstance), Objective); }
    }
    public class ClimbingCameraState : ThirdPersonCameraState
    {
        public ClimbingCameraState(nint addr) : base(addr) { }
        public Vector2D ClimbingPitchMinOffset { get { return this[nameof(ClimbingPitchMinOffset)].As<Vector2D>(); } set { this["ClimbingPitchMinOffset"] = value; } }
        public Vector2D ClimbingPitchMaxOffset { get { return this[nameof(ClimbingPitchMaxOffset)].As<Vector2D>(); } set { this["ClimbingPitchMaxOffset"] = value; } }
        public float SurfacePivotOffset { get { return this[nameof(SurfacePivotOffset)].GetValue<float>(); } set { this[nameof(SurfacePivotOffset)].SetValue<float>(value); } }
        public float LeftRightExtraSmoothTime { get { return this[nameof(LeftRightExtraSmoothTime)].GetValue<float>(); } set { this[nameof(LeftRightExtraSmoothTime)].SetValue<float>(value); } }
        public float MountingTime { get { return this[nameof(MountingTime)].GetValue<float>(); } set { this[nameof(MountingTime)].SetValue<float>(value); } }
        public float SurfaceDirectionSmoothSpeed { get { return this[nameof(SurfaceDirectionSmoothSpeed)].GetValue<float>(); } set { this[nameof(SurfaceDirectionSmoothSpeed)].SetValue<float>(value); } }
        public Vector2D ClimbingYawOffset { get { return this[nameof(ClimbingYawOffset)].As<Vector2D>(); } set { this["ClimbingYawOffset"] = value; } }
        public float DistanceZoomMinAngle { get { return this[nameof(DistanceZoomMinAngle)].GetValue<float>(); } set { this[nameof(DistanceZoomMinAngle)].SetValue<float>(value); } }
        public float DistanceZoomMaxAngle { get { return this[nameof(DistanceZoomMaxAngle)].GetValue<float>(); } set { this[nameof(DistanceZoomMaxAngle)].SetValue<float>(value); } }
        public float TurnAwayLeftRightOffset { get { return this[nameof(TurnAwayLeftRightOffset)].GetValue<float>(); } set { this[nameof(TurnAwayLeftRightOffset)].SetValue<float>(value); } }
        public float TurnAwayBackwardsOffset { get { return this[nameof(TurnAwayBackwardsOffset)].GetValue<float>(); } set { this[nameof(TurnAwayBackwardsOffset)].SetValue<float>(value); } }
        public float BackwardsOffsetMinAngle { get { return this[nameof(BackwardsOffsetMinAngle)].GetValue<float>(); } set { this[nameof(BackwardsOffsetMinAngle)].SetValue<float>(value); } }
        public float BackwardsOffsetMaxAngle { get { return this[nameof(BackwardsOffsetMaxAngle)].GetValue<float>(); } set { this[nameof(BackwardsOffsetMaxAngle)].SetValue<float>(value); } }
        public float DistanceZoomScalar { get { return this[nameof(DistanceZoomScalar)].GetValue<float>(); } set { this[nameof(DistanceZoomScalar)].SetValue<float>(value); } }
        public float TurnAwayMinPitch { get { return this[nameof(TurnAwayMinPitch)].GetValue<float>(); } set { this[nameof(TurnAwayMinPitch)].SetValue<float>(value); } }
        public float TurnAwayMaxPitch { get { return this[nameof(TurnAwayMaxPitch)].GetValue<float>(); } set { this[nameof(TurnAwayMaxPitch)].SetValue<float>(value); } }
        public float TurnAwayMaxYaw { get { return this[nameof(TurnAwayMaxYaw)].GetValue<float>(); } set { this[nameof(TurnAwayMaxYaw)].SetValue<float>(value); } }
        public float TurnAwayMaxYawResetTime { get { return this[nameof(TurnAwayMaxYawResetTime)].GetValue<float>(); } set { this[nameof(TurnAwayMaxYawResetTime)].SetValue<float>(value); } }
        public float SideSwitchMinAngle { get { return this[nameof(SideSwitchMinAngle)].GetValue<float>(); } set { this[nameof(SideSwitchMinAngle)].SetValue<float>(value); } }
        public float SideSwitchMaxAngle { get { return this[nameof(SideSwitchMaxAngle)].GetValue<float>(); } set { this[nameof(SideSwitchMaxAngle)].SetValue<float>(value); } }
        public float TurnAwayLeftRightScale { get { return this[nameof(TurnAwayLeftRightScale)].GetValue<float>(); } set { this[nameof(TurnAwayLeftRightScale)].SetValue<float>(value); } }
        public float ClimbingReorientToSurfaceScale { get { return this[nameof(ClimbingReorientToSurfaceScale)].GetValue<float>(); } set { this[nameof(ClimbingReorientToSurfaceScale)].SetValue<float>(value); } }
        public float MountingReorientToSurfaceScale { get { return this[nameof(MountingReorientToSurfaceScale)].GetValue<float>(); } set { this[nameof(MountingReorientToSurfaceScale)].SetValue<float>(value); } }
        public bool bResetViewWhileTraversing { get { return this[nameof(bResetViewWhileTraversing)].Flag; } set { this[nameof(bResetViewWhileTraversing)].Flag = value; } }
        public float ResetViewDelay { get { return this[nameof(ResetViewDelay)].GetValue<float>(); } set { this[nameof(ResetViewDelay)].SetValue<float>(value); } }
        public float PitchResetTime { get { return this[nameof(PitchResetTime)].GetValue<float>(); } set { this[nameof(PitchResetTime)].SetValue<float>(value); } }
        public float YawResetTime { get { return this[nameof(YawResetTime)].GetValue<float>(); } set { this[nameof(YawResetTime)].SetValue<float>(value); } }
        public bool bResetViewWhileTurningAway { get { return this[nameof(bResetViewWhileTurningAway)].Flag; } set { this[nameof(bResetViewWhileTurningAway)].Flag = value; } }
        public float TurnAwayResetYaw { get { return this[nameof(TurnAwayResetYaw)].GetValue<float>(); } set { this[nameof(TurnAwayResetYaw)].SetValue<float>(value); } }
        public float TurnAwayResetViewDelay { get { return this[nameof(TurnAwayResetViewDelay)].GetValue<float>(); } set { this[nameof(TurnAwayResetViewDelay)].SetValue<float>(value); } }
        public float TurnAwayPitchResetTime { get { return this[nameof(TurnAwayPitchResetTime)].GetValue<float>(); } set { this[nameof(TurnAwayPitchResetTime)].SetValue<float>(value); } }
        public float TurnAwayYawResetTime { get { return this[nameof(TurnAwayYawResetTime)].GetValue<float>(); } set { this[nameof(TurnAwayYawResetTime)].SetValue<float>(value); } }
        public ClimbingComponent CachedClimbingComponent { get { return this[nameof(CachedClimbingComponent)].As<ClimbingComponent>(); } set { this["CachedClimbingComponent"] = value; } }
    }
    public class ClimbingCameraVolume : SplineCameraVolume
    {
        public ClimbingCameraVolume(nint addr) : base(addr) { }
        public bool bAutoDeactivateOnDismount { get { return this[nameof(bAutoDeactivateOnDismount)].Flag; } set { this[nameof(bAutoDeactivateOnDismount)].Flag = value; } }
        public bool bCenterCameraOnDismount { get { return this[nameof(bCenterCameraOnDismount)].Flag; } set { this[nameof(bCenterCameraOnDismount)].Flag = value; } }
        public Object CenterCameraRequiredTag { get { return this[nameof(CenterCameraRequiredTag)]; } set { this[nameof(CenterCameraRequiredTag)] = value; } }
        public float CenterPitchMin { get { return this[nameof(CenterPitchMin)].GetValue<float>(); } set { this[nameof(CenterPitchMin)].SetValue<float>(value); } }
        public float CenterPitchMax { get { return this[nameof(CenterPitchMax)].GetValue<float>(); } set { this[nameof(CenterPitchMax)].SetValue<float>(value); } }
        public float CenterPitchYawArc { get { return this[nameof(CenterPitchYawArc)].GetValue<float>(); } set { this[nameof(CenterPitchYawArc)].SetValue<float>(value); } }
        public void OnClimbSurfaceChanged(ClimbingComponent ClimbingComponent, ClimbableSurfaceResult NewSurface, ClimbableSurfaceResult PreviousSurface) { Invoke(nameof(OnClimbSurfaceChanged), ClimbingComponent, NewSurface, PreviousSurface); }
    }
    public class ClimbableSurfaceFilter : Object
    {
        public ClimbableSurfaceFilter(nint addr) : base(addr) { }
        public bool bValidatePitch { get { return this[nameof(bValidatePitch)].Flag; } set { this[nameof(bValidatePitch)].Flag = value; } }
        public float SurfacePitchAngle { get { return this[nameof(SurfacePitchAngle)].GetValue<float>(); } set { this[nameof(SurfacePitchAngle)].SetValue<float>(value); } }
        public float SurfacePitchArc { get { return this[nameof(SurfacePitchArc)].GetValue<float>(); } set { this[nameof(SurfacePitchArc)].SetValue<float>(value); } }
        public bool bValidateYaw { get { return this[nameof(bValidateYaw)].Flag; } set { this[nameof(bValidateYaw)].Flag = value; } }
        public float SurfaceYawAngle { get { return this[nameof(SurfaceYawAngle)].GetValue<float>(); } set { this[nameof(SurfaceYawAngle)].SetValue<float>(value); } }
        public bool bMirrorYawValidate { get { return this[nameof(bMirrorYawValidate)].Flag; } set { this[nameof(bMirrorYawValidate)].Flag = value; } }
        public float SurfaceYawArc { get { return this[nameof(SurfaceYawArc)].GetValue<float>(); } set { this[nameof(SurfaceYawArc)].SetValue<float>(value); } }
        public Array<Object> RequiredSurfaceTags { get { return new Array<Object>(this[nameof(RequiredSurfaceTags)].Address); } }
        public Array<Object> InvalidSurfaceTags { get { return new Array<Object>(this[nameof(InvalidSurfaceTags)].Address); } }
        public ELogicalOperator Gate { get { return (ELogicalOperator)this[nameof(Gate)].GetValue<int>(); } set { this[nameof(Gate)].SetValue<int>((int)value); } }
        public Array<ClimbableSurfaceAppendageFilter> AppendageFilters { get { return new Array<ClimbableSurfaceAppendageFilter>(this[nameof(AppendageFilters)].Address); } }
        public Object MountingCamera { get { return this[nameof(MountingCamera)]; } set { this[nameof(MountingCamera)] = value; } }
        public float MountingCameraBlendTime { get { return this[nameof(MountingCameraBlendTime)].GetValue<float>(); } set { this[nameof(MountingCameraBlendTime)].SetValue<float>(value); } }
        public Object ClimbingCamera { get { return this[nameof(ClimbingCamera)]; } set { this[nameof(ClimbingCamera)] = value; } }
        public float ClimbingCameraBlendTime { get { return this[nameof(ClimbingCameraBlendTime)].GetValue<float>(); } set { this[nameof(ClimbingCameraBlendTime)].SetValue<float>(value); } }
        public Object DismountCamera { get { return this[nameof(DismountCamera)]; } set { this[nameof(DismountCamera)] = value; } }
        public float DismountCameraBlendTime { get { return this[nameof(DismountCameraBlendTime)].GetValue<float>(); } set { this[nameof(DismountCameraBlendTime)].SetValue<float>(value); } }
    }
    public class ClimbAnimData : RootMotionAnimData
    {
        public ClimbAnimData(nint addr) : base(addr) { }
        public Object SurfaceFilter { get { return this[nameof(SurfaceFilter)]; } set { this[nameof(SurfaceFilter)] = value; } }
        public EClimbAnimationType AnimationType { get { return (EClimbAnimationType)this[nameof(AnimationType)].GetValue<int>(); } set { this[nameof(AnimationType)].SetValue<int>((int)value); } }
        public Object CameraOverride { get { return this[nameof(CameraOverride)]; } set { this[nameof(CameraOverride)] = value; } }
        public EClimbTurnAwayDirection TurnAwayDirection { get { return (EClimbTurnAwayDirection)this[nameof(TurnAwayDirection)].GetValue<int>(); } set { this[nameof(TurnAwayDirection)].SetValue<int>((int)value); } }
        public float CameraBlendTimeOverride { get { return this[nameof(CameraBlendTimeOverride)].GetValue<float>(); } set { this[nameof(CameraBlendTimeOverride)].SetValue<float>(value); } }
        public EClimbMovementType MovementType { get { return (EClimbMovementType)this[nameof(MovementType)].GetValue<int>(); } set { this[nameof(MovementType)].SetValue<int>((int)value); } }
        public EClimbInputMethod InputMethod { get { return (EClimbInputMethod)this[nameof(InputMethod)].GetValue<int>(); } set { this[nameof(InputMethod)].SetValue<int>((int)value); } }
        public EClimbMoveInputFilter MoveInputFilter { get { return (EClimbMoveInputFilter)this[nameof(MoveInputFilter)].GetValue<int>(); } set { this[nameof(MoveInputFilter)].SetValue<int>((int)value); } }
        public EClimbFacing Facing { get { return (EClimbFacing)this[nameof(Facing)].GetValue<int>(); } set { this[nameof(Facing)].SetValue<int>((int)value); } }
        public EClimbTransitionType TransitionType { get { return (EClimbTransitionType)this[nameof(TransitionType)].GetValue<int>(); } set { this[nameof(TransitionType)].SetValue<int>((int)value); } }
        public EClimbValidationMode ValidationMode { get { return (EClimbValidationMode)this[nameof(ValidationMode)].GetValue<int>(); } set { this[nameof(ValidationMode)].SetValue<int>((int)value); } }
        public float BaseWeight { get { return this[nameof(BaseWeight)].GetValue<float>(); } set { this[nameof(BaseWeight)].SetValue<float>(value); } }
        public Object ClimbGroup { get { return this[nameof(ClimbGroup)]; } set { this[nameof(ClimbGroup)] = value; } }
        public bool bUseManualSupportedGroups { get { return this[nameof(bUseManualSupportedGroups)].Flag; } set { this[nameof(bUseManualSupportedGroups)].Flag = value; } }
        public Array<Object> SupportedClimbGroups { get { return new Array<Object>(this[nameof(SupportedClimbGroups)].Address); } }
        public Vector InputPrerequisite { get { return this[nameof(InputPrerequisite)].As<Vector>(); } set { this["InputPrerequisite"] = value; } }
        public bool bHasInputPrerequisite { get { return this[nameof(bHasInputPrerequisite)].Flag; } set { this[nameof(bHasInputPrerequisite)].Flag = value; } }
        public bool bManualInputDirection { get { return this[nameof(bManualInputDirection)].Flag; } set { this[nameof(bManualInputDirection)].Flag = value; } }
        public Vector InputDirection { get { return this[nameof(InputDirection)].As<Vector>(); } set { this["InputDirection"] = value; } }
        public bool bOverridePositionMaxTolerances { get { return this[nameof(bOverridePositionMaxTolerances)].Flag; } set { this[nameof(bOverridePositionMaxTolerances)].Flag = value; } }
        public Vector PositionMaxTolerances { get { return this[nameof(PositionMaxTolerances)].As<Vector>(); } set { this["PositionMaxTolerances"] = value; } }
        public bool bOverridePositionMinTolerances { get { return this[nameof(bOverridePositionMinTolerances)].Flag; } set { this[nameof(bOverridePositionMinTolerances)].Flag = value; } }
        public Vector PositionMinTolerances { get { return this[nameof(PositionMinTolerances)].As<Vector>(); } set { this["PositionMinTolerances"] = value; } }
        public bool bOverrideDirectionalTolerance { get { return this[nameof(bOverrideDirectionalTolerance)].Flag; } set { this[nameof(bOverrideDirectionalTolerance)].Flag = value; } }
        public float DirectionalTolerance { get { return this[nameof(DirectionalTolerance)].GetValue<float>(); } set { this[nameof(DirectionalTolerance)].SetValue<float>(value); } }
        public bool bOverrideMoveArc { get { return this[nameof(bOverrideMoveArc)].Flag; } set { this[nameof(bOverrideMoveArc)].Flag = value; } }
        public float MoveArc { get { return this[nameof(MoveArc)].GetValue<float>(); } set { this[nameof(MoveArc)].SetValue<float>(value); } }
        public bool bOverrideMinimumTranslationMovement { get { return this[nameof(bOverrideMinimumTranslationMovement)].Flag; } set { this[nameof(bOverrideMinimumTranslationMovement)].Flag = value; } }
        public float MinimumTranslationMovement { get { return this[nameof(MinimumTranslationMovement)].GetValue<float>(); } set { this[nameof(MinimumTranslationMovement)].SetValue<float>(value); } }
        public bool bOverrideMinimumDirectionalMovement { get { return this[nameof(bOverrideMinimumDirectionalMovement)].Flag; } set { this[nameof(bOverrideMinimumDirectionalMovement)].Flag = value; } }
        public float MinimumDirectionalMovement { get { return this[nameof(MinimumDirectionalMovement)].GetValue<float>(); } set { this[nameof(MinimumDirectionalMovement)].SetValue<float>(value); } }
        public Object LeadingAppendage { get { return this[nameof(LeadingAppendage)]; } set { this[nameof(LeadingAppendage)] = value; } }
        public bool bOverrideLeadingDirection { get { return this[nameof(bOverrideLeadingDirection)].Flag; } set { this[nameof(bOverrideLeadingDirection)].Flag = value; } }
        public EClimbDirectionBias LeadingDirection { get { return (EClimbDirectionBias)this[nameof(LeadingDirection)].GetValue<int>(); } set { this[nameof(LeadingDirection)].SetValue<int>((int)value); } }
        public bool bModifySurfaceFacing { get { return this[nameof(bModifySurfaceFacing)].Flag; } set { this[nameof(bModifySurfaceFacing)].Flag = value; } }
        public Quat SurfaceFacingRelativeRotation { get { return this[nameof(SurfaceFacingRelativeRotation)].As<Quat>(); } set { this["SurfaceFacingRelativeRotation"] = value; } }
        public bool bManualRelativeDesiredRotationDirection { get { return this[nameof(bManualRelativeDesiredRotationDirection)].Flag; } set { this[nameof(bManualRelativeDesiredRotationDirection)].Flag = value; } }
        public Quat RelativeDesiredRotationDirection { get { return this[nameof(RelativeDesiredRotationDirection)].As<Quat>(); } set { this["RelativeDesiredRotationDirection"] = value; } }
        public bool bOverrideMinimumBlendTime { get { return this[nameof(bOverrideMinimumBlendTime)].Flag; } set { this[nameof(bOverrideMinimumBlendTime)].Flag = value; } }
        public float MinimumBlendTime { get { return this[nameof(MinimumBlendTime)].GetValue<float>(); } set { this[nameof(MinimumBlendTime)].SetValue<float>(value); } }
        public bool bOverrideMaximumBlendTime { get { return this[nameof(bOverrideMaximumBlendTime)].Flag; } set { this[nameof(bOverrideMaximumBlendTime)].Flag = value; } }
        public float MaximumBlendTime { get { return this[nameof(MaximumBlendTime)].GetValue<float>(); } set { this[nameof(MaximumBlendTime)].SetValue<float>(value); } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public bool bMaintainEffectorLocation { get { return this[nameof(bMaintainEffectorLocation)].Flag; } set { this[nameof(bMaintainEffectorLocation)].Flag = value; } }
        public bool bBlockTraversalDuringRootMotion { get { return this[nameof(bBlockTraversalDuringRootMotion)].Flag; } set { this[nameof(bBlockTraversalDuringRootMotion)].Flag = value; } }
        public float LeadTime { get { return this[nameof(LeadTime)].GetValue<float>(); } set { this[nameof(LeadTime)].SetValue<float>(value); } }
        public Array<AppendageData> Appendages { get { return new Array<AppendageData>(this[nameof(Appendages)].Address); } }
    }
    public class ClimbingComponent : ActorComponent
    {
        public ClimbingComponent(nint addr) : base(addr) { }
        public Object CurrentClimbGroup { get { return this[nameof(CurrentClimbGroup)]; } set { this[nameof(CurrentClimbGroup)] = value; } }
        public float GrabHeight { get { return this[nameof(GrabHeight)].GetValue<float>(); } set { this[nameof(GrabHeight)].SetValue<float>(value); } }
        public float GrabWidth { get { return this[nameof(GrabWidth)].GetValue<float>(); } set { this[nameof(GrabWidth)].SetValue<float>(value); } }
        public float GrabSplineOffset { get { return this[nameof(GrabSplineOffset)].GetValue<float>(); } set { this[nameof(GrabSplineOffset)].SetValue<float>(value); } }
        public Vector2D CharacterDimensions { get { return this[nameof(CharacterDimensions)].As<Vector2D>(); } set { this["CharacterDimensions"] = value; } }
        public float SurfaceNormalIterationDistance { get { return this[nameof(SurfaceNormalIterationDistance)].GetValue<float>(); } set { this[nameof(SurfaceNormalIterationDistance)].SetValue<float>(value); } }
        public Array<ClimbGroupTransition> ClimbGroupTransitions { get { return new Array<ClimbGroupTransition>(this[nameof(ClimbGroupTransitions)].Address); } }
        public float MinimumTranslationMovement { get { return this[nameof(MinimumTranslationMovement)].GetValue<float>(); } set { this[nameof(MinimumTranslationMovement)].SetValue<float>(value); } }
        public float MinimumDirectionalMovement { get { return this[nameof(MinimumDirectionalMovement)].GetValue<float>(); } set { this[nameof(MinimumDirectionalMovement)].SetValue<float>(value); } }
        public float TraceRadius { get { return this[nameof(TraceRadius)].GetValue<float>(); } set { this[nameof(TraceRadius)].SetValue<float>(value); } }
        public float TraceHalfHeight { get { return this[nameof(TraceHalfHeight)].GetValue<float>(); } set { this[nameof(TraceHalfHeight)].SetValue<float>(value); } }
        public Vector RelativeTraceOffset { get { return this[nameof(RelativeTraceOffset)].As<Vector>(); } set { this["RelativeTraceOffset"] = value; } }
        public float ContiguousSurfaceDistanceThreshold { get { return this[nameof(ContiguousSurfaceDistanceThreshold)].GetValue<float>(); } set { this[nameof(ContiguousSurfaceDistanceThreshold)].SetValue<float>(value); } }
        public float ContiguousSurfaceIterationDistance { get { return this[nameof(ContiguousSurfaceIterationDistance)].GetValue<float>(); } set { this[nameof(ContiguousSurfaceIterationDistance)].SetValue<float>(value); } }
        public float OccupancyCapsleRadius { get { return this[nameof(OccupancyCapsleRadius)].GetValue<float>(); } set { this[nameof(OccupancyCapsleRadius)].SetValue<float>(value); } }
        public float OccupancyCapsleHalfHeight { get { return this[nameof(OccupancyCapsleHalfHeight)].GetValue<float>(); } set { this[nameof(OccupancyCapsleHalfHeight)].SetValue<float>(value); } }
        public float OccupancyPathRadius { get { return this[nameof(OccupancyPathRadius)].GetValue<float>(); } set { this[nameof(OccupancyPathRadius)].SetValue<float>(value); } }
        public float SplineWeightDistanceScalar { get { return this[nameof(SplineWeightDistanceScalar)].GetValue<float>(); } set { this[nameof(SplineWeightDistanceScalar)].SetValue<float>(value); } }
        public float MinimumSplineWeight { get { return this[nameof(MinimumSplineWeight)].GetValue<float>(); } set { this[nameof(MinimumSplineWeight)].SetValue<float>(value); } }
        public float RandomWeight { get { return this[nameof(RandomWeight)].GetValue<float>(); } set { this[nameof(RandomWeight)].SetValue<float>(value); } }
        public float MaxAnimationUsagePenalty { get { return this[nameof(MaxAnimationUsagePenalty)].GetValue<float>(); } set { this[nameof(MaxAnimationUsagePenalty)].SetValue<float>(value); } }
        public Vector2D AnimationWeightDecreaseOnUse { get { return this[nameof(AnimationWeightDecreaseOnUse)].As<Vector2D>(); } set { this["AnimationWeightDecreaseOnUse"] = value; } }
        public float AnimationWeightMaxIncreaseWhenUnused { get { return this[nameof(AnimationWeightMaxIncreaseWhenUnused)].GetValue<float>(); } set { this[nameof(AnimationWeightMaxIncreaseWhenUnused)].SetValue<float>(value); } }
        public float TranslationWeightScale { get { return this[nameof(TranslationWeightScale)].GetValue<float>(); } set { this[nameof(TranslationWeightScale)].SetValue<float>(value); } }
        public float RotationWeightScale { get { return this[nameof(RotationWeightScale)].GetValue<float>(); } set { this[nameof(RotationWeightScale)].SetValue<float>(value); } }
        public float LeadDirectionWeight { get { return this[nameof(LeadDirectionWeight)].GetValue<float>(); } set { this[nameof(LeadDirectionWeight)].SetValue<float>(value); } }
        public float VerticalClimbCosineThresh { get { return this[nameof(VerticalClimbCosineThresh)].GetValue<float>(); } set { this[nameof(VerticalClimbCosineThresh)].SetValue<float>(value); } }
        public float NeighboringPointGrabWidthScalar { get { return this[nameof(NeighboringPointGrabWidthScalar)].GetValue<float>(); } set { this[nameof(NeighboringPointGrabWidthScalar)].SetValue<float>(value); } }
        public Vector2D LimbMatchingMinMaxRanges { get { return this[nameof(LimbMatchingMinMaxRanges)].As<Vector2D>(); } set { this["LimbMatchingMinMaxRanges"] = value; } }
        public float LimbMatchingMandatoryAppendageBonus { get { return this[nameof(LimbMatchingMandatoryAppendageBonus)].GetValue<float>(); } set { this[nameof(LimbMatchingMandatoryAppendageBonus)].SetValue<float>(value); } }
        public float LimbMatchingOptionalAppendageBonus { get { return this[nameof(LimbMatchingOptionalAppendageBonus)].GetValue<float>(); } set { this[nameof(LimbMatchingOptionalAppendageBonus)].SetValue<float>(value); } }
        public float AnimationTypeBonusWeight { get { return this[nameof(AnimationTypeBonusWeight)].GetValue<float>(); } set { this[nameof(AnimationTypeBonusWeight)].SetValue<float>(value); } }
        public float InputPrerequisiteCosineThresh { get { return this[nameof(InputPrerequisiteCosineThresh)].GetValue<float>(); } set { this[nameof(InputPrerequisiteCosineThresh)].SetValue<float>(value); } }
        public float DefaultMinimumBlendTime { get { return this[nameof(DefaultMinimumBlendTime)].GetValue<float>(); } set { this[nameof(DefaultMinimumBlendTime)].SetValue<float>(value); } }
        public Vector2D BlendTimeScaleMinMaxRanges { get { return this[nameof(BlendTimeScaleMinMaxRanges)].As<Vector2D>(); } set { this["BlendTimeScaleMinMaxRanges"] = value; } }
        public Object InteractInputOverride { get { return this[nameof(InteractInputOverride)]; } set { this[nameof(InteractInputOverride)] = value; } }
        public float InteractInputDuration { get { return this[nameof(InteractInputDuration)].GetValue<float>(); } set { this[nameof(InteractInputDuration)].SetValue<float>(value); } }
        public Object InteractionIconName { get { return this[nameof(InteractionIconName)]; } set { this[nameof(InteractionIconName)] = value; } }
        public Texture2D InteractionIcon { get { return this[nameof(InteractionIcon)].As<Texture2D>(); } set { this["InteractionIcon"] = value; } }
        public Object InteractionLabel { get { return this[nameof(InteractionLabel)]; } set { this[nameof(InteractionLabel)] = value; } }
        public Object DefaultMountingCamera { get { return this[nameof(DefaultMountingCamera)]; } set { this[nameof(DefaultMountingCamera)] = value; } }
        public float MountingCameraBlendTime { get { return this[nameof(MountingCameraBlendTime)].GetValue<float>(); } set { this[nameof(MountingCameraBlendTime)].SetValue<float>(value); } }
        public Object DefaultClimbingCamera { get { return this[nameof(DefaultClimbingCamera)]; } set { this[nameof(DefaultClimbingCamera)] = value; } }
        public float ClimbingCameraBlendTime { get { return this[nameof(ClimbingCameraBlendTime)].GetValue<float>(); } set { this[nameof(ClimbingCameraBlendTime)].SetValue<float>(value); } }
        public Object DefaultDismountCamera { get { return this[nameof(DefaultDismountCamera)]; } set { this[nameof(DefaultDismountCamera)] = value; } }
        public float DismountCameraBlendTime { get { return this[nameof(DismountCameraBlendTime)].GetValue<float>(); } set { this[nameof(DismountCameraBlendTime)].SetValue<float>(value); } }
        public Object OnSurfaceChanged { get { return this[nameof(OnSurfaceChanged)]; } set { this[nameof(OnSurfaceChanged)] = value; } }
        public ClimbableSurfaceResult PendingSurface { get { return this[nameof(PendingSurface)].As<ClimbableSurfaceResult>(); } set { this["PendingSurface"] = value; } }
        public ReplicatedLocation TargetLocation { get { return this[nameof(TargetLocation)].As<ReplicatedLocation>(); } set { this["TargetLocation"] = value; } }
        public ClimbableSurfaceResult CurrentSurface { get { return this[nameof(CurrentSurface)].As<ClimbableSurfaceResult>(); } set { this["CurrentSurface"] = value; } }
        public ClimbableSurfaceResult PreviousSurface { get { return this[nameof(PreviousSurface)].As<ClimbableSurfaceResult>(); } set { this["PreviousSurface"] = value; } }
        public Array<ClimbableSurfaceQuery> StateQueries { get { return new Array<ClimbableSurfaceQuery>(this[nameof(StateQueries)].Address); } }
        public Array<ClimbableTransitionQuery> TransitionQueries { get { return new Array<ClimbableTransitionQuery>(this[nameof(TransitionQueries)].Address); } }
        public bool bEnableAimOffset { get { return this[nameof(bEnableAimOffset)].Flag; } set { this[nameof(bEnableAimOffset)].Flag = value; } }
        public float AimOffsetBlendInSpeed { get { return this[nameof(AimOffsetBlendInSpeed)].GetValue<float>(); } set { this[nameof(AimOffsetBlendInSpeed)].SetValue<float>(value); } }
        public float AimOffsetBlendOutSpeed { get { return this[nameof(AimOffsetBlendOutSpeed)].GetValue<float>(); } set { this[nameof(AimOffsetBlendOutSpeed)].SetValue<float>(value); } }
        public float MinAppendageDistanceForRecalculate { get { return this[nameof(MinAppendageDistanceForRecalculate)].GetValue<float>(); } set { this[nameof(MinAppendageDistanceForRecalculate)].SetValue<float>(value); } }
        public Array<ClimbAppendage> Appendages { get { return new Array<ClimbAppendage>(this[nameof(Appendages)].Address); } }
        public void ServerSetTargetLocation(ReplicatedLocation NewLocation) { Invoke(nameof(ServerSetTargetLocation), NewLocation); }
        public void RemoveClimbingListener(Object Event) { Invoke(nameof(RemoveClimbingListener), Event); }
        public void OnInteractInputOverride(Object ButtonName, ButtonEvent Event) { Invoke(nameof(OnInteractInputOverride), ButtonName, Event); }
        public bool IsSidePlanted(EClimbDirectionBias Side) { return Invoke<bool>(nameof(IsSidePlanted), Side); }
        public bool IsReorienting() { return Invoke<bool>(nameof(IsReorienting)); }
        public bool IsIdle() { return Invoke<bool>(nameof(IsIdle)); }
        public bool IsDismounting() { return Invoke<bool>(nameof(IsDismounting)); }
        public bool IsClimbing() { return Invoke<bool>(nameof(IsClimbing)); }
        public bool IsAnySidePlanted() { return Invoke<bool>(nameof(IsAnySidePlanted)); }
        public ClimbableSurfaceResult GetPreviousSurface() { return Invoke<ClimbableSurfaceResult>(nameof(GetPreviousSurface)); }
        public ClimbableSurfaceResult GetCurrentSurface() { return Invoke<ClimbableSurfaceResult>(nameof(GetCurrentSurface)); }
        public bool GetCurrentInput(float OutInputMagnitude, Vector OutWorldInputDirection) { return Invoke<bool>(nameof(GetCurrentInput), OutInputMagnitude, OutWorldInputDirection); }
        public Quat GetCurrentAttachOrientation(bool bEndingOrientationIfTraversing, bool bUseShortedPath) { return Invoke<Quat>(nameof(GetCurrentAttachOrientation), bEndingOrientationIfTraversing, bUseShortedPath); }
        public void GetAppendage(Object CurveName, IkEffector Result) { Invoke(nameof(GetAppendage), CurveName, Result); }
        public bool GetAimOffsetInputs(float Alpha, Vector2D SurfaceDirection) { return Invoke<bool>(nameof(GetAimOffsetInputs), Alpha, SurfaceDirection); }
        public Transform GetActorAttachTransform(ClimbableSurfaceResult ClimbableSurface, bool bApplySurfaceRotation) { return Invoke<Transform>(nameof(GetActorAttachTransform), ClimbableSurface, bApplySurfaceRotation); }
        public void AddClimbingListener(Object Event) { Invoke(nameof(AddClimbingListener), Event); }
    }
    public class ClimbingTransitionSet : Object
    {
        public ClimbingTransitionSet(nint addr) : base(addr) { }
        public Array<ClimbTransitionRule> Transitions { get { return new Array<ClimbTransitionRule>(this[nameof(Transitions)].Address); } }
    }
    public class ClimbingUtil : Object
    {
        public ClimbingUtil(nint addr) : base(addr) { }
        public EClimbDirectionBias GetOppositeSide(EClimbDirectionBias Side) { return Invoke<EClimbDirectionBias>(nameof(GetOppositeSide), Side); }
    }
    public class CanClimbCondition : Condition
    {
        public CanClimbCondition(nint addr) : base(addr) { }
        public ActorStateID ClimbingState { get { return this[nameof(ClimbingState)].As<ActorStateID>(); } set { this["ClimbingState"] = value; } }
        public Object TransitionSet { get { return this[nameof(TransitionSet)]; } set { this[nameof(TransitionSet)] = value; } }
    }
    public class ClimbingStateBase : ActorState
    {
        public ClimbingStateBase(nint addr) : base(addr) { }
        public Object AnimationID { get { return this[nameof(AnimationID)]; } set { this[nameof(AnimationID)] = value; } }
        public StatValue AnimPlayRate { get { return this[nameof(AnimPlayRate)].As<StatValue>(); } set { this["AnimPlayRate"] = value; } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public float ClimbArc { get { return this[nameof(ClimbArc)].GetValue<float>(); } set { this[nameof(ClimbArc)].SetValue<float>(value); } }
        public float MoveArc { get { return this[nameof(MoveArc)].GetValue<float>(); } set { this[nameof(MoveArc)].SetValue<float>(value); } }
        public float PositionTolerance { get { return this[nameof(PositionTolerance)].GetValue<float>(); } set { this[nameof(PositionTolerance)].SetValue<float>(value); } }
        public Vector PositionMaxTolerances { get { return this[nameof(PositionMaxTolerances)].As<Vector>(); } set { this["PositionMaxTolerances"] = value; } }
        public Vector PositionMinTolerances { get { return this[nameof(PositionMinTolerances)].As<Vector>(); } set { this["PositionMinTolerances"] = value; } }
        public float DirectionalTolerance { get { return this[nameof(DirectionalTolerance)].GetValue<float>(); } set { this[nameof(DirectionalTolerance)].SetValue<float>(value); } }
    }
    public class ClimbingState : ClimbingStateBase
    {
        public ClimbingState(nint addr) : base(addr) { }
        public EClimbStateType Type { get { return (EClimbStateType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class DismountState : ClimbingStateBase
    {
        public DismountState(nint addr) : base(addr) { }
        public bool bNeedsInput { get { return this[nameof(bNeedsInput)].Flag; } set { this[nameof(bNeedsInput)].Flag = value; } }
        public bool bValidateEndingLocation { get { return this[nameof(bValidateEndingLocation)].Flag; } set { this[nameof(bValidateEndingLocation)].Flag = value; } }
        public bool bApplyGravity { get { return this[nameof(bApplyGravity)].Flag; } set { this[nameof(bApplyGravity)].Flag = value; } }
        public CharacterFacing FacingUnderGravity { get { return (CharacterFacing)this[nameof(FacingUnderGravity)].GetValue<int>(); } set { this[nameof(FacingUnderGravity)].SetValue<int>((int)value); } }
        public Object GravityWindow { get { return this[nameof(GravityWindow)]; } set { this[nameof(GravityWindow)] = value; } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public float GravityDeceleration { get { return this[nameof(GravityDeceleration)].GetValue<float>(); } set { this[nameof(GravityDeceleration)].SetValue<float>(value); } }
    }
    public class SurfaceTransitionState : ClimbingStateBase
    {
        public SurfaceTransitionState(nint addr) : base(addr) { }
    }
    public class ClimbableSplineComponent : SplineComponent
    {
        public ClimbableSplineComponent(nint addr) : base(addr) { }
        public Object OnGrabSurface { get { return this[nameof(OnGrabSurface)]; } set { this[nameof(OnGrabSurface)] = value; } }
        public Object OnReleaseSurface { get { return this[nameof(OnReleaseSurface)]; } set { this[nameof(OnReleaseSurface)] = value; } }
        public Object OnClimb { get { return this[nameof(OnClimb)]; } set { this[nameof(OnClimb)] = value; } }
        public Object OnLeave { get { return this[nameof(OnLeave)]; } set { this[nameof(OnLeave)] = value; } }
        public Object OnDismount { get { return this[nameof(OnDismount)]; } set { this[nameof(OnDismount)] = value; } }
        public bool bExclusiveSurface { get { return this[nameof(bExclusiveSurface)].Flag; } set { this[nameof(bExclusiveSurface)].Flag = value; } }
        public Array<Object> SurfaceTags { get { return new Array<Object>(this[nameof(SurfaceTags)].Address); } }
        public bool bDisabled { get { return this[nameof(bDisabled)].Flag; } set { this[nameof(bDisabled)].Flag = value; } }
        public Array<CharacterGunfire> AttachedCharacters { get { return new Array<CharacterGunfire>(this[nameof(AttachedCharacters)].Address); } }
        public void SetSurfaceTags(Array<Object> NewSurfaceTags) { Invoke(nameof(SetSurfaceTags), NewSurfaceTags); }
        public void SetDisabled(bool bIsDisabled) { Invoke(nameof(SetDisabled), bIsDisabled); }
        public bool IsMoveableSurface() { return Invoke<bool>(nameof(IsMoveableSurface)); }
        public bool IsExclusiveSurface() { return Invoke<bool>(nameof(IsExclusiveSurface)); }
        public bool IsDisabled() { return Invoke<bool>(nameof(IsDisabled)); }
        public void DetachSplinePoint(int SplinePoint) { Invoke(nameof(DetachSplinePoint), SplinePoint); }
        public void DetachAllSplinePoints() { Invoke(nameof(DetachAllSplinePoints)); }
        public bool CheckSurfaceTags(Array<Object> Tags, bool bAllOrNothing) { return Invoke<bool>(nameof(CheckSurfaceTags), Tags, bAllOrNothing); }
        public bool CanCharacterClimb(CharacterGunfire Character) { return Invoke<bool>(nameof(CanCharacterClimb), Character); }
        public void AttachPointToComponent(int SplinePoint, SceneComponent AttachComponent, Transform RelativeTransform, Object AttachSocket, bool bMoveImmediately, bool bUpdateSpline) { Invoke(nameof(AttachPointToComponent), SplinePoint, AttachComponent, RelativeTransform, AttachSocket, bMoveImmediately, bUpdateSpline); }
    }
    public class ClimbingSurfaceModifier : Actor
    {
        public ClimbingSurfaceModifier(nint addr) : base(addr) { }
        public EClimbingSurfaceModifierType Modifier { get { return (EClimbingSurfaceModifierType)this[nameof(Modifier)].GetValue<int>(); } set { this[nameof(Modifier)].SetValue<int>((int)value); } }
        public BoxComponent ModifierBox { get { return this[nameof(ModifierBox)].As<BoxComponent>(); } set { this["ModifierBox"] = value; } }
        public bool IsPointInModifier(Vector Point) { return Invoke<bool>(nameof(IsPointInModifier), Point); }
    }
    public class ClimbingSurfaces : Actor
    {
        public ClimbingSurfaces(nint addr) : base(addr) { }
        public Array<ClimbableLedge> Ledges { get { return new Array<ClimbableLedge>(this[nameof(Ledges)].Address); } }
    }
    public class AdvancedDecalComponent : DecalComponent
    {
        public AdvancedDecalComponent(nint addr) : base(addr) { }
        public AdvancedDecalComponent SpawnAdvancedDecalAttached(MaterialInterface DecalMaterialIn, Vector DecalSizeIn, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, float LifeSpan, CurveFloat EmissiveCurve, CurveFloat OpacityCurve, bool bSetLifespan) { return Invoke<AdvancedDecalComponent>(nameof(SpawnAdvancedDecalAttached), DecalMaterialIn, DecalSizeIn, AttachToComponent, AttachPointName, Location, Rotation, LocationType, LifeSpan, EmissiveCurve, OpacityCurve, bSetLifespan); }
        public AdvancedDecalComponent SpawnAdvancedDecalAtLocation(Object WorldContextObject, MaterialInterface DecalMaterialIn, Vector DecalSizeIn, Vector Location, Rotator Rotation, float LifeSpan, CurveFloat EmissiveCurve, CurveFloat OpacityCurve, bool bSetLifespan) { return Invoke<AdvancedDecalComponent>(nameof(SpawnAdvancedDecalAtLocation), WorldContextObject, DecalMaterialIn, DecalSizeIn, Location, Rotation, LifeSpan, EmissiveCurve, OpacityCurve, bSetLifespan); }
    }
    public class AimingComponent : ActorComponent
    {
        public AimingComponent(nint addr) : base(addr) { }
        public AimingParameters DefaultAimingParameters { get { return this[nameof(DefaultAimingParameters)].As<AimingParameters>(); } set { this["DefaultAimingParameters"] = value; } }
        public Object DefaultMuzzleAttachPoint { get { return this[nameof(DefaultMuzzleAttachPoint)]; } set { this[nameof(DefaultMuzzleAttachPoint)] = value; } }
        public bool bAutoActivateWhileAiming { get { return this[nameof(bAutoActivateWhileAiming)].Flag; } set { this[nameof(bAutoActivateWhileAiming)].Flag = value; } }
        public ProjectileVisualizationContext VisualizationContext { get { return this[nameof(VisualizationContext)].As<ProjectileVisualizationContext>(); } set { this["VisualizationContext"] = value; } }
        public AimingParameters AimingParametersOverride { get { return this[nameof(AimingParametersOverride)].As<AimingParameters>(); } set { this["AimingParametersOverride"] = value; } }
        public bool UsesProjectileVisualization() { return Invoke<bool>(nameof(UsesProjectileVisualization)); }
        public void SetAimingParametersOverride(AimingParameters NewParameters) { Invoke(nameof(SetAimingParametersOverride), NewParameters); }
        public void Reset() { Invoke(nameof(Reset)); }
        public ProjectileVisualizationContext GetProjectileVisualization() { return Invoke<ProjectileVisualizationContext>(nameof(GetProjectileVisualization)); }
        public HitResult GetMuzzleObstruction() { return Invoke<HitResult>(nameof(GetMuzzleObstruction)); }
        public void GetAimVector(Vector From, Vector To, bool bApplyAimAssist, bool bOverrideTrajectoryMode, ERangedWeaponTrajectoryMode TrajectoryModeOverride) { Invoke(nameof(GetAimVector), From, To, bApplyAimAssist, bOverrideTrajectoryMode, TrajectoryModeOverride); }
        public Vector GetAimTargetLocation() { return Invoke<Vector>(nameof(GetAimTargetLocation)); }
        public HitResult GetAimTarget(bool bInitialSegmentOnly) { return Invoke<HitResult>(nameof(GetAimTarget), bInitialSegmentOnly); }
        public WeaponTracePath GetAimPath() { return Invoke<WeaponTracePath>(nameof(GetAimPath)); }
        public AimingParameters GetAimingParameters() { return Invoke<AimingParameters>(nameof(GetAimingParameters)); }
        public void ClearAimingParametersOverride() { Invoke(nameof(ClearAimingParametersOverride)); }
    }
    public class BreakableImpulseComponent : SceneComponent
    {
        public BreakableImpulseComponent(nint addr) : base(addr) { }
        public float ImpulseRadius { get { return this[nameof(ImpulseRadius)].GetValue<float>(); } set { this[nameof(ImpulseRadius)].SetValue<float>(value); } }
        public float ImpulseStrength { get { return this[nameof(ImpulseStrength)].GetValue<float>(); } set { this[nameof(ImpulseStrength)].SetValue<float>(value); } }
        public bool bApplyFalloff { get { return this[nameof(bApplyFalloff)].Flag; } set { this[nameof(bApplyFalloff)].Flag = value; } }
    }
    public class BreakableComponent : SceneComponent
    {
        public BreakableComponent(nint addr) : base(addr) { }
        public Object OnPreBreak { get { return this[nameof(OnPreBreak)]; } set { this[nameof(OnPreBreak)] = value; } }
        public Object OnBeginBreak { get { return this[nameof(OnBeginBreak)]; } set { this[nameof(OnBeginBreak)] = value; } }
        public Object OnEndBreak { get { return this[nameof(OnEndBreak)]; } set { this[nameof(OnEndBreak)] = value; } }
        public Object OnHideBroken { get { return this[nameof(OnHideBroken)]; } set { this[nameof(OnHideBroken)] = value; } }
        public Object OnReset { get { return this[nameof(OnReset)]; } set { this[nameof(OnReset)] = value; } }
        public bool bHidePiecesOnBroken { get { return this[nameof(bHidePiecesOnBroken)].Flag; } set { this[nameof(bHidePiecesOnBroken)].Flag = value; } }
        public float BreakDuration { get { return this[nameof(BreakDuration)].GetValue<float>(); } set { this[nameof(BreakDuration)].SetValue<float>(value); } }
        public float BrokenDuration { get { return this[nameof(BrokenDuration)].GetValue<float>(); } set { this[nameof(BrokenDuration)].SetValue<float>(value); } }
        public float RandomImpulse { get { return this[nameof(RandomImpulse)].GetValue<float>(); } set { this[nameof(RandomImpulse)].SetValue<float>(value); } }
        public float RandomTorque { get { return this[nameof(RandomTorque)].GetValue<float>(); } set { this[nameof(RandomTorque)].SetValue<float>(value); } }
        public Object UnbrokenMeshComponent { get { return this[nameof(UnbrokenMeshComponent)]; } set { this[nameof(UnbrokenMeshComponent)] = value; } }
        public bool bDestroyOnHidden { get { return this[nameof(bDestroyOnHidden)].Flag; } set { this[nameof(bDestroyOnHidden)].Flag = value; } }
        public float HideDuration { get { return this[nameof(HideDuration)].GetValue<float>(); } set { this[nameof(HideDuration)].SetValue<float>(value); } }
        public bool bManageUnbrokenMeshCollision { get { return this[nameof(bManageUnbrokenMeshCollision)].Flag; } set { this[nameof(bManageUnbrokenMeshCollision)].Flag = value; } }
        public bool bUnbrokenMeshSupportsCollisionQueries { get { return this[nameof(bUnbrokenMeshSupportsCollisionQueries)].Flag; } set { this[nameof(bUnbrokenMeshSupportsCollisionQueries)].Flag = value; } }
        public bool bPiecesSupportsCollisionQueries { get { return this[nameof(bPiecesSupportsCollisionQueries)].Flag; } set { this[nameof(bPiecesSupportsCollisionQueries)].Flag = value; } }
        public Object PiecesCollisionProfileName { get { return this[nameof(PiecesCollisionProfileName)]; } set { this[nameof(PiecesCollisionProfileName)] = value; } }
        public TimerHandle SetBrokenHandle { get { return this[nameof(SetBrokenHandle)].As<TimerHandle>(); } set { this["SetBrokenHandle"] = value; } }
        public TimerHandle HideHandle { get { return this[nameof(HideHandle)].As<TimerHandle>(); } set { this["HideHandle"] = value; } }
        public void Reset(bool bForceResetClientState) { Invoke(nameof(Reset), bForceResetClientState); }
        public void OnSetBroken() { Invoke(nameof(OnSetBroken)); }
        public bool IsUnbroken() { return Invoke<bool>(nameof(IsUnbroken)); }
        public bool IsBroken() { return Invoke<bool>(nameof(IsBroken)); }
        public bool IsBreaking() { return Invoke<bool>(nameof(IsBreaking)); }
        public void HidePieces() { Invoke(nameof(HidePieces)); }
        public void Break() { Invoke(nameof(Break)); }
    }
    public class ChildAttachmentBroadcaster : ActorComponent
    {
        public ChildAttachmentBroadcaster(nint addr) : base(addr) { }
        public Object OnChildAttachedEvent { get { return this[nameof(OnChildAttachedEvent)]; } set { this[nameof(OnChildAttachedEvent)] = value; } }
        public Object OnChildDetachedEvent { get { return this[nameof(OnChildDetachedEvent)]; } set { this[nameof(OnChildDetachedEvent)] = value; } }
        public Array<AttachedChild> AttachedChildren { get { return new Array<AttachedChild>(this[nameof(AttachedChildren)].Address); } }
    }
    public class CompanionSubsystem : WorldSubsystem
    {
        public CompanionSubsystem(nint addr) : base(addr) { }
        public Array<CompanionComponent> Companions { get { return new Array<CompanionComponent>(this[nameof(Companions)].Address); } }
        public Object OnCompanionsChanged { get { return this[nameof(OnCompanionsChanged)]; } set { this[nameof(OnCompanionsChanged)] = value; } }
        public void RemoveCompanionListener(Object WorldContextObject, Object Event) { Invoke(nameof(RemoveCompanionListener), WorldContextObject, Event); }
        public Array<CharacterGunfire> GetCompanions(Object WorldContextObject) { return Invoke<Array<CharacterGunfire>>(nameof(GetCompanions), WorldContextObject); }
        public void AddCompanionListener(Object WorldContextObject, Object Event) { Invoke(nameof(AddCompanionListener), WorldContextObject, Event); }
    }
    public class CompanionComponent : ActorComponent
    {
        public CompanionComponent(nint addr) : base(addr) { }
        public Object FollowTargetSelector { get { return this[nameof(FollowTargetSelector)]; } set { this[nameof(FollowTargetSelector)] = value; } }
        public Object FollowTarget { get { return this[nameof(FollowTarget)]; } set { this[nameof(FollowTarget)] = value; } }
        public Actor GetCurrentFollowTarget() { return Invoke<Actor>(nameof(GetCurrentFollowTarget)); }
    }
    public class ContextualDialogTrigger : Object
    {
        public ContextualDialogTrigger(nint addr) : base(addr) { }
        public Object Trigger { get { return this[nameof(Trigger)]; } set { this[nameof(Trigger)] = value; } }
        public Array<ContextualDialogResponse> Responses { get { return new Array<ContextualDialogResponse>(this[nameof(Responses)].Address); } }
    }
    public class ContextualDialogResponse : Object
    {
        public ContextualDialogResponse(nint addr) : base(addr) { }
        public VariableStatements ValidateStatements { get { return this[nameof(ValidateStatements)].As<VariableStatements>(); } set { this["ValidateStatements"] = value; } }
        public VariableStatements ExecuteStatements { get { return this[nameof(ExecuteStatements)].As<VariableStatements>(); } set { this["ExecuteStatements"] = value; } }
        public Object Response { get { return this[nameof(Response)]; } set { this[nameof(Response)] = value; } }
    }
    public class ContextualDialogSet : DataAsset
    {
        public ContextualDialogSet(nint addr) : base(addr) { }
        public Array<ContextualDialogTrigger> Triggers { get { return new Array<ContextualDialogTrigger>(this[nameof(Triggers)].Address); } }
        public Array<VariableDef> Variables { get { return new Array<VariableDef>(this[nameof(Variables)].Address); } }
    }
    public class Branch : EventTreeNode_Base
    {
        public Branch(nint addr) : base(addr) { }
        public Array<EventTreeNode> Nodes { get { return new Array<EventTreeNode>(this[nameof(Nodes)].Address); } }
    }
    public class Branch_ContextualDialogEntry : Branch
    {
        public Branch_ContextualDialogEntry(nint addr) : base(addr) { }
        public int RequiredPlayers { get { return this[nameof(RequiredPlayers)].GetValue<int>(); } set { this[nameof(RequiredPlayers)].SetValue<int>(value); } }
        public float PlayerRange { get { return this[nameof(PlayerRange)].GetValue<float>(); } set { this[nameof(PlayerRange)].SetValue<float>(value); } }
    }
    public class EventTreeNode_ContextualDialogTrigger : EventTreeNode
    {
        public EventTreeNode_ContextualDialogTrigger(nint addr) : base(addr) { }
        public Object TriggerName { get { return this[nameof(TriggerName)]; } set { this[nameof(TriggerName)] = value; } }
        public Array<Branch_ContextualDialogEntry> Entries { get { return new Array<Branch_ContextualDialogEntry>(this[nameof(Entries)].Address); } }
    }
    public class EventTreeComponent : ActorComponent
    {
        public EventTreeComponent(nint addr) : base(addr) { }
        public Object OnBegin { get { return this[nameof(OnBegin)]; } set { this[nameof(OnBegin)] = value; } }
        public Object OnEnd { get { return this[nameof(OnEnd)]; } set { this[nameof(OnEnd)] = value; } }
        public Object OnSetStage { get { return this[nameof(OnSetStage)]; } set { this[nameof(OnSetStage)] = value; } }
        public Array<EventTreeContext> ExecutionStack { get { return new Array<EventTreeContext>(this[nameof(ExecutionStack)].Address); } }
        public Array<EventTreeStage> StageStack { get { return new Array<EventTreeStage>(this[nameof(StageStack)].Address); } }
        public void Stop() { Invoke(nameof(Stop)); }
        public void StartTree() { Invoke(nameof(StartTree)); }
        public void SetStage(EventTreeStage Stage) { Invoke(nameof(SetStage), Stage); }
        public void SetContextActor(Object Name, Actor Actor) { Invoke(nameof(SetContextActor), Name, Actor); }
        public void PushStage(EventTreeStage Stage) { Invoke(nameof(PushStage), Stage); }
        public void PopStage() { Invoke(nameof(PopStage)); }
        public EventTreeNode K2_PeekNextNode() { return Invoke<EventTreeNode>(nameof(K2_PeekNextNode)); }
        public EventTreeNode K2_GetCurrentNode() { return Invoke<EventTreeNode>(nameof(K2_GetCurrentNode)); }
        public bool IsRunning() { return Invoke<bool>(nameof(IsRunning)); }
        public bool HasPendingEvents() { return Invoke<bool>(nameof(HasPendingEvents)); }
        public Array<Actor> GetContextActors(Object Name) { return Invoke<Array<Actor>>(nameof(GetContextActors), Name); }
        public Actor GetContextActor(Object Name) { return Invoke<Actor>(nameof(GetContextActor), Name); }
        public bool ExecuteTriggerFromEventTree(EventTree EventTree, Object TriggerName) { return Invoke<bool>(nameof(ExecuteTriggerFromEventTree), EventTree, TriggerName); }
        public void ExecuteSubroutine(Object Name) { Invoke(nameof(ExecuteSubroutine), Name); }
        public void Clear(bool ForceComplete) { Invoke(nameof(Clear), ForceComplete); }
        public void BeginEventTree(EventTree EventTree, bool DeferredStart) { Invoke(nameof(BeginEventTree), EventTree, DeferredStart); }
    }
    public class ContextualDialogComponent : EventTreeComponent
    {
        public ContextualDialogComponent(nint addr) : base(addr) { }
        public ContextualDialogSet DialogSet { get { return this[nameof(DialogSet)].As<ContextualDialogSet>(); } set { this["DialogSet"] = value; } }
        public EventTree DialogTree { get { return this[nameof(DialogTree)].As<EventTree>(); } set { this["DialogTree"] = value; } }
        public Array<Object> ClientSideDialogTriggers { get { return new Array<Object>(this[nameof(ClientSideDialogTriggers)].Address); } }
        public Object CachedTriggers { get { return this[nameof(CachedTriggers)]; } set { this[nameof(CachedTriggers)] = value; } }
        public void TriggerDialogResponseInProximity(Object WorldContextObject, Vector Location, float Radius, Object DialogResponse) { Invoke(nameof(TriggerDialogResponseInProximity), WorldContextObject, Location, Radius, DialogResponse); }
        public bool TriggerDialogResponse(Object Trigger) { return Invoke<bool>(nameof(TriggerDialogResponse), Trigger); }
        public void ServerTriggerDialogResponse(Object Trigger) { Invoke(nameof(ServerTriggerDialogResponse), Trigger); }
        public void OnNotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyTakeDamage), DamageInfo); }
        public void OnNotifyHit(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyHit), DamageInfo); }
        public void OnEvent(Object EventName) { Invoke(nameof(OnEvent), EventName); }
        public void OnDialogComplete(DialogInstance Instance) { Invoke(nameof(OnDialogComplete), Instance); }
        public void MulticastDialog(DialogInfo Dialog) { Invoke(nameof(MulticastDialog), Dialog); }
        public Actor GetContextOwner() { return Invoke<Actor>(nameof(GetContextOwner)); }
        public void EventEnd() { Invoke(nameof(EventEnd)); }
    }
    public class CraftingRecipe : CraftingRecipe_Base
    {
        public CraftingRecipe(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public int ItemLevel { get { return this[nameof(ItemLevel)].GetValue<int>(); } set { this[nameof(ItemLevel)].SetValue<int>(value); } }
        public int ItemQuantity { get { return this[nameof(ItemQuantity)].GetValue<int>(); } set { this[nameof(ItemQuantity)].SetValue<int>(value); } }
        public Array<Object> ItemTags { get { return new Array<Object>(this[nameof(ItemTags)].Address); } }
        public bool SharedCraftedItem { get { return this[nameof(SharedCraftedItem)].Flag; } set { this[nameof(SharedCraftedItem)].Flag = value; } }
        public void OnItemLoaded(Actor Owner, InventoryComponent Inventory) { Invoke(nameof(OnItemLoaded), Owner, Inventory); }
    }
    public class CraftingRecipeList : Object
    {
        public CraftingRecipeList(nint addr) : base(addr) { }
        public Array<CraftingRecipe_Base> Recipes { get { return new Array<CraftingRecipe_Base>(this[nameof(Recipes)].Address); } }
    }
    public class CraftingRecipeManager : ActorComponent
    {
        public CraftingRecipeManager(nint addr) : base(addr) { }
        public Object Recipes { get { return this[nameof(Recipes)]; } set { this[nameof(Recipes)] = value; } }
        public Object RecipeLookup { get { return this[nameof(RecipeLookup)]; } set { this[nameof(RecipeLookup)] = value; } }
        public CraftingRecipeManager GetInstance(Object WorldContextObject) { return Invoke<CraftingRecipeManager>(nameof(GetInstance), WorldContextObject); }
        public Object GetAllMaterials(Object WorldContextObject) { return Invoke<Object>(nameof(GetAllMaterials), WorldContextObject); }
    }
    public class CraftingComponent : ActorComponent
    {
        public CraftingComponent(nint addr) : base(addr) { }
        public Array<Object> RecipeTags { get { return new Array<Object>(this[nameof(RecipeTags)].Address); } }
        public Object ClientPrevRequestedLoads { get { return this[nameof(ClientPrevRequestedLoads)]; } set { this[nameof(ClientPrevRequestedLoads)] = value; } }
        public void UpgradeItem(Actor Source, int ItemId, Guid RecipeID) { Invoke(nameof(UpgradeItem), Source, ItemId, RecipeID); }
        public void ReleaseRecipes() { Invoke(nameof(ReleaseRecipes)); }
        public void NotifyClientOnLoadRecipes() { Invoke(nameof(NotifyClientOnLoadRecipes)); }
        public void LoadRecipesOnServer(Actor Source, ERecipeType Type) { Invoke(nameof(LoadRecipesOnServer), Source, Type); }
        public bool HasRecipesOfType(Actor Source, ERecipeType Type) { return Invoke<bool>(nameof(HasRecipesOfType), Source, Type); }
        public bool HasAvailableUpgrades(Array<Object> Tags) { return Invoke<bool>(nameof(HasAvailableUpgrades), Tags); }
        public bool HasAvailableRecipes(Array<Object> Tags) { return Invoke<bool>(nameof(HasAvailableRecipes), Tags); }
        public bool GetUpgrade(Actor Source, int ItemId, RecipeInfo Info) { return Invoke<bool>(nameof(GetUpgrade), Source, ItemId, Info); }
        public Array<RecipeInfo> GetRecipesWithIngredient(Actor Source, Object Ingredient, ERecipeType Type, int IngredientLevelRequirement) { return Invoke<Array<RecipeInfo>>(nameof(GetRecipesWithIngredient), Source, Ingredient, Type, IngredientLevelRequirement); }
        public Array<RecipeInfo> GetRecipesForItem(Actor Source, Object Item, ERecipeType Type, int ItemLevelRequirement) { return Invoke<Array<RecipeInfo>>(nameof(GetRecipesForItem), Source, Item, Type, ItemLevelRequirement); }
        public void GetRecipes(Actor Source, ERecipeType Type, Array<RecipeInfo> Recipes, LatentActionInfo LatentInfo) { Invoke(nameof(GetRecipes), Source, Type, Recipes, LatentInfo); }
        public RecipeInfo GetRecipeInfo(Actor Source, Guid RecipeID) { return Invoke<RecipeInfo>(nameof(GetRecipeInfo), Source, RecipeID); }
        public void CraftItem(Actor Source, Guid RecipeID) { Invoke(nameof(CraftItem), Source, RecipeID); }
    }
    public class CustomSphereComponent : SphereComponent
    {
        public CustomSphereComponent(nint addr) : base(addr) { }
    }
    public class DebrisManager : WorldSubsystem
    {
        public DebrisManager(nint addr) : base(addr) { }
        public Array<DebrisCullingInfo> ActiveBreakables { get { return new Array<DebrisCullingInfo>(this[nameof(ActiveBreakables)].Address); } }
        public Array<DebrisCullingInfo> ExpiredBreakables { get { return new Array<DebrisCullingInfo>(this[nameof(ExpiredBreakables)].Address); } }
        public void OnBreakingFinished(BreakableComponent Breakable) { Invoke(nameof(OnBreakingFinished), Breakable); }
        public void CleanupOnLevelExit(Level Level, World World) { Invoke(nameof(CleanupOnLevelExit), Level, World); }
        public void CleanupAllDebris() { Invoke(nameof(CleanupAllDebris)); }
    }
    public class DetailLevelComponent : SceneComponent
    {
        public DetailLevelComponent(nint addr) : base(addr) { }
        public Object OnDetailChanged { get { return this[nameof(OnDetailChanged)]; } set { this[nameof(OnDetailChanged)] = value; } }
        public EDetailPriority Priority { get { return (EDetailPriority)this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>((int)value); } }
        public void UpdateDetailLevel(UserSetting AppliedSetting, GameUserSettingsGunfire UserSettings) { Invoke(nameof(UpdateDetailLevel), AppliedSetting, UserSettings); }
        public void SettingsRebuilt(GameUserSettingsGunfire UserSettings) { Invoke(nameof(SettingsRebuilt), UserSettings); }
    }
    public class DissolveComponent : ActorComponent
    {
        public DissolveComponent(nint addr) : base(addr) { }
        public Array<DissolveMaterial> Materials { get { return new Array<DissolveMaterial>(this[nameof(Materials)].Address); } }
        public NiagaraSystem DissolveFX { get { return this[nameof(DissolveFX)].As<NiagaraSystem>(); } set { this["DissolveFX"] = value; } }
        public Object DissolveFXPoint { get { return this[nameof(DissolveFXPoint)]; } set { this[nameof(DissolveFXPoint)] = value; } }
        public float DissolveFXThreshold { get { return this[nameof(DissolveFXThreshold)].GetValue<float>(); } set { this[nameof(DissolveFXThreshold)].SetValue<float>(value); } }
        public bool DistinctDissolveInFX { get { return this[nameof(DistinctDissolveInFX)].Flag; } set { this[nameof(DistinctDissolveInFX)].Flag = value; } }
        public NiagaraSystem DissolveInFX { get { return this[nameof(DissolveInFX)].As<NiagaraSystem>(); } set { this["DissolveInFX"] = value; } }
        public Object DissolveInFXPoint { get { return this[nameof(DissolveInFXPoint)]; } set { this[nameof(DissolveInFXPoint)] = value; } }
        public float DissolveInFXThreshold { get { return this[nameof(DissolveInFXThreshold)].GetValue<float>(); } set { this[nameof(DissolveInFXThreshold)].SetValue<float>(value); } }
        public bool DestroyOnComplete { get { return this[nameof(DestroyOnComplete)].Flag; } set { this[nameof(DestroyOnComplete)].Flag = value; } }
        public bool bAutoHideMeshes { get { return this[nameof(bAutoHideMeshes)].Flag; } set { this[nameof(bAutoHideMeshes)].Flag = value; } }
        public bool bAutoShowMeshesOnDissolveIn { get { return this[nameof(bAutoShowMeshesOnDissolveIn)].Flag; } set { this[nameof(bAutoShowMeshesOnDissolveIn)].Flag = value; } }
        public Array<Object> IgnoreComponents { get { return new Array<Object>(this[nameof(IgnoreComponents)].Address); } }
        public Array<Object> FXIgnoreComponents { get { return new Array<Object>(this[nameof(FXIgnoreComponents)].Address); } }
        public bool bFilterBySlotName { get { return this[nameof(bFilterBySlotName)].Flag; } set { this[nameof(bFilterBySlotName)].Flag = value; } }
        public Array<Object> ValidMaterialSlotNames { get { return new Array<Object>(this[nameof(ValidMaterialSlotNames)].Address); } }
        public Object OnDissolveComplete { get { return this[nameof(OnDissolveComplete)]; } set { this[nameof(OnDissolveComplete)] = value; } }
        public Array<MeshComponent> DissolveMeshes { get { return new Array<MeshComponent>(this[nameof(DissolveMeshes)].Address); } }
        public Array<NiagaraComponent> DissolveFXComps { get { return new Array<NiagaraComponent>(this[nameof(DissolveFXComps)].Address); } }
        public void DissolveOut(float Time) { Invoke(nameof(DissolveOut), Time); }
        public void DissolveIn(float Time) { Invoke(nameof(DissolveIn), Time); }
        public void Dissolve(float Time, float DissolveFXLingerAfterDeathTime) { Invoke(nameof(Dissolve), Time, DissolveFXLingerAfterDeathTime); }
    }
    public class FaceCameraComponent : ActorComponent
    {
        public FaceCameraComponent(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
    }
    public class FallDamageComponent : ActorComponent
    {
        public FallDamageComponent(nint addr) : base(addr) { }
        public bool bStartEnabled { get { return this[nameof(bStartEnabled)].Flag; } set { this[nameof(bStartEnabled)].Flag = value; } }
        public bool bSimulateOnOwningClient { get { return this[nameof(bSimulateOnOwningClient)].Flag; } set { this[nameof(bSimulateOnOwningClient)].Flag = value; } }
        public bool bRequiresAllowFallDamageTag { get { return this[nameof(bRequiresAllowFallDamageTag)].Flag; } set { this[nameof(bRequiresAllowFallDamageTag)].Flag = value; } }
        public bool bServerAuthoritative { get { return this[nameof(bServerAuthoritative)].Flag; } set { this[nameof(bServerAuthoritative)].Flag = value; } }
        public StatValue SafeFallDistance { get { return this[nameof(SafeFallDistance)].As<StatValue>(); } set { this["SafeFallDistance"] = value; } }
        public StatValue TerminalFallDistance { get { return this[nameof(TerminalFallDistance)].As<StatValue>(); } set { this["TerminalFallDistance"] = value; } }
        public StatValue MinFallDuration { get { return this[nameof(MinFallDuration)].As<StatValue>(); } set { this["MinFallDuration"] = value; } }
        public CurveFloat LandDamageCurve { get { return this[nameof(LandDamageCurve)].As<CurveFloat>(); } set { this["LandDamageCurve"] = value; } }
        public float LandHealthPercent { get { return this[nameof(LandHealthPercent)].GetValue<float>(); } set { this[nameof(LandHealthPercent)].SetValue<float>(value); } }
        public Object FallDamageType { get { return this[nameof(FallDamageType)]; } set { this[nameof(FallDamageType)] = value; } }
        public Object LandDamageType { get { return this[nameof(LandDamageType)]; } set { this[nameof(LandDamageType)] = value; } }
        public Object OnFallStart { get { return this[nameof(OnFallStart)]; } set { this[nameof(OnFallStart)] = value; } }
        public Object OnFallEnd { get { return this[nameof(OnFallEnd)]; } set { this[nameof(OnFallEnd)] = value; } }
        public Object OnFallReset { get { return this[nameof(OnFallReset)]; } set { this[nameof(OnFallReset)] = value; } }
        public Object OnDamageFromLand { get { return this[nameof(OnDamageFromLand)]; } set { this[nameof(OnDamageFromLand)] = value; } }
        public Object OnDeathFromLand { get { return this[nameof(OnDeathFromLand)]; } set { this[nameof(OnDeathFromLand)] = value; } }
        public Object OnDeathFromFall { get { return this[nameof(OnDeathFromFall)]; } set { this[nameof(OnDeathFromFall)] = value; } }
        public bool DoDamageOnLand { get { return this[nameof(DoDamageOnLand)].Flag; } set { this[nameof(DoDamageOnLand)].Flag = value; } }
        public bool bSkipDamageWhileInWater { get { return this[nameof(bSkipDamageWhileInWater)].Flag; } set { this[nameof(bSkipDamageWhileInWater)].Flag = value; } }
        public StatsComponent StatsComponent { get { return this[nameof(StatsComponent)].As<StatsComponent>(); } set { this["StatsComponent"] = value; } }
        public CharacterMovementComponent MovementComponent { get { return this[nameof(MovementComponent)].As<CharacterMovementComponent>(); } set { this["MovementComponent"] = value; } }
        public void TriggerFallDeath() { Invoke(nameof(TriggerFallDeath)); }
        public void SetEnabled(bool bEnabled) { Invoke(nameof(SetEnabled), bEnabled); }
        public void Server_DisableUntilGrounded(bool bDisable) { Invoke(nameof(Server_DisableUntilGrounded), bDisable); }
        public bool IsEnabled() { return Invoke<bool>(nameof(IsEnabled)); }
        public float GetCurrentFallDistance() { return Invoke<float>(nameof(GetCurrentFallDistance)); }
        public void DisableUntilGrounded(bool bDisable) { Invoke(nameof(DisableUntilGrounded), bDisable); }
    }
    public class FxActorDestroyerComponent : ActorComponent
    {
        public FxActorDestroyerComponent(nint addr) : base(addr) { }
        public Object OnSoftDestroyed { get { return this[nameof(OnSoftDestroyed)]; } set { this[nameof(OnSoftDestroyed)] = value; } }
        public Array<Object> IgnoredComponents { get { return new Array<Object>(this[nameof(IgnoredComponents)].Address); } }
        public float ForceDestroyTimer { get { return this[nameof(ForceDestroyTimer)].GetValue<float>(); } set { this[nameof(ForceDestroyTimer)].SetValue<float>(value); } }
        public Array<ActorComponent> ActiveComponents { get { return new Array<ActorComponent>(this[nameof(ActiveComponents)].Address); } }
        public void SoftDestroyOwner() { Invoke(nameof(SoftDestroyOwner)); }
        public FxActorDestroyerComponent SoftDestroyActor(Actor Actor, Array<Object> InIgnoredComponents, float InForceDestroyTimer) { return Invoke<FxActorDestroyerComponent>(nameof(SoftDestroyActor), Actor, InIgnoredComponents, InForceDestroyTimer); }
        public bool IsSoftDestroying() { return Invoke<bool>(nameof(IsSoftDestroying)); }
    }
    public class HeuristicBoundsComponent : SceneComponent
    {
        public HeuristicBoundsComponent(nint addr) : base(addr) { }
        public EHeuristicBoundsShape BoundsShape { get { return (EHeuristicBoundsShape)this[nameof(BoundsShape)].GetValue<int>(); } set { this[nameof(BoundsShape)].SetValue<int>((int)value); } }
        public bool bScaleWithDistance { get { return this[nameof(bScaleWithDistance)].Flag; } set { this[nameof(bScaleWithDistance)].Flag = value; } }
        public float OuterRadius { get { return this[nameof(OuterRadius)].GetValue<float>(); } set { this[nameof(OuterRadius)].SetValue<float>(value); } }
        public float InnerRadius { get { return this[nameof(InnerRadius)].GetValue<float>(); } set { this[nameof(InnerRadius)].SetValue<float>(value); } }
        public Vector OuterExtent { get { return this[nameof(OuterExtent)].As<Vector>(); } set { this["OuterExtent"] = value; } }
        public float InnerExtentScale { get { return this[nameof(InnerExtentScale)].GetValue<float>(); } set { this[nameof(InnerExtentScale)].SetValue<float>(value); } }
        public float BracketScale { get { return this[nameof(BracketScale)].GetValue<float>(); } set { this[nameof(BracketScale)].SetValue<float>(value); } }
        public bool bSlidingBoundsLocation { get { return this[nameof(bSlidingBoundsLocation)].Flag; } set { this[nameof(bSlidingBoundsLocation)].Flag = value; } }
        public float SlidingMaxima { get { return this[nameof(SlidingMaxima)].GetValue<float>(); } set { this[nameof(SlidingMaxima)].SetValue<float>(value); } }
        public float SlidingMinima { get { return this[nameof(SlidingMinima)].GetValue<float>(); } set { this[nameof(SlidingMinima)].SetValue<float>(value); } }
        public void SetOuterExtent(Vector NewExtent) { Invoke(nameof(SetOuterExtent), NewExtent); }
        public Transform GetWorldTransformForPanelAtSetDistance(Vector ViewLocation, Vector2D PanelSize, EHeuristicBoundsPanelAlignment Alignment, float ProjectionDistance) { return Invoke<Transform>(nameof(GetWorldTransformForPanelAtSetDistance), ViewLocation, PanelSize, Alignment, ProjectionDistance); }
        public Transform GetWorldTransformForPanel(Vector ViewLocation, Vector2D PanelSize, EHeuristicBoundsPanelAlignment Alignment) { return Invoke<Transform>(nameof(GetWorldTransformForPanel), ViewLocation, PanelSize, Alignment); }
        public Array<Vector> GetBoundsBracketOnPlane(Vector ViewLocation, float PlaneDistance) { return Invoke<Array<Vector>>(nameof(GetBoundsBracketOnPlane), ViewLocation, PlaneDistance); }
    }
    public class HitLogComponent : ActorComponent
    {
        public HitLogComponent(nint addr) : base(addr) { }
        public float WeakSpotDamageScalar { get { return this[nameof(WeakSpotDamageScalar)].GetValue<float>(); } set { this[nameof(WeakSpotDamageScalar)].SetValue<float>(value); } }
        public float ResistSpotDamageScalar { get { return this[nameof(ResistSpotDamageScalar)].GetValue<float>(); } set { this[nameof(ResistSpotDamageScalar)].SetValue<float>(value); } }
        public Array<HitLocationInfo> HitLocations { get { return new Array<HitLocationInfo>(this[nameof(HitLocations)].Address); } }
        public uint RepDestroyedFlags { get { return this[nameof(RepDestroyedFlags)].GetValue<uint>(); } set { this[nameof(RepDestroyedFlags)].SetValue<uint>(value); } }
        public byte LastHitLocation { get { return this[nameof(LastHitLocation)].GetValue<byte>(); } set { this[nameof(LastHitLocation)].SetValue<byte>(value); } }
        public DamageInfo LastHitInfo { get { return this[nameof(LastHitInfo)].As<DamageInfo>(); } set { this["LastHitInfo"] = value; } }
        public DamageInfo LastDamageInfo { get { return this[nameof(LastDamageInfo)].As<DamageInfo>(); } set { this["LastDamageInfo"] = value; } }
        public AnimInstanceGunfire AnimInstance { get { return this[nameof(AnimInstance)].As<AnimInstanceGunfire>(); } set { this["AnimInstance"] = value; } }
        public void ResetAllHitLocationHealth() { Invoke(nameof(ResetAllHitLocationHealth)); }
        public void RepairHitLocation(Object HitLocationName) { Invoke(nameof(RepairHitLocation), HitLocationName); }
        public void OnRep_LastHitLocation() { Invoke(nameof(OnRep_LastHitLocation)); }
        public void OnRep_DestroyedFlags() { Invoke(nameof(OnRep_DestroyedFlags)); }
        public bool IsMaterialWeakspot(PhysicalMaterial PhysicsMaterial) { return Invoke<bool>(nameof(IsMaterialWeakspot), PhysicsMaterial); }
        public bool IsMaterialResisted(PhysicalMaterial PhysicsMaterial) { return Invoke<bool>(nameof(IsMaterialResisted), PhysicsMaterial); }
        public DamageInfo GetLastHitInfo() { return Invoke<DamageInfo>(nameof(GetLastHitInfo)); }
        public DamageInfo GetLastDamageInfo() { return Invoke<DamageInfo>(nameof(GetLastDamageInfo)); }
        public float GetImpactDamageForHitLocation(DateTime Time, Object HitLocation, bool bIgnoreImpactScalar) { return Invoke<float>(nameof(GetImpactDamageForHitLocation), Time, HitLocation, bIgnoreImpactScalar); }
        public float GetDamageScalarForMaterial(PhysicalMaterial PhysicsMaterial) { return Invoke<float>(nameof(GetDamageScalarForMaterial), PhysicsMaterial); }
        public float GetDamageForHitLocation(DateTime Time, Object HitLocation) { return Invoke<float>(nameof(GetDamageForHitLocation), Time, HitLocation); }
        public float GetDamage(DateTime Time) { return Invoke<float>(nameof(GetDamage), Time); }
        public void DeactivateHitLocation(Object HitLocationName) { Invoke(nameof(DeactivateHitLocation), HitLocationName); }
        public void ClearHitLog() { Invoke(nameof(ClearHitLog)); }
    }
    public class IdleTimerComponent : ActorComponent
    {
        public IdleTimerComponent(nint addr) : base(addr) { }
        public float Timeout { get { return this[nameof(Timeout)].GetValue<float>(); } set { this[nameof(Timeout)].SetValue<float>(value); } }
        public float TimeoutUpdateInterval { get { return this[nameof(TimeoutUpdateInterval)].GetValue<float>(); } set { this[nameof(TimeoutUpdateInterval)].SetValue<float>(value); } }
        public Object OnTimeout { get { return this[nameof(OnTimeout)]; } set { this[nameof(OnTimeout)] = value; } }
        public float IdleTime { get { return this[nameof(IdleTime)].GetValue<float>(); } set { this[nameof(IdleTime)].SetValue<float>(value); } }
        public Object InputAction { get { return this[nameof(InputAction)]; } set { this[nameof(InputAction)] = value; } }
        public void Ping() { Invoke(nameof(Ping)); }
    }
    public class InspectableComponent : ActorComponent
    {
        public InspectableComponent(nint addr) : base(addr) { }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public float TransitionTimeIn { get { return this[nameof(TransitionTimeIn)].GetValue<float>(); } set { this[nameof(TransitionTimeIn)].SetValue<float>(value); } }
        public byte BlendIn { get { return this[nameof(BlendIn)].GetValue<byte>(); } set { this[nameof(BlendIn)].SetValue<byte>(value); } }
        public float ZoomInBlendExponent { get { return this[nameof(ZoomInBlendExponent)].GetValue<float>(); } set { this[nameof(ZoomInBlendExponent)].SetValue<float>(value); } }
        public float TransitionTimeOut { get { return this[nameof(TransitionTimeOut)].GetValue<float>(); } set { this[nameof(TransitionTimeOut)].SetValue<float>(value); } }
        public byte BlendOut { get { return this[nameof(BlendOut)].GetValue<byte>(); } set { this[nameof(BlendOut)].SetValue<byte>(value); } }
        public float ZoomOutBlendExponent { get { return this[nameof(ZoomOutBlendExponent)].GetValue<float>(); } set { this[nameof(ZoomOutBlendExponent)].SetValue<float>(value); } }
        public bool bConsumeInput { get { return this[nameof(bConsumeInput)].Flag; } set { this[nameof(bConsumeInput)].Flag = value; } }
        public bool HidePawn { get { return this[nameof(HidePawn)].Flag; } set { this[nameof(HidePawn)].Flag = value; } }
        public Object OnTransitionBegin { get { return this[nameof(OnTransitionBegin)]; } set { this[nameof(OnTransitionBegin)] = value; } }
        public Object OnTransitionEnd { get { return this[nameof(OnTransitionEnd)]; } set { this[nameof(OnTransitionEnd)] = value; } }
        public Object OnBeginInspect { get { return this[nameof(OnBeginInspect)]; } set { this[nameof(OnBeginInspect)] = value; } }
        public Object OnEndInspect { get { return this[nameof(OnEndInspect)]; } set { this[nameof(OnEndInspect)] = value; } }
        public Object OnAnyoneEndInspect { get { return this[nameof(OnAnyoneEndInspect)]; } set { this[nameof(OnAnyoneEndInspect)] = value; } }
        public Object OnNotifyCompleteInspect { get { return this[nameof(OnNotifyCompleteInspect)]; } set { this[nameof(OnNotifyCompleteInspect)] = value; } }
        public bool bIsOccupied { get { return this[nameof(bIsOccupied)].Flag; } set { this[nameof(bIsOccupied)].Flag = value; } }
        public bool bInTransition { get { return this[nameof(bInTransition)].Flag; } set { this[nameof(bInTransition)].Flag = value; } }
        public PlayerController ActivePlayer { get { return this[nameof(ActivePlayer)].As<PlayerController>(); } set { this["ActivePlayer"] = value; } }
        public void StartInspect(PlayerController PlayerController) { Invoke(nameof(StartInspect), PlayerController); }
        public void OnRep_IsOccupied() { Invoke(nameof(OnRep_IsOccupied)); }
        public void OnRep_IsActivePlayer() { Invoke(nameof(OnRep_IsActivePlayer)); }
        public bool IsOccupied() { return Invoke<bool>(nameof(IsOccupied)); }
        public bool IsInTransition() { return Invoke<bool>(nameof(IsInTransition)); }
        public bool IsInteractingActorLocal() { return Invoke<bool>(nameof(IsInteractingActorLocal)); }
        public bool IsInteracting() { return Invoke<bool>(nameof(IsInteracting)); }
        public PlayerController GetActivePlayerController() { return Invoke<PlayerController>(nameof(GetActivePlayerController)); }
        public void EndInspect() { Invoke(nameof(EndInspect)); }
    }
    public class InteractiveVisualizerComponent : ActorComponent
    {
        public InteractiveVisualizerComponent(nint addr) : base(addr) { }
    }
    public class ItemSocketComponent : SceneComponent
    {
        public ItemSocketComponent(nint addr) : base(addr) { }
        public ItemSocketSlot Slot { get { return this[nameof(Slot)].As<ItemSocketSlot>(); } set { this["Slot"] = value; } }
        public bool Blocked { get { return this[nameof(Blocked)].Flag; } set { this[nameof(Blocked)].Flag = value; } }
        public Object OnItemSocketChanged { get { return this[nameof(OnItemSocketChanged)]; } set { this[nameof(OnItemSocketChanged)] = value; } }
        public Object OnItemSocketed { get { return this[nameof(OnItemSocketed)]; } set { this[nameof(OnItemSocketed)] = value; } }
        public Object OnItemUnsocketed { get { return this[nameof(OnItemUnsocketed)]; } set { this[nameof(OnItemUnsocketed)] = value; } }
        public Item SocketedItem { get { return this[nameof(SocketedItem)].As<Item>(); } set { this["SocketedItem"] = value; } }
        public void RequestReturnItemToInventory(CharacterGunfire Subject) { Invoke(nameof(RequestReturnItemToInventory), Subject); }
        public void RequestPickupAndEquip(CharacterGunfire Subject, bool bSetInHand) { Invoke(nameof(RequestPickupAndEquip), Subject, bSetInHand); }
        public void RequestDetach() { Invoke(nameof(RequestDetach)); }
        public void RequestAddItemFromInventoryById(InventoryComponent Inventory, int ItemId) { Invoke(nameof(RequestAddItemFromInventoryById), Inventory, ItemId); }
        public void RequestAddItemFromInventoryByClass(InventoryComponent Inventory, Object ItemClass) { Invoke(nameof(RequestAddItemFromInventoryByClass), Inventory, ItemClass); }
        public void RequestAddItemFromInventory(CharacterGunfire Subject) { Invoke(nameof(RequestAddItemFromInventory), Subject); }
        public void RequestAddExistingItem(Item Item) { Invoke(nameof(RequestAddExistingItem), Item); }
        public void RemoveItem() { Invoke(nameof(RemoveItem)); }
        public void OnRep_SocketedItem() { Invoke(nameof(OnRep_SocketedItem)); }
        public bool IsValid(Object ItemClass) { return Invoke<bool>(nameof(IsValid), ItemClass); }
        public bool IsFull() { return Invoke<bool>(nameof(IsFull)); }
        public bool IsEmpty() { return Invoke<bool>(nameof(IsEmpty)); }
        public bool HasInteractableSlot() { return Invoke<bool>(nameof(HasInteractableSlot)); }
        public void ForceFill() { Invoke(nameof(ForceFill)); }
        public bool CanAddItemOfClass(Object ItemClass) { return Invoke<bool>(nameof(CanAddItemOfClass), ItemClass); }
        public void AddItem(Object ItemClass) { Invoke(nameof(AddItem), ItemClass); }
    }
    public class ItemSocketCondition : Condition
    {
        public ItemSocketCondition(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
    }
    public class LadderSubsystem : WorldSubsystem
    {
        public LadderSubsystem(nint addr) : base(addr) { }
        public Array<Object> Ladders { get { return new Array<Object>(this[nameof(Ladders)].Address); } }
    }
    public class LadderCacheComponent : ActorComponent
    {
        public LadderCacheComponent(nint addr) : base(addr) { }
        public float RungSpacing { get { return this[nameof(RungSpacing)].GetValue<float>(); } set { this[nameof(RungSpacing)].SetValue<float>(value); } }
        public Object OccupancyClassOverride { get { return this[nameof(OccupancyClassOverride)]; } set { this[nameof(OccupancyClassOverride)] = value; } }
        public NavLinkGunfireComponent Link { get { return this[nameof(Link)].As<NavLinkGunfireComponent>(); } set { this["Link"] = value; } }
        public Object LinkStartCache { get { return this[nameof(LinkStartCache)]; } set { this[nameof(LinkStartCache)] = value; } }
        public Object LinkEndCache { get { return this[nameof(LinkEndCache)]; } set { this[nameof(LinkEndCache)] = value; } }
        public Array<LinkOccupant> InternalOccupantCache { get { return new Array<LinkOccupant>(this[nameof(InternalOccupantCache)].Address); } }
        public Object InterestCache { get { return this[nameof(InterestCache)]; } set { this[nameof(InterestCache)] = value; } }
    }
    public class MeshOutlinerComponent : ActorComponent
    {
        public MeshOutlinerComponent(nint addr) : base(addr) { }
        public bool bStartOutlined { get { return this[nameof(bStartOutlined)].Flag; } set { this[nameof(bStartOutlined)].Flag = value; } }
        public Object OutlineRoot { get { return this[nameof(OutlineRoot)]; } set { this[nameof(OutlineRoot)] = value; } }
        public int OutlineStencilValue { get { return this[nameof(OutlineStencilValue)].GetValue<int>(); } set { this[nameof(OutlineStencilValue)].SetValue<int>(value); } }
        public Object OutlineExclusionTag { get { return this[nameof(OutlineExclusionTag)]; } set { this[nameof(OutlineExclusionTag)] = value; } }
        public void SetOwnerOutlined(bool bEnable) { Invoke(nameof(SetOwnerOutlined), bEnable); }
        public bool IsCurrentlyOutlined() { return Invoke<bool>(nameof(IsCurrentlyOutlined)); }
    }
    public class NamedActorComponent : ActorComponent
    {
        public NamedActorComponent(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public void SetNameID(Object NewNameID) { Invoke(nameof(SetNameID), NewNameID); }
    }
    public class NamedActorManager : ActorComponent
    {
        public NamedActorManager(nint addr) : base(addr) { }
        public Object OnActorRegistered { get { return this[nameof(OnActorRegistered)]; } set { this[nameof(OnActorRegistered)] = value; } }
        public Object OnActorUnregistered { get { return this[nameof(OnActorUnregistered)]; } set { this[nameof(OnActorUnregistered)] = value; } }
        public void RemoveActor(Object NameID, Actor Actor) { Invoke(nameof(RemoveActor), NameID, Actor); }
        public NamedActorManager GetInstance(Object WorldContextObject) { return Invoke<NamedActorManager>(nameof(GetInstance), WorldContextObject); }
        public void FindActorsByTags(Object WorldContextObject, Array<Object> Tags, Array<Actor> Actors) { Invoke(nameof(FindActorsByTags), WorldContextObject, Tags, Actors); }
        public Actor FindActorByName(Object WorldContextObject, Object NameID) { return Invoke<Actor>(nameof(FindActorByName), WorldContextObject, NameID); }
        public void AddActor(Object NameID, Actor Actor) { Invoke(nameof(AddActor), NameID, Actor); }
    }
    public class NavDirtyBlockerComponent : SceneComponent
    {
        public NavDirtyBlockerComponent(nint addr) : base(addr) { }
        public Vector Extent { get { return this[nameof(Extent)].As<Vector>(); } set { this["Extent"] = value; } }
        public void UnblockDirty(bool DirtyNav) { Invoke(nameof(UnblockDirty), DirtyNav); }
        public void BlockDirty() { Invoke(nameof(BlockDirty)); }
    }
    public class NavLinkGunfireComponent : NavLinkCustomComponent
    {
        public NavLinkGunfireComponent(nint addr) : base(addr) { }
        public Actor EndpointActor { get { return this[nameof(EndpointActor)].As<Actor>(); } set { this["EndpointActor"] = value; } }
        public void SetLinkEnabledArea(Object AreaClass) { Invoke(nameof(SetLinkEnabledArea), AreaClass); }
        public void SetLinkEnabled(bool bEnabled) { Invoke(nameof(SetLinkEnabled), bEnabled); }
        public void SetLinkDisableArea(Object AreaClass) { Invoke(nameof(SetLinkDisableArea), AreaClass); }
        public bool IsLinkEnabled() { return Invoke<bool>(nameof(IsLinkEnabled)); }
        public Object GetLinkEnabledArea() { return Invoke<Object>(nameof(GetLinkEnabledArea)); }
        public Object GetLinkDisabledArea() { return Invoke<Object>(nameof(GetLinkDisabledArea)); }
    }
    public class NavModifierGunfireComponent : SceneComponent
    {
        public NavModifierGunfireComponent(nint addr) : base(addr) { }
        public Object EnabledAreaClass { get { return this[nameof(EnabledAreaClass)]; } set { this[nameof(EnabledAreaClass)] = value; } }
        public Object DisabledAreaClass { get { return this[nameof(DisabledAreaClass)]; } set { this[nameof(DisabledAreaClass)] = value; } }
        public ENavModifierGunfireShape Shape { get { return (ENavModifierGunfireShape)this[nameof(Shape)].GetValue<int>(); } set { this[nameof(Shape)].SetValue<int>((int)value); } }
        public Vector BoxExtent { get { return this[nameof(BoxExtent)].As<Vector>(); } set { this["BoxExtent"] = value; } }
        public float CylinderRadius { get { return this[nameof(CylinderRadius)].GetValue<float>(); } set { this[nameof(CylinderRadius)].SetValue<float>(value); } }
        public float CylinderHeight { get { return this[nameof(CylinderHeight)].GetValue<float>(); } set { this[nameof(CylinderHeight)].SetValue<float>(value); } }
        public bool IsEnabled { get { return this[nameof(IsEnabled)].Flag; } set { this[nameof(IsEnabled)].Flag = value; } }
        public void SetState(bool Enabled) { Invoke(nameof(SetState), Enabled); }
    }
    public class NPCHeadTrackingComponent : ActorComponent
    {
        public NPCHeadTrackingComponent(nint addr) : base(addr) { }
        public ETrackingMode TrackingMode { get { return (ETrackingMode)this[nameof(TrackingMode)].GetValue<int>(); } set { this[nameof(TrackingMode)].SetValue<int>((int)value); } }
        public Object ReferenceNode { get { return this[nameof(ReferenceNode)]; } set { this[nameof(ReferenceNode)] = value; } }
        public bool bUseNodeRotation { get { return this[nameof(bUseNodeRotation)].Flag; } set { this[nameof(bUseNodeRotation)].Flag = value; } }
        public float MinYaw { get { return this[nameof(MinYaw)].GetValue<float>(); } set { this[nameof(MinYaw)].SetValue<float>(value); } }
        public float MaxYaw { get { return this[nameof(MaxYaw)].GetValue<float>(); } set { this[nameof(MaxYaw)].SetValue<float>(value); } }
        public float MinPitch { get { return this[nameof(MinPitch)].GetValue<float>(); } set { this[nameof(MinPitch)].SetValue<float>(value); } }
        public float MaxPitch { get { return this[nameof(MaxPitch)].GetValue<float>(); } set { this[nameof(MaxPitch)].SetValue<float>(value); } }
        public float InterpSpeed { get { return this[nameof(InterpSpeed)].GetValue<float>(); } set { this[nameof(InterpSpeed)].SetValue<float>(value); } }
        public Array<Object> NoTrackAnimTags { get { return new Array<Object>(this[nameof(NoTrackAnimTags)].Address); } }
        public bool bConsiderCharacterTarget { get { return this[nameof(bConsiderCharacterTarget)].Flag; } set { this[nameof(bConsiderCharacterTarget)].Flag = value; } }
        public int CharacterTargetPriority { get { return this[nameof(CharacterTargetPriority)].GetValue<int>(); } set { this[nameof(CharacterTargetPriority)].SetValue<int>(value); } }
        public bool bIgnoreViewpointYaw { get { return this[nameof(bIgnoreViewpointYaw)].Flag; } set { this[nameof(bIgnoreViewpointYaw)].Flag = value; } }
        public bool bIgnoreViewpointPitch { get { return this[nameof(bIgnoreViewpointPitch)].Flag; } set { this[nameof(bIgnoreViewpointPitch)].Flag = value; } }
        public Array<LookTarget> Targets { get { return new Array<LookTarget>(this[nameof(Targets)].Address); } }
        public void SetTrackingMode(ETrackingMode NewMode) { Invoke(nameof(SetTrackingMode), NewMode); }
        public void ResetLookTargets() { Invoke(nameof(ResetLookTargets)); }
        public void ResetLookRotation() { Invoke(nameof(ResetLookRotation)); }
        public void RemoveLookTarget(Actor LookTarget) { Invoke(nameof(RemoveLookTarget), LookTarget); }
        public void RemoveActorLookTarget(Actor Actor, Actor LookTarget) { Invoke(nameof(RemoveActorLookTarget), Actor, LookTarget); }
        public void AddLookTarget(Actor LookTarget, int Priority, Object Node, ELookTargetType Type) { Invoke(nameof(AddLookTarget), LookTarget, Priority, Node, Type); }
        public void AddActorLookTarget(Actor Actor, Actor LookTarget, int Priority, Object Node, ELookTargetType Type) { Invoke(nameof(AddActorLookTarget), Actor, LookTarget, Priority, Node, Type); }
    }
    public class PhysicsTweenComponent : ActorComponent
    {
        public PhysicsTweenComponent(nint addr) : base(addr) { }
        public Object OnTweenFinished { get { return this[nameof(OnTweenFinished)]; } set { this[nameof(OnTweenFinished)] = value; } }
        public Object OnTweenFailed { get { return this[nameof(OnTweenFailed)]; } set { this[nameof(OnTweenFailed)] = value; } }
        public bool StopTweenAndInvalidateHandle(int TweenID) { return Invoke<bool>(nameof(StopTweenAndInvalidateHandle), TweenID); }
        public bool StopTween(int TweenID) { return Invoke<bool>(nameof(StopTween), TweenID); }
        public int StopComponent(PrimitiveComponent Primitive, PhysicsTweenParameters Parameters, float VelocityTolerance) { return Invoke<int>(nameof(StopComponent), Primitive, Parameters, VelocityTolerance); }
        public bool StopAllTweens() { return Invoke<bool>(nameof(StopAllTweens)); }
        public void SetTweenIntensity(int TweenID, float Intensity) { Invoke(nameof(SetTweenIntensity), TweenID, Intensity); }
        public int MoveComponent(PrimitiveComponent Primitive, Transform TargetTransform, PhysicsTweenParameters Parameter, float DistanceTolerance, SceneComponent TargetComponent, Object SocketName) { return Invoke<int>(nameof(MoveComponent), Primitive, TargetTransform, Parameter, DistanceTolerance, TargetComponent, SocketName); }
        public bool IsTweenFinished(int TweenID) { return Invoke<bool>(nameof(IsTweenFinished), TweenID); }
        public void InvalidateHandle(int TweenHandle) { Invoke(nameof(InvalidateHandle), TweenHandle); }
        public float GetTweenIntensity(int TweenID) { return Invoke<float>(nameof(GetTweenIntensity), TweenID); }
        public int DragComponent(PrimitiveComponent Primitive, SceneComponent PullOrigin, SceneComponent PullSource, FloatRange Range, PhysicsTweenParameters Parameters) { return Invoke<int>(nameof(DragComponent), Primitive, PullOrigin, PullSource, Range, Parameters); }
        public int BlendOutPhysics(SkeletalMeshComponent Mesh, float BlendTime) { return Invoke<int>(nameof(BlendOutPhysics), Mesh, BlendTime); }
        public int AttachComponents(PrimitiveComponent Primitive, SceneComponent AttachComponent, Transform AttachTransform, PhysicsConstraintComponent Constraint, bool bSimulatePhysics, Object SocketName, float AttachTime, EEaseType Ease, float EaseExponent, bool bOverridePivotLocation, Vector PivotOverride) { return Invoke<int>(nameof(AttachComponents), Primitive, AttachComponent, AttachTransform, Constraint, bSimulatePhysics, SocketName, AttachTime, Ease, EaseExponent, bOverridePivotLocation, PivotOverride); }
    }
    public class PlacementHelperComponent : ActorComponent
    {
        public PlacementHelperComponent(nint addr) : base(addr) { }
        public Object AlignNode { get { return this[nameof(AlignNode)]; } set { this[nameof(AlignNode)] = value; } }
        public float AlignTolerance { get { return this[nameof(AlignTolerance)].GetValue<float>(); } set { this[nameof(AlignTolerance)].SetValue<float>(value); } }
        public float AlignRadius { get { return this[nameof(AlignRadius)].GetValue<float>(); } set { this[nameof(AlignRadius)].SetValue<float>(value); } }
        public float DesiredHeight { get { return this[nameof(DesiredHeight)].GetValue<float>(); } set { this[nameof(DesiredHeight)].SetValue<float>(value); } }
        public bool bUpdateOnLevelLoad { get { return this[nameof(bUpdateOnLevelLoad)].Flag; } set { this[nameof(bUpdateOnLevelLoad)].Flag = value; } }
        public void OnPostEditMove(bool bFinished) { Invoke(nameof(OnPostEditMove), bFinished); }
    }
    public class PossessableComponent : ActorComponent
    {
        public PossessableComponent(nint addr) : base(addr) { }
    }
    public class PostProcessSkylightComponent : PostProcessComponent
    {
        public PostProcessSkylightComponent(nint addr) : base(addr) { }
        public Object SkyLightActorCls { get { return this[nameof(SkyLightActorCls)]; } set { this[nameof(SkyLightActorCls)] = value; } }
        public SkyLightComponent SkyLight { get { return this[nameof(SkyLight)].As<SkyLightComponent>(); } set { this["SkyLight"] = value; } }
        public SkyLightComponent GetCurrentSkylight() { return Invoke<SkyLightComponent>(nameof(GetCurrentSkylight)); }
    }
    public class ProjectileMovementComponentGunfire : ProjectileMovementComponent
    {
        public ProjectileMovementComponentGunfire(nint addr) : base(addr) { }
        public bool Penetrate { get { return this[nameof(Penetrate)].Flag; } set { this[nameof(Penetrate)].Flag = value; } }
        public float AntiPenetrateSpeed { get { return this[nameof(AntiPenetrateSpeed)].GetValue<float>(); } set { this[nameof(AntiPenetrateSpeed)].SetValue<float>(value); } }
        public bool bMaintainInitialRelativeRotation { get { return this[nameof(bMaintainInitialRelativeRotation)].Flag; } set { this[nameof(bMaintainInitialRelativeRotation)].Flag = value; } }
        public Object OnProjectileHit { get { return this[nameof(OnProjectileHit)]; } set { this[nameof(OnProjectileHit)] = value; } }
        public bool bApplyPostBounceGravityScale { get { return this[nameof(bApplyPostBounceGravityScale)].Flag; } set { this[nameof(bApplyPostBounceGravityScale)].Flag = value; } }
        public float PostBounceGravityScale { get { return this[nameof(PostBounceGravityScale)].GetValue<float>(); } set { this[nameof(PostBounceGravityScale)].SetValue<float>(value); } }
        public float BounceNormalAlignmentAlpha { get { return this[nameof(BounceNormalAlignmentAlpha)].GetValue<float>(); } set { this[nameof(BounceNormalAlignmentAlpha)].SetValue<float>(value); } }
        public float NormalAlignmentUpwardsCosineThresh { get { return this[nameof(NormalAlignmentUpwardsCosineThresh)].GetValue<float>(); } set { this[nameof(NormalAlignmentUpwardsCosineThresh)].SetValue<float>(value); } }
        public float UpwardsBounceNormalAlignmentAlpha { get { return this[nameof(UpwardsBounceNormalAlignmentAlpha)].GetValue<float>(); } set { this[nameof(UpwardsBounceNormalAlignmentAlpha)].SetValue<float>(value); } }
        public bool bApplyPostBounceVelocityClamp { get { return this[nameof(bApplyPostBounceVelocityClamp)].Flag; } set { this[nameof(bApplyPostBounceVelocityClamp)].Flag = value; } }
        public Vector2D PostBounceMinMaxVelocity { get { return this[nameof(PostBounceMinMaxVelocity)].As<Vector2D>(); } set { this["PostBounceMinMaxVelocity"] = value; } }
        public Array<byte> QueryOnlyBlockingChannels { get { return new Array<byte>(this[nameof(QueryOnlyBlockingChannels)].Address); } }
        public Vector SimulateBounce(Vector CurrentVelocity, HitResult Hit, float OutGravityScale) { return Invoke<Vector>(nameof(SimulateBounce), CurrentVelocity, Hit, OutGravityScale); }
        public bool ShouldIgnoreNextPenetrate() { return Invoke<bool>(nameof(ShouldIgnoreNextPenetrate)); }
        public void SetPenetrate(bool bShouldPenetrate) { Invoke(nameof(SetPenetrate), bShouldPenetrate); }
        public void SetMaintainCurrentRelativeRotation() { Invoke(nameof(SetMaintainCurrentRelativeRotation)); }
        public void SetIgnoreNextPenetrate(bool bShouldIgnore) { Invoke(nameof(SetIgnoreNextPenetrate), bShouldIgnore); }
    }
    public class PushComponent : ActorComponent
    {
        public PushComponent(nint addr) : base(addr) { }
        public Object CancelPushInput { get { return this[nameof(CancelPushInput)]; } set { this[nameof(CancelPushInput)] = value; } }
        public Object AlternateMovementModeInput { get { return this[nameof(AlternateMovementModeInput)]; } set { this[nameof(AlternateMovementModeInput)] = value; } }
        public bool bAlternateMovementModeRequiresHold { get { return this[nameof(bAlternateMovementModeRequiresHold)].Flag; } set { this[nameof(bAlternateMovementModeRequiresHold)].Flag = value; } }
        public float ClientDistanceTolerance { get { return this[nameof(ClientDistanceTolerance)].GetValue<float>(); } set { this[nameof(ClientDistanceTolerance)].SetValue<float>(value); } }
        public float ClientRotationTolerance { get { return this[nameof(ClientRotationTolerance)].GetValue<float>(); } set { this[nameof(ClientRotationTolerance)].SetValue<float>(value); } }
        public float ClientRotationSpeed { get { return this[nameof(ClientRotationSpeed)].GetValue<float>(); } set { this[nameof(ClientRotationSpeed)].SetValue<float>(value); } }
        public float ExitSmoothTime { get { return this[nameof(ExitSmoothTime)].GetValue<float>(); } set { this[nameof(ExitSmoothTime)].SetValue<float>(value); } }
        public Object OnPushActor { get { return this[nameof(OnPushActor)]; } set { this[nameof(OnPushActor)] = value; } }
        public Actor ActorBeingPushed { get { return this[nameof(ActorBeingPushed)].As<Actor>(); } set { this["ActorBeingPushed"] = value; } }
        public PushState CurrentPushState { get { return this[nameof(CurrentPushState)].As<PushState>(); } set { this["CurrentPushState"] = value; } }
        public Vector_NetQuantizeNormal PlayerFacing { get { return this[nameof(PlayerFacing)].As<Vector_NetQuantizeNormal>(); } set { this["PlayerFacing"] = value; } }
        public void ServerStreamClientInput(Vector_NetQuantizeNormal Input, Vector_NetQuantizeNormal Facing, bool bMovementMode) { Invoke(nameof(ServerStreamClientInput), Input, Facing, bMovementMode); }
        public void ServerCancelPushInput() { Invoke(nameof(ServerCancelPushInput)); }
        public void OnCancelPushInput(Object ButtonName, ButtonEvent Event) { Invoke(nameof(OnCancelPushInput), ButtonName, Event); }
        public void OnAlternateMovementModeInput(Object ButtonName, ButtonEvent Event) { Invoke(nameof(OnAlternateMovementModeInput), ButtonName, Event); }
        public bool IsPushingActor() { return Invoke<bool>(nameof(IsPushingActor)); }
        public bool IsInAlternateMovementMode() { return Invoke<bool>(nameof(IsInAlternateMovementMode)); }
        public bool HasPendingCancelPush() { return Invoke<bool>(nameof(HasPendingCancelPush)); }
        public Actor GetActorBeingPushed() { return Invoke<Actor>(nameof(GetActorBeingPushed)); }
    }
    public class IsPushingCondition : Condition
    {
        public IsPushingCondition(nint addr) : base(addr) { }
        public bool bValidateState { get { return this[nameof(bValidateState)].Flag; } set { this[nameof(bValidateState)].Flag = value; } }
        public Array<EPushState> ValidStates { get { return new Array<EPushState>(this[nameof(ValidStates)].Address); } }
        public bool bValidateMoveInput { get { return this[nameof(bValidateMoveInput)].Flag; } set { this[nameof(bValidateMoveInput)].Flag = value; } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float MoveInput { get { return this[nameof(MoveInput)].GetValue<float>(); } set { this[nameof(MoveInput)].SetValue<float>(value); } }
        public EYesNo AlternateMovementMode { get { return (EYesNo)this[nameof(AlternateMovementMode)].GetValue<int>(); } set { this[nameof(AlternateMovementMode)].SetValue<int>((int)value); } }
    }
    public class ReceptacleComponent : ActorComponent
    {
        public ReceptacleComponent(nint addr) : base(addr) { }
        public Array<ReceptacleSlot> Slots { get { return new Array<ReceptacleSlot>(this[nameof(Slots)].Address); } }
        public bool Blocked { get { return this[nameof(Blocked)].Flag; } set { this[nameof(Blocked)].Flag = value; } }
        public Object OnReceptacleChanged { get { return this[nameof(OnReceptacleChanged)]; } set { this[nameof(OnReceptacleChanged)] = value; } }
        public Object OnReceptacleFull { get { return this[nameof(OnReceptacleFull)]; } set { this[nameof(OnReceptacleFull)] = value; } }
        public Object OnReceptacleEmpty { get { return this[nameof(OnReceptacleEmpty)]; } set { this[nameof(OnReceptacleEmpty)] = value; } }
        public Object AfterItemAdded { get { return this[nameof(AfterItemAdded)]; } set { this[nameof(AfterItemAdded)] = value; } }
        public Object AfterItemRemoved { get { return this[nameof(AfterItemRemoved)]; } set { this[nameof(AfterItemRemoved)] = value; } }
        public void RequestReturnItemToInventory(CharacterGunfire Subject) { Invoke(nameof(RequestReturnItemToInventory), Subject); }
        public void RequestAddItemFromInventoryById(InventoryComponent Inventory, int ItemId) { Invoke(nameof(RequestAddItemFromInventoryById), Inventory, ItemId); }
        public void RequestAddItemFromInventoryByClass(InventoryComponent Inventory, Object ItemClass) { Invoke(nameof(RequestAddItemFromInventoryByClass), Inventory, ItemClass); }
        public void RequestAddItemFromInventory(CharacterGunfire Subject) { Invoke(nameof(RequestAddItemFromInventory), Subject); }
        public void RemoveItem(int SlotID) { Invoke(nameof(RemoveItem), SlotID); }
        public bool IsValid(Object ItemClass, ReceptacleSlot Slot) { return Invoke<bool>(nameof(IsValid), ItemClass, Slot); }
        public bool IsFull() { return Invoke<bool>(nameof(IsFull)); }
        public bool IsEmpty() { return Invoke<bool>(nameof(IsEmpty)); }
        public bool HasInteractableSlot() { return Invoke<bool>(nameof(HasInteractableSlot)); }
        public Array<ReceptacleSlot> GetSlots() { return Invoke<Array<ReceptacleSlot>>(nameof(GetSlots)); }
        public bool CanAddItemOfClass(Object ItemClass) { return Invoke<bool>(nameof(CanAddItemOfClass), ItemClass); }
        public void AddItem(int SlotID, Object ItemClass) { Invoke(nameof(AddItem), SlotID, ItemClass); }
    }
    public class ReplicatedMovementComponent : ActorComponent
    {
        public ReplicatedMovementComponent(nint addr) : base(addr) { }
        public ushort BufferTime { get { return this[nameof(BufferTime)].GetValue<ushort>(); } set { this[nameof(BufferTime)].SetValue<ushort>(value); } }
        public float DistanceTolerance { get { return this[nameof(DistanceTolerance)].GetValue<float>(); } set { this[nameof(DistanceTolerance)].SetValue<float>(value); } }
        public float RotationTolerance { get { return this[nameof(RotationTolerance)].GetValue<float>(); } set { this[nameof(RotationTolerance)].SetValue<float>(value); } }
        public bool bUseTeleportPhysics { get { return this[nameof(bUseTeleportPhysics)].Flag; } set { this[nameof(bUseTeleportPhysics)].Flag = value; } }
        public EReplicatedMovementRotationReplication RotationReplication { get { return (EReplicatedMovementRotationReplication)this[nameof(RotationReplication)].GetValue<int>(); } set { this[nameof(RotationReplication)].SetValue<int>((int)value); } }
        public float DefaultSmoothTime { get { return this[nameof(DefaultSmoothTime)].GetValue<float>(); } set { this[nameof(DefaultSmoothTime)].SetValue<float>(value); } }
        public float DefaultVelocitySmoothTime { get { return this[nameof(DefaultVelocitySmoothTime)].GetValue<float>(); } set { this[nameof(DefaultVelocitySmoothTime)].SetValue<float>(value); } }
        public float SpectatedVelocitySmoothTime { get { return this[nameof(SpectatedVelocitySmoothTime)].GetValue<float>(); } set { this[nameof(SpectatedVelocitySmoothTime)].SetValue<float>(value); } }
        public float SimulatedToleranceSmoothTime { get { return this[nameof(SimulatedToleranceSmoothTime)].GetValue<float>(); } set { this[nameof(SimulatedToleranceSmoothTime)].SetValue<float>(value); } }
        public float DetachSmoothTime { get { return this[nameof(DetachSmoothTime)].GetValue<float>(); } set { this[nameof(DetachSmoothTime)].SetValue<float>(value); } }
        public float SpectatedSmoothTime { get { return this[nameof(SpectatedSmoothTime)].GetValue<float>(); } set { this[nameof(SpectatedSmoothTime)].SetValue<float>(value); } }
        public float ExtrapolationSmoothTime { get { return this[nameof(ExtrapolationSmoothTime)].GetValue<float>(); } set { this[nameof(ExtrapolationSmoothTime)].SetValue<float>(value); } }
        public float ExtrapolationTeleportThresh { get { return this[nameof(ExtrapolationTeleportThresh)].GetValue<float>(); } set { this[nameof(ExtrapolationTeleportThresh)].SetValue<float>(value); } }
        public float RotationSmoothingRateScale { get { return this[nameof(RotationSmoothingRateScale)].GetValue<float>(); } set { this[nameof(RotationSmoothingRateScale)].SetValue<float>(value); } }
        public bool ExtrapolateFromSinglePointWithVelocity { get { return this[nameof(ExtrapolateFromSinglePointWithVelocity)].Flag; } set { this[nameof(ExtrapolateFromSinglePointWithVelocity)].Flag = value; } }
        public Vector_NetQuantize InitialVelocityForExtrapolation { get { return this[nameof(InitialVelocityForExtrapolation)].As<Vector_NetQuantize>(); } set { this["InitialVelocityForExtrapolation"] = value; } }
        public ReplicatedMovementInfo MovementInfo { get { return this[nameof(MovementInfo)].As<ReplicatedMovementInfo>(); } set { this["MovementInfo"] = value; } }
        public void ServerMoveUpdate(ReplicatedMovementInfo Info) { Invoke(nameof(ServerMoveUpdate), Info); }
        public void Reset() { Invoke(nameof(Reset)); }
        public void OnRep_MovementInfo() { Invoke(nameof(OnRep_MovementInfo)); }
        public void ClientAckMove(ushort MoveTime) { Invoke(nameof(ClientAckMove), MoveTime); }
    }
    public class RimComponent : ActorComponent
    {
        public RimComponent(nint addr) : base(addr) { }
        public LinearColor RimColor { get { return this[nameof(RimColor)].As<LinearColor>(); } set { this["RimColor"] = value; } }
        public float RimFadeStartDist { get { return this[nameof(RimFadeStartDist)].GetValue<float>(); } set { this[nameof(RimFadeStartDist)].SetValue<float>(value); } }
        public float RimFadeFullDist { get { return this[nameof(RimFadeFullDist)].GetValue<float>(); } set { this[nameof(RimFadeFullDist)].SetValue<float>(value); } }
        public float RimDistanceExp { get { return this[nameof(RimDistanceExp)].GetValue<float>(); } set { this[nameof(RimDistanceExp)].SetValue<float>(value); } }
        public Object RequiredTag { get { return this[nameof(RequiredTag)]; } set { this[nameof(RequiredTag)] = value; } }
        public bool bUsePerComponentShading { get { return this[nameof(bUsePerComponentShading)].Flag; } set { this[nameof(bUsePerComponentShading)].Flag = value; } }
        public Array<RimMaterial> RimMaterials { get { return new Array<RimMaterial>(this[nameof(RimMaterials)].Address); } }
        public void SetupRimMaterialsForMesh(MeshComponent Mesh) { Invoke(nameof(SetupRimMaterialsForMesh), Mesh); }
        public void SetRimColor(LinearColor InColor) { Invoke(nameof(SetRimColor), InColor); }
    }
    public class RopeComponent : ActorComponent
    {
        public RopeComponent(nint addr) : base(addr) { }
        public SkeletalMesh RopeMesh { get { return this[nameof(RopeMesh)].As<SkeletalMesh>(); } set { this["RopeMesh"] = value; } }
        public MaterialInterface MaterialOverride { get { return this[nameof(MaterialOverride)].As<MaterialInterface>(); } set { this["MaterialOverride"] = value; } }
        public Object CollisionProfile { get { return this[nameof(CollisionProfile)]; } set { this[nameof(CollisionProfile)] = value; } }
        public bool bEnableQueryCollision { get { return this[nameof(bEnableQueryCollision)].Flag; } set { this[nameof(bEnableQueryCollision)].Flag = value; } }
        public Vector RopeScale { get { return this[nameof(RopeScale)].As<Vector>(); } set { this["RopeScale"] = value; } }
        public PhysicsAsset PhysicsAssetOverride { get { return this[nameof(PhysicsAssetOverride)].As<PhysicsAsset>(); } set { this["PhysicsAssetOverride"] = value; } }
        public bool bUseManualBoneList { get { return this[nameof(bUseManualBoneList)].Flag; } set { this[nameof(bUseManualBoneList)].Flag = value; } }
        public Array<Object> Bones { get { return new Array<Object>(this[nameof(Bones)].Address); } }
        public bool bUseDynamicLength { get { return this[nameof(bUseDynamicLength)].Flag; } set { this[nameof(bUseDynamicLength)].Flag = value; } }
        public Array<RopeAttachPoint> AttachPoints { get { return new Array<RopeAttachPoint>(this[nameof(AttachPoints)].Address); } }
        public float MassScale { get { return this[nameof(MassScale)].GetValue<float>(); } set { this[nameof(MassScale)].SetValue<float>(value); } }
        public float ProjectionLinearTolerance { get { return this[nameof(ProjectionLinearTolerance)].GetValue<float>(); } set { this[nameof(ProjectionLinearTolerance)].SetValue<float>(value); } }
        public float ProjectionAngularTolerance { get { return this[nameof(ProjectionAngularTolerance)].GetValue<float>(); } set { this[nameof(ProjectionAngularTolerance)].SetValue<float>(value); } }
        public float Swing1AngleLimit { get { return this[nameof(Swing1AngleLimit)].GetValue<float>(); } set { this[nameof(Swing1AngleLimit)].SetValue<float>(value); } }
        public float Swing2AngleLimit { get { return this[nameof(Swing2AngleLimit)].GetValue<float>(); } set { this[nameof(Swing2AngleLimit)].SetValue<float>(value); } }
        public float TwistAngleLimit { get { return this[nameof(TwistAngleLimit)].GetValue<float>(); } set { this[nameof(TwistAngleLimit)].SetValue<float>(value); } }
        public float ConstraintAngularMotorStrength { get { return this[nameof(ConstraintAngularMotorStrength)].GetValue<float>(); } set { this[nameof(ConstraintAngularMotorStrength)].SetValue<float>(value); } }
        public float MaximumLinearDamping { get { return this[nameof(MaximumLinearDamping)].GetValue<float>(); } set { this[nameof(MaximumLinearDamping)].SetValue<float>(value); } }
        public float MaximumAngularDamping { get { return this[nameof(MaximumAngularDamping)].GetValue<float>(); } set { this[nameof(MaximumAngularDamping)].SetValue<float>(value); } }
        public Vector2D DilatencyForceRange { get { return this[nameof(DilatencyForceRange)].As<Vector2D>(); } set { this["DilatencyForceRange"] = value; } }
        public Array<SkeletalMeshComponent> CachedMeshes { get { return new Array<SkeletalMeshComponent>(this[nameof(CachedMeshes)].Address); } }
        public Array<PhysicsConstraintComponent> CachedConstraints { get { return new Array<PhysicsConstraintComponent>(this[nameof(CachedConstraints)].Address); } }
        public Array<SkeletalMeshComponent> HiddenMeshes { get { return new Array<SkeletalMeshComponent>(this[nameof(HiddenMeshes)].Address); } }
        public Array<RopeSegmentComponents> RopeSegments { get { return new Array<RopeSegmentComponents>(this[nameof(RopeSegments)].Address); } }
        public void UpdateSegmentLengths(int StartingIndex, float DeltaTime) { Invoke(nameof(UpdateSegmentLengths), StartingIndex, DeltaTime); }
        public void UpdateRope() { Invoke(nameof(UpdateRope)); }
        public void SetUseDynamicLength(bool bDynamic) { Invoke(nameof(SetUseDynamicLength), bDynamic); }
        public void SetSlackForSegment(int Index, float Slack, float Speed, bool bUpdateSegmentLengths) { Invoke(nameof(SetSlackForSegment), Index, Slack, Speed, bUpdateSegmentLengths); }
        public void SetRopeDamping(float LinearDamping, float AngularDamping) { Invoke(nameof(SetRopeDamping), LinearDamping, AngularDamping); }
        public void SetMaterial(MaterialInterface NewMaterial) { Invoke(nameof(SetMaterial), NewMaterial); }
        public void SetLengthSpeedForSegment(int Index, float NewSpeed) { Invoke(nameof(SetLengthSpeedForSegment), Index, NewSpeed); }
        public void SetLengthForSegment(int Index, float Length, bool bInstant, bool bUpdateSegmentLengths) { Invoke(nameof(SetLengthForSegment), Index, Length, bInstant, bUpdateSegmentLengths); }
        public void SetDynamicLengthThresholdForSegment(int Index, float NewThreshhold) { Invoke(nameof(SetDynamicLengthThresholdForSegment), Index, NewThreshhold); }
        public void SetAutoOrientInitialBone(int Index, bool bAutoOrient) { Invoke(nameof(SetAutoOrientInitialBone), Index, bAutoOrient); }
        public bool SetAttachPoint(int Index, RopeAttachPoint AttachPoint, bool bUpdateRope) { return Invoke<bool>(nameof(SetAttachPoint), Index, AttachPoint, bUpdateRope); }
        public void SetAngleLimits(float Swing1, float Swing2, float Twist) { Invoke(nameof(SetAngleLimits), Swing1, Swing2, Twist); }
        public bool RemoveAttachPointAtIndex(int Index, bool bUpdateRope) { return Invoke<bool>(nameof(RemoveAttachPointAtIndex), Index, bUpdateRope); }
        public float GetTotalRopeLength() { return Invoke<float>(nameof(GetTotalRopeLength)); }
        public Transform GetRopeReferenceBoneTransform(Object BoneName) { return Invoke<Transform>(nameof(GetRopeReferenceBoneTransform), BoneName); }
        public int GetNumberOfAttachPoints() { return Invoke<int>(nameof(GetNumberOfAttachPoints)); }
        public int GetNumActiveBones() { return Invoke<int>(nameof(GetNumActiveBones)); }
        public float GetDistanceBetweenBones() { return Invoke<float>(nameof(GetDistanceBetweenBones)); }
        public byte GetCollisionResponseToChannel(byte Channel) { return Invoke<byte>(nameof(GetCollisionResponseToChannel), Channel); }
        public byte GetCollisionObjectType() { return Invoke<byte>(nameof(GetCollisionObjectType)); }
        public SkeletalMeshComponent GetBoneAtIndex(int Index, Object OutBoneName) { return Invoke<SkeletalMeshComponent>(nameof(GetBoneAtIndex), Index, OutBoneName); }
        public SkeletalMeshComponent GetBoneAtDistanceAlongRope(float Distance, int StartingIndex, Object OutBoneName, float OutDistance) { return Invoke<SkeletalMeshComponent>(nameof(GetBoneAtDistanceAlongRope), Distance, StartingIndex, OutBoneName, OutDistance); }
        public RopeAttachPoint GetAttachPointAtIndex(int Index) { return Invoke<RopeAttachPoint>(nameof(GetAttachPointAtIndex), Index); }
        public void ClearAttachPoints(bool bUpdateRope) { Invoke(nameof(ClearAttachPoints), bUpdateRope); }
        public float CalculateStress(int StartingIndex, int EndingIndex) { return Invoke<float>(nameof(CalculateStress), StartingIndex, EndingIndex); }
        public float CalculateMaxDiscontinuity(int StartingIndex, int EndingIndex) { return Invoke<float>(nameof(CalculateMaxDiscontinuity), StartingIndex, EndingIndex); }
        public void AddImpulseToSegment(int Index, Vector Force, bool bVelChange, bool bIgnoreMass) { Invoke(nameof(AddImpulseToSegment), Index, Force, bVelChange, bIgnoreMass); }
        public bool AddAttachPoint(RopeAttachPoint AttachPoint, bool bUpdateRope) { return Invoke<bool>(nameof(AddAttachPoint), AttachPoint, bUpdateRope); }
    }
    public class RotatorComponent : SceneComponent
    {
        public RotatorComponent(nint addr) : base(addr) { }
        public bool AutoStart { get { return this[nameof(AutoStart)].Flag; } set { this[nameof(AutoStart)].Flag = value; } }
        public Rotator RotationRate { get { return this[nameof(RotationRate)].As<Rotator>(); } set { this["RotationRate"] = value; } }
        public float SmoothTime { get { return this[nameof(SmoothTime)].GetValue<float>(); } set { this[nameof(SmoothTime)].SetValue<float>(value); } }
        public void Stop(float Smooth) { Invoke(nameof(Stop), Smooth); }
        public void Play(float Smooth) { Invoke(nameof(Play), Smooth); }
    }
    public class SilhouetteManager : ActorComponent
    {
        public SilhouetteManager(nint addr) : base(addr) { }
        public Array<SilhouetteComponent> SilhouetteComponents { get { return new Array<SilhouetteComponent>(this[nameof(SilhouetteComponents)].Address); } }
    }
    public class SnapToGroundComponent : SceneComponent
    {
        public SnapToGroundComponent(nint addr) : base(addr) { }
        public bool SnappingEnabled { get { return this[nameof(SnappingEnabled)].Flag; } set { this[nameof(SnappingEnabled)].Flag = value; } }
        public float VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<float>(); } set { this[nameof(VerticalOffset)].SetValue<float>(value); } }
        public float CastDistance { get { return this[nameof(CastDistance)].GetValue<float>(); } set { this[nameof(CastDistance)].SetValue<float>(value); } }
        public bool OrientToGround { get { return this[nameof(OrientToGround)].Flag; } set { this[nameof(OrientToGround)].Flag = value; } }
    }
    public class SoftCollisionBoxComponent : BoxComponent
    {
        public SoftCollisionBoxComponent(nint addr) : base(addr) { }
        public float SoftCharacterCollisionWeight { get { return this[nameof(SoftCharacterCollisionWeight)].GetValue<float>(); } set { this[nameof(SoftCharacterCollisionWeight)].SetValue<float>(value); } }
        public Array<Actor> IgnoreActors { get { return new Array<Actor>(this[nameof(IgnoreActors)].Address); } }
        public bool ShouldIgnoreActor(Actor Actor) { return Invoke<bool>(nameof(ShouldIgnoreActor), Actor); }
        public void SetShouldIgnoreActor(Actor Actor, bool bShouldIgnore) { Invoke(nameof(SetShouldIgnoreActor), Actor, bShouldIgnore); }
        public void SetEnabled(bool bIsEnabled) { Invoke(nameof(SetEnabled), bIsEnabled); }
    }
    public class SoftCollisionCapsuleComponent : CapsuleComponent
    {
        public SoftCollisionCapsuleComponent(nint addr) : base(addr) { }
        public float SoftCharacterCollisionWeight { get { return this[nameof(SoftCharacterCollisionWeight)].GetValue<float>(); } set { this[nameof(SoftCharacterCollisionWeight)].SetValue<float>(value); } }
        public Array<Actor> IgnoreActors { get { return new Array<Actor>(this[nameof(IgnoreActors)].Address); } }
        public bool ShouldIgnoreActor(Actor Actor) { return Invoke<bool>(nameof(ShouldIgnoreActor), Actor); }
        public void SetShouldIgnoreActor(Actor Actor, bool bShouldIgnore) { Invoke(nameof(SetShouldIgnoreActor), Actor, bShouldIgnore); }
        public void SetEnabled(bool bIsEnabled) { Invoke(nameof(SetEnabled), bIsEnabled); }
        public bool IsEnabled() { return Invoke<bool>(nameof(IsEnabled)); }
    }
    public class SplineFollowingComponent : ActorComponent
    {
        public SplineFollowingComponent(nint addr) : base(addr) { }
        public float MovementSpeed { get { return this[nameof(MovementSpeed)].GetValue<float>(); } set { this[nameof(MovementSpeed)].SetValue<float>(value); } }
        public byte MovementDirection { get { return this[nameof(MovementDirection)].GetValue<byte>(); } set { this[nameof(MovementDirection)].SetValue<byte>(value); } }
        public byte AttachType { get { return this[nameof(AttachType)].GetValue<byte>(); } set { this[nameof(AttachType)].SetValue<byte>(value); } }
        public bool bPingPong { get { return this[nameof(bPingPong)].Flag; } set { this[nameof(bPingPong)].Flag = value; } }
        public bool bIsPaused { get { return this[nameof(bIsPaused)].Flag; } set { this[nameof(bIsPaused)].Flag = value; } }
        public float ReplicationSmoothTime { get { return this[nameof(ReplicationSmoothTime)].GetValue<float>(); } set { this[nameof(ReplicationSmoothTime)].SetValue<float>(value); } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Vector RelativeLocationOffset { get { return this[nameof(RelativeLocationOffset)].As<Vector>(); } set { this["RelativeLocationOffset"] = value; } }
        public Quat RotationOffset { get { return this[nameof(RotationOffset)].As<Quat>(); } set { this["RotationOffset"] = value; } }
        public SplineEaseParameters EaseInParams { get { return this[nameof(EaseInParams)].As<SplineEaseParameters>(); } set { this["EaseInParams"] = value; } }
        public SplineEaseParameters EaseOutParams { get { return this[nameof(EaseOutParams)].As<SplineEaseParameters>(); } set { this["EaseOutParams"] = value; } }
        public Object OnSplineFollowComplete { get { return this[nameof(OnSplineFollowComplete)]; } set { this[nameof(OnSplineFollowComplete)] = value; } }
        public void SetSpline(SplineComponent Spline, byte Location, float CustomTime) { Invoke(nameof(SetSpline), Spline, Location, CustomTime); }
        public void SetRotationOffsetFromRotator(Rotator NewRotation) { Invoke(nameof(SetRotationOffsetFromRotator), NewRotation); }
        public Transform GetTransformAtTime(float Time) { return Invoke<Transform>(nameof(GetTransformAtTime), Time); }
        public SplineComponent GetSpline() { return Invoke<SplineComponent>(nameof(GetSpline)); }
        public float GetCurrentSplineTime() { return Invoke<float>(nameof(GetCurrentSplineTime)); }
    }
    public class SubtitleInstance : Object
    {
        public SubtitleInstance(nint addr) : base(addr) { }
        public SubtitlesComponent Component { get { return this[nameof(Component)].As<SubtitlesComponent>(); } set { this["Component"] = value; } }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Actor Source { get { return this[nameof(Source)].As<Actor>(); } set { this["Source"] = value; } }
        public ActorComponent SourceComponent { get { return this[nameof(SourceComponent)].As<ActorComponent>(); } set { this["SourceComponent"] = value; } }
        public SoftSoundGunfire Audio { get { return this[nameof(Audio)].As<SoftSoundGunfire>(); } set { this["Audio"] = value; } }
        public GunfireAudioPlayParams AudioPlayParams { get { return this[nameof(AudioPlayParams)].As<GunfireAudioPlayParams>(); } set { this["AudioPlayParams"] = value; } }
        public GunfireAudioAttachParams AudioAttachParams { get { return this[nameof(AudioAttachParams)].As<GunfireAudioAttachParams>(); } set { this["AudioAttachParams"] = value; } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
        public AnimationHandle FacialAdditiveHandle { get { return this[nameof(FacialAdditiveHandle)].As<AnimationHandle>(); } set { this["FacialAdditiveHandle"] = value; } }
        public Array<AnimationHandle> FacialAdditiveHandles { get { return new Array<AnimationHandle>(this[nameof(FacialAdditiveHandles)].Address); } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Speaker { get { return this[nameof(Speaker)]; } set { this[nameof(Speaker)] = value; } }
        public TimerHandle TimerHandle { get { return this[nameof(TimerHandle)].As<TimerHandle>(); } set { this["TimerHandle"] = value; } }
        public bool AutoRemoveSubtitle { get { return this[nameof(AutoRemoveSubtitle)].Flag; } set { this[nameof(AutoRemoveSubtitle)].Flag = value; } }
        public bool AutoRemoveEmote { get { return this[nameof(AutoRemoveEmote)].Flag; } set { this[nameof(AutoRemoveEmote)].Flag = value; } }
        public AudioComponentGunfire AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponentGunfire>(); } set { this["AudioComponent"] = value; } }
        public bool Added { get { return this[nameof(Added)].Flag; } set { this[nameof(Added)].Flag = value; } }
        public bool Completed { get { return this[nameof(Completed)].Flag; } set { this[nameof(Completed)].Flag = value; } }
        public Object OnComplete { get { return this[nameof(OnComplete)]; } set { this[nameof(OnComplete)] = value; } }
        public void OnSourceActorDestroyed(Actor DestroyedActor) { Invoke(nameof(OnSourceActorDestroyed), DestroyedActor); }
        public void OnAudioComponentFinished(GunfireAudioPlayingID PlayingID, int ErrorCode) { Invoke(nameof(OnAudioComponentFinished), PlayingID, ErrorCode); }
        public void CompleteAndRemove() { Invoke(nameof(CompleteAndRemove)); }
    }
    public class EmoteInstance : Object
    {
        public EmoteInstance(nint addr) : base(addr) { }
        public SubtitlesComponent Component { get { return this[nameof(Component)].As<SubtitlesComponent>(); } set { this["Component"] = value; } }
        public Actor Source { get { return this[nameof(Source)].As<Actor>(); } set { this["Source"] = value; } }
        public ActorComponent DialogSourceComponent { get { return this[nameof(DialogSourceComponent)].As<ActorComponent>(); } set { this["DialogSourceComponent"] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public void CompleteAndRemove() { Invoke(nameof(CompleteAndRemove)); }
    }
    public class SubtitlesComponent : ActorComponent
    {
        public SubtitlesComponent(nint addr) : base(addr) { }
        public Object DefaultAudioAttachSocket { get { return this[nameof(DefaultAudioAttachSocket)]; } set { this[nameof(DefaultAudioAttachSocket)] = value; } }
        public Object OnAddSubtitle { get { return this[nameof(OnAddSubtitle)]; } set { this[nameof(OnAddSubtitle)] = value; } }
        public Object OnRemoveSubtitle { get { return this[nameof(OnRemoveSubtitle)]; } set { this[nameof(OnRemoveSubtitle)] = value; } }
        public Array<SubtitleInstance> Subtitles { get { return new Array<SubtitleInstance>(this[nameof(Subtitles)].Address); } }
        public Object EmoteInstances { get { return this[nameof(EmoteInstances)]; } set { this[nameof(EmoteInstances)] = value; } }
        public void ServerRemoveSubtitle(int ID) { Invoke(nameof(ServerRemoveSubtitle), ID); }
        public void ServerRemoveEmote(Actor Source) { Invoke(nameof(ServerRemoveEmote), Source); }
        public void RemoveSubtitle(int ID) { Invoke(nameof(RemoveSubtitle), ID); }
        public void RemoveEmoteInstance(Actor Source) { Invoke(nameof(RemoveEmoteInstance), Source); }
        public void ClientRemoveSubtitle(int ID) { Invoke(nameof(ClientRemoveSubtitle), ID); }
        public void ClientRemoveEmote(Actor Source) { Invoke(nameof(ClientRemoveEmote), Source); }
        public void ClientAddSubtitle(SubtitleInfo Info) { Invoke(nameof(ClientAddSubtitle), Info); }
        public void ClientAddEmote(Actor Source, ActorComponent SourceComponent, Object Emote) { Invoke(nameof(ClientAddEmote), Source, SourceComponent, Emote); }
        public SubtitleInstance AddSubtitle(SubtitleInfo SubtitleInfo) { return Invoke<SubtitleInstance>(nameof(AddSubtitle), SubtitleInfo); }
        public EmoteInstance AddEmoteInstance(Actor Source, ActorComponent SourceComponent, Object Emote) { return Invoke<EmoteInstance>(nameof(AddEmoteInstance), Source, SourceComponent, Emote); }
    }
    public class SubtitleFacialAnimationInterface : Interface
    {
        public SubtitleFacialAnimationInterface(nint addr) : base(addr) { }
        public Array<Actor> GetFacialAnimationTargets() { return Invoke<Array<Actor>>(nameof(GetFacialAnimationTargets)); }
    }
    public class SurfaceOrientComponent : ActorComponent
    {
        public SurfaceOrientComponent(nint addr) : base(addr) { }
        public bool bSurfaceOrientEnabled { get { return this[nameof(bSurfaceOrientEnabled)].Flag; } set { this[nameof(bSurfaceOrientEnabled)].Flag = value; } }
        public Object ComponentToOrient { get { return this[nameof(ComponentToOrient)]; } set { this[nameof(ComponentToOrient)] = value; } }
        public float LeanLimit { get { return this[nameof(LeanLimit)].GetValue<float>(); } set { this[nameof(LeanLimit)].SetValue<float>(value); } }
        public float LeanScale { get { return this[nameof(LeanScale)].GetValue<float>(); } set { this[nameof(LeanScale)].SetValue<float>(value); } }
        public float LeanScaleRef { get { return this[nameof(LeanScaleRef)].GetValue<float>(); } set { this[nameof(LeanScaleRef)].SetValue<float>(value); } }
        public ESurfaceOrientRotationMode RotationMode { get { return (ESurfaceOrientRotationMode)this[nameof(RotationMode)].GetValue<int>(); } set { this[nameof(RotationMode)].SetValue<int>((int)value); } }
        public ESurfaceOrientTraceDirection TraceDirection { get { return (ESurfaceOrientTraceDirection)this[nameof(TraceDirection)].GetValue<int>(); } set { this[nameof(TraceDirection)].SetValue<int>((int)value); } }
        public bool bLockTranslationOffsetToTraceAxis { get { return this[nameof(bLockTranslationOffsetToTraceAxis)].Flag; } set { this[nameof(bLockTranslationOffsetToTraceAxis)].Flag = value; } }
        public float MaximumHeightScalar { get { return this[nameof(MaximumHeightScalar)].GetValue<float>(); } set { this[nameof(MaximumHeightScalar)].SetValue<float>(value); } }
        public bool bIkEnabled { get { return this[nameof(bIkEnabled)].Flag; } set { this[nameof(bIkEnabled)].Flag = value; } }
        public float IkMinVelocityRef { get { return this[nameof(IkMinVelocityRef)].GetValue<float>(); } set { this[nameof(IkMinVelocityRef)].SetValue<float>(value); } }
        public float IkMaxVelocityRef { get { return this[nameof(IkMaxVelocityRef)].GetValue<float>(); } set { this[nameof(IkMaxVelocityRef)].SetValue<float>(value); } }
        public float IkGroundOffset { get { return this[nameof(IkGroundOffset)].GetValue<float>(); } set { this[nameof(IkGroundOffset)].SetValue<float>(value); } }
        public float IkEnableOffset { get { return this[nameof(IkEnableOffset)].GetValue<float>(); } set { this[nameof(IkEnableOffset)].SetValue<float>(value); } }
        public bool bCalculateOrientation { get { return this[nameof(bCalculateOrientation)].Flag; } set { this[nameof(bCalculateOrientation)].Flag = value; } }
        public float IkRollLimit { get { return this[nameof(IkRollLimit)].GetValue<float>(); } set { this[nameof(IkRollLimit)].SetValue<float>(value); } }
        public Array<SurfaceOrientFeeler> Feelers { get { return new Array<SurfaceOrientFeeler>(this[nameof(Feelers)].Address); } }
        public bool bAllowFloating { get { return this[nameof(bAllowFloating)].Flag; } set { this[nameof(bAllowFloating)].Flag = value; } }
        public float FloatEnableDepth { get { return this[nameof(FloatEnableDepth)].GetValue<float>(); } set { this[nameof(FloatEnableDepth)].SetValue<float>(value); } }
        public float FloatSurfaceOffset { get { return this[nameof(FloatSurfaceOffset)].GetValue<float>(); } set { this[nameof(FloatSurfaceOffset)].SetValue<float>(value); } }
        public float TraceStartOffsetOverride { get { return this[nameof(TraceStartOffsetOverride)].GetValue<float>(); } set { this[nameof(TraceStartOffsetOverride)].SetValue<float>(value); } }
        public float TraceEndOffsetOverride { get { return this[nameof(TraceEndOffsetOverride)].GetValue<float>(); } set { this[nameof(TraceEndOffsetOverride)].SetValue<float>(value); } }
        public int FrameFrequencyOffset { get { return this[nameof(FrameFrequencyOffset)].GetValue<int>(); } set { this[nameof(FrameFrequencyOffset)].SetValue<int>(value); } }
        public SceneComponent OrientRoot { get { return this[nameof(OrientRoot)].As<SceneComponent>(); } set { this["OrientRoot"] = value; } }
        public void SetEnableIK(bool bEnable, bool bReset) { Invoke(nameof(SetEnableIK), bEnable, bReset); }
    }
    public class TargetableComponent : HeuristicBoundsComponent
    {
        public TargetableComponent(nint addr) : base(addr) { }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public Object AttachToBone { get { return this[nameof(AttachToBone)]; } set { this[nameof(AttachToBone)] = value; } }
        public Object CollisionShape { get { return this[nameof(CollisionShape)]; } set { this[nameof(CollisionShape)] = value; } }
        public float MaximumTargetDistance { get { return this[nameof(MaximumTargetDistance)].GetValue<float>(); } set { this[nameof(MaximumTargetDistance)].SetValue<float>(value); } }
        public float MinimumTargetDistance { get { return this[nameof(MinimumTargetDistance)].GetValue<float>(); } set { this[nameof(MinimumTargetDistance)].SetValue<float>(value); } }
        public float SnapRadiusScale { get { return this[nameof(SnapRadiusScale)].GetValue<float>(); } set { this[nameof(SnapRadiusScale)].SetValue<float>(value); } }
        public float TargetPitch { get { return this[nameof(TargetPitch)].GetValue<float>(); } set { this[nameof(TargetPitch)].SetValue<float>(value); } }
        public Object OnTargetEvent { get { return this[nameof(OnTargetEvent)]; } set { this[nameof(OnTargetEvent)] = value; } }
        public Object OnUnTargetEvent { get { return this[nameof(OnUnTargetEvent)]; } set { this[nameof(OnUnTargetEvent)] = value; } }
        public ETargetType TargetType { get { return (ETargetType)this[nameof(TargetType)].GetValue<int>(); } set { this[nameof(TargetType)].SetValue<int>((int)value); } }
        public float RangeTolerance { get { return this[nameof(RangeTolerance)].GetValue<float>(); } set { this[nameof(RangeTolerance)].SetValue<float>(value); } }
        public bool bCanBeTargeted { get { return this[nameof(bCanBeTargeted)].Flag; } set { this[nameof(bCanBeTargeted)].Flag = value; } }
        public bool AllowSoftTarget { get { return this[nameof(AllowSoftTarget)].Flag; } set { this[nameof(AllowSoftTarget)].Flag = value; } }
        public bool AllowLockTarget { get { return this[nameof(AllowLockTarget)].Flag; } set { this[nameof(AllowLockTarget)].Flag = value; } }
        public bool bAllowSnaping { get { return this[nameof(bAllowSnaping)].Flag; } set { this[nameof(bAllowSnaping)].Flag = value; } }
        public Array<Actor> TargetedByList { get { return new Array<Actor>(this[nameof(TargetedByList)].Address); } }
        public Array<Object> TargetableByClassList { get { return new Array<Object>(this[nameof(TargetableByClassList)].Address); } }
        public void SetCanBeTargeted(bool bNewCanBeTargeted) { Invoke(nameof(SetCanBeTargeted), bNewCanBeTargeted); }
        public void SetAllowSoftTarget(bool bNewAllowSoftTarget) { Invoke(nameof(SetAllowSoftTarget), bNewAllowSoftTarget); }
        public void OnUnTarget(Actor UnTargetedBy) { Invoke(nameof(OnUnTarget), UnTargetedBy); }
        public void OnTarget(Actor TargetedBy) { Invoke(nameof(OnTarget), TargetedBy); }
        public void OnOwnerDied(byte Reason, CharacterGunfire Character, Actor Cause) { Invoke(nameof(OnOwnerDied), Reason, Character, Cause); }
        public Array<Actor> GetTargetingActors() { return Invoke<Array<Actor>>(nameof(GetTargetingActors)); }
        public bool CanBeTargeted() { return Invoke<bool>(nameof(CanBeTargeted)); }
    }
    public class TargetAlignComponent : ActorComponent
    {
        public TargetAlignComponent(nint addr) : base(addr) { }
        public Object VirtualBoneToAlign { get { return this[nameof(VirtualBoneToAlign)]; } set { this[nameof(VirtualBoneToAlign)] = value; } }
        public Object VirtualBoneToAdjust { get { return this[nameof(VirtualBoneToAdjust)]; } set { this[nameof(VirtualBoneToAdjust)] = value; } }
        public float CapsuleConvergeDistance { get { return this[nameof(CapsuleConvergeDistance)].GetValue<float>(); } set { this[nameof(CapsuleConvergeDistance)].SetValue<float>(value); } }
        public float PitchLowerAngle { get { return this[nameof(PitchLowerAngle)].GetValue<float>(); } set { this[nameof(PitchLowerAngle)].SetValue<float>(value); } }
        public float PitchUpperAngle { get { return this[nameof(PitchUpperAngle)].GetValue<float>(); } set { this[nameof(PitchUpperAngle)].SetValue<float>(value); } }
        public float PitchAdjustSpeed { get { return this[nameof(PitchAdjustSpeed)].GetValue<float>(); } set { this[nameof(PitchAdjustSpeed)].SetValue<float>(value); } }
        public float YawArc { get { return this[nameof(YawArc)].GetValue<float>(); } set { this[nameof(YawArc)].SetValue<float>(value); } }
        public float YawAdjustSpeed { get { return this[nameof(YawAdjustSpeed)].GetValue<float>(); } set { this[nameof(YawAdjustSpeed)].SetValue<float>(value); } }
        public Actor LastTarget { get { return this[nameof(LastTarget)].As<Actor>(); } set { this["LastTarget"] = value; } }
        public CapsuleComponent LastCapsule { get { return this[nameof(LastCapsule)].As<CapsuleComponent>(); } set { this["LastCapsule"] = value; } }
        public Rotator GetAdjustNodeRotation() { return Invoke<Rotator>(nameof(GetAdjustNodeRotation)); }
    }
    public class TargetingComponent : SceneComponent
    {
        public TargetingComponent(nint addr) : base(addr) { }
        public bool bCacheTargetOnTick { get { return this[nameof(bCacheTargetOnTick)].Flag; } set { this[nameof(bCacheTargetOnTick)].Flag = value; } }
        public TargetTraceParams TargetTraceParams { get { return this[nameof(TargetTraceParams)].As<TargetTraceParams>(); } set { this["TargetTraceParams"] = value; } }
        public bool TargetUseTrace { get { return this[nameof(TargetUseTrace)].Flag; } set { this[nameof(TargetUseTrace)].Flag = value; } }
        public float TargetTraceRange { get { return this[nameof(TargetTraceRange)].GetValue<float>(); } set { this[nameof(TargetTraceRange)].SetValue<float>(value); } }
        public float AimAdjustAngle { get { return this[nameof(AimAdjustAngle)].GetValue<float>(); } set { this[nameof(AimAdjustAngle)].SetValue<float>(value); } }
        public float AimAdjustBufferScalar { get { return this[nameof(AimAdjustBufferScalar)].GetValue<float>(); } set { this[nameof(AimAdjustBufferScalar)].SetValue<float>(value); } }
        public float AimAdjustTowardsCenterOfMassPct { get { return this[nameof(AimAdjustTowardsCenterOfMassPct)].GetValue<float>(); } set { this[nameof(AimAdjustTowardsCenterOfMassPct)].SetValue<float>(value); } }
        public float SnapAngle { get { return this[nameof(SnapAngle)].GetValue<float>(); } set { this[nameof(SnapAngle)].SetValue<float>(value); } }
        public HeuristicBoundsHitResult CurrentTargetHitResult { get { return this[nameof(CurrentTargetHitResult)].As<HeuristicBoundsHitResult>(); } set { this["CurrentTargetHitResult"] = value; } }
        public HeuristicBoundsHitResult PrevTargetHitResult { get { return this[nameof(PrevTargetHitResult)].As<HeuristicBoundsHitResult>(); } set { this["PrevTargetHitResult"] = value; } }
        public HeuristicBoundsHitResult CurrentSnapTargetHitResult { get { return this[nameof(CurrentSnapTargetHitResult)].As<HeuristicBoundsHitResult>(); } set { this["CurrentSnapTargetHitResult"] = value; } }
        public TargetManager CachedTargetManager { get { return this[nameof(CachedTargetManager)].As<TargetManager>(); } set { this["CachedTargetManager"] = value; } }
        public void OnNewTargetSet(HeuristicBoundsHitResult NewTargetHitResult) { Invoke(nameof(OnNewTargetSet), NewTargetHitResult); }
        public bool GetTarget(HeuristicBoundsHitResult OutTargetHitResult, bool bForceRecalc) { return Invoke<bool>(nameof(GetTarget), OutTargetHitResult, bForceRecalc); }
        public bool GetSnapTarget(HeuristicBoundsHitResult OutSnapTargetHitResult, bool bForceRecalc) { return Invoke<bool>(nameof(GetSnapTarget), OutSnapTargetHitResult, bForceRecalc); }
    }
    public class TargetLockComponent : ActorComponent
    {
        public TargetLockComponent(nint addr) : base(addr) { }
        public Object LockInput { get { return this[nameof(LockInput)]; } set { this[nameof(LockInput)] = value; } }
        public Object LockToggleInput { get { return this[nameof(LockToggleInput)]; } set { this[nameof(LockToggleInput)] = value; } }
        public float TargetRange { get { return this[nameof(TargetRange)].GetValue<float>(); } set { this[nameof(TargetRange)].SetValue<float>(value); } }
        public float TargetLostRange { get { return this[nameof(TargetLostRange)].GetValue<float>(); } set { this[nameof(TargetLostRange)].SetValue<float>(value); } }
        public float TargetArc { get { return this[nameof(TargetArc)].GetValue<float>(); } set { this[nameof(TargetArc)].SetValue<float>(value); } }
        public float TargetPitch { get { return this[nameof(TargetPitch)].GetValue<float>(); } set { this[nameof(TargetPitch)].SetValue<float>(value); } }
        public bool bDoRedundantInputCheck { get { return this[nameof(bDoRedundantInputCheck)].Flag; } set { this[nameof(bDoRedundantInputCheck)].Flag = value; } }
        public bool SoftTargetEnabled { get { return this[nameof(SoftTargetEnabled)].Flag; } set { this[nameof(SoftTargetEnabled)].Flag = value; } }
        public bool SoftTargetCameraDirByDefault { get { return this[nameof(SoftTargetCameraDirByDefault)].Flag; } set { this[nameof(SoftTargetCameraDirByDefault)].Flag = value; } }
        public float SoftTargetHeadingArc { get { return this[nameof(SoftTargetHeadingArc)].GetValue<float>(); } set { this[nameof(SoftTargetHeadingArc)].SetValue<float>(value); } }
        public float SoftTargetRange { get { return this[nameof(SoftTargetRange)].GetValue<float>(); } set { this[nameof(SoftTargetRange)].SetValue<float>(value); } }
        public float SoftTargetArc { get { return this[nameof(SoftTargetArc)].GetValue<float>(); } set { this[nameof(SoftTargetArc)].SetValue<float>(value); } }
        public float SoftTargetPitch { get { return this[nameof(SoftTargetPitch)].GetValue<float>(); } set { this[nameof(SoftTargetPitch)].SetValue<float>(value); } }
        public Object OnTargetLock { get { return this[nameof(OnTargetLock)]; } set { this[nameof(OnTargetLock)] = value; } }
        public Actor LockedTarget { get { return this[nameof(LockedTarget)].As<Actor>(); } set { this["LockedTarget"] = value; } }
        public Actor SoftTarget { get { return this[nameof(SoftTarget)].As<Actor>(); } set { this["SoftTarget"] = value; } }
        public Actor CameraTarget { get { return this[nameof(CameraTarget)].As<Actor>(); } set { this["CameraTarget"] = value; } }
        public bool IsTargetLockEnabled() { return Invoke<bool>(nameof(IsTargetLockEnabled)); }
        public Actor GetSoftTarget() { return Invoke<Actor>(nameof(GetSoftTarget)); }
        public Actor GetLockTarget() { return Invoke<Actor>(nameof(GetLockTarget)); }
        public Actor GetCameraTarget() { return Invoke<Actor>(nameof(GetCameraTarget)); }
        public void EnableTargetLock(bool Enable) { Invoke(nameof(EnableTargetLock), Enable); }
        public void CycleLockTarget(bool bCycleLeftward) { Invoke(nameof(CycleLockTarget), bCycleLeftward); }
        public void ClearLockTarget() { Invoke(nameof(ClearLockTarget)); }
    }
    public class SoftTargetRangeOverrideStateDecorator : ActorStateDecorator
    {
        public SoftTargetRangeOverrideStateDecorator(nint addr) : base(addr) { }
        public float SoftTargetRange { get { return this[nameof(SoftTargetRange)].GetValue<float>(); } set { this[nameof(SoftTargetRange)].SetValue<float>(value); } }
    }
    public class TargetManager : ActorComponent
    {
        public TargetManager(nint addr) : base(addr) { }
        public Array<TargetableComponent> RegisteredComponents { get { return new Array<TargetableComponent>(this[nameof(RegisteredComponents)].Address); } }
        public void QueryPotentialTargetsAlongAimVector(Pawn Source, float Range, float HorizontalArc, float VerticalArc, bool CullNotVisible, bool CullNotLockable, bool CullNotSoftTargetable, Array<TargetQueryResult> Results, bool bSortResults) { Invoke(nameof(QueryPotentialTargetsAlongAimVector), Source, Range, HorizontalArc, VerticalArc, CullNotVisible, CullNotLockable, CullNotSoftTargetable, Results, bSortResults); }
        public void QueryPotentialTargets(Actor Source, float Yaw, float Pitch, float Range, float HorizontalArc, float VerticalArc, bool CullNotVisible, bool CullNotLockable, bool CullNotSoftTargetable, Array<TargetQueryResult> Results, bool bSortResults) { Invoke(nameof(QueryPotentialTargets), Source, Yaw, Pitch, Range, HorizontalArc, VerticalArc, CullNotVisible, CullNotLockable, CullNotSoftTargetable, Results, bSortResults); }
        public TargetableComponent QueryBestPotentialTargetAlongAimVector(Pawn Source, float Range, float HorizontalArc, float VerticalArc, bool CullNotVisible, bool CullNotLockable) { return Invoke<TargetableComponent>(nameof(QueryBestPotentialTargetAlongAimVector), Source, Range, HorizontalArc, VerticalArc, CullNotVisible, CullNotLockable); }
        public TargetableComponent QueryBestPotentialTarget(Actor Source, float Yaw, float Pitch, float Range, float HorizontalArc, float VerticalArc, bool CullNotVisible, bool CullNotLockable) { return Invoke<TargetableComponent>(nameof(QueryBestPotentialTarget), Source, Yaw, Pitch, Range, HorizontalArc, VerticalArc, CullNotVisible, CullNotLockable); }
        public float K2_GetScoreForTargetLocation(Actor Source, Vector Target, float Yaw, float Pitch, float Range, float HorizontalArc, float VerticalArc, bool CullNotVisible, Array<Actor> LOSIgnoreActors) { return Invoke<float>(nameof(K2_GetScoreForTargetLocation), Source, Target, Yaw, Pitch, Range, HorizontalArc, VerticalArc, CullNotVisible, LOSIgnoreActors); }
        public float K2_GetScoreForTargetActor(Actor Source, Actor Target, float Yaw, float Pitch, float Range, float HorizontalArc, float VerticalArc, bool CullNotVisible) { return Invoke<float>(nameof(K2_GetScoreForTargetActor), Source, Target, Yaw, Pitch, Range, HorizontalArc, VerticalArc, CullNotVisible); }
    }
    public class TextDebugComponent : TextRenderComponent
    {
        public TextDebugComponent(nint addr) : base(addr) { }
        public float QueryDelay { get { return this[nameof(QueryDelay)].GetValue<float>(); } set { this[nameof(QueryDelay)].SetValue<float>(value); } }
    }
    public class TimeDilationManager : ActorComponent
    {
        public TimeDilationManager(nint addr) : base(addr) { }
        public void SetTimeDilationMode(Actor InActor, ETimeDilationMode NewMode) { Invoke(nameof(SetTimeDilationMode), InActor, NewMode); }
        public void SetTimeDilation(Actor InActor, float InTimeDilation, Object Tag) { Invoke(nameof(SetTimeDilation), InActor, InTimeDilation, Tag); }
        public void SetGlobalTimeDilation(Object WorldContextObject, float InTimeDilation, Object Tag) { Invoke(nameof(SetGlobalTimeDilation), WorldContextObject, InTimeDilation, Tag); }
        public void RefreshTimeDilationEffect(Actor InActor, TimeDilationEffectHandle Handle) { Invoke(nameof(RefreshTimeDilationEffect), InActor, Handle); }
        public TimeDilationEffectHandle PlayTimeDilationEffect(Actor InActor, float InTimeDilation, float InDuration, float EaseInTime, float EaseOutTime, bool bIsHitPause) { return Invoke<TimeDilationEffectHandle>(nameof(PlayTimeDilationEffect), InActor, InTimeDilation, InDuration, EaseInTime, EaseOutTime, bIsHitPause); }
        public TimeDilationEffectHandle PlayGlobalTimeDilationEffect(Object WorldContextObject, float InTimeDilation, float InDuration, float EaseInTime, float EaseOutTime) { return Invoke<TimeDilationEffectHandle>(nameof(PlayGlobalTimeDilationEffect), WorldContextObject, InTimeDilation, InDuration, EaseInTime, EaseOutTime); }
        public void OnCinematic(PlayerControllerGunfire Player, bool bIsInCinematicMode) { Invoke(nameof(OnCinematic), Player, bIsInCinematicMode); }
        public bool IsTimeDilationEffectEasingOut(Actor InActor, TimeDilationEffectHandle Handle) { return Invoke<bool>(nameof(IsTimeDilationEffectEasingOut), InActor, Handle); }
        public bool IsTimeDilationEffectActive(Actor InActor, TimeDilationEffectHandle Handle) { return Invoke<bool>(nameof(IsTimeDilationEffectActive), InActor, Handle); }
        public bool IsPlayingHitPause(Actor InActor) { return Invoke<bool>(nameof(IsPlayingHitPause), InActor); }
        public float GetTimeDilation(Actor InActor, bool bOnlyForTag, Object Tag) { return Invoke<float>(nameof(GetTimeDilation), InActor, bOnlyForTag, Tag); }
        public float GetGlobalTimeDilation(Object WorldContextObject, bool bOnlyForTag, Object Tag) { return Invoke<float>(nameof(GetGlobalTimeDilation), WorldContextObject, bOnlyForTag, Tag); }
        public void EaseOutTimeDilationEffect(Actor InActor, TimeDilationEffectHandle Handle) { Invoke(nameof(EaseOutTimeDilationEffect), InActor, Handle); }
        public void ClearTimeDilationEffect(Actor InActor, TimeDilationEffectHandle Handle) { Invoke(nameof(ClearTimeDilationEffect), InActor, Handle); }
        public void ClearTimeDilation(Actor InActor, bool bClearEffects, bool bOnlyForTag, Object Tag) { Invoke(nameof(ClearTimeDilation), InActor, bClearEffects, bOnlyForTag, Tag); }
        public void ClearGlobalTimeDilationEffect(Object WorldContextObject, TimeDilationEffectHandle Handle) { Invoke(nameof(ClearGlobalTimeDilationEffect), WorldContextObject, Handle); }
        public void ClearGlobalTimeDilation(Object WorldContextObject, bool bClearEffects, bool bOnlyForTag, Object Tag) { Invoke(nameof(ClearGlobalTimeDilation), WorldContextObject, bClearEffects, bOnlyForTag, Tag); }
        public void ClearAllTimeDilation(Object WorldContextObject) { Invoke(nameof(ClearAllTimeDilation), WorldContextObject); }
    }
    public class TutorialPrompts : DataAsset
    {
        public TutorialPrompts(nint addr) : base(addr) { }
        public DataTable TutorialPrompts_value { get { return this[nameof(TutorialPrompts)].As<DataTable>(); } set { this["TutorialPrompts"] = value; } }
    }
    public class TutorialComponent : ActorComponent
    {
        public TutorialComponent(nint addr) : base(addr) { }
        public TutorialPrompts TutorialPrompts { get { return this[nameof(TutorialPrompts)].As<TutorialPrompts>(); } set { this["TutorialPrompts"] = value; } }
        public Object OnShowTutorialPrompt { get { return this[nameof(OnShowTutorialPrompt)]; } set { this[nameof(OnShowTutorialPrompt)] = value; } }
        public Object OnHideTutorialPrompt { get { return this[nameof(OnHideTutorialPrompt)]; } set { this[nameof(OnHideTutorialPrompt)] = value; } }
        public Object OnClearTutorialPrompt { get { return this[nameof(OnClearTutorialPrompt)]; } set { this[nameof(OnClearTutorialPrompt)] = value; } }
        public void SetTutorialPromptOverride(Object ID, Actor Actor, Object Text, float DurationOverride) { Invoke(nameof(SetTutorialPromptOverride), ID, Actor, Text, DurationOverride); }
        public void SetTutorialPrompt(Object ID, Actor Actor, float DurationOverride) { Invoke(nameof(SetTutorialPrompt), ID, Actor, DurationOverride); }
        public void RemoveTutorialPrompt(Object ID, Actor Actor) { Invoke(nameof(RemoveTutorialPrompt), ID, Actor); }
        public void QueueTutorialPrompt(Object ID, Actor Actor, float DurationOverride) { Invoke(nameof(QueueTutorialPrompt), ID, Actor, DurationOverride); }
        public bool HasActiveTutorialPrompt(Actor Actor, Object RequiredID) { return Invoke<bool>(nameof(HasActiveTutorialPrompt), Actor, RequiredID); }
        public void ClearTutorialPrompts(Actor Actor) { Invoke(nameof(ClearTutorialPrompts), Actor); }
        public bool AreTutorialsEnabled() { return Invoke<bool>(nameof(AreTutorialsEnabled)); }
    }
    public class EventTreeNode_TutorialPrompt : EventTreeNode
    {
        public EventTreeNode_TutorialPrompt(nint addr) : base(addr) { }
        public Object Context { get { return this[nameof(Context)]; } set { this[nameof(Context)] = value; } }
        public Object TutorialID { get { return this[nameof(TutorialID)]; } set { this[nameof(TutorialID)] = value; } }
        public float DurationOverride { get { return this[nameof(DurationOverride)].GetValue<float>(); } set { this[nameof(DurationOverride)].SetValue<float>(value); } }
    }
    public class TweenComponent : ActorComponent
    {
        public TweenComponent(nint addr) : base(addr) { }
        public Object OnTweenComplete { get { return this[nameof(OnTweenComplete)]; } set { this[nameof(OnTweenComplete)] = value; } }
        public TweenComponentDuringPhysicsTickFunction DuringPhysicsTickFunction { get { return this[nameof(DuringPhysicsTickFunction)].As<TweenComponentDuringPhysicsTickFunction>(); } set { this["DuringPhysicsTickFunction"] = value; } }
        public void StopTween(int ID) { Invoke(nameof(StopTween), ID); }
        public void StopAllTweens() { Invoke(nameof(StopAllTweens)); }
        public int SetLightIntensity(float Intensity, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(SetLightIntensity), Intensity, Time, EaseType, Exponent); }
        public int SetComponentLightIntensity(LightComponent Component, float Intensity, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(SetComponentLightIntensity), Component, Intensity, Time, EaseType, Exponent); }
        public int ScaleComponent(SceneComponent Component, Vector Scale, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(ScaleComponent), Component, Scale, Time, EaseType, Exponent); }
        public int Scale(Vector Scale, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(Scale), Scale, Time, EaseType, Exponent); }
        public int RotateComponent(SceneComponent Component, Rotator TargetRotation, float Time, EEaseType EaseType, float Exponent, bool bRotateRelative) { return Invoke<int>(nameof(RotateComponent), Component, TargetRotation, Time, EaseType, Exponent, bRotateRelative); }
        public int Rotate(Rotator TargetRotation, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(Rotate), TargetRotation, Time, EaseType, Exponent); }
        public int MoveToTarget(Actor Target, float Time, ETweenRoot Root, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(MoveToTarget), Target, Time, Root, EaseType, Exponent); }
        public int MoveRelative(Vector Offset, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(MoveRelative), Offset, Time, EaseType, Exponent); }
        public int MoveComponent(SceneComponent Component, Vector Destination, float Time, EEaseType EaseType, float Exponent, bool bMoveRelative) { return Invoke<int>(nameof(MoveComponent), Component, Destination, Time, EaseType, Exponent, bMoveRelative); }
        public int MoveBezier(Vector ControlPt1, Vector Destination, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(MoveBezier), ControlPt1, Destination, Time, EaseType, Exponent); }
        public int Move(Vector Destination, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(Move), Destination, Time, EaseType, Exponent); }
        public bool IsTweenComplete(int ID) { return Invoke<bool>(nameof(IsTweenComplete), ID); }
        public float GetElapsedTime(int ID, bool bIsNormalized) { return Invoke<float>(nameof(GetElapsedTime), ID, bIsNormalized); }
        public int AnimateVectorProperty(Object Object, Object PropertyName, Vector From, Vector To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateVectorProperty), Object, PropertyName, From, To, Time, EaseType, Exponent); }
        public int AnimateVector4Property(Object Object, Object PropertyName, Vector4 From, Vector4 To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateVector4Property), Object, PropertyName, From, To, Time, EaseType, Exponent); }
        public int AnimateRotatorProperty(Object Object, Object PropertyName, Rotator From, Rotator To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateRotatorProperty), Object, PropertyName, From, To, Time, EaseType, Exponent); }
        public int AnimatePrimitiveComponentMaterialVectorParam(PrimitiveComponent Component, MaterialInterface Material, Object Param, Vector From, Vector To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimatePrimitiveComponentMaterialVectorParam), Component, Material, Param, From, To, Time, EaseType, Exponent); }
        public int AnimatePrimitiveComponentMaterialScalarParam(PrimitiveComponent Component, MaterialInterface Material, Object Param, float From, float To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimatePrimitiveComponentMaterialScalarParam), Component, Material, Param, From, To, Time, EaseType, Exponent); }
        public int AnimateMaterialVectorParamGlobal(MaterialInterface Material, Object Param, Vector From, Vector To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateMaterialVectorParamGlobal), Material, Param, From, To, Time, EaseType, Exponent); }
        public int AnimateMaterialVectorParam(Object ComponentName, MaterialInterface Material, Object Param, Vector From, Vector To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateMaterialVectorParam), ComponentName, Material, Param, From, To, Time, EaseType, Exponent); }
        public int AnimateMaterialScalarParamGlobal(MaterialInterface Material, Object Param, float From, float To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateMaterialScalarParamGlobal), Material, Param, From, To, Time, EaseType, Exponent); }
        public int AnimateMaterialScalarParam(Object ComponentName, MaterialInterface Material, Object Param, float From, float To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateMaterialScalarParam), ComponentName, Material, Param, From, To, Time, EaseType, Exponent); }
        public int AnimateFloatProperty(Object Object, Object PropertyName, float From, float To, float Time, EEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateFloatProperty), Object, PropertyName, From, To, Time, EaseType, Exponent); }
    }
    public class UIHudComponent : ActorComponent
    {
        public UIHudComponent(nint addr) : base(addr) { }
        public bool bVisible { get { return this[nameof(bVisible)].Flag; } set { this[nameof(bVisible)].Flag = value; } }
        public void SetVisibility(bool Visible) { Invoke(nameof(SetVisibility), Visible); }
        public void OnParentSetVisibility(bool Visible) { Invoke(nameof(OnParentSetVisibility), Visible); }
        public bool IsVisible() { return Invoke<bool>(nameof(IsVisible)); }
        public Pawn GetControllingPawn() { return Invoke<Pawn>(nameof(GetControllingPawn)); }
    }
    public class UIHudTutorialComponent : UIHudComponent
    {
        public UIHudTutorialComponent(nint addr) : base(addr) { }
        public Texture2D Arrow { get { return this[nameof(Arrow)].As<Texture2D>(); } set { this["Arrow"] = value; } }
        public Vector ArrowScreenOffset { get { return this[nameof(ArrowScreenOffset)].As<Vector>(); } set { this["ArrowScreenOffset"] = value; } }
        public float Border { get { return this[nameof(Border)].GetValue<float>(); } set { this[nameof(Border)].SetValue<float>(value); } }
        public float IconSize { get { return this[nameof(IconSize)].GetValue<float>(); } set { this[nameof(IconSize)].SetValue<float>(value); } }
        public float FadeInTime { get { return this[nameof(FadeInTime)].GetValue<float>(); } set { this[nameof(FadeInTime)].SetValue<float>(value); } }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public LinearColor FontShadowColorAndOpacity { get { return this[nameof(FontShadowColorAndOpacity)].As<LinearColor>(); } set { this["FontShadowColorAndOpacity"] = value; } }
        public Vector2D FontShadowOffset { get { return this[nameof(FontShadowOffset)].As<Vector2D>(); } set { this["FontShadowOffset"] = value; } }
        public Anchors PlayerPromptAnchors { get { return this[nameof(PlayerPromptAnchors)].As<Anchors>(); } set { this["PlayerPromptAnchors"] = value; } }
        public bool ShowPlayerPrompts { get { return this[nameof(ShowPlayerPrompts)].Flag; } set { this[nameof(ShowPlayerPrompts)].Flag = value; } }
        public TutorialPromptWidget PlayerPromptWidget { get { return this[nameof(PlayerPromptWidget)].As<TutorialPromptWidget>(); } set { this["PlayerPromptWidget"] = value; } }
        public TutorialComponent CachedTutorialComponent { get { return this[nameof(CachedTutorialComponent)].As<TutorialComponent>(); } set { this["CachedTutorialComponent"] = value; } }
        public void OnShowPrompt(Object ID, Actor Actor, TutorialPrompt Prompt, float ExpirationTime) { Invoke(nameof(OnShowPrompt), ID, Actor, Prompt, ExpirationTime); }
        public void OnHidePrompt(Object ID, Actor Actor, TutorialPrompt Prompt, float ExpirationTime) { Invoke(nameof(OnHidePrompt), ID, Actor, Prompt, ExpirationTime); }
        public void OnClearPrompt(Object ID, Actor Actor, TutorialPrompt Prompt, float ExpirationTime) { Invoke(nameof(OnClearPrompt), ID, Actor, Prompt, ExpirationTime); }
    }
    public class VitalityComponent : ActorComponent
    {
        public VitalityComponent(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object StatMax { get { return this[nameof(StatMax)]; } set { this[nameof(StatMax)] = value; } }
        public Object StatRegen { get { return this[nameof(StatRegen)]; } set { this[nameof(StatRegen)] = value; } }
        public float DefaultRegenDelay { get { return this[nameof(DefaultRegenDelay)].GetValue<float>(); } set { this[nameof(DefaultRegenDelay)].SetValue<float>(value); } }
        public Object StatRegenDelayScalar { get { return this[nameof(StatRegenDelayScalar)]; } set { this[nameof(StatRegenDelayScalar)] = value; } }
        public Object StatEmptyDelayScalar { get { return this[nameof(StatEmptyDelayScalar)]; } set { this[nameof(StatEmptyDelayScalar)] = value; } }
        public Object StatDeltaMod { get { return this[nameof(StatDeltaMod)]; } set { this[nameof(StatDeltaMod)] = value; } }
        public Object NoNegativeChangeTag { get { return this[nameof(NoNegativeChangeTag)]; } set { this[nameof(NoNegativeChangeTag)] = value; } }
        public EVitalityInitialValue InitialValue { get { return (EVitalityInitialValue)this[nameof(InitialValue)].GetValue<int>(); } set { this[nameof(InitialValue)].SetValue<int>((int)value); } }
        public Object OnVitalityChanged { get { return this[nameof(OnVitalityChanged)]; } set { this[nameof(OnVitalityChanged)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public void Reset(bool Notify) { Invoke(nameof(Reset), Notify); }
        public void OnRep_Value() { Invoke(nameof(OnRep_Value)); }
        public bool HasValidStatsComp() { return Invoke<bool>(nameof(HasValidStatsComp)); }
        public VitalityComponent GetVitality(Actor Actor, Object Vitality) { return Invoke<VitalityComponent>(nameof(GetVitality), Actor, Vitality); }
        public float GetValuePercentage() { return Invoke<float>(nameof(GetValuePercentage)); }
        public float GetValueMax() { return Invoke<float>(nameof(GetValueMax)); }
        public float GetValue() { return Invoke<float>(nameof(GetValue)); }
        public Object GetDebugInfo(int DebugLevel) { return Invoke<Object>(nameof(GetDebugInfo), DebugLevel); }
        public void ClearRegenDelay() { Invoke(nameof(ClearRegenDelay)); }
        public void ApplyDeltaReplicated(float Delta) { Invoke(nameof(ApplyDeltaReplicated), Delta); }
        public void ApplyDelta(float Delta) { Invoke(nameof(ApplyDelta), Delta); }
    }
    public class WaterFXComponent : ActorComponent
    {
        public WaterFXComponent(nint addr) : base(addr) { }
        public Array<WaterFXEntry> WaterEnterFX { get { return new Array<WaterFXEntry>(this[nameof(WaterEnterFX)].Address); } }
        public Array<WaterFXEntry> WaterWakeFX { get { return new Array<WaterFXEntry>(this[nameof(WaterWakeFX)].Address); } }
        public Array<WaterFXEntry> WaterExitFX { get { return new Array<WaterFXEntry>(this[nameof(WaterExitFX)].Address); } }
        public byte Channel { get { return this[nameof(Channel)].GetValue<byte>(); } set { this[nameof(Channel)].SetValue<byte>(value); } }
        public float ImpactFXThreshold { get { return this[nameof(ImpactFXThreshold)].GetValue<float>(); } set { this[nameof(ImpactFXThreshold)].SetValue<float>(value); } }
        public Array<WaterFXOverride> Overrides { get { return new Array<WaterFXOverride>(this[nameof(Overrides)].Address); } }
        public Object OnEnterWater { get { return this[nameof(OnEnterWater)]; } set { this[nameof(OnEnterWater)] = value; } }
        public Object OnExitWater { get { return this[nameof(OnExitWater)]; } set { this[nameof(OnExitWater)] = value; } }
        public Object LastWaterType { get { return this[nameof(LastWaterType)]; } set { this[nameof(LastWaterType)] = value; } }
        public NiagaraComponent WakeVFX { get { return this[nameof(WakeVFX)].As<NiagaraComponent>(); } set { this["WakeVFX"] = value; } }
        public AudioComponentGunfire WakeSFX { get { return this[nameof(WakeSFX)].As<AudioComponentGunfire>(); } set { this["WakeSFX"] = value; } }
        public bool IsInWater() { return Invoke<bool>(nameof(IsInWater)); }
        public Object GetWaterType() { return Invoke<Object>(nameof(GetWaterType)); }
        public float GetWaterLevel() { return Invoke<float>(nameof(GetWaterLevel)); }
        public float GetWaterDepth() { return Invoke<float>(nameof(GetWaterDepth)); }
        public float GetSubmergeDepth() { return Invoke<float>(nameof(GetSubmergeDepth)); }
    }
    public class WaterOverlapComponent : ActorComponent
    {
        public WaterOverlapComponent(nint addr) : base(addr) { }
        public Actor WaterBounds { get { return this[nameof(WaterBounds)].As<Actor>(); } set { this["WaterBounds"] = value; } }
        public Object OnEnterWater { get { return this[nameof(OnEnterWater)]; } set { this[nameof(OnEnterWater)] = value; } }
        public Object OnExitWater { get { return this[nameof(OnExitWater)]; } set { this[nameof(OnExitWater)] = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public bool bOnlyValidIfCharacterInWater { get { return this[nameof(bOnlyValidIfCharacterInWater)].Flag; } set { this[nameof(bOnlyValidIfCharacterInWater)].Flag = value; } }
        public bool bDoRedundantCheckWhileInWater { get { return this[nameof(bDoRedundantCheckWhileInWater)].Flag; } set { this[nameof(bDoRedundantCheckWhileInWater)].Flag = value; } }
        public PrimitiveComponent CachedComponent { get { return this[nameof(CachedComponent)].As<PrimitiveComponent>(); } set { this["CachedComponent"] = value; } }
        public void OnEndOverlap(Actor OverlappedActor, Actor OtherActor) { Invoke(nameof(OnEndOverlap), OverlappedActor, OtherActor); }
        public void OnEndComponentOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnEndComponentOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnBeginOverlap(Actor OverlappedActor, Actor OtherActor) { Invoke(nameof(OnBeginOverlap), OverlappedActor, OtherActor); }
        public void OnBeginComponentOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnBeginComponentOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public bool InWater() { return Invoke<bool>(nameof(InWater)); }
    }
    public class WeaponPhantomComponent : ActorComponent
    {
        public WeaponPhantomComponent(nint addr) : base(addr) { }
        public Object DefaultDamageType { get { return this[nameof(DefaultDamageType)]; } set { this[nameof(DefaultDamageType)] = value; } }
        public ImpactEffectDescriptor DefaultImpactEffect { get { return this[nameof(DefaultImpactEffect)].As<ImpactEffectDescriptor>(); } set { this["DefaultImpactEffect"] = value; } }
        public float DefaultHitCooldown { get { return this[nameof(DefaultHitCooldown)].GetValue<float>(); } set { this[nameof(DefaultHitCooldown)].SetValue<float>(value); } }
        public float DefaultWeaponDamage { get { return this[nameof(DefaultWeaponDamage)].GetValue<float>(); } set { this[nameof(DefaultWeaponDamage)].SetValue<float>(value); } }
        public EWeaponPhantomReplicationMode ReplicationMode { get { return (EWeaponPhantomReplicationMode)this[nameof(ReplicationMode)].GetValue<int>(); } set { this[nameof(ReplicationMode)].SetValue<int>((int)value); } }
        public bool bSkipLagSupersampling { get { return this[nameof(bSkipLagSupersampling)].Flag; } set { this[nameof(bSkipLagSupersampling)].Flag = value; } }
        public bool bSkipEnvironmentHits { get { return this[nameof(bSkipEnvironmentHits)].Flag; } set { this[nameof(bSkipEnvironmentHits)].Flag = value; } }
        public bool bAllowEnvironmentHitsAfterEvades { get { return this[nameof(bAllowEnvironmentHitsAfterEvades)].Flag; } set { this[nameof(bAllowEnvironmentHitsAfterEvades)].Flag = value; } }
        public bool bSkipWallChecks { get { return this[nameof(bSkipWallChecks)].Flag; } set { this[nameof(bSkipWallChecks)].Flag = value; } }
        public bool bDoHitPause { get { return this[nameof(bDoHitPause)].Flag; } set { this[nameof(bDoHitPause)].Flag = value; } }
        public bool bPausePhantomsDuringHitPause { get { return this[nameof(bPausePhantomsDuringHitPause)].Flag; } set { this[nameof(bPausePhantomsDuringHitPause)].Flag = value; } }
        public int MaxHitPauses { get { return this[nameof(MaxHitPauses)].GetValue<int>(); } set { this[nameof(MaxHitPauses)].SetValue<int>(value); } }
        public float HitPausePenalty { get { return this[nameof(HitPausePenalty)].GetValue<float>(); } set { this[nameof(HitPausePenalty)].SetValue<float>(value); } }
        public Array<ActiveWeaponPhantom> ActiveWeaponPhantoms { get { return new Array<ActiveWeaponPhantom>(this[nameof(ActiveWeaponPhantoms)].Address); } }
        public void StopWeaponPhantom(PrimitiveComponent Shape) { Invoke(nameof(StopWeaponPhantom), Shape); }
        public void StopAllWeaponPhantoms() { Invoke(nameof(StopAllWeaponPhantoms)); }
        public void StartWeaponPhantom(WeaponPhantomInfo PhantomInfo) { Invoke(nameof(StartWeaponPhantom), PhantomInfo); }
        public void ServerApplyDamage(ReplicatedHit Hit, ActiveWeaponPhantom Phantom, bool bIsEnvironmentHit) { Invoke(nameof(ServerApplyDamage), Hit, Phantom, bIsEnvironmentHit); }
        public void MarkActorHit(Object WorldContextObject, PrimitiveComponent Shape, Actor Actor) { Invoke(nameof(MarkActorHit), WorldContextObject, Shape, Actor); }
        public void Ignore(PrimitiveComponent Shape, Actor ActorToIgnore) { Invoke(nameof(Ignore), Shape, ActorToIgnore); }
        public bool HasRecentlyHitActor(Object WorldContextObject, PrimitiveComponent Shape, Actor Actor) { return Invoke<bool>(nameof(HasRecentlyHitActor), WorldContextObject, Shape, Actor); }
        public bool HasGroupRecentlyHitActor(Object WorldContextObject, Object GroupName, Actor Actor) { return Invoke<bool>(nameof(HasGroupRecentlyHitActor), WorldContextObject, GroupName, Actor); }
        public bool HasAnyOverlappingDamageable(Array<Actor> IgnoredActors, bool bIgnoreDeadActors) { return Invoke<bool>(nameof(HasAnyOverlappingDamageable), IgnoredActors, bIgnoreDeadActors); }
        public bool DoHit(Object WorldContextObject, PrimitiveComponent Shape, HitResult HitResult) { return Invoke<bool>(nameof(DoHit), WorldContextObject, Shape, HitResult); }
        public void ApplyPersistentGroupCooldown(Actor Actor, float HitCooldown, Object GroupName) { Invoke(nameof(ApplyPersistentGroupCooldown), Actor, HitCooldown, GroupName); }
    }
    public class WidgetComponentGunfire : WidgetComponent
    {
        public WidgetComponentGunfire(nint addr) : base(addr) { }
        public float DrawScale { get { return this[nameof(DrawScale)].GetValue<float>(); } set { this[nameof(DrawScale)].SetValue<float>(value); } }
        public bool bUseDrawWidgetOverrides { get { return this[nameof(bUseDrawWidgetOverrides)].Flag; } set { this[nameof(bUseDrawWidgetOverrides)].Flag = value; } }
        public bool bManualDestroyOnExit { get { return this[nameof(bManualDestroyOnExit)].Flag; } set { this[nameof(bManualDestroyOnExit)].Flag = value; } }
    }
    public class WoundedComponent : ActorComponent
    {
        public WoundedComponent(nint addr) : base(addr) { }
        public float WoundedHealth { get { return this[nameof(WoundedHealth)].GetValue<float>(); } set { this[nameof(WoundedHealth)].SetValue<float>(value); } }
        public float ReviveProgress { get { return this[nameof(ReviveProgress)].GetValue<float>(); } set { this[nameof(ReviveProgress)].SetValue<float>(value); } }
        public Object OnWoundedState { get { return this[nameof(OnWoundedState)]; } set { this[nameof(OnWoundedState)] = value; } }
        public Object OnTargetRevived { get { return this[nameof(OnTargetRevived)]; } set { this[nameof(OnTargetRevived)] = value; } }
        public Object OnRevived { get { return this[nameof(OnRevived)]; } set { this[nameof(OnRevived)] = value; } }
        public Object OnWounded { get { return this[nameof(OnWounded)]; } set { this[nameof(OnWounded)] = value; } }
        public float WoundedHealthMult { get { return this[nameof(WoundedHealthMult)].GetValue<float>(); } set { this[nameof(WoundedHealthMult)].SetValue<float>(value); } }
        public float WoundedHealthBleedOutTime { get { return this[nameof(WoundedHealthBleedOutTime)].GetValue<float>(); } set { this[nameof(WoundedHealthBleedOutTime)].SetValue<float>(value); } }
        public float ReviveHealthMult { get { return this[nameof(ReviveHealthMult)].GetValue<float>(); } set { this[nameof(ReviveHealthMult)].SetValue<float>(value); } }
        public int MaxRevivers { get { return this[nameof(MaxRevivers)].GetValue<int>(); } set { this[nameof(MaxRevivers)].SetValue<int>(value); } }
        public float ReviveRange { get { return this[nameof(ReviveRange)].GetValue<float>(); } set { this[nameof(ReviveRange)].SetValue<float>(value); } }
        public float ReviveArc { get { return this[nameof(ReviveArc)].GetValue<float>(); } set { this[nameof(ReviveArc)].SetValue<float>(value); } }
        public float RangeScalarWhileReviving { get { return this[nameof(RangeScalarWhileReviving)].GetValue<float>(); } set { this[nameof(RangeScalarWhileReviving)].SetValue<float>(value); } }
        public bool bRequiresAllowActionToRevive { get { return this[nameof(bRequiresAllowActionToRevive)].Flag; } set { this[nameof(bRequiresAllowActionToRevive)].Flag = value; } }
        public Object ReviveState { get { return this[nameof(ReviveState)]; } set { this[nameof(ReviveState)] = value; } }
        public Array<Object> ReviverAnimTags { get { return new Array<Object>(this[nameof(ReviverAnimTags)].Address); } }
        public bool PauseWoundRegenDuringRevive { get { return this[nameof(PauseWoundRegenDuringRevive)].Flag; } set { this[nameof(PauseWoundRegenDuringRevive)].Flag = value; } }
        public ConditionList ReviveConditions { get { return this[nameof(ReviveConditions)].As<ConditionList>(); } set { this["ReviveConditions"] = value; } }
        public ConditionList SkipWoundConditions { get { return this[nameof(SkipWoundConditions)].As<ConditionList>(); } set { this["SkipWoundConditions"] = value; } }
        public ConditionList SelfSkipWoundConditions { get { return this[nameof(SelfSkipWoundConditions)].As<ConditionList>(); } set { this["SelfSkipWoundConditions"] = value; } }
        public EWoundedState State { get { return (EWoundedState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public Actor ReviveTarget { get { return this[nameof(ReviveTarget)].As<Actor>(); } set { this["ReviveTarget"] = value; } }
        public Array<Actor> Revivers { get { return new Array<Actor>(this[nameof(Revivers)].Address); } }
        public bool bAlwaysWoundable { get { return this[nameof(bAlwaysWoundable)].Flag; } set { this[nameof(bAlwaysWoundable)].Flag = value; } }
        public float LineOfSightHeightOffset { get { return this[nameof(LineOfSightHeightOffset)].GetValue<float>(); } set { this[nameof(LineOfSightHeightOffset)].SetValue<float>(value); } }
        public bool bOverrideDisplayInfo { get { return this[nameof(bOverrideDisplayInfo)].Flag; } set { this[nameof(bOverrideDisplayInfo)].Flag = value; } }
        public Object ReviveIconName { get { return this[nameof(ReviveIconName)]; } set { this[nameof(ReviveIconName)] = value; } }
        public Texture2D ReviveIcon { get { return this[nameof(ReviveIcon)].As<Texture2D>(); } set { this["ReviveIcon"] = value; } }
        public Object ReviveLabel { get { return this[nameof(ReviveLabel)]; } set { this[nameof(ReviveLabel)] = value; } }
        public void StopReviveActor() { Invoke(nameof(StopReviveActor)); }
        public bool ShouldSkipWoundFor(Actor Actor) { return Invoke<bool>(nameof(ShouldSkipWoundFor), Actor); }
        public void ServerKillSelf() { Invoke(nameof(ServerKillSelf)); }
        public void ReviveActor(Actor Target) { Invoke(nameof(ReviveActor), Target); }
        public void Revive(float HealthMultiplier, bool SelfRevive) { Invoke(nameof(Revive), HealthMultiplier, SelfRevive); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnCinematicPlaying(CinematicPlayerSettings Settings, Object CurrentCinematic, Actor Instigator) { Invoke(nameof(OnCinematicPlaying), Settings, CurrentCinematic, Instigator); }
        public void MulticastOnWounded(DamageInfo Damage) { Invoke(nameof(MulticastOnWounded), Damage); }
        public void MulticastOnTargetRevived(WoundedComponent WoundedComponent) { Invoke(nameof(MulticastOnTargetRevived), WoundedComponent); }
        public void MulticastOnRevived(bool bSelfRevive) { Invoke(nameof(MulticastOnRevived), bSelfRevive); }
        public void Kill() { Invoke(nameof(Kill)); }
        public float GetWoundedHealthPct() { return Invoke<float>(nameof(GetWoundedHealthPct)); }
        public bool CanRevive(Actor Actor, bool ValidateRange) { return Invoke<bool>(nameof(CanRevive), Actor, ValidateRange); }
    }
    public class WoundedCondition : Condition
    {
        public WoundedCondition(nint addr) : base(addr) { }
        public EWoundedState WoundedState { get { return (EWoundedState)this[nameof(WoundedState)].GetValue<int>(); } set { this[nameof(WoundedState)].SetValue<int>((int)value); } }
    }
    public class ValidateActionCondition : Condition
    {
        public ValidateActionCondition(nint addr) : base(addr) { }
        public Object ActionBP { get { return this[nameof(ActionBP)]; } set { this[nameof(ActionBP)] = value; } }
    }
    public class ActionComponent : ActorComponent
    {
        public ActionComponent(nint addr) : base(addr) { }
        public Array<ActionBase> Actions { get { return new Array<ActionBase>(this[nameof(Actions)].Address); } }
        public Object OnActionAdded { get { return this[nameof(OnActionAdded)]; } set { this[nameof(OnActionAdded)] = value; } }
        public Object OnActionRemoved { get { return this[nameof(OnActionRemoved)]; } set { this[nameof(OnActionRemoved)] = value; } }
        public Array<Object> DefaultActions { get { return new Array<Object>(this[nameof(DefaultActions)].Address); } }
        public Array<ActionBase> OldActions { get { return new Array<ActionBase>(this[nameof(OldActions)].Address); } }
        public void StopActionByType(Object ActionBP) { Invoke(nameof(StopActionByType), ActionBP); }
        public void StopAction(int ActionID) { Invoke(nameof(StopAction), ActionID); }
        public void OnRep_Actions() { Invoke(nameof(OnRep_Actions)); }
        public int ModifyActionLevel(Object Action, int Level) { return Invoke<int>(nameof(ModifyActionLevel), Action, Level); }
        public bool IsActionTypeRunning(Object ActionBP) { return Invoke<bool>(nameof(IsActionTypeRunning), ActionBP); }
        public bool IsActionRunning(int ActionID) { return Invoke<bool>(nameof(IsActionRunning), ActionID); }
        public void InvokeEventOnAll(Object EventName) { Invoke(nameof(InvokeEventOnAll), EventName); }
        public void InvokeEvent(Object ActionType, Object EventName) { Invoke(nameof(InvokeEvent), ActionType, EventName); }
        public int GetNumActionsOfType(Object ActionBP) { return Invoke<int>(nameof(GetNumActionsOfType), ActionBP); }
        public Array<ActionBase> GetAllActionsOfType(Object ActionBP, bool AllowChildClasses) { return Invoke<Array<ActionBase>>(nameof(GetAllActionsOfType), ActionBP, AllowChildClasses); }
        public ActionBase GetActionOfType(Object ActionBP) { return Invoke<ActionBase>(nameof(GetActionOfType), ActionBP); }
        public ActionBase GetActionByID(int ID) { return Invoke<ActionBase>(nameof(GetActionByID), ID); }
        public int DoActionInternal(ActionBase Action, DamageInfo DamageInfo, Array<Object> AdditionalTags) { return Invoke<int>(nameof(DoActionInternal), Action, DamageInfo, AdditionalTags); }
        public int DoAction(Object Action, Actor Cause, Actor Target, HitResult HitInfo, Object DamageType) { return Invoke<int>(nameof(DoAction), Action, Cause, Target, HitInfo, DamageType); }
        public bool CanDoActionInternal(Object ActionBP, DamageInfo DamageInfo, ActionBase NewAction) { return Invoke<bool>(nameof(CanDoActionInternal), ActionBP, DamageInfo, NewAction); }
    }
    public class ManagedTickInterface : Interface
    {
        public ManagedTickInterface(nint addr) : base(addr) { }
    }
    public class ActorTickManager : WorldSubsystem
    {
        public ActorTickManager(nint addr) : base(addr) { }
        public Array<Actor> Actors { get { return new Array<Actor>(this[nameof(Actors)].Address); } }
        public Array<ActorManagedTickEntry> NewTickActors { get { return new Array<ActorManagedTickEntry>(this[nameof(NewTickActors)].Address); } }
        public Array<ActorManagedTickEntry> TickActors { get { return new Array<ActorManagedTickEntry>(this[nameof(TickActors)].Address); } }
    }
    public class AssetCache : Object
    {
        public AssetCache(nint addr) : base(addr) { }
        public EAssetCachePreloadMethod PreloadMethod { get { return (EAssetCachePreloadMethod)this[nameof(PreloadMethod)].GetValue<int>(); } set { this[nameof(PreloadMethod)].SetValue<int>((int)value); } }
        public Array<Object> Assets { get { return new Array<Object>(this[nameof(Assets)].Address); } }
        public Object OnPreloadComplete { get { return this[nameof(OnPreloadComplete)]; } set { this[nameof(OnPreloadComplete)] = value; } }
        public Array<Object> LoadedAssets { get { return new Array<Object>(this[nameof(LoadedAssets)].Address); } }
        public void PreloadAssets() { Invoke(nameof(PreloadAssets)); }
        public bool IsAssetCachedPreloaded() { return Invoke<bool>(nameof(IsAssetCachedPreloaded)); }
        public AssetCache GetInstance() { return Invoke<AssetCache>(nameof(GetInstance)); }
    }
    public class AssetTags : AssetUserData
    {
        public AssetTags(nint addr) : base(addr) { }
        public Array<Object> AssetTags_value { get { return new Array<Object>(this[nameof(AssetTags)].Address); } }
        public bool SetAssetTag(Object Asset, Object Tag) { return Invoke<bool>(nameof(SetAssetTag), Asset, Tag); }
        public AssetTags GetAssetTags(Object Asset) { return Invoke<AssetTags>(nameof(GetAssetTags), Asset); }
        public bool CheckAssetTags(Object Asset, Array<Object> TagsToCheck, bool bAllOrNothing) { return Invoke<bool>(nameof(CheckAssetTags), Asset, TagsToCheck, bAllOrNothing); }
        public bool CheckAssetTag(Object Asset, Object Tag) { return Invoke<bool>(nameof(CheckAssetTag), Asset, Tag); }
    }
    public class AssetUtil : Object
    {
        public AssetUtil(nint addr) : base(addr) { }
        public Object LoadSoftReference(Object SoftObjRef) { return Invoke<Object>(nameof(LoadSoftReference), SoftObjRef); }
        public Object LoadSoftClassReference(Object SoftClsRef) { return Invoke<Object>(nameof(LoadSoftClassReference), SoftClsRef); }
        public Object LoadObjectFromPath(Object Path) { return Invoke<Object>(nameof(LoadObjectFromPath), Path); }
        public bool IsChildOfSoftClasses(Actor Actor, Array<Object> Classes) { return Invoke<bool>(nameof(IsChildOfSoftClasses), Actor, Classes); }
        public bool GetObjectPath(Object Object, Object Path) { return Invoke<bool>(nameof(GetObjectPath), Object, Path); }
        public Object GetCleanLevelStreamingName(World World, LevelStreaming Level, bool AppendBaseName) { return Invoke<Object>(nameof(GetCleanLevelStreamingName), World, Level, AppendBaseName); }
        public Object GetCleanLevelPackageName(World World, Object LevelPackagePath, bool AppendBaseName) { return Invoke<Object>(nameof(GetCleanLevelPackageName), World, LevelPackagePath, AppendBaseName); }
        public Object GetAssetFromComponent(ActorComponent Component) { return Invoke<Object>(nameof(GetAssetFromComponent), Component); }
    }
    public class CinematicInstance_Base : Object
    {
        public CinematicInstance_Base(nint addr) : base(addr) { }
        public CinematicPlayerSettings CinematicSettings { get { return this[nameof(CinematicSettings)].As<CinematicPlayerSettings>(); } set { this["CinematicSettings"] = value; } }
        public Object CinematicAsset { get { return this[nameof(CinematicAsset)].As<Object>(); } set { this["CinematicAsset"] = value; } }
        public Object CurrentSequencePlayer { get { return this[nameof(CurrentSequencePlayer)].As<Object>(); } set { this["CurrentSequencePlayer"] = value; } }
        public Actor CurrentSequenceActor { get { return this[nameof(CurrentSequenceActor)].As<Actor>(); } set { this["CurrentSequenceActor"] = value; } }
        public Actor CurrentSequenceInstigator { get { return this[nameof(CurrentSequenceInstigator)].As<Actor>(); } set { this["CurrentSequenceInstigator"] = value; } }
        public EventTreeComponent CurrentSequenceComponent { get { return this[nameof(CurrentSequenceComponent)].As<EventTreeComponent>(); } set { this["CurrentSequenceComponent"] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public Object OnInstanceComplete { get { return this[nameof(OnInstanceComplete)]; } set { this[nameof(OnInstanceComplete)] = value; } }
        public bool WasForceCompleted() { return Invoke<bool>(nameof(WasForceCompleted)); }
        public void OnFinished() { Invoke(nameof(OnFinished)); }
    }
    public class BinkInstance : CinematicInstance_Base
    {
        public BinkInstance(nint addr) : base(addr) { }
        public BinkMediaTexture BinkTextureTarget { get { return this[nameof(BinkTextureTarget)].As<BinkMediaTexture>(); } set { this["BinkTextureTarget"] = value; } }
        public SoundGunfire MediaSound { get { return this[nameof(MediaSound)].As<SoundGunfire>(); } set { this["MediaSound"] = value; } }
    }
    public class BlueprintFunctionLibraryGunfire : BlueprintFunctionLibrary
    {
        public BlueprintFunctionLibraryGunfire(nint addr) : base(addr) { }
        public AkGameObject Conv_AudioComponentGunfireToAkGameObject(AudioComponentGunfire AudioComponentGunfire) { return Invoke<AkGameObject>(nameof(Conv_AudioComponentGunfireToAkGameObject), AudioComponentGunfire); }
        public AudioComponentGunfire Conv_AkGameObjectToAudioComponentGunfire(AkGameObject AkGameObject) { return Invoke<AudioComponentGunfire>(nameof(Conv_AkGameObjectToAudioComponentGunfire), AkGameObject); }
        public AkComponent Conv_AudioComponentGunfireToAkComponent(AudioComponentGunfire AudioComponentGunfire) { return Invoke<AkComponent>(nameof(Conv_AudioComponentGunfireToAkComponent), AudioComponentGunfire); }
        public AudioComponentGunfire Conv_AkComponentToAudioComponentGunfire(AkComponent AkComponent) { return Invoke<AudioComponentGunfire>(nameof(Conv_AkComponentToAudioComponentGunfire), AkComponent); }
        public AkAudioEvent Conv_SoundGunfireToAkAudioEvent(SoundGunfire SoundGunfire) { return Invoke<AkAudioEvent>(nameof(Conv_SoundGunfireToAkAudioEvent), SoundGunfire); }
        public SoundGunfire Conv_AkAudioEventToSoundGunfire(AkAudioEvent AkAudioEvent) { return Invoke<SoundGunfire>(nameof(Conv_AkAudioEventToSoundGunfire), AkAudioEvent); }
        public AudioComponent Conv_AudioComponentGunfireToAudioComponent(AudioComponentGunfire AudioComponentGunfire) { return Invoke<AudioComponent>(nameof(Conv_AudioComponentGunfireToAudioComponent), AudioComponentGunfire); }
        public AudioComponentGunfire Conv_AudioComponentToAudioComponentGunfire(AudioComponent AudioComponent) { return Invoke<AudioComponentGunfire>(nameof(Conv_AudioComponentToAudioComponentGunfire), AudioComponent); }
        public SoundCue Conv_SoundGunfireToSoundCue(SoundGunfire SoundGunfire) { return Invoke<SoundCue>(nameof(Conv_SoundGunfireToSoundCue), SoundGunfire); }
        public SoundGunfire Conv_SoundCueToSoundGunfire(SoundCue SoundCue) { return Invoke<SoundGunfire>(nameof(Conv_SoundCueToSoundGunfire), SoundCue); }
        public SoundWave Conv_SoundGunfireToSoundWave(SoundGunfire SoundGunfire) { return Invoke<SoundWave>(nameof(Conv_SoundGunfireToSoundWave), SoundGunfire); }
        public SoundGunfire Conv_SoundWaveToSoundGunfire(SoundWave SoundWave) { return Invoke<SoundGunfire>(nameof(Conv_SoundWaveToSoundGunfire), SoundWave); }
        public SoundBase Conv_SoundGunfireToSoundBase(SoundGunfire SoundGunfire) { return Invoke<SoundBase>(nameof(Conv_SoundGunfireToSoundBase), SoundGunfire); }
        public SoundGunfire Conv_SoundBaseToSoundGunfire(SoundBase SoundBase) { return Invoke<SoundGunfire>(nameof(Conv_SoundBaseToSoundGunfire), SoundBase); }
        public ActorComponent Conv_AudioComponentGunfireToActorComponent(AudioComponentGunfire AudioComponentGunfire) { return Invoke<ActorComponent>(nameof(Conv_AudioComponentGunfireToActorComponent), AudioComponentGunfire); }
        public AudioComponentGunfire Conv_ActorComponentToAudioComponentGunfire(ActorComponent ActorComponent) { return Invoke<AudioComponentGunfire>(nameof(Conv_ActorComponentToAudioComponentGunfire), ActorComponent); }
        public SceneComponent Conv_AudioComponentGunfireToSceneComponent(AudioComponentGunfire AudioComponentGunfire) { return Invoke<SceneComponent>(nameof(Conv_AudioComponentGunfireToSceneComponent), AudioComponentGunfire); }
        public AudioComponentGunfire Conv_SceneComponentToAudioComponentGunfire(SceneComponent SceneComponent) { return Invoke<AudioComponentGunfire>(nameof(Conv_SceneComponentToAudioComponentGunfire), SceneComponent); }
        public Object Conv_SoundGunfireToObject(SoundGunfire SoundGunfire) { return Invoke<Object>(nameof(Conv_SoundGunfireToObject), SoundGunfire); }
        public SoundGunfire Conv_ObjectToSoundGunfire(Object Object) { return Invoke<SoundGunfire>(nameof(Conv_ObjectToSoundGunfire), Object); }
        public void SetFadeScreenSize(DecalComponent Decal, float Size) { Invoke(nameof(SetFadeScreenSize), Decal, Size); }
        public void SetDamageInfoVariableObject(DamageInfo DamageInfo, Object VariableName, Object Value) { Invoke(nameof(SetDamageInfoVariableObject), DamageInfo, VariableName, Value); }
        public void SetDamageInfoVariableInt(DamageInfo DamageInfo, Object VariableName, int Value) { Invoke(nameof(SetDamageInfoVariableInt), DamageInfo, VariableName, Value); }
        public void SetDamageInfoVariableFloat(DamageInfo DamageInfo, Object VariableName, float Value) { Invoke(nameof(SetDamageInfoVariableFloat), DamageInfo, VariableName, Value); }
        public void SetDamageInfoVariableBool(DamageInfo DamageInfo, Object VariableName, bool Value) { Invoke(nameof(SetDamageInfoVariableBool), DamageInfo, VariableName, Value); }
        public void ModifyDamageInfoVariableInt(DamageInfo DamageInfo, Object VariableName, int Value) { Invoke(nameof(ModifyDamageInfoVariableInt), DamageInfo, VariableName, Value); }
        public void ModifyDamageInfoVariableFloat(DamageInfo DamageInfo, Object VariableName, float Value) { Invoke(nameof(ModifyDamageInfoVariableFloat), DamageInfo, VariableName, Value); }
        public bool HasDamageInfoVariable(DamageInfo DamageInfo, Object VariableName) { return Invoke<bool>(nameof(HasDamageInfoVariable), DamageInfo, VariableName); }
        public Object GetDefaultObject(Object ObjectClass) { return Invoke<Object>(nameof(GetDefaultObject), ObjectClass); }
        public Object GetDamageInfoVariableObject(DamageInfo DamageInfo, Object VariableName) { return Invoke<Object>(nameof(GetDamageInfoVariableObject), DamageInfo, VariableName); }
        public int GetDamageInfoVariableInt(DamageInfo DamageInfo, Object VariableName) { return Invoke<int>(nameof(GetDamageInfoVariableInt), DamageInfo, VariableName); }
        public float GetDamageInfoVariableFloat(DamageInfo DamageInfo, Object VariableName) { return Invoke<float>(nameof(GetDamageInfoVariableFloat), DamageInfo, VariableName); }
        public bool GetDamageInfoVariableBool(DamageInfo DamageInfo, Object VariableName) { return Invoke<bool>(nameof(GetDamageInfoVariableBool), DamageInfo, VariableName); }
    }
    public class CharacterManager : WorldSubsystem
    {
        public CharacterManager(nint addr) : base(addr) { }
        public ActorTickManager TickManager { get { return this[nameof(TickManager)].As<ActorTickManager>(); } set { this["TickManager"] = value; } }
        public Array<CharacterGunfire> Characters { get { return new Array<CharacterGunfire>(this[nameof(Characters)].Address); } }
        public void KillAllCharactersForOwner(Actor Owner) { Invoke(nameof(KillAllCharactersForOwner), Owner); }
        public bool IsCharacterTargeted(Actor Target) { return Invoke<bool>(nameof(IsCharacterTargeted), Target); }
        public CharacterManager GetInstance(Object WorldContextObject) { return Invoke<CharacterManager>(nameof(GetInstance), WorldContextObject); }
        public Array<CharacterGunfire> GetCharactersTargetingActor(Actor Target) { return Invoke<Array<CharacterGunfire>>(nameof(GetCharactersTargetingActor), Target); }
        public Array<CharacterGunfire> GetCharactersOnBaseComponent(PrimitiveComponent Base) { return Invoke<Array<CharacterGunfire>>(nameof(GetCharactersOnBaseComponent), Base); }
        public Array<CharacterGunfire> GetCharactersOnBaseActor(Actor Base) { return Invoke<Array<CharacterGunfire>>(nameof(GetCharactersOnBaseActor), Base); }
        public Array<CharacterGunfire> GetCharactersInAggroGroup(Object AggroGroup) { return Invoke<Array<CharacterGunfire>>(nameof(GetCharactersInAggroGroup), AggroGroup); }
        public Array<CharacterGunfire> GetCharactersForOwner(Actor Owner) { return Invoke<Array<CharacterGunfire>>(nameof(GetCharactersForOwner), Owner); }
        public void DestroyAllCharactersForOwner(Actor Owner) { Invoke(nameof(DestroyAllCharactersForOwner), Owner); }
        public void ActivateCharactersOnSegment(Vector From, Vector To, bool bBonesOnly) { Invoke(nameof(ActivateCharactersOnSegment), From, To, bBonesOnly); }
        public void ActivateCharactersInSphere(Vector Origin, float Radius, bool bBonesOnly) { Invoke(nameof(ActivateCharactersInSphere), Origin, Radius, bBonesOnly); }
    }
    public class CharacterMovementComponentGunfire : CharacterMovementComponent
    {
        public CharacterMovementComponentGunfire(nint addr) : base(addr) { }
        public float MaxSpeedBackwards { get { return this[nameof(MaxSpeedBackwards)].GetValue<float>(); } set { this[nameof(MaxSpeedBackwards)].SetValue<float>(value); } }
        public float BackwardStartAngle { get { return this[nameof(BackwardStartAngle)].GetValue<float>(); } set { this[nameof(BackwardStartAngle)].SetValue<float>(value); } }
        public bool bAllowVerticalInputAcceleration { get { return this[nameof(bAllowVerticalInputAcceleration)].Flag; } set { this[nameof(bAllowVerticalInputAcceleration)].Flag = value; } }
        public bool EnableMovement { get { return this[nameof(EnableMovement)].Flag; } set { this[nameof(EnableMovement)].Flag = value; } }
        public bool bIgnoreZFrictionAndBrakingWhenFlying { get { return this[nameof(bIgnoreZFrictionAndBrakingWhenFlying)].Flag; } set { this[nameof(bIgnoreZFrictionAndBrakingWhenFlying)].Flag = value; } }
        public bool bUpdateRotationPostCameraUpdate { get { return this[nameof(bUpdateRotationPostCameraUpdate)].Flag; } set { this[nameof(bUpdateRotationPostCameraUpdate)].Flag = value; } }
        public bool bUsingProjectedLocation { get { return this[nameof(bUsingProjectedLocation)].Flag; } set { this[nameof(bUsingProjectedLocation)].Flag = value; } }
        public Vector ProjectedLocation { get { return this[nameof(ProjectedLocation)].As<Vector>(); } set { this["ProjectedLocation"] = value; } }
        public bool DoSoftCharacterCollision { get { return this[nameof(DoSoftCharacterCollision)].Flag; } set { this[nameof(DoSoftCharacterCollision)].Flag = value; } }
        public ESoftCollisionMode SoftCollisionMode { get { return (ESoftCollisionMode)this[nameof(SoftCollisionMode)].GetValue<int>(); } set { this[nameof(SoftCollisionMode)].SetValue<int>((int)value); } }
        public float SoftCharacterCollisionWeight { get { return this[nameof(SoftCharacterCollisionWeight)].GetValue<float>(); } set { this[nameof(SoftCharacterCollisionWeight)].SetValue<float>(value); } }
        public float SoftCharacterCollisionRadius { get { return this[nameof(SoftCharacterCollisionRadius)].GetValue<float>(); } set { this[nameof(SoftCharacterCollisionRadius)].SetValue<float>(value); } }
        public CharacterGunfire SoftCharacterIgnore { get { return this[nameof(SoftCharacterIgnore)].As<CharacterGunfire>(); } set { this["SoftCharacterIgnore"] = value; } }
        public bool DoSpecialCharacterCollision { get { return this[nameof(DoSpecialCharacterCollision)].Flag; } set { this[nameof(DoSpecialCharacterCollision)].Flag = value; } }
        public int SpecialCharacterCollisionIterations { get { return this[nameof(SpecialCharacterCollisionIterations)].GetValue<int>(); } set { this[nameof(SpecialCharacterCollisionIterations)].SetValue<int>(value); } }
        public float SpecialCharacterCollisionAlpha { get { return this[nameof(SpecialCharacterCollisionAlpha)].GetValue<float>(); } set { this[nameof(SpecialCharacterCollisionAlpha)].SetValue<float>(value); } }
        public Object MaxSpeedOverrides { get { return this[nameof(MaxSpeedOverrides)]; } set { this[nameof(MaxSpeedOverrides)] = value; } }
        public float TurnSmoothTime { get { return this[nameof(TurnSmoothTime)].GetValue<float>(); } set { this[nameof(TurnSmoothTime)].SetValue<float>(value); } }
        public float CrouchedRadius { get { return this[nameof(CrouchedRadius)].GetValue<float>(); } set { this[nameof(CrouchedRadius)].SetValue<float>(value); } }
        public bool ConstrainToNavMesh { get { return this[nameof(ConstrainToNavMesh)].Flag; } set { this[nameof(ConstrainToNavMesh)].Flag = value; } }
        public float PerchSimpleRadius { get { return this[nameof(PerchSimpleRadius)].GetValue<float>(); } set { this[nameof(PerchSimpleRadius)].SetValue<float>(value); } }
        public bool bPerchFallingRadiusChange { get { return this[nameof(bPerchFallingRadiusChange)].Flag; } set { this[nameof(bPerchFallingRadiusChange)].Flag = value; } }
        public float PerchFallingRadius { get { return this[nameof(PerchFallingRadius)].GetValue<float>(); } set { this[nameof(PerchFallingRadius)].SetValue<float>(value); } }
        public float PerchFallingThreshold { get { return this[nameof(PerchFallingThreshold)].GetValue<float>(); } set { this[nameof(PerchFallingThreshold)].SetValue<float>(value); } }
        public bool bDeferPerchUntilOnPlatform { get { return this[nameof(bDeferPerchUntilOnPlatform)].Flag; } set { this[nameof(bDeferPerchUntilOnPlatform)].Flag = value; } }
        public bool PerchShowDebug { get { return this[nameof(PerchShowDebug)].Flag; } set { this[nameof(PerchShowDebug)].Flag = value; } }
        public float KnockBackImpulseScale { get { return this[nameof(KnockBackImpulseScale)].GetValue<float>(); } set { this[nameof(KnockBackImpulseScale)].SetValue<float>(value); } }
        public float KnockUpImpulseScale { get { return this[nameof(KnockUpImpulseScale)].GetValue<float>(); } set { this[nameof(KnockUpImpulseScale)].SetValue<float>(value); } }
        public float WallSlideDampenThresholdDeg { get { return this[nameof(WallSlideDampenThresholdDeg)].GetValue<float>(); } set { this[nameof(WallSlideDampenThresholdDeg)].SetValue<float>(value); } }
        public float WallSlideDampenMulti { get { return this[nameof(WallSlideDampenMulti)].GetValue<float>(); } set { this[nameof(WallSlideDampenMulti)].SetValue<float>(value); } }
        public Object LedgeConstraintParams { get { return this[nameof(LedgeConstraintParams)]; } set { this[nameof(LedgeConstraintParams)] = value; } }
        public bool bUseLeastSquaresForLedgeConstraint { get { return this[nameof(bUseLeastSquaresForLedgeConstraint)].Flag; } set { this[nameof(bUseLeastSquaresForLedgeConstraint)].Flag = value; } }
        public float DesiredCapsuleScaleFromLedge { get { return this[nameof(DesiredCapsuleScaleFromLedge)].GetValue<float>(); } set { this[nameof(DesiredCapsuleScaleFromLedge)].SetValue<float>(value); } }
        public int LedgeSamples { get { return this[nameof(LedgeSamples)].GetValue<int>(); } set { this[nameof(LedgeSamples)].SetValue<int>(value); } }
        public float LedgeSamplesDistance { get { return this[nameof(LedgeSamplesDistance)].GetValue<float>(); } set { this[nameof(LedgeSamplesDistance)].SetValue<float>(value); } }
        public int LedgeSampleIterations { get { return this[nameof(LedgeSampleIterations)].GetValue<int>(); } set { this[nameof(LedgeSampleIterations)].SetValue<int>(value); } }
        public float MaxLedgeForwardTestDistance { get { return this[nameof(MaxLedgeForwardTestDistance)].GetValue<float>(); } set { this[nameof(MaxLedgeForwardTestDistance)].SetValue<float>(value); } }
        public float CliffCheckMaxAngle { get { return this[nameof(CliffCheckMaxAngle)].GetValue<float>(); } set { this[nameof(CliffCheckMaxAngle)].SetValue<float>(value); } }
        public int ClickCheckAngleIterations { get { return this[nameof(ClickCheckAngleIterations)].GetValue<int>(); } set { this[nameof(ClickCheckAngleIterations)].SetValue<int>(value); } }
        public int RequiredSamplesForEdge { get { return this[nameof(RequiredSamplesForEdge)].GetValue<int>(); } set { this[nameof(RequiredSamplesForEdge)].SetValue<int>(value); } }
        public float LedgePushForce { get { return this[nameof(LedgePushForce)].GetValue<float>(); } set { this[nameof(LedgePushForce)].SetValue<float>(value); } }
        public bool bAllowFallingIfAlreadyOffLedge { get { return this[nameof(bAllowFallingIfAlreadyOffLedge)].Flag; } set { this[nameof(bAllowFallingIfAlreadyOffLedge)].Flag = value; } }
        public float StopCosineThreshold { get { return this[nameof(StopCosineThreshold)].GetValue<float>(); } set { this[nameof(StopCosineThreshold)].SetValue<float>(value); } }
        public ConditionList ForceConstrainToGroundConditions { get { return this[nameof(ForceConstrainToGroundConditions)].As<ConditionList>(); } set { this["ForceConstrainToGroundConditions"] = value; } }
        public float NavMeshProjectionHeightOffset { get { return this[nameof(NavMeshProjectionHeightOffset)].GetValue<float>(); } set { this[nameof(NavMeshProjectionHeightOffset)].SetValue<float>(value); } }
        public Object ForcePhysWalkingTag { get { return this[nameof(ForcePhysWalkingTag)]; } set { this[nameof(ForcePhysWalkingTag)] = value; } }
        public bool bProjectUsingClosestHitToNav { get { return this[nameof(bProjectUsingClosestHitToNav)].Flag; } set { this[nameof(bProjectUsingClosestHitToNav)].Flag = value; } }
        public float IdealDistanceToNav { get { return this[nameof(IdealDistanceToNav)].GetValue<float>(); } set { this[nameof(IdealDistanceToNav)].SetValue<float>(value); } }
        public float NavProjectionCapsuleRadiusScale { get { return this[nameof(NavProjectionCapsuleRadiusScale)].GetValue<float>(); } set { this[nameof(NavProjectionCapsuleRadiusScale)].SetValue<float>(value); } }
        public float AcceptanceRadiusScale { get { return this[nameof(AcceptanceRadiusScale)].GetValue<float>(); } set { this[nameof(AcceptanceRadiusScale)].SetValue<float>(value); } }
        public float AcceptanceHeightScale { get { return this[nameof(AcceptanceHeightScale)].GetValue<float>(); } set { this[nameof(AcceptanceHeightScale)].SetValue<float>(value); } }
        public ENavigationType DefaultNavigationType { get { return (ENavigationType)this[nameof(DefaultNavigationType)].GetValue<int>(); } set { this[nameof(DefaultNavigationType)].SetValue<int>((int)value); } }
        public float FullTurnSpeedVelocity { get { return this[nameof(FullTurnSpeedVelocity)].GetValue<float>(); } set { this[nameof(FullTurnSpeedVelocity)].SetValue<float>(value); } }
        public float VelocityTurnSpeedThreshold { get { return this[nameof(VelocityTurnSpeedThreshold)].GetValue<float>(); } set { this[nameof(VelocityTurnSpeedThreshold)].SetValue<float>(value); } }
        public Object OnPhysicsBoundsChangedEvent { get { return this[nameof(OnPhysicsBoundsChangedEvent)]; } set { this[nameof(OnPhysicsBoundsChangedEvent)] = value; } }
        public Object OnWaterBoundsChangedEvent { get { return this[nameof(OnWaterBoundsChangedEvent)]; } set { this[nameof(OnWaterBoundsChangedEvent)] = value; } }
        public bool bAutoSetSwimmingMode { get { return this[nameof(bAutoSetSwimmingMode)].Flag; } set { this[nameof(bAutoSetSwimmingMode)].Flag = value; } }
        public bool bStartWithSwimmingDisabled { get { return this[nameof(bStartWithSwimmingDisabled)].Flag; } set { this[nameof(bStartWithSwimmingDisabled)].Flag = value; } }
        public void SetSwingConstraint(bool Enabled, Vector SwingPoint, float RopeLength) { Invoke(nameof(SetSwingConstraint), Enabled, SwingPoint, RopeLength); }
        public void SetNavigationType(ENavigationType NavigationType) { Invoke(nameof(SetNavigationType), NavigationType); }
        public void SetCanSwim(bool bInCanSwim) { Invoke(nameof(SetCanSwim), bInCanSwim); }
        public void MarkCharacterTeleported() { Invoke(nameof(MarkCharacterTeleported)); }
        public bool Is3DNavigating() { return Invoke<bool>(nameof(Is3DNavigating)); }
        public Actor GetWaterBoundsActor(bool bConstrainToFluidFilled) { return Invoke<Actor>(nameof(GetWaterBoundsActor), bConstrainToFluidFilled); }
        public PhysicsBounds GetWaterBounds(bool bConstrainToFluidFilled) { return Invoke<PhysicsBounds>(nameof(GetWaterBounds), bConstrainToFluidFilled); }
        public Actor GetPhysicsBoundsActor() { return Invoke<Actor>(nameof(GetPhysicsBoundsActor)); }
        public PhysicsBounds GetPhysicsBounds() { return Invoke<PhysicsBounds>(nameof(GetPhysicsBounds)); }
        public ENavigationType GetNavigationType() { return Invoke<ENavigationType>(nameof(GetNavigationType)); }
        public Object GetDebugInfo(int DebugLevel) { return Invoke<Object>(nameof(GetDebugInfo), DebugLevel); }
        public Object GetCurrentWaterBoundsType(bool bConstrainToFluidFilled) { return Invoke<Object>(nameof(GetCurrentWaterBoundsType), bConstrainToFluidFilled); }
        public Object GetCurrentPhysicsBoundsType() { return Invoke<Object>(nameof(GetCurrentPhysicsBoundsType)); }
        public bool CanRecieveSoftCharacterCollision() { return Invoke<bool>(nameof(CanRecieveSoftCharacterCollision)); }
        public bool CanDoSoftCharacterCollision() { return Invoke<bool>(nameof(CanDoSoftCharacterCollision)); }
        public void AddExternalVelocity(Vector ExternalVelocityIn) { Invoke(nameof(AddExternalVelocity), ExternalVelocityIn); }
    }
    public class KeyImageDatabase : DataAsset
    {
        public KeyImageDatabase(nint addr) : base(addr) { }
        public Array<KeyImage> KeyImages { get { return new Array<KeyImage>(this[nameof(KeyImages)].Address); } }
        public Texture2D GetTexture(Key Key, float AngleOut) { return Invoke<Texture2D>(nameof(GetTexture), Key, AngleOut); }
    }
    public class CheatInputSettings : Object
    {
        public CheatInputSettings(nint addr) : base(addr) { }
        public bool bCheatsEnabled { get { return this[nameof(bCheatsEnabled)].Flag; } set { this[nameof(bCheatsEnabled)].Flag = value; } }
        public bool bCheatMenuWaitsFullDuration { get { return this[nameof(bCheatMenuWaitsFullDuration)].Flag; } set { this[nameof(bCheatMenuWaitsFullDuration)].Flag = value; } }
        public Array<InputKeySet> GlobalCheatToggleKeys { get { return new Array<InputKeySet>(this[nameof(GlobalCheatToggleKeys)].Address); } }
        public Object GlobalCheatMenu { get { return this[nameof(GlobalCheatMenu)]; } set { this[nameof(GlobalCheatMenu)] = value; } }
        public Object FlyCheatMenu { get { return this[nameof(FlyCheatMenu)]; } set { this[nameof(FlyCheatMenu)] = value; } }
        public Object CheatToast { get { return this[nameof(CheatToast)]; } set { this[nameof(CheatToast)] = value; } }
        public Array<CheatActionCategory> CheatCategories { get { return new Array<CheatActionCategory>(this[nameof(CheatCategories)].Address); } }
        public Array<CheatInputAction> ActionMappings { get { return new Array<CheatInputAction>(this[nameof(ActionMappings)].Address); } }
    }
    public class CombatUtil : Object
    {
        public CombatUtil(nint addr) : base(addr) { }
        public void WeaponTraceEx(Actor Cause, Vector StartTrace, Vector EndTrace, WeaponTracePath OutPath) { Invoke(nameof(WeaponTraceEx), Cause, StartTrace, EndTrace, OutPath); }
        public HitResult WeaponTrace(Actor Cause, Vector StartTrace, Vector EndTrace) { return Invoke<HitResult>(nameof(WeaponTrace), Cause, StartTrace, EndTrace); }
        public void SpawnOverlapImpactEffects(Object WorldContextObject, ImpactEffectSelector ImpactEffect, HitResult Hit, Transform SpawnTransform) { Invoke(nameof(SpawnOverlapImpactEffects), WorldContextObject, ImpactEffect, Hit, SpawnTransform); }
        public void SpawnImpactEffectsFromTrace(Actor Cause, ImpactEffectSelector ImpactEffect, Vector Start, Vector End, byte TraceChannel, Actor Ignore) { Invoke(nameof(SpawnImpactEffectsFromTrace), Cause, ImpactEffect, Start, End, TraceChannel, Ignore); }
        public bool SpawnImpactEffectProjectile(Actor Projectile, Actor HitActor, ImpactEffectSelector ImpactEffect) { return Invoke<bool>(nameof(SpawnImpactEffectProjectile), Projectile, HitActor, ImpactEffect); }
        public void SpawnImpactEffectAOE(Actor HitActor, ImpactEffectSelector ImpactEffect, Vector AOESourceLocation) { Invoke(nameof(SpawnImpactEffectAOE), HitActor, ImpactEffect, AOESourceLocation); }
        public void SpawnImpactEffect(Object WorldContextObject, ImpactEffectDescriptor ImpactEffectDescriptor, HitResult Impact, GunfireAudioPlayParams AudioPlayParams) { Invoke(nameof(SpawnImpactEffect), WorldContextObject, ImpactEffectDescriptor, Impact, AudioPlayParams); }
        public void SpawnBestImpactEffect(Actor Cause, ImpactEffectDescriptor ImpactEffectDescriptor, HitResult Impact, bool UseBodyPhysicsMaterial) { Invoke(nameof(SpawnBestImpactEffect), Cause, ImpactEffectDescriptor, Impact, UseBodyPhysicsMaterial); }
        public Object ResolveDamageType(Actor Cause, Actor Owner) { return Invoke<Object>(nameof(ResolveDamageType), Cause, Owner); }
        public Actor ResolveDamageOwner(Actor Cause) { return Invoke<Actor>(nameof(ResolveDamageOwner), Cause); }
        public Vector PredictLocation(Character Querier, Character Target, float Time, float Offset) { return Invoke<Vector>(nameof(PredictLocation), Querier, Target, Time, Offset); }
        public bool IsValidAimTarget(Actor TestTarget, Actor AimingOwner) { return Invoke<bool>(nameof(IsValidAimTarget), TestTarget, AimingOwner); }
        public bool IsFriendly(Actor Actor1, Actor Actor2) { return Invoke<bool>(nameof(IsFriendly), Actor1, Actor2); }
        public bool IsEnemy(Actor Actor1, Actor Actor2) { return Invoke<bool>(nameof(IsEnemy), Actor1, Actor2); }
        public bool IsDamageable(Actor Actor) { return Invoke<bool>(nameof(IsDamageable), Actor); }
        public bool IsAlive(Actor Damageable) { return Invoke<bool>(nameof(IsAlive), Damageable); }
        public bool IgnoresWeakspotStatRequirement(Object DamageType) { return Invoke<bool>(nameof(IgnoresWeakspotStatRequirement), DamageType); }
        public bool HasHealingClass(Object HealingType, Object RequiredClass) { return Invoke<bool>(nameof(HasHealingClass), HealingType, RequiredClass); }
        public bool HasDamageClass(Object DamageType, Object RequiredClass) { return Invoke<bool>(nameof(HasDamageClass), DamageType, RequiredClass); }
        public bool GetTargetVector(Actor Cause, Object SourceSocket, Actor Target, bool SnapToGround, Vector Origin, Vector End) { return Invoke<bool>(nameof(GetTargetVector), Cause, SourceSocket, Target, SnapToGround, Origin, End); }
        public bool GetReticuleLocation(Pawn Pawn, float Range, float Radius, Rotator Direction, Vector Location) { return Invoke<bool>(nameof(GetReticuleLocation), Pawn, Range, Radius, Direction, Location); }
        public Object GetRandomHitPhantomThatIsntInvulnerable(Object WorldContextObject, Actor Actor, Vector ImpactPoint, float Radius) { return Invoke<Object>(nameof(GetRandomHitPhantomThatIsntInvulnerable), WorldContextObject, Actor, ImpactPoint, Radius); }
        public Actor GetPlayerCameraAimTarget(Pawn Cause, float Range) { return Invoke<Actor>(nameof(GetPlayerCameraAimTarget), Cause, Range); }
        public bool GetPlayerAimVector(Pawn Cause, float Range, Vector Origin, Vector End) { return Invoke<bool>(nameof(GetPlayerAimVector), Cause, Range, Origin, End); }
        public float GetMinimumTotalDamageReductionScalar() { return Invoke<float>(nameof(GetMinimumTotalDamageReductionScalar)); }
        public float GetMaximumDamageReductionPerStat() { return Invoke<float>(nameof(GetMaximumDamageReductionPerStat)); }
        public float GetFalloffDamagePenalty() { return Invoke<float>(nameof(GetFalloffDamagePenalty)); }
        public Object GetFaction(Actor Actor) { return Invoke<Object>(nameof(GetFaction), Actor); }
        public Vector GetEyePos(Character Character) { return Invoke<Vector>(nameof(GetEyePos), Character); }
        public float GetDamageReductionFromResistanceByDamageClass(DamageClass DamageClass, float DamageResistance, float AttackerLevel) { return Invoke<float>(nameof(GetDamageReductionFromResistanceByDamageClass), DamageClass, DamageResistance, AttackerLevel); }
        public float GetDamageReductionByDamageClass(DamageClass DamageClass, float DamageReduction) { return Invoke<float>(nameof(GetDamageReductionByDamageClass), DamageClass, DamageReduction); }
        public Vector GetChestPos(Character Character) { return Invoke<Vector>(nameof(GetChestPos), Character); }
        public Vector GetBasePos(Actor Actor) { return Invoke<Vector>(nameof(GetBasePos), Actor); }
        public bool GetApproximateSurfaceNormalForLocation(Object WorldContextObject, SurfaceNormalCheckParams Params, Vector OutSurfaceNormal, Vector OutPlaneOrigin) { return Invoke<bool>(nameof(GetApproximateSurfaceNormalForLocation), WorldContextObject, Params, OutSurfaceNormal, OutPlaneOrigin); }
        public bool GetAimVector(Actor Cause, Object SourceSocket, float Range, Vector Origin, Vector End) { return Invoke<bool>(nameof(GetAimVector), Cause, SourceSocket, Range, Origin, End); }
        public Vector GetAimPos(Actor Actor, Actor Target) { return Invoke<Vector>(nameof(GetAimPos), Actor, Target); }
        public EAffiliation GetAffiliation(Actor Actor1, Actor Actor2) { return Invoke<EAffiliation>(nameof(GetAffiliation), Actor1, Actor2); }
        public void FireProjectileAsync(Object WorldContextObject, Object ProjectileBP, ProjectileParams Params, EFireOutExec Exec, HitResult HitResult, LatentActionInfo LatentInfo) { Invoke(nameof(FireProjectileAsync), WorldContextObject, ProjectileBP, Params, Exec, HitResult, LatentInfo); }
        public Actor FireProjectile(Object ProjectileBP, ProjectileParams Params) { return Invoke<Actor>(nameof(FireProjectile), ProjectileBP, Params); }
        public DamageInfo CreateDamageInfoFromTarget(Actor Cause, Actor Target, float Damage, float DamageMod, float DamageScalar, int PowerOverride, Object DamageType) { return Invoke<DamageInfo>(nameof(CreateDamageInfoFromTarget), Cause, Target, Damage, DamageMod, DamageScalar, PowerOverride, DamageType); }
        public DamageInfo CreateDamageInfoFromHit(Actor Cause, HitResult Hit, float Damage, float DamageMod, float DamageScalar, int PowerOverride, Object DamageType) { return Invoke<DamageInfo>(nameof(CreateDamageInfoFromHit), Cause, Hit, Damage, DamageMod, DamageScalar, PowerOverride, DamageType); }
        public float ComputeDamageFalloffFromDistance(float Distance, float InnerRadius, float OuterRadius, float Damage, float DamageMin, CurveFloat FalloffCurve) { return Invoke<float>(nameof(ComputeDamageFalloffFromDistance), Distance, InnerRadius, OuterRadius, Damage, DamageMin, FalloffCurve); }
        public float ComputeDamageFalloff(Vector Source, Actor Target, float InnerRadius, float OuterRadius, float Damage, float DamageMin, CurveFloat FalloffCurve) { return Invoke<float>(nameof(ComputeDamageFalloff), Source, Target, InnerRadius, OuterRadius, Damage, DamageMin, FalloffCurve); }
        public Vector CalculateArcVelocity(Vector Start, Vector End, float Gravity, float Speed, float ArcHeight, float TravelTime, EAutoArcType Type) { return Invoke<Vector>(nameof(CalculateArcVelocity), Start, End, Gravity, Speed, ArcHeight, TravelTime, Type); }
        public Array<Vector> ApplyWeaponSpread(Actor Cause, Vector Origin, Vector End, int SprayCount, float Spread, RandomStream RandomStream) { return Invoke<Array<Vector>>(nameof(ApplyWeaponSpread), Cause, Origin, End, SprayCount, Spread, RandomStream); }
        public void ApplySelfHealing(Actor Target, float Healing, float HealingMod, float HealingScalar, Object HealingType) { Invoke(nameof(ApplySelfHealing), Target, Healing, HealingMod, HealingScalar, HealingType); }
        public void ApplyHealing(Actor Owner, Actor CauseActor, Actor TargetActor, float Healing, float HealingMod, float HealingScalar, Object HealingType) { Invoke(nameof(ApplyHealing), Owner, CauseActor, TargetActor, Healing, HealingMod, HealingScalar, HealingType); }
        public void ApplyDamageInfo(Object WorldContextObject, DamageInfo DamageInfo, DamageInfo Result) { Invoke(nameof(ApplyDamageInfo), WorldContextObject, DamageInfo, Result); }
        public void ApplyDamage(Actor CauseActor, Actor TargetActor, float Damage, float DamageMod, float DamageScalar, int PowerOverride, Object DamageType) { Invoke(nameof(ApplyDamage), CauseActor, TargetActor, Damage, DamageMod, DamageScalar, PowerOverride, DamageType); }
        public Array<Vector> ApplyCustomWeaponSpread(Actor Cause, Vector Origin, Vector End, int SprayCount, float Spread, RandomStream RandomStream, CustomWeaponSpread CustomSpread) { return Invoke<Array<Vector>>(nameof(ApplyCustomWeaponSpread), Cause, Origin, End, SprayCount, Spread, RandomStream, CustomSpread); }
        public bool AllowsWeakSpots(Object DamageType) { return Invoke<bool>(nameof(AllowsWeakSpots), DamageType); }
        public bool AllowsPiercing(Object DamageType) { return Invoke<bool>(nameof(AllowsPiercing), DamageType); }
        public bool AllowsCriticalHits(Object DamageType) { return Invoke<bool>(nameof(AllowsCriticalHits), DamageType); }
        public bool AllowAction(CharacterGunfire Character) { return Invoke<bool>(nameof(AllowAction), Character); }
    }
    public class DamageableActor : Actor
    {
        public DamageableActor(nint addr) : base(addr) { }
        public bool Invincible { get { return this[nameof(Invincible)].Flag; } set { this[nameof(Invincible)].Flag = value; } }
        public EInvincibleHandlingMethod InvincibleMethod { get { return (EInvincibleHandlingMethod)this[nameof(InvincibleMethod)].GetValue<int>(); } set { this[nameof(InvincibleMethod)].SetValue<int>((int)value); } }
        public bool BeginNetDormant { get { return this[nameof(BeginNetDormant)].Flag; } set { this[nameof(BeginNetDormant)].Flag = value; } }
        public float HealthMax { get { return this[nameof(HealthMax)].GetValue<float>(); } set { this[nameof(HealthMax)].SetValue<float>(value); } }
        public Array<float> DamageThresholds { get { return new Array<float>(this[nameof(DamageThresholds)].Address); } }
        public Object AimTarget { get { return this[nameof(AimTarget)]; } set { this[nameof(AimTarget)] = value; } }
        public Array<Object> VisualTags { get { return new Array<Object>(this[nameof(VisualTags)].Address); } }
        public Object Faction { get { return this[nameof(Faction)]; } set { this[nameof(Faction)] = value; } }
        public bool DisablePersistence { get { return this[nameof(DisablePersistence)].Flag; } set { this[nameof(DisablePersistence)].Flag = value; } }
        public bool UseLevelScaling { get { return this[nameof(UseLevelScaling)].Flag; } set { this[nameof(UseLevelScaling)].Flag = value; } }
        public byte DamageableLevel { get { return this[nameof(DamageableLevel)].GetValue<byte>(); } set { this[nameof(DamageableLevel)].SetValue<byte>(value); } }
        public Object OnHealthChanged { get { return this[nameof(OnHealthChanged)]; } set { this[nameof(OnHealthChanged)] = value; } }
        public Object OnTakeDamage { get { return this[nameof(OnTakeDamage)]; } set { this[nameof(OnTakeDamage)] = value; } }
        public Object OnDead { get { return this[nameof(OnDead)]; } set { this[nameof(OnDead)] = value; } }
        public float Health { get { return this[nameof(Health)].GetValue<float>(); } set { this[nameof(Health)].SetValue<float>(value); } }
        public int DamageState { get { return this[nameof(DamageState)].GetValue<int>(); } set { this[nameof(DamageState)].SetValue<int>(value); } }
        public Array<SceneComponent> DamageStates { get { return new Array<SceneComponent>(this[nameof(DamageStates)].Address); } }
        public SceneComponent AimTargetComponent { get { return this[nameof(AimTargetComponent)].As<SceneComponent>(); } set { this["AimTargetComponent"] = value; } }
        public StatsComponent DamageStats { get { return this[nameof(DamageStats)].As<StatsComponent>(); } set { this["DamageStats"] = value; } }
        public Array<MaterialInterface> DamageMaterials { get { return new Array<MaterialInterface>(this[nameof(DamageMaterials)].Address); } }
        public Array<MaterialInterface> RepairMaterials { get { return new Array<MaterialInterface>(this[nameof(RepairMaterials)].Address); } }
        public void UpdateVisualState(Object TransitionTag) { Invoke(nameof(UpdateVisualState), TransitionTag); }
        public void SetHealth(float NewHealth) { Invoke(nameof(SetHealth), NewHealth); }
        public void PostComputeStats() { Invoke(nameof(PostComputeStats)); }
        public void OnRep_Health() { Invoke(nameof(OnRep_Health)); }
        public void OnNotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyTakeDamage), DamageInfo); }
        public void OnNotifyDead(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyDead), DamageInfo); }
        public bool IsAlive() { return Invoke<bool>(nameof(IsAlive)); }
        public int GetNumDamageStates() { return Invoke<int>(nameof(GetNumDamageStates)); }
        public float GetHealthPercentage() { return Invoke<float>(nameof(GetHealthPercentage)); }
        public float GetHealthMax() { return Invoke<float>(nameof(GetHealthMax)); }
        public float GetHealth() { return Invoke<float>(nameof(GetHealth)); }
        public int GetDamageState() { return Invoke<int>(nameof(GetDamageState)); }
        public void FilterIncomingDamage(DamageInfo DamageInfo, float DamageOut, bool ShouldApplyDamage) { Invoke(nameof(FilterIncomingDamage), DamageInfo, DamageOut, ShouldApplyDamage); }
        public void DifficultyChanged() { Invoke(nameof(DifficultyChanged)); }
        public void ComputeStats() { Invoke(nameof(ComputeStats)); }
        public void ApplyHealthDelta(float Delta) { Invoke(nameof(ApplyHealthDelta), Delta); }
    }
    public class DamageInfoUtil : Object
    {
        public DamageInfoUtil(nint addr) : base(addr) { }
        public void SetPower(DamageInfo Info, int Power) { Invoke(nameof(SetPower), Info, Power); }
        public void SetIsSecondaryDamage(DamageInfo Info, bool IsSecondaryDamage) { Invoke(nameof(SetIsSecondaryDamage), Info, IsSecondaryDamage); }
        public void SetDamageType(DamageInfo Info, Object DamageType) { Invoke(nameof(SetDamageType), Info, DamageType); }
        public void SetDamage(DamageInfo Info, int Damage) { Invoke(nameof(SetDamage), Info, Damage); }
        public void ModifyDamage(DamageInfo Info, float Damage, float DamageMod, float DamageScalar) { Invoke(nameof(ModifyDamage), Info, Damage, DamageMod, DamageScalar); }
        public void ModifyCrit(DamageInfo Info, float CritChance, float CritDamageMod) { Invoke(nameof(ModifyCrit), Info, CritChance, CritDamageMod); }
        public float GetTotalAppliedDamage(DamageInfo Info) { return Invoke<float>(nameof(GetTotalAppliedDamage), Info); }
    }
    public class DamageInfoFunctionLibrary : BlueprintFunctionLibrary
    {
        public DamageInfoFunctionLibrary(nint addr) : base(addr) { }
        public DamageInfo Conv_RepInfoToDamageInfo(ReplicatedDamageInfo InRepInfo) { return Invoke<DamageInfo>(nameof(Conv_RepInfoToDamageInfo), InRepInfo); }
        public ReplicatedDamageInfo Conv_DamageInfoToRepInfo(DamageInfo InInfo) { return Invoke<ReplicatedDamageInfo>(nameof(Conv_DamageInfoToRepInfo), InInfo); }
    }
    public class DamageTypeGunfire : DamageType
    {
        public DamageTypeGunfire(nint addr) : base(addr) { }
        public Array<Object> DamageClasses { get { return new Array<Object>(this[nameof(DamageClasses)].Address); } }
        public int Power { get { return this[nameof(Power)].GetValue<int>(); } set { this[nameof(Power)].SetValue<int>(value); } }
        public float DamageMod { get { return this[nameof(DamageMod)].GetValue<float>(); } set { this[nameof(DamageMod)].SetValue<float>(value); } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public float KnockBackImpulse { get { return this[nameof(KnockBackImpulse)].GetValue<float>(); } set { this[nameof(KnockBackImpulse)].SetValue<float>(value); } }
        public float KnockUpImpulse { get { return this[nameof(KnockUpImpulse)].GetValue<float>(); } set { this[nameof(KnockUpImpulse)].SetValue<float>(value); } }
        public float PhysicsImpulse { get { return this[nameof(PhysicsImpulse)].GetValue<float>(); } set { this[nameof(PhysicsImpulse)].SetValue<float>(value); } }
        public bool Unblockable { get { return this[nameof(Unblockable)].Flag; } set { this[nameof(Unblockable)].Flag = value; } }
        public bool Blockable { get { return this[nameof(Blockable)].Flag; } set { this[nameof(Blockable)].Flag = value; } }
        public bool NoBlockCounter { get { return this[nameof(NoBlockCounter)].Flag; } set { this[nameof(NoBlockCounter)].Flag = value; } }
        public bool Evadable { get { return this[nameof(Evadable)].Flag; } set { this[nameof(Evadable)].Flag = value; } }
        public bool HitFriendly { get { return this[nameof(HitFriendly)].Flag; } set { this[nameof(HitFriendly)].Flag = value; } }
        public bool Modifiable { get { return this[nameof(Modifiable)].Flag; } set { this[nameof(Modifiable)].Flag = value; } }
        public float FriendlyDamageScalar { get { return this[nameof(FriendlyDamageScalar)].GetValue<float>(); } set { this[nameof(FriendlyDamageScalar)].SetValue<float>(value); } }
        public bool FriendlyDamageScalarOverridesGameScalar { get { return this[nameof(FriendlyDamageScalarOverridesGameScalar)].Flag; } set { this[nameof(FriendlyDamageScalarOverridesGameScalar)].Flag = value; } }
        public bool OnlyHitBreakable { get { return this[nameof(OnlyHitBreakable)].Flag; } set { this[nameof(OnlyHitBreakable)].Flag = value; } }
        public bool bAllowCriticalHits { get { return this[nameof(bAllowCriticalHits)].Flag; } set { this[nameof(bAllowCriticalHits)].Flag = value; } }
        public bool bConvertDamageToSecondaryHealthPool { get { return this[nameof(bConvertDamageToSecondaryHealthPool)].Flag; } set { this[nameof(bConvertDamageToSecondaryHealthPool)].Flag = value; } }
        public bool bAllowWounded { get { return this[nameof(bAllowWounded)].Flag; } set { this[nameof(bAllowWounded)].Flag = value; } }
        public byte Piercing { get { return this[nameof(Piercing)].GetValue<byte>(); } set { this[nameof(Piercing)].SetValue<byte>(value); } }
        public int MaxVictims { get { return this[nameof(MaxVictims)].GetValue<int>(); } set { this[nameof(MaxVictims)].SetValue<int>(value); } }
        public float PiercingDamageScalar { get { return this[nameof(PiercingDamageScalar)].GetValue<float>(); } set { this[nameof(PiercingDamageScalar)].SetValue<float>(value); } }
        public NiagaraSystem TrailFX { get { return this[nameof(TrailFX)].As<NiagaraSystem>(); } set { this["TrailFX"] = value; } }
        public Object TracerBP { get { return this[nameof(TracerBP)]; } set { this[nameof(TracerBP)] = value; } }
        public Object TrailTargetParam { get { return this[nameof(TrailTargetParam)]; } set { this[nameof(TrailTargetParam)] = value; } }
        public float SoundRadius { get { return this[nameof(SoundRadius)].GetValue<float>(); } set { this[nameof(SoundRadius)].SetValue<float>(value); } }
        public bool bApplyBonusSightRangeForEnemies { get { return this[nameof(bApplyBonusSightRangeForEnemies)].Flag; } set { this[nameof(bApplyBonusSightRangeForEnemies)].Flag = value; } }
        public float HitPause { get { return this[nameof(HitPause)].GetValue<float>(); } set { this[nameof(HitPause)].SetValue<float>(value); } }
        public float HitPauseIntensity { get { return this[nameof(HitPauseIntensity)].GetValue<float>(); } set { this[nameof(HitPauseIntensity)].SetValue<float>(value); } }
        public float HitPauseEaseInTime { get { return this[nameof(HitPauseEaseInTime)].GetValue<float>(); } set { this[nameof(HitPauseEaseInTime)].SetValue<float>(value); } }
        public float HitPauseEaseOutTime { get { return this[nameof(HitPauseEaseOutTime)].GetValue<float>(); } set { this[nameof(HitPauseEaseOutTime)].SetValue<float>(value); } }
        public ForceFeedbackEffect ForceFeedback { get { return this[nameof(ForceFeedback)].As<ForceFeedbackEffect>(); } set { this["ForceFeedback"] = value; } }
        public HapticFeedbackEffect_Base HapticEffect { get { return this[nameof(HapticEffect)].As<HapticFeedbackEffect_Base>(); } set { this["HapticEffect"] = value; } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
        public Object Action { get { return this[nameof(Action)]; } set { this[nameof(Action)] = value; } }
        public EDamageNumbersVisibility Visibility { get { return (EDamageNumbersVisibility)this[nameof(Visibility)].GetValue<int>(); } set { this[nameof(Visibility)].SetValue<int>((int)value); } }
        public bool bOverrideVisuals { get { return this[nameof(bOverrideVisuals)].Flag; } set { this[nameof(bOverrideVisuals)].Flag = value; } }
        public LinearColor ColorOverride { get { return this[nameof(ColorOverride)].As<LinearColor>(); } set { this["ColorOverride"] = value; } }
        public bool bOverrideCriticalVisuals { get { return this[nameof(bOverrideCriticalVisuals)].Flag; } set { this[nameof(bOverrideCriticalVisuals)].Flag = value; } }
        public LinearColor CriticalColorOverride { get { return this[nameof(CriticalColorOverride)].As<LinearColor>(); } set { this["CriticalColorOverride"] = value; } }
        public bool bOverrideWeakSpotVisuals { get { return this[nameof(bOverrideWeakSpotVisuals)].Flag; } set { this[nameof(bOverrideWeakSpotVisuals)].Flag = value; } }
        public LinearColor WeakSpotColorOverride { get { return this[nameof(WeakSpotColorOverride)].As<LinearColor>(); } set { this["WeakSpotColorOverride"] = value; } }
        public bool bOverrideResistVisuals { get { return this[nameof(bOverrideResistVisuals)].Flag; } set { this[nameof(bOverrideResistVisuals)].Flag = value; } }
        public LinearColor ResistColorOverride { get { return this[nameof(ResistColorOverride)].As<LinearColor>(); } set { this["ResistColorOverride"] = value; } }
        public bool bIgnoreResistVisuals { get { return this[nameof(bIgnoreResistVisuals)].Flag; } set { this[nameof(bIgnoreResistVisuals)].Flag = value; } }
        public bool bIgnoreReticuleHitIndicators { get { return this[nameof(bIgnoreReticuleHitIndicators)].Flag; } set { this[nameof(bIgnoreReticuleHitIndicators)].Flag = value; } }
        public Object GetDamageSubclass(Object DamageType, Object ParentClass) { return Invoke<Object>(nameof(GetDamageSubclass), DamageType, ParentClass); }
        public Array<Object> GetDamageClassesForType(Object DamageType) { return Invoke<Array<Object>>(nameof(GetDamageClassesForType), DamageType); }
    }
    public class DebugDrawUtil : Object
    {
        public DebugDrawUtil(nint addr) : base(addr) { }
        public Color GetUniqueColor(int ColorIndex) { return Invoke<Color>(nameof(GetUniqueColor), ColorIndex); }
        public void DrawDebugWorldTransform(Object WorldContextObject, Transform Transform, float PointSize, float LineLength, LinearColor PointColor, bool bPersistentLines, float Lifetime, byte DepthPriority, float Thickness) { Invoke(nameof(DrawDebugWorldTransform), WorldContextObject, Transform, PointSize, LineLength, PointColor, bPersistentLines, Lifetime, DepthPriority, Thickness); }
        public void DrawDebugArrow(Object WorldContextObject, Vector LineStart, Vector LineEnd, Vector ArrowAxis, Rotator BasisRotation, LinearColor Color, float Thickness, float Duration, float ArrowSize) { Invoke(nameof(DrawDebugArrow), WorldContextObject, LineStart, LineEnd, ArrowAxis, BasisRotation, Color, Thickness, Duration, ArrowSize); }
        public void DebugDrawShapeWithOrientation(Object WorldContextObject, ShapeComponent Shape, Color Color, Vector Location, Rotator Rotation, bool bPersistentLines, float Lifetime, byte DepthPriority, float Thickness) { Invoke(nameof(DebugDrawShapeWithOrientation), WorldContextObject, Shape, Color, Location, Rotation, bPersistentLines, Lifetime, DepthPriority, Thickness); }
        public void DebugDrawShape(Object WorldContextObject, ShapeComponent Shape, Color Color, bool bPersistentLines, float Lifetime, byte DepthPriority, float Thickness) { Invoke(nameof(DebugDrawShape), WorldContextObject, Shape, Color, bPersistentLines, Lifetime, DepthPriority, Thickness); }
        public void DebugDrawCollisionWithOrientation(Object WorldContextObject, PrimitiveComponent Primitive, Color Color, Vector Location, Rotator Rotation, bool bPersistentLines, float Lifetime, byte DepthPriority, float Thickness) { Invoke(nameof(DebugDrawCollisionWithOrientation), WorldContextObject, Primitive, Color, Location, Rotation, bPersistentLines, Lifetime, DepthPriority, Thickness); }
        public void DebugDrawCollision(Object WorldContextObject, PrimitiveComponent Primitive, Color Color, bool bPersistentLines, float Lifetime, byte DepthPriority, float Thickness) { Invoke(nameof(DebugDrawCollision), WorldContextObject, Primitive, Color, bPersistentLines, Lifetime, DepthPriority, Thickness); }
    }
    public class EditorTickableActor : Actor
    {
        public EditorTickableActor(nint addr) : base(addr) { }
        public bool IsTickableInGame { get { return this[nameof(IsTickableInGame)].Flag; } set { this[nameof(IsTickableInGame)].Flag = value; } }
        public float TickEditorInterval { get { return this[nameof(TickEditorInterval)].GetValue<float>(); } set { this[nameof(TickEditorInterval)].SetValue<float>(value); } }
        public float TickEditorDelta { get { return this[nameof(TickEditorDelta)].GetValue<float>(); } set { this[nameof(TickEditorDelta)].SetValue<float>(value); } }
        public void ReceiveTickEditor() { Invoke(nameof(ReceiveTickEditor)); }
    }
    public class EntitlementType : Object
    {
        public EntitlementType(nint addr) : base(addr) { }
        public Array<EntitlementEntry> PlatformEntitlements { get { return new Array<EntitlementEntry>(this[nameof(PlatformEntitlements)].Address); } }
        public Object MissingEntitlementStatusMessage { get { return this[nameof(MissingEntitlementStatusMessage)]; } set { this[nameof(MissingEntitlementStatusMessage)] = value; } }
        public bool HasEntitlement(Object WorldContextObject, Object Entitlement) { return Invoke<bool>(nameof(HasEntitlement), WorldContextObject, Entitlement); }
    }
    public class EntitlementInterface : Interface
    {
        public EntitlementInterface(nint addr) : base(addr) { }
    }
    public class Faction : Object
    {
        public Faction(nint addr) : base(addr) { }
        public Object InheritAffiliations { get { return this[nameof(InheritAffiliations)]; } set { this[nameof(InheritAffiliations)] = value; } }
        public EAffiliation AffiliationTowardsSameFaction { get { return (EAffiliation)this[nameof(AffiliationTowardsSameFaction)].GetValue<int>(); } set { this[nameof(AffiliationTowardsSameFaction)].SetValue<int>((int)value); } }
        public bool ApplyFriendlyFireDamageScalar { get { return this[nameof(ApplyFriendlyFireDamageScalar)].Flag; } set { this[nameof(ApplyFriendlyFireDamageScalar)].Flag = value; } }
        public EAffiliation GetAffiliationForActors(Actor Actor1, Actor Actor2) { return Invoke<EAffiliation>(nameof(GetAffiliationForActors), Actor1, Actor2); }
        public EAffiliation GetAffiliation(Object Faction1, Object Faction2) { return Invoke<EAffiliation>(nameof(GetAffiliation), Faction1, Faction2); }
    }
    public class FactionSettings : Object
    {
        public FactionSettings(nint addr) : base(addr) { }
        public Object PlayerFaction { get { return this[nameof(PlayerFaction)]; } set { this[nameof(PlayerFaction)] = value; } }
        public Array<FactionAffiliation> Affiliatons { get { return new Array<FactionAffiliation>(this[nameof(Affiliatons)].Address); } }
    }
    public class FactionManager : ActorComponent
    {
        public FactionManager(nint addr) : base(addr) { }
        public float FactionOverridePropogationRadius { get { return this[nameof(FactionOverridePropogationRadius)].GetValue<float>(); } set { this[nameof(FactionOverridePropogationRadius)].SetValue<float>(value); } }
        public Array<FactionComponent> FactionComponents { get { return new Array<FactionComponent>(this[nameof(FactionComponents)].Address); } }
        public void PropagateFactionOverride(FactionComponent Source, Object Faction, EAffiliation Affiliation) { Invoke(nameof(PropagateFactionOverride), Source, Faction, Affiliation); }
        public FactionManager GetFactionManager(Object WorldContextObject) { return Invoke<FactionManager>(nameof(GetFactionManager), WorldContextObject); }
    }
    public class FactionComponent : ActorComponent
    {
        public FactionComponent(nint addr) : base(addr) { }
        public Object OnFactionAffiliationChanged { get { return this[nameof(OnFactionAffiliationChanged)]; } set { this[nameof(OnFactionAffiliationChanged)] = value; } }
        public bool bAutomaticallyTurnHostileOnDamaged { get { return this[nameof(bAutomaticallyTurnHostileOnDamaged)].Flag; } set { this[nameof(bAutomaticallyTurnHostileOnDamaged)].Flag = value; } }
        public float HostileDamageThreshold { get { return this[nameof(HostileDamageThreshold)].GetValue<float>(); } set { this[nameof(HostileDamageThreshold)].SetValue<float>(value); } }
        public Array<Object> FactionsToIgnore { get { return new Array<Object>(this[nameof(FactionsToIgnore)].Address); } }
        public Object CachedFaction { get { return this[nameof(CachedFaction)]; } set { this[nameof(CachedFaction)] = value; } }
        public Array<FactionOverride> FactionOverrides { get { return new Array<FactionOverride>(this[nameof(FactionOverrides)].Address); } }
        public Array<FactionDamageTracker> DamageTrackers { get { return new Array<FactionDamageTracker>(this[nameof(DamageTrackers)].Address); } }
        public void TakeDamage(DamageInfo DamageInfo) { Invoke(nameof(TakeDamage), DamageInfo); }
        public void SetFactionOverride(Object Faction, EAffiliation Affiliation) { Invoke(nameof(SetFactionOverride), Faction, Affiliation); }
        public void SetFaction(Object NewFaction) { Invoke(nameof(SetFaction), NewFaction); }
        public bool GetFactionOverride(Object Faction, EAffiliation Affiliation) { return Invoke<bool>(nameof(GetFactionOverride), Faction, Affiliation); }
        public Object GetFaction() { return Invoke<Object>(nameof(GetFaction)); }
        public EAffiliation GetAffiliation(Actor OtherActor) { return Invoke<EAffiliation>(nameof(GetAffiliation), OtherActor); }
    }
    public class GameRules : Actor
    {
        public GameRules(nint addr) : base(addr) { }
        public float GetWeaponDamage(Actor ItemOwner, WeaponBase Item, bool ApplyModifiers) { return Invoke<float>(nameof(GetWeaponDamage), ItemOwner, Item, ApplyModifiers); }
        public DamageInfo GetDamageInfo(Actor ItemOwner, WeaponBase Item) { return Invoke<DamageInfo>(nameof(GetDamageInfo), ItemOwner, Item); }
    }
    public class GameUtil : Object
    {
        public GameUtil(nint addr) : base(addr) { }
        public bool WasComponentRecentlyRenderedOnScreen(PrimitiveComponent Component, float Tolerance) { return Invoke<bool>(nameof(WasComponentRecentlyRenderedOnScreen), Component, Tolerance); }
        public bool TestLineOfSightFromLocation(Vector Origin, Actor To, Array<Actor> IgnoredActors) { return Invoke<bool>(nameof(TestLineOfSightFromLocation), Origin, To, IgnoredActors); }
        public bool TestLineOfSight(Actor From, Actor To, Array<Actor> IgnoredActors) { return Invoke<bool>(nameof(TestLineOfSight), From, To, IgnoredActors); }
        public bool TestFOV(Actor Source, Vector TargetLocation, float FOV) { return Invoke<bool>(nameof(TestFOV), Source, TargetLocation, FOV); }
        public bool TagsAreEqual(Array<Object> Tags1, Array<Object> Tags2) { return Invoke<bool>(nameof(TagsAreEqual), Tags1, Tags2); }
        public bool SweepSphereAgainstActor(Actor Actor, Vector Start, Vector End, float Radius, bool bTraceComplex, byte TraceChannel, HitResult Hit) { return Invoke<bool>(nameof(SweepSphereAgainstActor), Actor, Start, End, Radius, bTraceComplex, TraceChannel, Hit); }
        public bool SweepCharacterAgainstGround(Object WorldContextObject, Character Character, Vector Start, Vector End, Array<Actor> IgnoredActors, HitResult Hit, float RadiusOverride, float HalfHeightOverride, Vector SweepOffset, float DrawTime) { return Invoke<bool>(nameof(SweepCharacterAgainstGround), WorldContextObject, Character, Start, End, IgnoredActors, Hit, RadiusOverride, HalfHeightOverride, SweepOffset, DrawTime); }
        public bool SweepCharacter(Object WorldContextObject, Character Character, Vector Start, Vector End, Array<Actor> IgnoredActors, Array<byte> IgnoreChannels, Array<byte> OverlapChannels, Array<byte> BlockChannels, HitResult Hit, float RadiusOverride, float HalfHeightOverride, Vector SweepOffset, bool bMoveCharacter, float DrawTime) { return Invoke<bool>(nameof(SweepCharacter), WorldContextObject, Character, Start, End, IgnoredActors, IgnoreChannels, OverlapChannels, BlockChannels, Hit, RadiusOverride, HalfHeightOverride, SweepOffset, bMoveCharacter, DrawTime); }
        public bool StuckCheckForClass(Object WorldContextObject, Vector FeetLocation, Object CharacterClass, Array<Actor> IgnoredActors, float RadiusOverride) { return Invoke<bool>(nameof(StuckCheckForClass), WorldContextObject, FeetLocation, CharacterClass, IgnoredActors, RadiusOverride); }
        public bool StuckCheck(Object WorldContextObject, Vector FeetLocation, Character Character, Array<Actor> IgnoredActors, float RadiusOverride) { return Invoke<bool>(nameof(StuckCheck), WorldContextObject, FeetLocation, Character, IgnoredActors, RadiusOverride); }
        public void StopForceFeedback(Object WorldContextObject, ForceFeedbackEffect ForceFeedbackEffect, Object Tag, int PlayerIndex) { Invoke(nameof(StopForceFeedback), WorldContextObject, ForceFeedbackEffect, Tag, PlayerIndex); }
        public void StopCameraShake(Object WorldContextObject, Object CameraShake, bool bSkipBlendOut, int PlayerIndex) { Invoke(nameof(StopCameraShake), WorldContextObject, CameraShake, bSkipBlendOut, PlayerIndex); }
        public void StartPIESession() { Invoke(nameof(StartPIESession)); }
        public Pawn SpawnAIEx(Object WorldContextObject, Object PawnClass, BehaviorTree BehaviorTree, Vector Location, Rotator Rotation, bool bNoCollisionFail, ELevelContextFallback LevelContextFallback, Actor LevelContext, bool bDeferSpawning) { return Invoke<Pawn>(nameof(SpawnAIEx), WorldContextObject, PawnClass, BehaviorTree, Location, Rotation, bNoCollisionFail, LevelContextFallback, LevelContext, bDeferSpawning); }
        public Actor SpawnActorEx(Object WorldContextObject, Object ActorClass, Transform SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandling, Actor Owner, Pawn Instigator, bool Transient, ELevelContextFallback LevelContextFallback, Actor LevelContext, Level OverrideLevel, bool bDeferSpawning) { return Invoke<Actor>(nameof(SpawnActorEx), WorldContextObject, ActorClass, SpawnTransform, CollisionHandling, Owner, Instigator, Transient, LevelContextFallback, LevelContext, OverrideLevel, bDeferSpawning); }
        public void SortObjectArray(Array<Object> Objects, Object Predicate) { Invoke(nameof(SortObjectArray), Objects, Predicate); }
        public void SortIntArray(Array<int> IntArray) { Invoke(nameof(SortIntArray), IntArray); }
        public void SortFloatArray(Array<float> FloatArray) { Invoke(nameof(SortFloatArray), FloatArray); }
        public void SortActorArrayByDistance(Vector Location, Array<Actor> ActorArray) { Invoke(nameof(SortActorArrayByDistance), Location, ActorArray); }
        public bool SnapToNavMesh(Object WorldContextObject, Vector Position, float Radius, Vector SnappedPosition) { return Invoke<bool>(nameof(SnapToNavMesh), WorldContextObject, Position, Radius, SnappedPosition); }
        public bool SnapToGround(Object WorldContextObject, Vector Position, Vector SnappedPosition, float Offset, float CastDistance, bool TraceComplex) { return Invoke<bool>(nameof(SnapToGround), WorldContextObject, Position, SnappedPosition, Offset, CastDistance, TraceComplex); }
        public bool SnapCharacterToGround(Character Character, Vector Position, Array<Actor> IgnoredActors, float Offset, float CastDistance) { return Invoke<bool>(nameof(SnapCharacterToGround), Character, Position, IgnoredActors, Offset, CastDistance); }
        public void ShowRandomMesh(Actor Actor, Object Slot, bool AllowNone) { Invoke(nameof(ShowRandomMesh), Actor, Slot, AllowNone); }
        public void ShowComponents(Array<SceneComponent> Components) { Invoke(nameof(ShowComponents), Components); }
        public void SetVisualStateForComponent(SceneComponent SceneRoot, Object VisualState, bool PlayTransitions) { Invoke(nameof(SetVisualStateForComponent), SceneRoot, VisualState, PlayTransitions); }
        public void SetVisualState(Actor Actor, Object VisualState, bool PlayTransitions) { Invoke(nameof(SetVisualState), Actor, VisualState, PlayTransitions); }
        public void SetVisible(Actor Actor, bool Visible) { Invoke(nameof(SetVisible), Actor, Visible); }
        public void SetVisibilityFlag(Actor Actor, bool Active) { Invoke(nameof(SetVisibilityFlag), Actor, Active); }
        public void SetTickableWhenPaused(Actor Actor, bool TickWhenPaused) { Invoke(nameof(SetTickableWhenPaused), Actor, TickWhenPaused); }
        public void SetRenderCustomDepthForActor(Actor Actor, bool bEnabled, byte Index, bool bPropagateToInventory) { Invoke(nameof(SetRenderCustomDepthForActor), Actor, bEnabled, Index, bPropagateToInventory); }
        public void SetRecursiveSceneComponentStatus(SceneComponent Component, bool Visibility, bool MatchActivatedStateToVisibility) { Invoke(nameof(SetRecursiveSceneComponentStatus), Component, Visibility, MatchActivatedStateToVisibility); }
        public void SetMaterialVectorParam(Actor Actor, MaterialInterface Material, Object ParamName, LinearColor Value) { Invoke(nameof(SetMaterialVectorParam), Actor, Material, ParamName, Value); }
        public void SetMaterialScalarParam(Actor Actor, MaterialInterface Material, Object ParamName, float Value) { Invoke(nameof(SetMaterialScalarParam), Actor, Material, ParamName, Value); }
        public void SetComponentMaterialVectorParamForAll(PrimitiveComponent Component, Object ParamName, LinearColor Value) { Invoke(nameof(SetComponentMaterialVectorParamForAll), Component, ParamName, Value); }
        public void SetComponentMaterialVectorParam(PrimitiveComponent Component, MaterialInterface Material, Object ParamName, LinearColor Value) { Invoke(nameof(SetComponentMaterialVectorParam), Component, Material, ParamName, Value); }
        public void SetComponentMaterialScalarParamForAll(PrimitiveComponent Component, Object ParamName, float Value) { Invoke(nameof(SetComponentMaterialScalarParamForAll), Component, ParamName, Value); }
        public void SetComponentMaterialScalarParam(PrimitiveComponent Component, MaterialInterface Material, Object ParamName, float Value) { Invoke(nameof(SetComponentMaterialScalarParam), Component, Material, ParamName, Value); }
        public void SetAllMaterialsTo(Actor Actor, MaterialInterface Material, Array<CachedMaterialState> CachedMaterialStates, bool RecurseChildren, bool bDisableNanite) { Invoke(nameof(SetAllMaterialsTo), Actor, Material, CachedMaterialStates, RecurseChildren, bDisableNanite); }
        public void SetActorsVisible(Array<Actor> Actors, bool Visible) { Invoke(nameof(SetActorsVisible), Actors, Visible); }
        public void SetActive(Actor Actor, bool Active) { Invoke(nameof(SetActive), Actor, Active); }
        public void ResetCachedMaterials(Array<CachedMaterialState> MaterialStates) { Invoke(nameof(ResetCachedMaterials), MaterialStates); }
        public void RemoveTag(Actor Actor, Object Tag) { Invoke(nameof(RemoveTag), Actor, Tag); }
        public void RemoveLevelInstanceByName(Object WorldContextObject, Object UniqueInstanceName) { Invoke(nameof(RemoveLevelInstanceByName), WorldContextObject, UniqueInstanceName); }
        public void RemoveLevelInstance(Object WorldContextObject, LevelStreaming LevelInstance) { Invoke(nameof(RemoveLevelInstance), WorldContextObject, LevelInstance); }
        public void PlayForceFeedback(Object WorldContextObject, ForceFeedbackEffect ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, Object Tag, int PlayerIndex) { Invoke(nameof(PlayForceFeedback), WorldContextObject, ForceFeedbackEffect, bLooping, bIgnoreTimeDilation, Tag, PlayerIndex); }
        public void PlayCameraShake(Object WorldContextObject, Object CameraShake, float Scale, ECameraShakePlaySpace PlaySpace, Rotator UserPlaySpaceRot, int PlayerIndex) { Invoke(nameof(PlayCameraShake), WorldContextObject, CameraShake, Scale, PlaySpace, UserPlaySpaceRot, PlayerIndex); }
        public void LatentDestroyActor(Actor Actor) { Invoke(nameof(LatentDestroyActor), Actor); }
        public bool IsVisible(Actor Actor) { return Invoke<bool>(nameof(IsVisible), Actor); }
        public bool IsValidTeleportDestination(Object WorldContextObject, Vector FeetLocation, Character Character, Array<Actor> IgnoredActors, bool bValidateFloor, float FlatSurfaceDistance, float RadiusOverride, float BackwardsRadiusScale, float DebugDrawTime) { return Invoke<bool>(nameof(IsValidTeleportDestination), WorldContextObject, FeetLocation, Character, IgnoredActors, bValidateFloor, FlatSurfaceDistance, RadiusOverride, BackwardsRadiusScale, DebugDrawTime); }
        public bool IsSwimmingUnderwater(Actor Actor) { return Invoke<bool>(nameof(IsSwimmingUnderwater), Actor); }
        public bool IsSwimmingOnSurface(Actor Actor) { return Invoke<bool>(nameof(IsSwimmingOnSurface), Actor); }
        public bool IsSwimming(Actor Actor) { return Invoke<bool>(nameof(IsSwimming), Actor); }
        public bool IsSoftDestroyed(Actor Actor) { return Invoke<bool>(nameof(IsSoftDestroyed), Actor); }
        public bool IsSingleplayerGame(Object WorldContextObject) { return Invoke<bool>(nameof(IsSingleplayerGame), WorldContextObject); }
        public bool IsShippingBuild() { return Invoke<bool>(nameof(IsShippingBuild)); }
        public bool IsPlayingCinematic(Object WorldContextObject) { return Invoke<bool>(nameof(IsPlayingCinematic), WorldContextObject); }
        public bool IsPIEActive() { return Invoke<bool>(nameof(IsPIEActive)); }
        public bool IsPC() { return Invoke<bool>(nameof(IsPC)); }
        public bool IsLocallyControlled(Actor Actor) { return Invoke<bool>(nameof(IsLocallyControlled), Actor); }
        public bool IsInWater(Character Character) { return Invoke<bool>(nameof(IsInWater), Character); }
        public bool IsInEditor() { return Invoke<bool>(nameof(IsInEditor)); }
        public bool IsHDREnabled() { return Invoke<bool>(nameof(IsHDREnabled)); }
        public Vector InvokeVectorGetter(Object Object, Object EventName) { return Invoke<Vector>(nameof(InvokeVectorGetter), Object, EventName); }
        public int InvokeIntegerGetter(Object Object, Object EventName) { return Invoke<int>(nameof(InvokeIntegerGetter), Object, EventName); }
        public double InvokeFloatGetter(Object Object, Object EventName) { return Invoke<double>(nameof(InvokeFloatGetter), Object, EventName); }
        public void InvokeEvent(Object Object, Object EventName) { Invoke(nameof(InvokeEvent), Object, EventName); }
        public bool InvokeCondition(Object Object, Object EventName) { return Invoke<bool>(nameof(InvokeCondition), Object, EventName); }
        public Array<SceneComponent> HideVisibleComponents(Actor Actor, Object ComponentClass, bool RecurseChildren, Array<Object> IgnoreClasses) { return Invoke<Array<SceneComponent>>(nameof(HideVisibleComponents), Actor, ComponentClass, RecurseChildren, IgnoreClasses); }
        public bool GetWaterSubmergeDepth(Actor Actor, float OutSubmergeDepth) { return Invoke<bool>(nameof(GetWaterSubmergeDepth), Actor, OutSubmergeDepth); }
        public EVideoDeviceVendor GetVideoDeviceVendor() { return Invoke<EVideoDeviceVendor>(nameof(GetVideoDeviceVendor)); }
        public Object GetScriptStack() { return Invoke<Object>(nameof(GetScriptStack)); }
        public Object GetPrefix(Object Name) { return Invoke<Object>(nameof(GetPrefix), Name); }
        public Array<PlayerState> GetPlayerStates(Object WorldContextObject) { return Invoke<Array<PlayerState>>(nameof(GetPlayerStates), WorldContextObject); }
        public Array<PlayerController> GetPlayerControllers(Object WorldContextObject) { return Invoke<Array<PlayerController>>(nameof(GetPlayerControllers), WorldContextObject); }
        public PlayerController GetPlayerControllerFromPlayerState(PlayerState PlayerState) { return Invoke<PlayerController>(nameof(GetPlayerControllerFromPlayerState), PlayerState); }
        public PlayerController GetPlayerControllerForActorComponent(ActorComponent ActorComponent) { return Invoke<PlayerController>(nameof(GetPlayerControllerForActorComponent), ActorComponent); }
        public PlayerController GetPlayerControllerForActor(Actor Actor) { return Invoke<PlayerController>(nameof(GetPlayerControllerForActor), Actor); }
        public Character GetOwningCharacter(Actor Actor) { return Invoke<Character>(nameof(GetOwningCharacter), Actor); }
        public Object GetOwner(Object Object) { return Invoke<Object>(nameof(GetOwner), Object); }
        public int GetNumConnectedPlayers(Object WorldContextObject) { return Invoke<int>(nameof(GetNumConnectedPlayers), WorldContextObject); }
        public bool GetNodeTransform(Actor Actor, Object NodeName, Transform Transform, byte TransformSpace) { return Invoke<bool>(nameof(GetNodeTransform), Actor, NodeName, Transform, TransformSpace); }
        public void GetMyHitItem(HitResult Hit, int MyHitItem) { Invoke(nameof(GetMyHitItem), Hit, MyHitItem); }
        public ELocalizationLanguage GetLocalizationLanguage() { return Invoke<ELocalizationLanguage>(nameof(GetLocalizationLanguage)); }
        public LevelScriptActor GetLevelScriptActor(Level Level) { return Invoke<LevelScriptActor>(nameof(GetLevelScriptActor), Level); }
        public Object GetLevelPathName(Level Level) { return Invoke<Object>(nameof(GetLevelPathName), Level); }
        public LevelStreaming GetLevelInstance(Object WorldContextObject, Object UniqueInstanceName) { return Invoke<LevelStreaming>(nameof(GetLevelInstance), WorldContextObject, UniqueInstanceName); }
        public Level GetLevelForActor(Actor Actor) { return Invoke<Level>(nameof(GetLevelForActor), Actor); }
        public GameViewportClientGunfire GetGameViewport(Object WorldContextObject) { return Invoke<GameViewportClientGunfire>(nameof(GetGameViewport), WorldContextObject); }
        public GameModeBase GetGameMode(Actor Actor) { return Invoke<GameModeBase>(nameof(GetGameMode), Actor); }
        public long GetFrameCounter() { return Invoke<long>(nameof(GetFrameCounter)); }
        public int GetCurrentPlatformVRam() { return Invoke<int>(nameof(GetCurrentPlatformVRam)); }
        public ActorComponent GetComponentByTag(Actor Actor, Object Tag) { return Invoke<ActorComponent>(nameof(GetComponentByTag), Actor, Tag); }
        public ActorComponent GetComponentByName(Actor Actor, Object NodeName) { return Invoke<ActorComponent>(nameof(GetComponentByName), Actor, NodeName); }
        public bool GetClosestUnblockedPointBetweenActors(Actor Target, Actor Source, byte TraceChannel, byte CollisionChannel, Vector OutClosestPoint) { return Invoke<bool>(nameof(GetClosestUnblockedPointBetweenActors), Target, Source, TraceChannel, CollisionChannel, OutClosestPoint); }
        public float GetClosestPointInCharacterMesh(CharacterGunfire Character, Vector Point, Vector OutClosestPoint) { return Invoke<float>(nameof(GetClosestPointInCharacterMesh), Character, Point, OutClosestPoint); }
        public float GetClosestPointInActor(Actor Actor, Vector Point, byte TraceChannel, Vector OutClosestPoint) { return Invoke<float>(nameof(GetClosestPointInActor), Actor, Point, TraceChannel, OutClosestPoint); }
        public EBuildType GetBuildType() { return Invoke<EBuildType>(nameof(GetBuildType)); }
        public int GetBuildNumber() { return Invoke<int>(nameof(GetBuildNumber)); }
        public Actor GetBestWaterBounds(Actor Actor, bool bConstrainToFluidFilled) { return Invoke<Actor>(nameof(GetBestWaterBounds), Actor, bConstrainToFluidFilled); }
        public EBasePlatform GetBasePlatform() { return Invoke<EBasePlatform>(nameof(GetBasePlatform)); }
        public bool GetAttachSocketName(SceneComponent Mesh, Object OutSocketName) { return Invoke<bool>(nameof(GetAttachSocketName), Mesh, OutSocketName); }
        public void GetActorsWithTagEx(Object WorldContextObject, Object Tag, Array<Actor> OutResults) { Invoke(nameof(GetActorsWithTagEx), WorldContextObject, Tag, OutResults); }
        public void GetActorsInShape(Object WorldContextObject, Vector Position, ActorQueryShapeDetails ShapeDetails, Object FilterClass, ActorQueryFilter Filter, Array<ActorQueryResult> OutResults) { Invoke(nameof(GetActorsInShape), WorldContextObject, Position, ShapeDetails, FilterClass, Filter, OutResults); }
        public void GetActorsInRangeEx(Object WorldContextObject, Vector Position, float MinRange, float MaxRange, Object FilterClass, ActorQueryFilter Filter, Array<ActorQueryResult> OutResults) { Invoke(nameof(GetActorsInRangeEx), WorldContextObject, Position, MinRange, MaxRange, FilterClass, Filter, OutResults); }
        public void GetActorsInRange(Object WorldContextObject, Vector Position, float MinRange, float MaxRange, Object FilterClass, ActorQueryFilter Filter, Array<Actor> OutResults) { Invoke(nameof(GetActorsInRange), WorldContextObject, Position, MinRange, MaxRange, FilterClass, Filter, OutResults); }
        public void GetActorsInBox(Object WorldContextObject, Vector Position, Vector MinExtents, Vector MaxExtents, Object FilterClass, ActorQueryFilter Filter, Array<ActorQueryResult> OutResults) { Invoke(nameof(GetActorsInBox), WorldContextObject, Position, MinExtents, MaxExtents, FilterClass, Filter, OutResults); }
        public void GetActorBoundsSafe(Actor Actor, bool bOnlyCollidingComponents, Vector Origin, Vector Extents) { Invoke(nameof(GetActorBoundsSafe), Actor, bOnlyCollidingComponents, Origin, Extents); }
        public void ForceGarbageCollection() { Invoke(nameof(ForceGarbageCollection)); }
        public Actor FinishSpawningDeferredActor(Actor Actor, Transform SpawnTransform) { return Invoke<Actor>(nameof(FinishSpawningDeferredActor), Actor, SpawnTransform); }
        public bool FindTeleportPositionNear(Actor Actor, float Distance, Vector OutPosition, bool InFOVOnly) { return Invoke<bool>(nameof(FindTeleportPositionNear), Actor, Distance, OutPosition, InFOVOnly); }
        public PlayerStart FindPlayerStart(Object WorldContextObject, Object PlayerStartTag) { return Invoke<PlayerStart>(nameof(FindPlayerStart), WorldContextObject, PlayerStartTag); }
        public MeshComponent FindMeshWithSocket(Actor Actor, Object SocketName) { return Invoke<MeshComponent>(nameof(FindMeshWithSocket), Actor, SocketName); }
        public bool DoesPathIntersectWithBounds(CharacterGunfire Character, Vector Origin, Vector Extents) { return Invoke<bool>(nameof(DoesPathIntersectWithBounds), Character, Origin, Extents); }
        public bool DoesGameHaveFocus(Object WorldContextObject) { return Invoke<bool>(nameof(DoesGameHaveFocus), WorldContextObject); }
        public void CustomError(Actor ErrorContext, Object Message) { Invoke(nameof(CustomError), ErrorContext, Message); }
        public bool CharacterHasWindowOrTag(CharacterGunfire Character, Object Requirement) { return Invoke<bool>(nameof(CharacterHasWindowOrTag), Character, Requirement); }
        public void CenterViewportCursor(PlayerController PlayerController) { Invoke(nameof(CenterViewportCursor), PlayerController); }
        public Vector CalculateTraversableTeleportLocation(Object WorldContextObject, Character Character, Vector AimStart, Vector AimEnd, float AimObstacleTolerance, float GroundDistance, float CliffTolerance, bool bConstrainToLedges, float ProbeDistance, float StuckCheckHeightOffset, float FlatSurfaceDistance, bool bDebugDraw) { return Invoke<Vector>(nameof(CalculateTraversableTeleportLocation), WorldContextObject, Character, AimStart, AimEnd, AimObstacleTolerance, GroundDistance, CliffTolerance, bConstrainToLedges, ProbeDistance, StuckCheckHeightOffset, FlatSurfaceDistance, bDebugDraw); }
        public float CalculateCharacterGroundSlope(Character Character, float MoveHeading) { return Invoke<float>(nameof(CalculateCharacterGroundSlope), Character, MoveHeading); }
        public void AddTag(Actor Actor, Object Tag) { Invoke(nameof(AddTag), Actor, Tag); }
        public LevelStreaming AddLevelInstance(Object WorldContextObject, Object UniqueInstanceName, Object PackageNameToLoad, Transform LevelTransform, bool BlockOnLoad, bool ShouldBeLoaded, bool ShouldBeVisible, Object LevelStreamingOverride) { return Invoke<LevelStreaming>(nameof(AddLevelInstance), WorldContextObject, UniqueInstanceName, PackageNameToLoad, LevelTransform, BlockOnLoad, ShouldBeLoaded, ShouldBeVisible, LevelStreamingOverride); }
        public ActorComponent AddComponent(Actor Actor, Object ComponentClass, Object Name, Object AttachSocketName, SceneComponent AttachParent, EAttachmentRule AttachRule, bool bWeldSimulatedBodies, Vector RelativeLocation, Rotator RelativeRotation, bool bSkipAttachment) { return Invoke<ActorComponent>(nameof(AddComponent), Actor, ComponentClass, Name, AttachSocketName, AttachParent, AttachRule, bWeldSimulatedBodies, RelativeLocation, RelativeRotation, bSkipAttachment); }
        public void ActivateSceneComponents(Actor Actor, Object Slot, Object Tag, bool ActivateChildren, bool UseVisibility, bool InvertActive) { Invoke(nameof(ActivateSceneComponents), Actor, Slot, Tag, ActivateChildren, UseVisibility, InvertActive); }
        public void ActivateSceneComponent(SceneComponent SceneComponent, bool Active, bool ActivateChildren, bool UseVisibility) { Invoke(nameof(ActivateSceneComponent), SceneComponent, Active, ActivateChildren, UseVisibility); }
    }
    public class GameViewportClientGunfire : GameViewportClient
    {
        public GameViewportClientGunfire(nint addr) : base(addr) { }
        public Object OnGameViewportFocusEvent { get { return this[nameof(OnGameViewportFocusEvent)]; } set { this[nameof(OnGameViewportFocusEvent)] = value; } }
        public void AdjustCameraFoVForAspect(bool bIgnoreFovSlider, CameraComponent CameraComponent) { Invoke(nameof(AdjustCameraFoVForAspect), bIgnoreFovSlider, CameraComponent); }
    }
    public class GunfireSettings : Object
    {
        public GunfireSettings(nint addr) : base(addr) { }
        public byte GroundChannel { get { return this[nameof(GroundChannel)].GetValue<byte>(); } set { this[nameof(GroundChannel)].SetValue<byte>(value); } }
        public byte WaterChannel { get { return this[nameof(WaterChannel)].GetValue<byte>(); } set { this[nameof(WaterChannel)].SetValue<byte>(value); } }
        public bool bUseComplexCollisionForWaterSurfaceTraces { get { return this[nameof(bUseComplexCollisionForWaterSurfaceTraces)].Flag; } set { this[nameof(bUseComplexCollisionForWaterSurfaceTraces)].Flag = value; } }
        public Array<byte> WaterObjectTypes { get { return new Array<byte>(this[nameof(WaterObjectTypes)].Address); } }
        public byte ProjectileChannel { get { return this[nameof(ProjectileChannel)].GetValue<byte>(); } set { this[nameof(ProjectileChannel)].SetValue<byte>(value); } }
        public byte AOEChannel { get { return this[nameof(AOEChannel)].GetValue<byte>(); } set { this[nameof(AOEChannel)].SetValue<byte>(value); } }
        public byte PawnChannel { get { return this[nameof(PawnChannel)].GetValue<byte>(); } set { this[nameof(PawnChannel)].SetValue<byte>(value); } }
        public byte SpecialCollisionChannel { get { return this[nameof(SpecialCollisionChannel)].GetValue<byte>(); } set { this[nameof(SpecialCollisionChannel)].SetValue<byte>(value); } }
        public byte CameraChannel { get { return this[nameof(CameraChannel)].GetValue<byte>(); } set { this[nameof(CameraChannel)].SetValue<byte>(value); } }
        public byte WallChannel { get { return this[nameof(WallChannel)].GetValue<byte>(); } set { this[nameof(WallChannel)].SetValue<byte>(value); } }
        public byte WaterSurfaceType { get { return this[nameof(WaterSurfaceType)].GetValue<byte>(); } set { this[nameof(WaterSurfaceType)].SetValue<byte>(value); } }
        public SoftObjectPath UserSettings { get { return this[nameof(UserSettings)].As<SoftObjectPath>(); } set { this["UserSettings"] = value; } }
        public Object VisiblitySkipComponent { get { return this[nameof(VisiblitySkipComponent)]; } set { this[nameof(VisiblitySkipComponent)] = value; } }
        public SoftObjectPath VisualLoggerDefaultMap { get { return this[nameof(VisualLoggerDefaultMap)].As<SoftObjectPath>(); } set { this["VisualLoggerDefaultMap"] = value; } }
        public bool bLoadTemplateSublevels { get { return this[nameof(bLoadTemplateSublevels)].Flag; } set { this[nameof(bLoadTemplateSublevels)].Flag = value; } }
        public Array<Object> SublevelsKeywordsToIgnore { get { return new Array<Object>(this[nameof(SublevelsKeywordsToIgnore)].Address); } }
        public EHitPauseMode HitPauseMode { get { return (EHitPauseMode)this[nameof(HitPauseMode)].GetValue<int>(); } set { this[nameof(HitPauseMode)].SetValue<int>((int)value); } }
        public bool bAutoMarkDamageAsResisted { get { return this[nameof(bAutoMarkDamageAsResisted)].Flag; } set { this[nameof(bAutoMarkDamageAsResisted)].Flag = value; } }
        public float ResistedDamageThreshold { get { return this[nameof(ResistedDamageThreshold)].GetValue<float>(); } set { this[nameof(ResistedDamageThreshold)].SetValue<float>(value); } }
        public float MaximumDamageReductionPerStat { get { return this[nameof(MaximumDamageReductionPerStat)].GetValue<float>(); } set { this[nameof(MaximumDamageReductionPerStat)].SetValue<float>(value); } }
        public float MinimumTotalDamageReductionScalar { get { return this[nameof(MinimumTotalDamageReductionScalar)].GetValue<float>(); } set { this[nameof(MinimumTotalDamageReductionScalar)].SetValue<float>(value); } }
        public float AITargetingAICooldownScale { get { return this[nameof(AITargetingAICooldownScale)].GetValue<float>(); } set { this[nameof(AITargetingAICooldownScale)].SetValue<float>(value); } }
        public float TargetWeaponPhantomFrameTime { get { return this[nameof(TargetWeaponPhantomFrameTime)].GetValue<float>(); } set { this[nameof(TargetWeaponPhantomFrameTime)].SetValue<float>(value); } }
        public float WeaponPhantomIgnoreDelay { get { return this[nameof(WeaponPhantomIgnoreDelay)].GetValue<float>(); } set { this[nameof(WeaponPhantomIgnoreDelay)].SetValue<float>(value); } }
        public bool bPlayForceFeedbackOnEnvironmentHits { get { return this[nameof(bPlayForceFeedbackOnEnvironmentHits)].Flag; } set { this[nameof(bPlayForceFeedbackOnEnvironmentHits)].Flag = value; } }
        public bool bPlayCameraShakeOnEnvironmentHits { get { return this[nameof(bPlayCameraShakeOnEnvironmentHits)].Flag; } set { this[nameof(bPlayCameraShakeOnEnvironmentHits)].Flag = value; } }
        public int ReloadInteractiveMode { get { return this[nameof(ReloadInteractiveMode)].GetValue<int>(); } set { this[nameof(ReloadInteractiveMode)].SetValue<int>(value); } }
        public float MinimumTimeDilaton { get { return this[nameof(MinimumTimeDilaton)].GetValue<float>(); } set { this[nameof(MinimumTimeDilaton)].SetValue<float>(value); } }
        public float TimeDilationStepSize { get { return this[nameof(TimeDilationStepSize)].GetValue<float>(); } set { this[nameof(TimeDilationStepSize)].SetValue<float>(value); } }
        public float KeyboardAndMouseAimAdjustScale { get { return this[nameof(KeyboardAndMouseAimAdjustScale)].GetValue<float>(); } set { this[nameof(KeyboardAndMouseAimAdjustScale)].SetValue<float>(value); } }
        public float KeyboardAndMouseSnapToTargetScale { get { return this[nameof(KeyboardAndMouseSnapToTargetScale)].GetValue<float>(); } set { this[nameof(KeyboardAndMouseSnapToTargetScale)].SetValue<float>(value); } }
        public float GlobalTargetableRadiusScale { get { return this[nameof(GlobalTargetableRadiusScale)].GetValue<float>(); } set { this[nameof(GlobalTargetableRadiusScale)].SetValue<float>(value); } }
        public float GlobalSnapRadiusScale { get { return this[nameof(GlobalSnapRadiusScale)].GetValue<float>(); } set { this[nameof(GlobalSnapRadiusScale)].SetValue<float>(value); } }
        public float FalloffDamagePenalty { get { return this[nameof(FalloffDamagePenalty)].GetValue<float>(); } set { this[nameof(FalloffDamagePenalty)].SetValue<float>(value); } }
        public float GlobalSwayScale { get { return this[nameof(GlobalSwayScale)].GetValue<float>(); } set { this[nameof(GlobalSwayScale)].SetValue<float>(value); } }
        public Color NoTargetColor { get { return this[nameof(NoTargetColor)].As<Color>(); } set { this["NoTargetColor"] = value; } }
        public Color HostileTargetColor { get { return this[nameof(HostileTargetColor)].As<Color>(); } set { this["HostileTargetColor"] = value; } }
        public Color NeutralTargetColor { get { return this[nameof(NeutralTargetColor)].As<Color>(); } set { this["NeutralTargetColor"] = value; } }
        public Color FriendlyTargetColor { get { return this[nameof(FriendlyTargetColor)].As<Color>(); } set { this["FriendlyTargetColor"] = value; } }
        public Color ProjectileNoTargetColor { get { return this[nameof(ProjectileNoTargetColor)].As<Color>(); } set { this["ProjectileNoTargetColor"] = value; } }
        public Color ProjectileHostileTargetColor { get { return this[nameof(ProjectileHostileTargetColor)].As<Color>(); } set { this["ProjectileHostileTargetColor"] = value; } }
        public Color ProjectileNeutralTargetColor { get { return this[nameof(ProjectileNeutralTargetColor)].As<Color>(); } set { this["ProjectileNeutralTargetColor"] = value; } }
        public Color ProjectileFriendlyTargetColor { get { return this[nameof(ProjectileFriendlyTargetColor)].As<Color>(); } set { this["ProjectileFriendlyTargetColor"] = value; } }
        public Array<Object> BreakableClasses { get { return new Array<Object>(this[nameof(BreakableClasses)].Address); } }
        public int MaxDebrisPieces { get { return this[nameof(MaxDebrisPieces)].GetValue<int>(); } set { this[nameof(MaxDebrisPieces)].SetValue<int>(value); } }
        public EDebrisCullingMethod DebrisCullingMethod { get { return (EDebrisCullingMethod)this[nameof(DebrisCullingMethod)].GetValue<int>(); } set { this[nameof(DebrisCullingMethod)].SetValue<int>((int)value); } }
        public bool bUsesUniqueAimSensitivity { get { return this[nameof(bUsesUniqueAimSensitivity)].Flag; } set { this[nameof(bUsesUniqueAimSensitivity)].Flag = value; } }
        public bool bUsesUniqueScopeSensitivity { get { return this[nameof(bUsesUniqueScopeSensitivity)].Flag; } set { this[nameof(bUsesUniqueScopeSensitivity)].Flag = value; } }
        public float AreaFactor { get { return this[nameof(AreaFactor)].GetValue<float>(); } set { this[nameof(AreaFactor)].SetValue<float>(value); } }
        public float NavLinkFactor { get { return this[nameof(NavLinkFactor)].GetValue<float>(); } set { this[nameof(NavLinkFactor)].SetValue<float>(value); } }
        public int MaxNodesToOccupy { get { return this[nameof(MaxNodesToOccupy)].GetValue<int>(); } set { this[nameof(MaxNodesToOccupy)].SetValue<int>(value); } }
        public float PenaltyBase { get { return this[nameof(PenaltyBase)].GetValue<float>(); } set { this[nameof(PenaltyBase)].SetValue<float>(value); } }
        public Object AudioInterfaceClass { get { return this[nameof(AudioInterfaceClass)]; } set { this[nameof(AudioInterfaceClass)] = value; } }
        public Object AudioPlayParamsStruct { get { return this[nameof(AudioPlayParamsStruct)]; } set { this[nameof(AudioPlayParamsStruct)] = value; } }
        public Object MusicManagerClass { get { return this[nameof(MusicManagerClass)]; } set { this[nameof(MusicManagerClass)] = value; } }
        public EAmbientPriorityPolicy AmbientPriorityPolicy { get { return (EAmbientPriorityPolicy)this[nameof(AmbientPriorityPolicy)].GetValue<int>(); } set { this[nameof(AmbientPriorityPolicy)].SetValue<int>((int)value); } }
        public Object MinimapModelTemplate { get { return this[nameof(MinimapModelTemplate)]; } set { this[nameof(MinimapModelTemplate)] = value; } }
        public Object MinimapThumbnailActor { get { return this[nameof(MinimapThumbnailActor)]; } set { this[nameof(MinimapThumbnailActor)] = value; } }
        public float MinimapCaptureOffset { get { return this[nameof(MinimapCaptureOffset)].GetValue<float>(); } set { this[nameof(MinimapCaptureOffset)].SetValue<float>(value); } }
        public Array<Key> FullscreenMinimapOverrideNavKeys { get { return new Array<Key>(this[nameof(FullscreenMinimapOverrideNavKeys)].Address); } }
        public float SoftCollisionAbsoluteWeightDifference { get { return this[nameof(SoftCollisionAbsoluteWeightDifference)].GetValue<float>(); } set { this[nameof(SoftCollisionAbsoluteWeightDifference)].SetValue<float>(value); } }
        public bool bDoNotifyRateOptimzations { get { return this[nameof(bDoNotifyRateOptimzations)].Flag; } set { this[nameof(bDoNotifyRateOptimzations)].Flag = value; } }
        public int GlobalNotifyMaximumRate { get { return this[nameof(GlobalNotifyMaximumRate)].GetValue<int>(); } set { this[nameof(GlobalNotifyMaximumRate)].SetValue<int>(value); } }
        public bool bEnableMeshActivationOptimizations { get { return this[nameof(bEnableMeshActivationOptimizations)].Flag; } set { this[nameof(bEnableMeshActivationOptimizations)].Flag = value; } }
        public float MeshActivationLingerTime { get { return this[nameof(MeshActivationLingerTime)].GetValue<float>(); } set { this[nameof(MeshActivationLingerTime)].SetValue<float>(value); } }
        public float MeshActivationBoneOnlyLingerTime { get { return this[nameof(MeshActivationBoneOnlyLingerTime)].GetValue<float>(); } set { this[nameof(MeshActivationBoneOnlyLingerTime)].SetValue<float>(value); } }
        public int GlobalObjectPoolCull { get { return this[nameof(GlobalObjectPoolCull)].GetValue<int>(); } set { this[nameof(GlobalObjectPoolCull)].SetValue<int>(value); } }
        public Object PossessedObjectAction { get { return this[nameof(PossessedObjectAction)]; } set { this[nameof(PossessedObjectAction)] = value; } }
        public SoftObjectPath ImpactEffectsTable { get { return this[nameof(ImpactEffectsTable)].As<SoftObjectPath>(); } set { this["ImpactEffectsTable"] = value; } }
        public SoftObjectPath ImpactEffectsOverlayTable { get { return this[nameof(ImpactEffectsOverlayTable)].As<SoftObjectPath>(); } set { this["ImpactEffectsOverlayTable"] = value; } }
        public Array<SoftObjectPath> Challenges { get { return new Array<SoftObjectPath>(this[nameof(Challenges)].Address); } }
        public EDirectionalAnimationFilter DirectionalAnimationFilter { get { return (EDirectionalAnimationFilter)this[nameof(DirectionalAnimationFilter)].GetValue<int>(); } set { this[nameof(DirectionalAnimationFilter)].SetValue<int>((int)value); } }
        public Object LeftSideTagName { get { return this[nameof(LeftSideTagName)]; } set { this[nameof(LeftSideTagName)] = value; } }
        public Object RightSideTagName { get { return this[nameof(RightSideTagName)]; } set { this[nameof(RightSideTagName)] = value; } }
        public Object MiddleSideTagName { get { return this[nameof(MiddleSideTagName)]; } set { this[nameof(MiddleSideTagName)] = value; } }
        public SoftObjectPath CinematicStopEvent { get { return this[nameof(CinematicStopEvent)].As<SoftObjectPath>(); } set { this["CinematicStopEvent"] = value; } }
        public float MaxAimSnapAngle { get { return this[nameof(MaxAimSnapAngle)].GetValue<float>(); } set { this[nameof(MaxAimSnapAngle)].SetValue<float>(value); } }
        public int MaxPiercingTargets { get { return this[nameof(MaxPiercingTargets)].GetValue<int>(); } set { this[nameof(MaxPiercingTargets)].SetValue<int>(value); } }
        public SoftObjectPath DefaultInteractAction { get { return this[nameof(DefaultInteractAction)].As<SoftObjectPath>(); } set { this["DefaultInteractAction"] = value; } }
    }
    public class HealingInfoUtil : Object
    {
        public HealingInfoUtil(nint addr) : base(addr) { }
        public void SetHealing(HealingInfo Info, float Healing) { Invoke(nameof(SetHealing), Info, Healing); }
        public void ModifyHealing(HealingInfo Info, float Healing, float HealingMod, float HealingScalar) { Invoke(nameof(ModifyHealing), Info, Healing, HealingMod, HealingScalar); }
    }
    public class HierarchicalEditInterface : Interface
    {
        public HierarchicalEditInterface(nint addr) : base(addr) { }
    }
    public class HitPauseInterface : Interface
    {
        public HitPauseInterface(nint addr) : base(addr) { }
    }
    public class HitPauseUtil : Object
    {
        public HitPauseUtil(nint addr) : base(addr) { }
        public void ApplyHitPause(Actor Actor, Object DamageTypeClass, float DurationScalar) { Invoke(nameof(ApplyHitPause), Actor, DamageTypeClass, DurationScalar); }
        public bool AllowsHitPause(Actor Actor, DamageInfo DamageInfo, bool bCheckOwner) { return Invoke<bool>(nameof(AllowsHitPause), Actor, DamageInfo, bCheckOwner); }
    }
    public class Tracer : Actor
    {
        public Tracer(nint addr) : base(addr) { }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float MaxFlightTime { get { return this[nameof(MaxFlightTime)].GetValue<float>(); } set { this[nameof(MaxFlightTime)].SetValue<float>(value); } }
        public Array<TracerPathSegment> TracerPath { get { return new Array<TracerPathSegment>(this[nameof(TracerPath)].Address); } }
        public void InitFromCause(Actor Cause) { Invoke(nameof(InitFromCause), Cause); }
    }
    public class ImpactEffectSubsystem : EngineSubsystem
    {
        public ImpactEffectSubsystem(nint addr) : base(addr) { }
        public DataTable ImpactEffects { get { return this[nameof(ImpactEffects)].As<DataTable>(); } set { this["ImpactEffects"] = value; } }
        public DataTable ImpactEffectsOverlay { get { return this[nameof(ImpactEffectsOverlay)].As<DataTable>(); } set { this["ImpactEffectsOverlay"] = value; } }
    }
    public class InputDeviceManager : Object
    {
        public InputDeviceManager(nint addr) : base(addr) { }
        public Object OnPreDeviceChangedDelegate { get { return this[nameof(OnPreDeviceChangedDelegate)]; } set { this[nameof(OnPreDeviceChangedDelegate)] = value; } }
        public Object OnNotifyDeviceChanged { get { return this[nameof(OnNotifyDeviceChanged)]; } set { this[nameof(OnNotifyDeviceChanged)] = value; } }
        public Object OnDeviceChangedDelegate { get { return this[nameof(OnDeviceChangedDelegate)]; } set { this[nameof(OnDeviceChangedDelegate)] = value; } }
        public Object OnResetIconCache { get { return this[nameof(OnResetIconCache)]; } set { this[nameof(OnResetIconCache)] = value; } }
        public ImageSet ImageSet { get { return this[nameof(ImageSet)].As<ImageSet>(); } set { this["ImageSet"] = value; } }
        public void ResetKeyboardIconCache() { Invoke(nameof(ResetKeyboardIconCache)); }
        public void OnImageSetLoaded() { Invoke(nameof(OnImageSetLoaded)); }
        public bool IsUsingTouchController() { return Invoke<bool>(nameof(IsUsingTouchController)); }
        public bool IsUsingKeyboardAndMouse() { return Invoke<bool>(nameof(IsUsingKeyboardAndMouse)); }
        public bool IsUsingGamepadAnalogCursor(Object WorldContextObject) { return Invoke<bool>(nameof(IsUsingGamepadAnalogCursor), WorldContextObject); }
        public bool IsUsingGamepad() { return Invoke<bool>(nameof(IsUsingGamepad)); }
        public bool IsUsingAltImageSet() { return Invoke<bool>(nameof(IsUsingAltImageSet)); }
        public InputDeviceManager GetInstance() { return Invoke<InputDeviceManager>(nameof(GetInstance)); }
        public EInputDevice GetInputDeviceFromKey(Key Key) { return Invoke<EInputDevice>(nameof(GetInputDeviceFromKey), Key); }
        public Object GetImage(Object NameID) { return Invoke<Object>(nameof(GetImage), NameID); }
        public EInputDevice GetCurrentDeviceInUse(int ControllerId) { return Invoke<EInputDevice>(nameof(GetCurrentDeviceInUse), ControllerId); }
        public bool CheckInputAction(PlayerController PlayerController, Object ActionName) { return Invoke<bool>(nameof(CheckInputAction), PlayerController, ActionName); }
    }
    public class InputRebindings : Object
    {
        public InputRebindings(nint addr) : base(addr) { }
        public Array<RebindedInputAction> ActionRebindings { get { return new Array<RebindedInputAction>(this[nameof(ActionRebindings)].Address); } }
        public Array<RebindedInputAxis> AxisRebindings { get { return new Array<RebindedInputAxis>(this[nameof(AxisRebindings)].Address); } }
        public InputMappingContext AddedMappingContexts { get { return this[nameof(AddedMappingContexts)].As<InputMappingContext>(); } set { this["AddedMappingContexts"] = value; } }
        public InputMappingContext RemovedMappingContexts { get { return this[nameof(RemovedMappingContexts)].As<InputMappingContext>(); } set { this["RemovedMappingContexts"] = value; } }
        public void ResetInputRebindings() { Invoke(nameof(ResetInputRebindings)); }
        public void RemoveEnhancedActionRebinding(EnhancedActionKeyMapping TemplateMapping) { Invoke(nameof(RemoveEnhancedActionRebinding), TemplateMapping); }
        public void RemoveAxisRebinding(InputAxisKeyMapping Axis) { Invoke(nameof(RemoveAxisRebinding), Axis); }
        public void RemoveActionRebinding(InputActionKeyMapping Action) { Invoke(nameof(RemoveActionRebinding), Action); }
        public void AddEnhancedActionRebinding(EnhancedActionKeyMapping TemplateMapping) { Invoke(nameof(AddEnhancedActionRebinding), TemplateMapping); }
        public void AddAxisRebinding(InputAxisKeyMapping Axis) { Invoke(nameof(AddAxisRebinding), Axis); }
        public void AddActionRebinding(InputActionKeyMapping Action) { Invoke(nameof(AddActionRebinding), Action); }
    }
    public class InputStateComponent : ActorComponent
    {
        public InputStateComponent(nint addr) : base(addr) { }
        public Array<InputButton> Buttons { get { return new Array<InputButton>(this[nameof(Buttons)].Address); } }
        public bool bRefreshButtonStatesOnSetup { get { return this[nameof(bRefreshButtonStatesOnSetup)].Flag; } set { this[nameof(bRefreshButtonStatesOnSetup)].Flag = value; } }
        public EMoveInputMethod MoveInputMethod { get { return (EMoveInputMethod)this[nameof(MoveInputMethod)].GetValue<int>(); } set { this[nameof(MoveInputMethod)].SetValue<int>((int)value); } }
        public bool StickyMovement { get { return this[nameof(StickyMovement)].Flag; } set { this[nameof(StickyMovement)].Flag = value; } }
        public float StickyMovementThreshold { get { return this[nameof(StickyMovementThreshold)].GetValue<float>(); } set { this[nameof(StickyMovementThreshold)].SetValue<float>(value); } }
        public Object WalkingToggleButton { get { return this[nameof(WalkingToggleButton)]; } set { this[nameof(WalkingToggleButton)] = value; } }
        public float MaxWalkingInput { get { return this[nameof(MaxWalkingInput)].GetValue<float>(); } set { this[nameof(MaxWalkingInput)].SetValue<float>(value); } }
        public Object InputEvent { get { return this[nameof(InputEvent)]; } set { this[nameof(InputEvent)] = value; } }
        public Object MoveInputEvent { get { return this[nameof(MoveInputEvent)]; } set { this[nameof(MoveInputEvent)] = value; } }
        public Object InputHandlerMap { get { return this[nameof(InputHandlerMap)]; } set { this[nameof(InputHandlerMap)] = value; } }
        public float LastCameraRelativeInputDirection { get { return this[nameof(LastCameraRelativeInputDirection)].GetValue<float>(); } set { this[nameof(LastCameraRelativeInputDirection)].SetValue<float>(value); } }
        public float LastCameraRelativeVerticalInputDirection { get { return this[nameof(LastCameraRelativeVerticalInputDirection)].GetValue<float>(); } set { this[nameof(LastCameraRelativeVerticalInputDirection)].SetValue<float>(value); } }
        public void SetWalking(bool InIsWalking) { Invoke(nameof(SetWalking), InIsWalking); }
        public void SetMoveInputEnabled(bool bEnabled) { Invoke(nameof(SetMoveInputEnabled), bEnabled); }
        public void SetInputEnabled(bool Enable) { Invoke(nameof(SetInputEnabled), Enable); }
        public void SetButtonStateByName(Object Name, ButtonEvent Event) { Invoke(nameof(SetButtonStateByName), Name, Event); }
        public void ServerUpdateCameraRelativeInputDirections(float Direction, float VerticalDirection) { Invoke(nameof(ServerUpdateCameraRelativeInputDirections), Direction, VerticalDirection); }
        public void ResetButton(Object ButtonName) { Invoke(nameof(ResetButton), ButtonName); }
        public void RemoveButtonListener(Object Name, Object Event) { Invoke(nameof(RemoveButtonListener), Name, Event); }
        public void OnSwitchCamera() { Invoke(nameof(OnSwitchCamera)); }
        public bool IsMoveInputEnabled() { return Invoke<bool>(nameof(IsMoveInputEnabled)); }
        public bool IsInputEnabled() { return Invoke<bool>(nameof(IsInputEnabled)); }
        public bool IsActionPressed(PlayerController PlayerController, InputAction InputAction) { return Invoke<bool>(nameof(IsActionPressed), PlayerController, InputAction); }
        public bool HasVerticalMoveInput() { return Invoke<bool>(nameof(HasVerticalMoveInput)); }
        public bool HasMoveInput() { return Invoke<bool>(nameof(HasMoveInput)); }
        public bool HasHorizontalMoveInput() { return Invoke<bool>(nameof(HasHorizontalMoveInput)); }
        public Vector GetScreenRelativeMoveInput(Vector Up, bool bAllowSticky, bool bAllowVerticalInput) { return Invoke<Vector>(nameof(GetScreenRelativeMoveInput), Up, bAllowSticky, bAllowVerticalInput); }
        public Vector GetRelativeMoveInput(Rotator Rotation, bool bAllowVerticalInput) { return Invoke<Vector>(nameof(GetRelativeMoveInput), Rotation, bAllowVerticalInput); }
        public void GetMoveInput(Vector OutMoveInput) { Invoke(nameof(GetMoveInput), OutMoveInput); }
        public bool GetIsWalking() { return Invoke<bool>(nameof(GetIsWalking)); }
        public bool GetCameraRotation(Rotator OutCameraRotation, bool bAllowSticky) { return Invoke<bool>(nameof(GetCameraRotation), OutCameraRotation, bAllowSticky); }
        public Vector GetCameraRelativeMoveInput_UseCameraUp(bool bAllowSticky, bool bAllowVerticalInput) { return Invoke<Vector>(nameof(GetCameraRelativeMoveInput_UseCameraUp), bAllowSticky, bAllowVerticalInput); }
        public Vector GetCameraRelativeMoveInput(Vector Up, bool bAllowSticky, bool bAllowVerticalInput) { return Invoke<Vector>(nameof(GetCameraRelativeMoveInput), Up, bAllowSticky, bAllowVerticalInput); }
        public ButtonEvent GetButtonStateByName(Object Name) { return Invoke<ButtonEvent>(nameof(GetButtonStateByName), Name); }
        public void AddButtonListener(Object Name, Object Event) { Invoke(nameof(AddButtonListener), Name, Event); }
    }
    public class StatInfo : Object
    {
        public StatInfo(nint addr) : base(addr) { }
        public InspectStatBase BaseInfo { get { return this[nameof(BaseInfo)].As<InspectStatBase>(); } set { this["BaseInfo"] = value; } }
        public bool ForceInspect { get { return this[nameof(ForceInspect)].Flag; } set { this[nameof(ForceInspect)].Flag = value; } }
        public bool ApplyMod { get { return this[nameof(ApplyMod)].Flag; } set { this[nameof(ApplyMod)].Flag = value; } }
    }
    public class StatInfoSet : Object
    {
        public StatInfoSet(nint addr) : base(addr) { }
        public Array<StatInfo> Stats { get { return new Array<StatInfo>(this[nameof(Stats)].Address); } }
    }
    public class InspectUtil : Object
    {
        public InspectUtil(nint addr) : base(addr) { }
        public void SetInspectStat(InspectInfo Info, Object NameID, InspectStat Stat) { Invoke(nameof(SetInspectStat), Info, NameID, Stat); }
        public bool GetInspectStatForMod(InspectMod Mod, Object NameID, InspectStat OutStat) { return Invoke<bool>(nameof(GetInspectStatForMod), Mod, NameID, OutStat); }
        public bool GetInspectStat(InspectInfo Info, Object NameID, InspectStat OutStat) { return Invoke<bool>(nameof(GetInspectStat), Info, NameID, OutStat); }
        public bool GetInspectMod(InspectInfo Info, Object NameID, InspectMod OutMod) { return Invoke<bool>(nameof(GetInspectMod), Info, NameID, OutMod); }
        public void ClearStats(InspectInfo Info) { Invoke(nameof(ClearStats), Info); }
    }
    public class InteractableStateBase : Object
    {
        public InteractableStateBase(nint addr) : base(addr) { }
        public bool bInitialState { get { return this[nameof(bInitialState)].Flag; } set { this[nameof(bInitialState)].Flag = value; } }
        public Color DebugColor { get { return this[nameof(DebugColor)].As<Color>(); } set { this["DebugColor"] = value; } }
    }
    public class InteractableInterface : Interface
    {
        public InteractableInterface(nint addr) : base(addr) { }
        public void OnTriggered(InteractableStateBase State) { Invoke(nameof(OnTriggered), State); }
    }
    public class InteractableUtil : Object
    {
        public InteractableUtil(nint addr) : base(addr) { }
        public void TriggerInteractableActors(Object WorldContextObject, Array<InteractableActorReference> Interactables, Object DefaultState) { Invoke(nameof(TriggerInteractableActors), WorldContextObject, Interactables, DefaultState); }
        public void TriggerInteractableActorByName(Object WorldContextObject, Object Name, Object State) { Invoke(nameof(TriggerInteractableActorByName), WorldContextObject, Name, State); }
        public void TriggerInteractableActor(Actor Actor, Object State) { Invoke(nameof(TriggerInteractableActor), Actor, State); }
        public void GetActorsFromInteractableReference(Object WorldContextObject, InteractableActorReference Interactable, Array<Actor> Actors) { Invoke(nameof(GetActorsFromInteractableReference), WorldContextObject, Interactable, Actors); }
        public Actor GetActorFromInteractableReference(Object WorldContextObject, InteractableActorReference Interactable) { return Invoke<Actor>(nameof(GetActorFromInteractableReference), WorldContextObject, Interactable); }
        public bool CheckTriggerState(InteractableStateBase State, Object Class) { return Invoke<bool>(nameof(CheckTriggerState), State, Class); }
    }
    public class InteractableState_On : InteractableStateBase
    {
        public InteractableState_On(nint addr) : base(addr) { }
    }
    public class InteractableState_Off : InteractableStateBase
    {
        public InteractableState_Off(nint addr) : base(addr) { }
    }
    public class InteractableState_InitOn : InteractableState_On
    {
        public InteractableState_InitOn(nint addr) : base(addr) { }
    }
    public class InteractableState_InitOff : InteractableState_Off
    {
        public InteractableState_InitOff(nint addr) : base(addr) { }
    }
    public class InteractableState_Complete : InteractableStateBase
    {
        public InteractableState_Complete(nint addr) : base(addr) { }
    }
    public class InteractableState_Ready : InteractableStateBase
    {
        public InteractableState_Ready(nint addr) : base(addr) { }
    }
    public class InteractableState_Unready : InteractableStateBase
    {
        public InteractableState_Unready(nint addr) : base(addr) { }
    }
    public class InteractableState_InitReady : InteractableState_Ready
    {
        public InteractableState_InitReady(nint addr) : base(addr) { }
    }
    public class InteractableState_InitUnready : InteractableState_Unready
    {
        public InteractableState_InitUnready(nint addr) : base(addr) { }
    }
    public class KinematicInterface : Interface
    {
        public KinematicInterface(nint addr) : base(addr) { }
        public bool ShouldTargetImpactPoint(HitResult Hit) { return Invoke<bool>(nameof(ShouldTargetImpactPoint), Hit); }
        public bool OnProjectileHit(Actor Projectile, HitResult Hit, KinematicInfo Info) { return Invoke<bool>(nameof(OnProjectileHit), Projectile, Hit, Info); }
        public bool OnHitscanHit(Actor HitscanOwner, Actor Cause, HitResult Hit, DamageInfo DamageInfo, bool bIsFinalHit, ImpactEffectSelector InOutImpactEffectOverride) { return Invoke<bool>(nameof(OnHitscanHit), HitscanOwner, Cause, Hit, DamageInfo, bIsFinalHit, InOutImpactEffectOverride); }
        public bool ModifyWeaponTrace(Actor Cause, WeaponTraceSegment CurrentSegment, Vector Size, WeaponTracePath InOutPath) { return Invoke<bool>(nameof(ModifyWeaponTrace), Cause, CurrentSegment, Size, InOutPath); }
        public void ModifyImpactEffects(HitResult Hit, DamageInfo DamageInfo, bool bIsFinalHit, ImpactEffectDescriptor InOutImpactEffectOverride) { Invoke(nameof(ModifyImpactEffects), Hit, DamageInfo, bIsFinalHit, InOutImpactEffectOverride); }
        public void ModifyHitscanDamageType(HitResult Hit, Object InOutDamageType) { Invoke(nameof(ModifyHitscanDamageType), Hit, InOutDamageType); }
        public void ModifyHitscanDamage(HitResult Hit, DamageInfo InOutDamageInfo) { Invoke(nameof(ModifyHitscanDamage), Hit, InOutDamageInfo); }
    }
    public class KinematicUtil : Object
    {
        public KinematicUtil(nint addr) : base(addr) { }
        public void AddSegmentToWeaponTracePath(WeaponTracePath InOutPath, Vector TraceStart, Vector TraceEnd, PrimitiveComponent StartComponent, Object StartBoneName) { Invoke(nameof(AddSegmentToWeaponTracePath), InOutPath, TraceStart, TraceEnd, StartComponent, StartBoneName); }
    }
    public class MathUtil : Object
    {
        public MathUtil(nint addr) : base(addr) { }
        public int StableRandomInteger(Actor Actor) { return Invoke<int>(nameof(StableRandomInteger), Actor); }
        public bool SphereTriangleOverlap(Vector Center, float Radius, Vector A, Vector B, Vector C) { return Invoke<bool>(nameof(SphereTriangleOverlap), Center, Radius, A, B, C); }
        public bool SphereCapsuleIntersect(Vector Origin, float SphereRadius, Transform CapsuleTransform, float CapsuleHalfHeight, float CapsuleRadius) { return Invoke<bool>(nameof(SphereCapsuleIntersect), Origin, SphereRadius, CapsuleTransform, CapsuleHalfHeight, CapsuleRadius); }
        public void SmoothCDFloat(float Val, float ValRate, float DeltaTime, float To, float SmoothTime, float OutVal, float OutValRate) { Invoke(nameof(SmoothCDFloat), Val, ValRate, DeltaTime, To, SmoothTime, OutVal, OutValRate); }
        public bool SegmentCapsuleIntersect(Vector Start, Vector End, Transform CapsuleTransform, float CapsuleHalfHeight, float CapsuleRadius) { return Invoke<bool>(nameof(SegmentCapsuleIntersect), Start, End, CapsuleTransform, CapsuleHalfHeight, CapsuleRadius); }
        public float ScaleValueByLevel(int Level, float Value, float Inc, float Exp) { return Invoke<float>(nameof(ScaleValueByLevel), Level, Value, Inc, Exp); }
        public void ScaleLineSegment(Vector Start, Vector End, float DistanceOffset, float LengthScalar) { Invoke(nameof(ScaleLineSegment), Start, End, DistanceOffset, LengthScalar); }
        public bool RayIntersectsSphere(Vector LineOrigin, Vector LineDirection, Vector Center, float Radius, float Distance) { return Invoke<bool>(nameof(RayIntersectsSphere), LineOrigin, LineDirection, Center, Radius, Distance); }
        public float NormalizeToRangeAndClamp(float Value, float Minimum, float Maximum) { return Invoke<float>(nameof(NormalizeToRangeAndClamp), Value, Minimum, Maximum); }
        public bool K2_FindBestFitPlane(Array<Vector> Points, Vector OutBase, Vector OutNormal) { return Invoke<bool>(nameof(K2_FindBestFitPlane), Points, OutBase, OutNormal); }
        public bool K2_FindBestFitLine(Array<Vector> Points, Vector OutOrigin, Vector OutDirection, ELineFittingMethod Method) { return Invoke<bool>(nameof(K2_FindBestFitLine), Points, OutOrigin, OutDirection, Method); }
        public bool IsPointInBounds(Vector Point, Vector Origin, Vector Extents) { return Invoke<bool>(nameof(IsPointInBounds), Point, Origin, Extents); }
        public bool IsInsideBox(BoxComponent Box, Vector Point, float ExtentOffset) { return Invoke<bool>(nameof(IsInsideBox), Box, Point, ExtentOffset); }
        public Vector GetRandomPointInsideSphere(float SphereRadius) { return Invoke<Vector>(nameof(GetRandomPointInsideSphere), SphereRadius); }
        public Vector GetRandomPointInsideHollowSphere(float MinimumRadius, float MaximumRadius) { return Invoke<Vector>(nameof(GetRandomPointInsideHollowSphere), MinimumRadius, MaximumRadius); }
        public Vector GetRandomPointInsideCircle(float CircleRadius) { return Invoke<Vector>(nameof(GetRandomPointInsideCircle), CircleRadius); }
        public Vector GetPointAlongCircle(float Radius, float Angle) { return Invoke<Vector>(nameof(GetPointAlongCircle), Radius, Angle); }
        public float GetHeading(Vector Direction) { return Invoke<float>(nameof(GetHeading), Direction); }
        public float GetDistanceScalar(float CurrentDistance, float OptimalDistance, float TotalDistance) { return Invoke<float>(nameof(GetDistanceScalar), CurrentDistance, OptimalDistance, TotalDistance); }
        public Vector GetDirectionVector(float Heading) { return Invoke<Vector>(nameof(GetDirectionVector), Heading); }
        public Rotator GetCameraRelativeBasis(Vector UpAxis, Rotator CameraRotation) { return Invoke<Rotator>(nameof(GetCameraRelativeBasis), UpAxis, CameraRotation); }
        public float GetAngleDiff(float A0, float A1) { return Invoke<float>(nameof(GetAngleDiff), A0, A1); }
        public float GetAngleBetween(Vector A0, Vector A1) { return Invoke<float>(nameof(GetAngleBetween), A0, A1); }
        public float FindDistanceAlongSplineAtSplineInputKey(SplineComponent Spline, float InputKey) { return Invoke<float>(nameof(FindDistanceAlongSplineAtSplineInputKey), Spline, InputKey); }
        public float FindClosestPointOnSpline(SplineComponent Spline, Vector PointInSpace, Vector OutClosestPoint) { return Invoke<float>(nameof(FindClosestPointOnSpline), Spline, PointInSpace, OutClosestPoint); }
        public Quat DirectionalSlerp(Quat Quat1, Quat Quat2, float Alpha, Vector Direction) { return Invoke<Quat>(nameof(DirectionalSlerp), Quat1, Quat2, Alpha, Direction); }
        public Transform ComponentwiseInterpolateTransforms(Transform A, Transform B, Vector TranslationAlphas, float RotationAlpha, Vector RotationDirection) { return Invoke<Transform>(nameof(ComponentwiseInterpolateTransforms), A, B, TranslationAlphas, RotationAlpha, RotationDirection); }
        public bool CapsuleCapsuleIntersect(Transform Capsule1Transform, float Capsule1HalfHeight, float Capsule1Radius, Transform Capsule2Transform, float Capsule2HalfHeight, float Capsule2Radius) { return Invoke<bool>(nameof(CapsuleCapsuleIntersect), Capsule1Transform, Capsule1HalfHeight, Capsule1Radius, Capsule2Transform, Capsule2HalfHeight, Capsule2Radius); }
        public bool BoxLineIntersect(Box Box, Vector LineStart, Vector LineEnd, Vector OutIntersectPoint, Vector OutIntersectNormal, float OutIntersectTime) { return Invoke<bool>(nameof(BoxLineIntersect), Box, LineStart, LineEnd, OutIntersectPoint, OutIntersectNormal, OutIntersectTime); }
        public float ApplyMod(float Value, float Mod, float Scalar) { return Invoke<float>(nameof(ApplyMod), Value, Mod, Scalar); }
    }
    public class NavigationSystemGunfire : NavigationSystemV1
    {
        public NavigationSystemGunfire(nint addr) : base(addr) { }
    }
    public class PhysicsSoundInstance : Object
    {
        public PhysicsSoundInstance(nint addr) : base(addr) { }
        public AudioComponentGunfire CurrentComponent { get { return this[nameof(CurrentComponent)].As<AudioComponentGunfire>(); } set { this["CurrentComponent"] = value; } }
        public void OnImpactTimerExpired() { Invoke(nameof(OnImpactTimerExpired)); }
        public void AudioComponentFinished(GunfireAudioPlayingID PlayingID, int ErrorCode) { Invoke(nameof(AudioComponentFinished), PlayingID, ErrorCode); }
    }
    public class PhysicsActorGunfire : Actor
    {
        public PhysicsActorGunfire(nint addr) : base(addr) { }
        public Array<PhysicsImpactSoundInfo> ActivePhysicsSoundInfoList { get { return new Array<PhysicsImpactSoundInfo>(this[nameof(ActivePhysicsSoundInfoList)].Address); } }
        public Array<PhysicsSoundInstance> SpawnedSoundInstances { get { return new Array<PhysicsSoundInstance>(this[nameof(SpawnedSoundInstances)].Address); } }
        public int SleepThreshold { get { return this[nameof(SleepThreshold)].GetValue<int>(); } set { this[nameof(SleepThreshold)].SetValue<int>(value); } }
        public float VelocityNoiseFloor { get { return this[nameof(VelocityNoiseFloor)].GetValue<float>(); } set { this[nameof(VelocityNoiseFloor)].SetValue<float>(value); } }
        public int LowVelocityEncountered { get { return this[nameof(LowVelocityEncountered)].GetValue<int>(); } set { this[nameof(LowVelocityEncountered)].SetValue<int>(value); } }
        public void SoundInstanceFinished(PhysicsSoundInstance SoundInstanceObject) { Invoke(nameof(SoundInstanceFinished), SoundInstanceObject); }
        public void OnHitCallback(PrimitiveComponent HitComp, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnHitCallback), HitComp, OtherActor, OtherComp, NormalImpulse, Hit); }
    }
    public class PhysicsBounds : Actor
    {
        public PhysicsBounds(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public StaticMeshComponent MeshBounds { get { return this[nameof(MeshBounds)].As<StaticMeshComponent>(); } set { this["MeshBounds"] = value; } }
        public Object OnBeginAffectCharacterEvent { get { return this[nameof(OnBeginAffectCharacterEvent)]; } set { this[nameof(OnBeginAffectCharacterEvent)] = value; } }
        public Object OnEndAffectCharacterEvent { get { return this[nameof(OnEndAffectCharacterEvent)]; } set { this[nameof(OnEndAffectCharacterEvent)] = value; } }
        public float TerminalVelocity { get { return this[nameof(TerminalVelocity)].GetValue<float>(); } set { this[nameof(TerminalVelocity)].SetValue<float>(value); } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public float JumpImpulseScale { get { return this[nameof(JumpImpulseScale)].GetValue<float>(); } set { this[nameof(JumpImpulseScale)].SetValue<float>(value); } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public float FluidFriction { get { return this[nameof(FluidFriction)].GetValue<float>(); } set { this[nameof(FluidFriction)].SetValue<float>(value); } }
        public bool bWaterVolume { get { return this[nameof(bWaterVolume)].Flag; } set { this[nameof(bWaterVolume)].Flag = value; } }
        public bool bPhysicsOnContact { get { return this[nameof(bPhysicsOnContact)].Flag; } set { this[nameof(bPhysicsOnContact)].Flag = value; } }
        public EPhysicsBoundsForceType XForceType { get { return (EPhysicsBoundsForceType)this[nameof(XForceType)].GetValue<int>(); } set { this[nameof(XForceType)].SetValue<int>((int)value); } }
        public float XPushForce { get { return this[nameof(XPushForce)].GetValue<float>(); } set { this[nameof(XPushForce)].SetValue<float>(value); } }
        public float XPushMaxVelocity { get { return this[nameof(XPushMaxVelocity)].GetValue<float>(); } set { this[nameof(XPushMaxVelocity)].SetValue<float>(value); } }
        public CurveFloat XPushForceCurve { get { return this[nameof(XPushForceCurve)].As<CurveFloat>(); } set { this["XPushForceCurve"] = value; } }
        public float XPullForce { get { return this[nameof(XPullForce)].GetValue<float>(); } set { this[nameof(XPullForce)].SetValue<float>(value); } }
        public float XPullFriction { get { return this[nameof(XPullFriction)].GetValue<float>(); } set { this[nameof(XPullFriction)].SetValue<float>(value); } }
        public bool bLimitXMinVelocity { get { return this[nameof(bLimitXMinVelocity)].Flag; } set { this[nameof(bLimitXMinVelocity)].Flag = value; } }
        public float XMinVelocity { get { return this[nameof(XMinVelocity)].GetValue<float>(); } set { this[nameof(XMinVelocity)].SetValue<float>(value); } }
        public bool bLimitXMaxVelocity { get { return this[nameof(bLimitXMaxVelocity)].Flag; } set { this[nameof(bLimitXMaxVelocity)].Flag = value; } }
        public float XMaxVelocity { get { return this[nameof(XMaxVelocity)].GetValue<float>(); } set { this[nameof(XMaxVelocity)].SetValue<float>(value); } }
        public EPhysicsBoundsForceType YForceType { get { return (EPhysicsBoundsForceType)this[nameof(YForceType)].GetValue<int>(); } set { this[nameof(YForceType)].SetValue<int>((int)value); } }
        public float YPushForce { get { return this[nameof(YPushForce)].GetValue<float>(); } set { this[nameof(YPushForce)].SetValue<float>(value); } }
        public float YPushMaxVelocity { get { return this[nameof(YPushMaxVelocity)].GetValue<float>(); } set { this[nameof(YPushMaxVelocity)].SetValue<float>(value); } }
        public CurveFloat YPushForceCurve { get { return this[nameof(YPushForceCurve)].As<CurveFloat>(); } set { this["YPushForceCurve"] = value; } }
        public float YPullForce { get { return this[nameof(YPullForce)].GetValue<float>(); } set { this[nameof(YPullForce)].SetValue<float>(value); } }
        public float YPullFriction { get { return this[nameof(YPullFriction)].GetValue<float>(); } set { this[nameof(YPullFriction)].SetValue<float>(value); } }
        public bool bLimitYMinVelocity { get { return this[nameof(bLimitYMinVelocity)].Flag; } set { this[nameof(bLimitYMinVelocity)].Flag = value; } }
        public float YMinVelocity { get { return this[nameof(YMinVelocity)].GetValue<float>(); } set { this[nameof(YMinVelocity)].SetValue<float>(value); } }
        public bool bLimitYMaxVelocity { get { return this[nameof(bLimitYMaxVelocity)].Flag; } set { this[nameof(bLimitYMaxVelocity)].Flag = value; } }
        public float YMaxVelocity { get { return this[nameof(YMaxVelocity)].GetValue<float>(); } set { this[nameof(YMaxVelocity)].SetValue<float>(value); } }
        public EPhysicsBoundsForceType ZForceType { get { return (EPhysicsBoundsForceType)this[nameof(ZForceType)].GetValue<int>(); } set { this[nameof(ZForceType)].SetValue<int>((int)value); } }
        public float ZPushForce { get { return this[nameof(ZPushForce)].GetValue<float>(); } set { this[nameof(ZPushForce)].SetValue<float>(value); } }
        public float ZPushMaxVelocity { get { return this[nameof(ZPushMaxVelocity)].GetValue<float>(); } set { this[nameof(ZPushMaxVelocity)].SetValue<float>(value); } }
        public CurveFloat ZPushForceCurve { get { return this[nameof(ZPushForceCurve)].As<CurveFloat>(); } set { this["ZPushForceCurve"] = value; } }
        public float ZPullForce { get { return this[nameof(ZPullForce)].GetValue<float>(); } set { this[nameof(ZPullForce)].SetValue<float>(value); } }
        public float ZPullFriction { get { return this[nameof(ZPullFriction)].GetValue<float>(); } set { this[nameof(ZPullFriction)].SetValue<float>(value); } }
        public bool bLimitZMinVelocity { get { return this[nameof(bLimitZMinVelocity)].Flag; } set { this[nameof(bLimitZMinVelocity)].Flag = value; } }
        public float ZMinVelocity { get { return this[nameof(ZMinVelocity)].GetValue<float>(); } set { this[nameof(ZMinVelocity)].SetValue<float>(value); } }
        public bool bLimitZMaxVelocity { get { return this[nameof(bLimitZMaxVelocity)].Flag; } set { this[nameof(bLimitZMaxVelocity)].Flag = value; } }
        public float ZMaxVelocity { get { return this[nameof(ZMaxVelocity)].GetValue<float>(); } set { this[nameof(ZMaxVelocity)].SetValue<float>(value); } }
        public void OnEndAffectCharacter(Character Character, Actor NewBounds) { Invoke(nameof(OnEndAffectCharacter), Character, NewBounds); }
        public void OnBeginAffectCharacter(Character Character, Actor OldBounds) { Invoke(nameof(OnBeginAffectCharacter), Character, OldBounds); }
        public float GetForceToApplyScale(Character Character) { return Invoke<float>(nameof(GetForceToApplyScale), Character); }
    }
    public class PhysicsBoundsType : Object
    {
        public PhysicsBoundsType(nint addr) : base(addr) { }
        public bool bOverrideWaterSurfaceType { get { return this[nameof(bOverrideWaterSurfaceType)].Flag; } set { this[nameof(bOverrideWaterSurfaceType)].Flag = value; } }
        public byte WaterSurfaceType { get { return this[nameof(WaterSurfaceType)].GetValue<byte>(); } set { this[nameof(WaterSurfaceType)].SetValue<byte>(value); } }
    }
    public class PhysicsBoundsInterface : Interface
    {
        public PhysicsBoundsInterface(nint addr) : base(addr) { }
        public bool IsWaterBounds() { return Invoke<bool>(nameof(IsWaterBounds)); }
        public float GetWaterLine() { return Invoke<float>(nameof(GetWaterLine)); }
        public Object GetBoundsType() { return Invoke<Object>(nameof(GetBoundsType)); }
        public int GetBoundsPriority() { return Invoke<int>(nameof(GetBoundsPriority)); }
        public bool ConfirmOverlap(SceneComponent Component) { return Invoke<bool>(nameof(ConfirmOverlap), Component); }
    }
    public class PhysicsBoundsUtil : Object
    {
        public PhysicsBoundsUtil(nint addr) : base(addr) { }
        public bool IsWaterBounds(Actor Bounds) { return Invoke<bool>(nameof(IsWaterBounds), Bounds); }
        public byte GetWaterSurfaceType(Object BoundsType) { return Invoke<byte>(nameof(GetWaterSurfaceType), BoundsType); }
        public bool GetWaterLine(Actor Bounds, float OutWaterLine) { return Invoke<bool>(nameof(GetWaterLine), Bounds, OutWaterLine); }
        public Object GetBoundsType(Actor Bounds) { return Invoke<Object>(nameof(GetBoundsType), Bounds); }
    }
    public class PhysicsStateActor : Actor
    {
        public PhysicsStateActor(nint addr) : base(addr) { }
        public float GlobalMassScale { get { return this[nameof(GlobalMassScale)].GetValue<float>(); } set { this[nameof(GlobalMassScale)].SetValue<float>(value); } }
        public bool bAutoSizeKinematicCollision { get { return this[nameof(bAutoSizeKinematicCollision)].Flag; } set { this[nameof(bAutoSizeKinematicCollision)].Flag = value; } }
        public Object WeaponPhantomComponentName { get { return this[nameof(WeaponPhantomComponentName)]; } set { this[nameof(WeaponPhantomComponentName)] = value; } }
        public bool bAutoSizeWeaponPhantom { get { return this[nameof(bAutoSizeWeaponPhantom)].Flag; } set { this[nameof(bAutoSizeWeaponPhantom)].Flag = value; } }
        public bool bIgnoreDamageToInteractiveOther { get { return this[nameof(bIgnoreDamageToInteractiveOther)].Flag; } set { this[nameof(bIgnoreDamageToInteractiveOther)].Flag = value; } }
        public bool bIgnoreDamageToAttachedActors { get { return this[nameof(bIgnoreDamageToAttachedActors)].Flag; } set { this[nameof(bIgnoreDamageToAttachedActors)].Flag = value; } }
        public float PushingForceScale { get { return this[nameof(PushingForceScale)].GetValue<float>(); } set { this[nameof(PushingForceScale)].SetValue<float>(value); } }
        public float PushingTorqueScale { get { return this[nameof(PushingTorqueScale)].GetValue<float>(); } set { this[nameof(PushingTorqueScale)].SetValue<float>(value); } }
        public bool bApplyPushingCenterOfMassOffset { get { return this[nameof(bApplyPushingCenterOfMassOffset)].Flag; } set { this[nameof(bApplyPushingCenterOfMassOffset)].Flag = value; } }
        public Vector PushingCenterOfMassOffset { get { return this[nameof(PushingCenterOfMassOffset)].As<Vector>(); } set { this["PushingCenterOfMassOffset"] = value; } }
        public Object FXSlotComponentName { get { return this[nameof(FXSlotComponentName)]; } set { this[nameof(FXSlotComponentName)] = value; } }
        public Array<PhysicsActorStateSet> PhysicsBoundSets { get { return new Array<PhysicsActorStateSet>(this[nameof(PhysicsBoundSets)].Address); } }
        public Actor PushingActor { get { return this[nameof(PushingActor)].As<Actor>(); } set { this["PushingActor"] = value; } }
        public PrimitiveComponent PhysicsComponent { get { return this[nameof(PhysicsComponent)].As<PrimitiveComponent>(); } set { this["PhysicsComponent"] = value; } }
        public WeaponPhantomComponent WeaponPhantomManager { get { return this[nameof(WeaponPhantomManager)].As<WeaponPhantomComponent>(); } set { this["WeaponPhantomManager"] = value; } }
        public ReplicatedMovementComponent ReplicatedMovementComponent { get { return this[nameof(ReplicatedMovementComponent)].As<ReplicatedMovementComponent>(); } set { this["ReplicatedMovementComponent"] = value; } }
        public WaterOverlapComponent WaterOverlapComponent { get { return this[nameof(WaterOverlapComponent)].As<WaterOverlapComponent>(); } set { this["WaterOverlapComponent"] = value; } }
        public Array<CollisionResponseOverride> CurrentCollisionOverrides { get { return new Array<CollisionResponseOverride>(this[nameof(CurrentCollisionOverrides)].Address); } }
        public Object CurrentDamageType { get { return this[nameof(CurrentDamageType)]; } set { this[nameof(CurrentDamageType)] = value; } }
        public ImpactEffectDescriptor CurrentImpactEffects { get { return this[nameof(CurrentImpactEffects)].As<ImpactEffectDescriptor>(); } set { this["CurrentImpactEffects"] = value; } }
        public PrimitiveComponent WeaponPhantomPrimitive { get { return this[nameof(WeaponPhantomPrimitive)].As<PrimitiveComponent>(); } set { this["WeaponPhantomPrimitive"] = value; } }
        public StateMachineComponent CachedStateMachine { get { return this[nameof(CachedStateMachine)].As<StateMachineComponent>(); } set { this["CachedStateMachine"] = value; } }
        public void UpdateOrientationReset(float TotalTime, float ElapsedTime, float SlamForceScale) { Invoke(nameof(UpdateOrientationReset), TotalTime, ElapsedTime, SlamForceScale); }
        public void SetGlobalMassScale(float NewScale) { Invoke(nameof(SetGlobalMassScale), NewScale); }
        public void ResetPhysicsStateActorOrientation(float VerticalForce, float ResetTime, float SlamForceScale) { Invoke(nameof(ResetPhysicsStateActorOrientation), VerticalForce, ResetTime, SlamForceScale); }
        public void OnWaterStateChanged() { Invoke(nameof(OnWaterStateChanged)); }
        public void OnPhysicsFXEvent(Object NewState, Object OldState) { Invoke(nameof(OnPhysicsFXEvent), NewState, OldState); }
        public void OnEndFalling() { Invoke(nameof(OnEndFalling)); }
        public void OnBeginFalling() { Invoke(nameof(OnBeginFalling)); }
        public bool IsFalling() { return Invoke<bool>(nameof(IsFalling)); }
        public bool IsBeingPushed() { return Invoke<bool>(nameof(IsBeingPushed)); }
        public StateMachineComponent GetStateMachine() { return Invoke<StateMachineComponent>(nameof(GetStateMachine)); }
        public Vector GetRelativeExtents() { return Invoke<Vector>(nameof(GetRelativeExtents)); }
        public Actor GetPushingActor() { return Invoke<Actor>(nameof(GetPushingActor)); }
        public PrimitiveComponent GetPhysicsComponent() { return Invoke<PrimitiveComponent>(nameof(GetPhysicsComponent)); }
        public float GetGlobalMassScale() { return Invoke<float>(nameof(GetGlobalMassScale)); }
        public void ApplyShoveForce(float PushingForce, float LiftingForce, bool bScaleForceToMass) { Invoke(nameof(ApplyShoveForce), PushingForce, LiftingForce, bScaleForceToMass); }
    }
    public class PhysicsStateActorSphereBase : PhysicsStateActor
    {
        public PhysicsStateActorSphereBase(nint addr) : base(addr) { }
        public SphereComponent WeaponPhantomSphere { get { return this[nameof(WeaponPhantomSphere)].As<SphereComponent>(); } set { this["WeaponPhantomSphere"] = value; } }
        public SphereComponent KinematicCollisionSphere { get { return this[nameof(KinematicCollisionSphere)].As<SphereComponent>(); } set { this["KinematicCollisionSphere"] = value; } }
        public SphereComponent GetSphereComponent() { return Invoke<SphereComponent>(nameof(GetSphereComponent)); }
    }
    public class PhysicsStateActorBoxBase : PhysicsStateActor
    {
        public PhysicsStateActorBoxBase(nint addr) : base(addr) { }
        public BoxComponent WeaponPhantomBox { get { return this[nameof(WeaponPhantomBox)].As<BoxComponent>(); } set { this["WeaponPhantomBox"] = value; } }
        public BoxComponent KinematicCollisionBox { get { return this[nameof(KinematicCollisionBox)].As<BoxComponent>(); } set { this["KinematicCollisionBox"] = value; } }
        public BoxComponent GetBoxComponent() { return Invoke<BoxComponent>(nameof(GetBoxComponent)); }
    }
    public class PhysicsStateActorStaticMeshBase : PhysicsStateActor
    {
        public PhysicsStateActorStaticMeshBase(nint addr) : base(addr) { }
        public StaticMeshComponent WeaponPhantomMesh { get { return this[nameof(WeaponPhantomMesh)].As<StaticMeshComponent>(); } set { this["WeaponPhantomMesh"] = value; } }
        public StaticMeshComponent KinematicCollisionMesh { get { return this[nameof(KinematicCollisionMesh)].As<StaticMeshComponent>(); } set { this["KinematicCollisionMesh"] = value; } }
        public StaticMeshComponent GetStaticMeshComponent() { return Invoke<StaticMeshComponent>(nameof(GetStaticMeshComponent)); }
    }
    public class PhysicsUtil : Object
    {
        public PhysicsUtil(nint addr) : base(addr) { }
        public void RestoreRigidBodies(Array<CachedPhysicsComponent> CachedComponents) { Invoke(nameof(RestoreRigidBodies), CachedComponents); }
        public void ResetOverlaps(PrimitiveComponent Component) { Invoke(nameof(ResetOverlaps), Component); }
        public void LockPhysicsToAxis(PrimitiveComponent Primitive, Vector Axis, bool bLockZ) { Invoke(nameof(LockPhysicsToAxis), Primitive, Axis, bLockZ); }
        public bool LineTraceByChannelWithContext(Object WorldContextObject, Vector Start, Vector End, byte TraceChannel, bool TraceComplex, HitResult Hit) { return Invoke<bool>(nameof(LineTraceByChannelWithContext), WorldContextObject, Start, End, TraceChannel, TraceComplex, Hit); }
        public PhysicalMaterial GetPhysicsMaterial(PrimitiveComponent Component) { return Invoke<PhysicalMaterial>(nameof(GetPhysicsMaterial), Component); }
        public int DisableRigidBodies(Actor Actor, Array<CachedPhysicsComponent> CachedComponents) { return Invoke<int>(nameof(DisableRigidBodies), Actor, CachedComponents); }
        public Vector CalculateTorque(Vector CurrentDirection, Vector DesiredDirection, Vector Axis, float Magnitude) { return Invoke<Vector>(nameof(CalculateTorque), CurrentDirection, DesiredDirection, Axis, Magnitude); }
        public void ApplyLinearImpulseToActorAtLocation(Actor Actor, Object DType, Vector Direction, Vector Location) { Invoke(nameof(ApplyLinearImpulseToActorAtLocation), Actor, DType, Direction, Location); }
        public void ApplyLinearImpulseToActor(Actor Actor, Object DType, Vector Direction) { Invoke(nameof(ApplyLinearImpulseToActor), Actor, DType, Direction); }
    }
    public class PlayStateComponent : ActorComponent
    {
        public PlayStateComponent(nint addr) : base(addr) { }
        public Object OnStateChangedEvent { get { return this[nameof(OnStateChangedEvent)]; } set { this[nameof(OnStateChangedEvent)] = value; } }
        public Object OnStateFinishedTransitioning { get { return this[nameof(OnStateFinishedTransitioning)]; } set { this[nameof(OnStateFinishedTransitioning)] = value; } }
        public PlayStateSet StateSet { get { return this[nameof(StateSet)].As<PlayStateSet>(); } set { this["StateSet"] = value; } }
        public Array<PlayStateContext> ActiveStates { get { return new Array<PlayStateContext>(this[nameof(ActiveStates)].Address); } }
        public PlayState CurrentState { get { return this[nameof(CurrentState)].As<PlayState>(); } set { this["CurrentState"] = value; } }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool IsHidingScreen() { return Invoke<bool>(nameof(IsHidingScreen)); }
        public PlayerControllerGunfire GetOwningPlayerController() { return Invoke<PlayerControllerGunfire>(nameof(GetOwningPlayerController)); }
        public float GetElapsedTransitionTime() { return Invoke<float>(nameof(GetElapsedTransitionTime)); }
        public PlayStateEffect GetActiveEffect(Object Class) { return Invoke<PlayStateEffect>(nameof(GetActiveEffect), Class); }
    }
    public class PlayStateUtils : Object
    {
        public PlayStateUtils(nint addr) : base(addr) { }
        public void RequestPlayStates(Array<Object> StateNames, Object Context, Object Reason) { Invoke(nameof(RequestPlayStates), StateNames, Context, Reason); }
        public void RequestPlayState(Object NewStateName, Object Context, Object Reason) { Invoke(nameof(RequestPlayState), NewStateName, Context, Reason); }
        public bool IsTransitioningPlayStates(Object WorldContextObject) { return Invoke<bool>(nameof(IsTransitioningPlayStates), WorldContextObject); }
        public Object GetRequestedPlayStateName(Object Context, Object Reason) { return Invoke<Object>(nameof(GetRequestedPlayStateName), Context, Reason); }
        public Object GetCurrentPlayStateName(Object WorldContextObject) { return Invoke<Object>(nameof(GetCurrentPlayStateName), WorldContextObject); }
        public PlayStateEffect GetActivePlayStateEffect(Object WorldContextObject, Object Class) { return Invoke<PlayStateEffect>(nameof(GetActivePlayStateEffect), WorldContextObject, Class); }
        public void ClearRequestedPlayStatesForAllReasons(Object Context) { Invoke(nameof(ClearRequestedPlayStatesForAllReasons), Context); }
        public void ClearRequestedPlayState(Object Context, Object Reason) { Invoke(nameof(ClearRequestedPlayState), Context, Reason); }
    }
    public class PlayState : Object
    {
        public PlayState(nint addr) : base(addr) { }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
        public Array<PlayStateEffect> Effects { get { return new Array<PlayStateEffect>(this[nameof(Effects)].Address); } }
    }
    public class PlayStateSet : DataAsset
    {
        public PlayStateSet(nint addr) : base(addr) { }
        public Array<PlayState> States { get { return new Array<PlayState>(this[nameof(States)].Address); } }
        public Object DefaultState { get { return this[nameof(DefaultState)]; } set { this[nameof(DefaultState)] = value; } }
    }
    public class PlayStateEffect_ScreenFade : PlayStateEffect
    {
        public PlayStateEffect_ScreenFade(nint addr) : base(addr) { }
        public float FadeDuration { get { return this[nameof(FadeDuration)].GetValue<float>(); } set { this[nameof(FadeDuration)].SetValue<float>(value); } }
        public bool bHideScreen { get { return this[nameof(bHideScreen)].Flag; } set { this[nameof(bHideScreen)].Flag = value; } }
        public bool bFadeAudio { get { return this[nameof(bFadeAudio)].Flag; } set { this[nameof(bFadeAudio)].Flag = value; } }
        public LinearColor FadeColor { get { return this[nameof(FadeColor)].As<LinearColor>(); } set { this["FadeColor"] = value; } }
        public bool IsHidingScreen() { return Invoke<bool>(nameof(IsHidingScreen)); }
    }
    public class PlayStateEffect_HideHUD : PlayStateEffect
    {
        public PlayStateEffect_HideHUD(nint addr) : base(addr) { }
        public bool bHUDIsVisible { get { return this[nameof(bHUDIsVisible)].Flag; } set { this[nameof(bHUDIsVisible)].Flag = value; } }
    }
    public class PlayStateEffect_Input : PlayStateEffect
    {
        public PlayStateEffect_Input(nint addr) : base(addr) { }
        public bool bAllowsGameInput { get { return this[nameof(bAllowsGameInput)].Flag; } set { this[nameof(bAllowsGameInput)].Flag = value; } }
    }
    public class PortalUserComponent : ActorComponent
    {
        public PortalUserComponent(nint addr) : base(addr) { }
        public void ServerEnterPortal(Portal EntryPortal, Vector_NetQuantize WorldLocation) { Invoke(nameof(ServerEnterPortal), EntryPortal, WorldLocation); }
    }
    public class PortalSubsystem : WorldSubsystem
    {
        public PortalSubsystem(nint addr) : base(addr) { }
        public Array<Portal> RegisteredPortals { get { return new Array<Portal>(this[nameof(RegisteredPortals)].Address); } }
        public TextureRenderTarget2D PooledRenderTarget { get { return this[nameof(PooledRenderTarget)].As<TextureRenderTarget2D>(); } set { this["PooledRenderTarget"] = value; } }
        public TextureRenderTarget2D PooledSquareRenderTarget { get { return this[nameof(PooledSquareRenderTarget)].As<TextureRenderTarget2D>(); } set { this["PooledSquareRenderTarget"] = value; } }
    }
    public class Portal : Actor
    {
        public Portal(nint addr) : base(addr) { }
        public SceneCaptureComponent2D SceneCapture { get { return this[nameof(SceneCapture)].As<SceneCaptureComponent2D>(); } set { this["SceneCapture"] = value; } }
        public SceneComponent PortalRoot { get { return this[nameof(PortalRoot)].As<SceneComponent>(); } set { this["PortalRoot"] = value; } }
        public BoxComponent PortalTriggerBox { get { return this[nameof(PortalTriggerBox)].As<BoxComponent>(); } set { this["PortalTriggerBox"] = value; } }
        public float UprightCosineThreshold { get { return this[nameof(UprightCosineThreshold)].GetValue<float>(); } set { this[nameof(UprightCosineThreshold)].SetValue<float>(value); } }
        public float DefaultEnterTime { get { return this[nameof(DefaultEnterTime)].GetValue<float>(); } set { this[nameof(DefaultEnterTime)].SetValue<float>(value); } }
        public float DefaultExitTime { get { return this[nameof(DefaultExitTime)].GetValue<float>(); } set { this[nameof(DefaultExitTime)].SetValue<float>(value); } }
        public float CoplanarAlignmentAlpha { get { return this[nameof(CoplanarAlignmentAlpha)].GetValue<float>(); } set { this[nameof(CoplanarAlignmentAlpha)].SetValue<float>(value); } }
        public Vector DefaultPortalScale { get { return this[nameof(DefaultPortalScale)].As<Vector>(); } set { this["DefaultPortalScale"] = value; } }
        public float EnterScaleStartAlpha { get { return this[nameof(EnterScaleStartAlpha)].GetValue<float>(); } set { this[nameof(EnterScaleStartAlpha)].SetValue<float>(value); } }
        public float EnterScaleStopAlpha { get { return this[nameof(EnterScaleStopAlpha)].GetValue<float>(); } set { this[nameof(EnterScaleStopAlpha)].SetValue<float>(value); } }
        public float ExitScaleStartAlpha { get { return this[nameof(ExitScaleStartAlpha)].GetValue<float>(); } set { this[nameof(ExitScaleStartAlpha)].SetValue<float>(value); } }
        public float ExitScaleStopAlpha { get { return this[nameof(ExitScaleStopAlpha)].GetValue<float>(); } set { this[nameof(ExitScaleStopAlpha)].SetValue<float>(value); } }
        public FloatRange EjectionForceRange { get { return this[nameof(EjectionForceRange)].As<FloatRange>(); } set { this["EjectionForceRange"] = value; } }
        public bool bAllowAICharacterTraversal { get { return this[nameof(bAllowAICharacterTraversal)].Flag; } set { this[nameof(bAllowAICharacterTraversal)].Flag = value; } }
        public float CharacterCooldown { get { return this[nameof(CharacterCooldown)].GetValue<float>(); } set { this[nameof(CharacterCooldown)].SetValue<float>(value); } }
        public float MaximumEntryDistance { get { return this[nameof(MaximumEntryDistance)].GetValue<float>(); } set { this[nameof(MaximumEntryDistance)].SetValue<float>(value); } }
        public float EnterRadius { get { return this[nameof(EnterRadius)].GetValue<float>(); } set { this[nameof(EnterRadius)].SetValue<float>(value); } }
        public float EnterCosineThresh { get { return this[nameof(EnterCosineThresh)].GetValue<float>(); } set { this[nameof(EnterCosineThresh)].SetValue<float>(value); } }
        public bool bSquareRenderTarget { get { return this[nameof(bSquareRenderTarget)].Flag; } set { this[nameof(bSquareRenderTarget)].Flag = value; } }
        public float MaximumRenderDistance { get { return this[nameof(MaximumRenderDistance)].GetValue<float>(); } set { this[nameof(MaximumRenderDistance)].SetValue<float>(value); } }
        public float DrawRadius { get { return this[nameof(DrawRadius)].GetValue<float>(); } set { this[nameof(DrawRadius)].SetValue<float>(value); } }
        public float CharacterSnapToGroundDistance { get { return this[nameof(CharacterSnapToGroundDistance)].GetValue<float>(); } set { this[nameof(CharacterSnapToGroundDistance)].SetValue<float>(value); } }
        public float CharacterMinimumEnterHeightScale { get { return this[nameof(CharacterMinimumEnterHeightScale)].GetValue<float>(); } set { this[nameof(CharacterMinimumEnterHeightScale)].SetValue<float>(value); } }
        public bool bValidateExitCollision { get { return this[nameof(bValidateExitCollision)].Flag; } set { this[nameof(bValidateExitCollision)].Flag = value; } }
        public NiagaraSystem DefaultEnterVFX { get { return this[nameof(DefaultEnterVFX)].As<NiagaraSystem>(); } set { this["DefaultEnterVFX"] = value; } }
        public SoundGunfire DefaultEnterSFX { get { return this[nameof(DefaultEnterSFX)].As<SoundGunfire>(); } set { this["DefaultEnterSFX"] = value; } }
        public NiagaraSystem DefaultExitVFX { get { return this[nameof(DefaultExitVFX)].As<NiagaraSystem>(); } set { this["DefaultExitVFX"] = value; } }
        public SoundGunfire DefaultExitSFX { get { return this[nameof(DefaultExitSFX)].As<SoundGunfire>(); } set { this["DefaultExitSFX"] = value; } }
        public bool bIgnoreHitscanImpactEffects { get { return this[nameof(bIgnoreHitscanImpactEffects)].Flag; } set { this[nameof(bIgnoreHitscanImpactEffects)].Flag = value; } }
        public NiagaraSystem DefaultHitscanEnterVFX { get { return this[nameof(DefaultHitscanEnterVFX)].As<NiagaraSystem>(); } set { this["DefaultHitscanEnterVFX"] = value; } }
        public SoundGunfire DefaultHitscanEnterSFX { get { return this[nameof(DefaultHitscanEnterSFX)].As<SoundGunfire>(); } set { this["DefaultHitscanEnterSFX"] = value; } }
        public NiagaraSystem DefaultHitscanExitVFX { get { return this[nameof(DefaultHitscanExitVFX)].As<NiagaraSystem>(); } set { this["DefaultHitscanExitVFX"] = value; } }
        public SoundGunfire DefaultHitscanExitSFX { get { return this[nameof(DefaultHitscanExitSFX)].As<SoundGunfire>(); } set { this["DefaultHitscanExitSFX"] = value; } }
        public bool bPoolRenderTarget { get { return this[nameof(bPoolRenderTarget)].Flag; } set { this[nameof(bPoolRenderTarget)].Flag = value; } }
        public Object OnTargetPortalChanged { get { return this[nameof(OnTargetPortalChanged)]; } set { this[nameof(OnTargetPortalChanged)] = value; } }
        public Object OnActorEnterPortal { get { return this[nameof(OnActorEnterPortal)]; } set { this[nameof(OnActorEnterPortal)] = value; } }
        public Array<PortalActorTransition> Transitions { get { return new Array<PortalActorTransition>(this[nameof(Transitions)].Address); } }
        public Portal TargetPortal { get { return this[nameof(TargetPortal)].As<Portal>(); } set { this["TargetPortal"] = value; } }
        public TextureRenderTarget2D RenderTarget { get { return this[nameof(RenderTarget)].As<TextureRenderTarget2D>(); } set { this["RenderTarget"] = value; } }
        public PrimitiveComponent AttachComponent { get { return this[nameof(AttachComponent)].As<PrimitiveComponent>(); } set { this["AttachComponent"] = value; } }
        public Transform RelativeAttachTransform { get { return this[nameof(RelativeAttachTransform)].As<Transform>(); } set { this["RelativeAttachTransform"] = value; } }
        public void UpdateVisuals(EPortalRenderState State, Portal RenderingPortal) { Invoke(nameof(UpdateVisuals), State, RenderingPortal); }
        public Rotator TransformRotationBetweenPortals(Rotator Rotation, Portal EntryPortal, Portal ExitPortal) { return Invoke<Rotator>(nameof(TransformRotationBetweenPortals), Rotation, EntryPortal, ExitPortal); }
        public Quat TransformQuatBetweenPortals(Quat Rotation, Portal EntryPortal, Portal ExitPortal) { return Invoke<Quat>(nameof(TransformQuatBetweenPortals), Rotation, EntryPortal, ExitPortal); }
        public Vector TransformLocationBetweenPortals(Vector Location, Portal EntryPortal, Portal ExitPortal) { return Invoke<Vector>(nameof(TransformLocationBetweenPortals), Location, EntryPortal, ExitPortal); }
        public Vector TransformDirectionBetweenPortals(Vector Direction, Portal EntryPortal, Portal ExitPortal) { return Invoke<Vector>(nameof(TransformDirectionBetweenPortals), Direction, EntryPortal, ExitPortal); }
        public bool ShouldRenderPortal() { return Invoke<bool>(nameof(ShouldRenderPortal)); }
        public void SetupRenderTarget(TextureRenderTarget2D NewRenderTarget) { Invoke(nameof(SetupRenderTarget), NewRenderTarget); }
        public void SetupFixedView(SceneCaptureComponent2D OtherSceneCapture) { Invoke(nameof(SetupFixedView), OtherSceneCapture); }
        public void SetTargetPortal(Portal NewPortal) { Invoke(nameof(SetTargetPortal), NewPortal); }
        public bool ProjectWorldLocationThroughPortal(PlayerController Controller, Vector WorldLocation, Portal EntryPortal, Portal ExitPortal, Vector ProjectedLocation) { return Invoke<bool>(nameof(ProjectWorldLocationThroughPortal), Controller, WorldLocation, EntryPortal, ExitPortal, ProjectedLocation); }
        public void OnTargetChanged() { Invoke(nameof(OnTargetChanged)); }
        public void OnRep_TargetPortal() { Invoke(nameof(OnRep_TargetPortal)); }
        public void MulticastStartTransition(Actor Actor, Vector_NetQuantize RelativeTargetLocation, Vector_NetQuantize RelativeTransitionAxis, Portal TransitionTargetPortal, Array<Actor> ActorsToAttach, float EnterTime, float ExitTime) { Invoke(nameof(MulticastStartTransition), Actor, RelativeTargetLocation, RelativeTransitionAxis, TransitionTargetPortal, ActorsToAttach, EnterTime, ExitTime); }
        public bool IsPortalUpright() { return Invoke<bool>(nameof(IsPortalUpright)); }
        public bool IsActorEnteringPortal(Actor Actor) { return Invoke<bool>(nameof(IsActorEnteringPortal), Actor); }
        public bool IsActorDoingAnyPortalTransition(Actor Actor) { return Invoke<bool>(nameof(IsActorDoingAnyPortalTransition), Actor); }
        public bool HasAnyActorTransitions() { return Invoke<bool>(nameof(HasAnyActorTransitions)); }
        public Portal GetTargetPortal() { return Invoke<Portal>(nameof(GetTargetPortal)); }
        public TextureRenderTarget2D GetRenderTarget() { return Invoke<TextureRenderTarget2D>(nameof(GetRenderTarget)); }
        public EPortalRenderState GetPortalRenderState() { return Invoke<EPortalRenderState>(nameof(GetPortalRenderState)); }
        public Transform GetEventHorizonTransform() { return Invoke<Transform>(nameof(GetEventHorizonTransform)); }
        public Plane GetEventHorizonPlane() { return Invoke<Plane>(nameof(GetEventHorizonPlane)); }
        public PrimitiveComponent GetEventHorizonComponent() { return Invoke<PrimitiveComponent>(nameof(GetEventHorizonComponent)); }
        public bool EnterPortal(Actor Actor, Vector WorldLocation) { return Invoke<bool>(nameof(EnterPortal), Actor, WorldLocation); }
        public Vector CalculateRelativeTransitionAxis(Actor Actor, Portal Portal) { return Invoke<Vector>(nameof(CalculateRelativeTransitionAxis), Actor, Portal); }
        public Vector CalculatePortalEntryLocationForPrediction(Actor Projectile, Vector Velocity, Portal Portal, Vector WorldLocation) { return Invoke<Vector>(nameof(CalculatePortalEntryLocationForPrediction), Projectile, Velocity, Portal, WorldLocation); }
        public Vector CalculatePortalEntryLocationForActor(Actor Actor, Portal Portal, Vector WorldLocation) { return Invoke<Vector>(nameof(CalculatePortalEntryLocationForActor), Actor, Portal, WorldLocation); }
        public Box CalculateBoundsForActor(Actor Actor, Transform Transform) { return Invoke<Box>(nameof(CalculateBoundsForActor), Actor, Transform); }
        public bool ArePortalTransitionsEnabled() { return Invoke<bool>(nameof(ArePortalTransitionsEnabled)); }
        public bool ApplyEjectionForce(Actor Actor, Portal EntryPortal, Vector EjectionForce) { return Invoke<bool>(nameof(ApplyEjectionForce), Actor, EntryPortal, EjectionForce); }
    }
    public class ProjectileBase : Actor
    {
        public ProjectileBase(nint addr) : base(addr) { }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public float MaxLifetime { get { return this[nameof(MaxLifetime)].GetValue<float>(); } set { this[nameof(MaxLifetime)].SetValue<float>(value); } }
        public float PostBounceMaxLifeTime { get { return this[nameof(PostBounceMaxLifeTime)].GetValue<float>(); } set { this[nameof(PostBounceMaxLifeTime)].SetValue<float>(value); } }
        public ShapeComponent Collision { get { return this[nameof(Collision)].As<ShapeComponent>(); } set { this["Collision"] = value; } }
        public ProjectileMovementComponentGunfire ProjectileMovement { get { return this[nameof(ProjectileMovement)].As<ProjectileMovementComponentGunfire>(); } set { this["ProjectileMovement"] = value; } }
        public ReplicatedMovementComponent ProjectileReplication { get { return this[nameof(ProjectileReplication)].As<ReplicatedMovementComponent>(); } set { this["ProjectileReplication"] = value; } }
        public ActionComponent ActionComp { get { return this[nameof(ActionComp)].As<ActionComponent>(); } set { this["ActionComp"] = value; } }
        public AudioComponentGunfire AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponentGunfire>(); } set { this["AudioComponent"] = value; } }
        public bool DestroyAfterImpactEffects { get { return this[nameof(DestroyAfterImpactEffects)].Flag; } set { this[nameof(DestroyAfterImpactEffects)].Flag = value; } }
        public bool DisableCollisionOnStop { get { return this[nameof(DisableCollisionOnStop)].Flag; } set { this[nameof(DisableCollisionOnStop)].Flag = value; } }
        public bool AttachOnHit { get { return this[nameof(AttachOnHit)].Flag; } set { this[nameof(AttachOnHit)].Flag = value; } }
        public bool OrientPitchToSurfaceOnAttach { get { return this[nameof(OrientPitchToSurfaceOnAttach)].Flag; } set { this[nameof(OrientPitchToSurfaceOnAttach)].Flag = value; } }
        public Object AttachIgnoreBones { get { return this[nameof(AttachIgnoreBones)]; } set { this[nameof(AttachIgnoreBones)] = value; } }
        public Object TargetCooldown { get { return this[nameof(TargetCooldown)]; } set { this[nameof(TargetCooldown)] = value; } }
        public float TargetCooldownTime { get { return this[nameof(TargetCooldownTime)].GetValue<float>(); } set { this[nameof(TargetCooldownTime)].SetValue<float>(value); } }
        public Array<Object> Actions { get { return new Array<Object>(this[nameof(Actions)].Address); } }
        public Array<Object> PostImpactActions { get { return new Array<Object>(this[nameof(PostImpactActions)].Address); } }
        public bool bDelayDestroyUntilAfterActionsFinish { get { return this[nameof(bDelayDestroyUntilAfterActionsFinish)].Flag; } set { this[nameof(bDelayDestroyUntilAfterActionsFinish)].Flag = value; } }
        public bool DestroyBreakables { get { return this[nameof(DestroyBreakables)].Flag; } set { this[nameof(DestroyBreakables)].Flag = value; } }
        public bool bIgnorePenetratesOnValidHits { get { return this[nameof(bIgnorePenetratesOnValidHits)].Flag; } set { this[nameof(bIgnorePenetratesOnValidHits)].Flag = value; } }
        public bool bActivateNearbyCharacters { get { return this[nameof(bActivateNearbyCharacters)].Flag; } set { this[nameof(bActivateNearbyCharacters)].Flag = value; } }
        public float AdditionalActivateRadius { get { return this[nameof(AdditionalActivateRadius)].GetValue<float>(); } set { this[nameof(AdditionalActivateRadius)].SetValue<float>(value); } }
        public bool ApplyDamage { get { return this[nameof(ApplyDamage)].Flag; } set { this[nameof(ApplyDamage)].Flag = value; } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public float DamageMod { get { return this[nameof(DamageMod)].GetValue<float>(); } set { this[nameof(DamageMod)].SetValue<float>(value); } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public int PowerOverride { get { return this[nameof(PowerOverride)].GetValue<int>(); } set { this[nameof(PowerOverride)].SetValue<int>(value); } }
        public bool Evadable { get { return this[nameof(Evadable)].Flag; } set { this[nameof(Evadable)].Flag = value; } }
        public bool bPenetrate { get { return this[nameof(bPenetrate)].Flag; } set { this[nameof(bPenetrate)].Flag = value; } }
        public int MaxPenetrations { get { return this[nameof(MaxPenetrations)].GetValue<int>(); } set { this[nameof(MaxPenetrations)].SetValue<int>(value); } }
        public float PenetrateDelay { get { return this[nameof(PenetrateDelay)].GetValue<float>(); } set { this[nameof(PenetrateDelay)].SetValue<float>(value); } }
        public float PenetrationDamageScalarInitial { get { return this[nameof(PenetrationDamageScalarInitial)].GetValue<float>(); } set { this[nameof(PenetrationDamageScalarInitial)].SetValue<float>(value); } }
        public float PenetrationDamageScalarIncrement { get { return this[nameof(PenetrationDamageScalarIncrement)].GetValue<float>(); } set { this[nameof(PenetrationDamageScalarIncrement)].SetValue<float>(value); } }
        public Array<Object> PenetratableClasses { get { return new Array<Object>(this[nameof(PenetratableClasses)].Address); } }
        public Array<Object> IgnoreClasses { get { return new Array<Object>(this[nameof(IgnoreClasses)].Address); } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
        public float InnerRadius { get { return this[nameof(InnerRadius)].GetValue<float>(); } set { this[nameof(InnerRadius)].SetValue<float>(value); } }
        public float OuterRadius { get { return this[nameof(OuterRadius)].GetValue<float>(); } set { this[nameof(OuterRadius)].SetValue<float>(value); } }
        public float Falloff { get { return this[nameof(Falloff)].GetValue<float>(); } set { this[nameof(Falloff)].SetValue<float>(value); } }
        public SoundGunfire LoopSound { get { return this[nameof(LoopSound)].As<SoundGunfire>(); } set { this["LoopSound"] = value; } }
        public GunfireAudioPlayParams LoopAudioPlayParams { get { return this[nameof(LoopAudioPlayParams)].As<GunfireAudioPlayParams>(); } set { this["LoopAudioPlayParams"] = value; } }
        public GunfireAudioAttachParams LoopAudioAttachParams { get { return this[nameof(LoopAudioAttachParams)].As<GunfireAudioAttachParams>(); } set { this["LoopAudioAttachParams"] = value; } }
        public float LoopFadeInDuration { get { return this[nameof(LoopFadeInDuration)].GetValue<float>(); } set { this[nameof(LoopFadeInDuration)].SetValue<float>(value); } }
        public SoundGunfire ImpactSound { get { return this[nameof(ImpactSound)].As<SoundGunfire>(); } set { this["ImpactSound"] = value; } }
        public GunfireAudioPlayParams ImpactAudioPlayParams { get { return this[nameof(ImpactAudioPlayParams)].As<GunfireAudioPlayParams>(); } set { this["ImpactAudioPlayParams"] = value; } }
        public ImpactEffectSelector ImpactEffect { get { return this[nameof(ImpactEffect)].As<ImpactEffectSelector>(); } set { this["ImpactEffect"] = value; } }
        public NiagaraSystem ImpactVFX { get { return this[nameof(ImpactVFX)].As<NiagaraSystem>(); } set { this["ImpactVFX"] = value; } }
        public bool bFFAOE { get { return this[nameof(bFFAOE)].Flag; } set { this[nameof(bFFAOE)].Flag = value; } }
        public ForceFeedbackEffect ForceFeedback { get { return this[nameof(ForceFeedback)].As<ForceFeedbackEffect>(); } set { this["ForceFeedback"] = value; } }
        public ForceFeedbackAttenuation FFAttenuationSettings { get { return this[nameof(FFAttenuationSettings)].As<ForceFeedbackAttenuation>(); } set { this["FFAttenuationSettings"] = value; } }
        public World SimulationWorld { get { return this[nameof(SimulationWorld)].As<World>(); } set { this["SimulationWorld"] = value; } }
        public bool bIsDamageable { get { return this[nameof(bIsDamageable)].Flag; } set { this[nameof(bIsDamageable)].Flag = value; } }
        public bool DestroyOnTakeDamage { get { return this[nameof(DestroyOnTakeDamage)].Flag; } set { this[nameof(DestroyOnTakeDamage)].Flag = value; } }
        public Array<ProjectileBase> ProjectileGroup { get { return new Array<ProjectileBase>(this[nameof(ProjectileGroup)].Address); } }
        public bool bHasGroupDoneHit { get { return this[nameof(bHasGroupDoneHit)].Flag; } set { this[nameof(bHasGroupDoneHit)].Flag = value; } }
        public bool bRequiresClientCameraTransform { get { return this[nameof(bRequiresClientCameraTransform)].Flag; } set { this[nameof(bRequiresClientCameraTransform)].Flag = value; } }
        public bool bAlignToClientCameraTransform { get { return this[nameof(bAlignToClientCameraTransform)].Flag; } set { this[nameof(bAlignToClientCameraTransform)].Flag = value; } }
        public bool ValidateHit(HitResult Hit, bool bSimulating) { return Invoke<bool>(nameof(ValidateHit), Hit, bSimulating); }
        public void StopLoopingFX(float FadeOut) { Invoke(nameof(StopLoopingFX), FadeOut); }
        public void SetMaxLifeTime(float NewMaxLifeTime) { Invoke(nameof(SetMaxLifeTime), NewMaxLifeTime); }
        public void SetDamageType(Object Type) { Invoke(nameof(SetDamageType), Type); }
        public bool RequiresClientCameraTransform() { return Invoke<bool>(nameof(RequiresClientCameraTransform)); }
        public void OnStop(HitResult Hit) { Invoke(nameof(OnStop), Hit); }
        public void OnProjectileStop() { Invoke(nameof(OnProjectileStop)); }
        public void OnProjectilePenetrate(HitResult Hit) { Invoke(nameof(OnProjectilePenetrate), Hit); }
        public void OnProjectileLifetimeExpired() { Invoke(nameof(OnProjectileLifetimeExpired)); }
        public void OnProjectileHit(HitResult Hit) { Invoke(nameof(OnProjectileHit), Hit); }
        public void OnNotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyTakeDamage), DamageInfo); }
        public void OnHit(HitResult Hit) { Invoke(nameof(OnHit), Hit); }
        public void MulticastStop() { Invoke(nameof(MulticastStop)); }
        public void MulticastLifeSpanExpired() { Invoke(nameof(MulticastLifeSpanExpired)); }
        public void MulticastImpactEffect(ReplicatedHit ReplicatedHit, bool bFinalHit) { Invoke(nameof(MulticastImpactEffect), ReplicatedHit, bFinalHit); }
        public bool IsSprayHit(HitResult Hit) { return Invoke<bool>(nameof(IsSprayHit), Hit); }
        public void IncrementNumPenetrations() { Invoke(nameof(IncrementNumPenetrations)); }
        public ProjectileMovementComponentGunfire GetProjectileMovement() { return Invoke<ProjectileMovementComponentGunfire>(nameof(GetProjectileMovement)); }
        public int GetNumPenetrations() { return Invoke<int>(nameof(GetNumPenetrations)); }
        public ShapeComponent GetCollisionShape() { return Invoke<ShapeComponent>(nameof(GetCollisionShape)); }
        public bool GetClientCameraTransform(Vector CameraLocation, Rotator CameraRotation) { return Invoke<bool>(nameof(GetClientCameraTransform), CameraLocation, CameraRotation); }
        public void FilterIncomingDamage(DamageInfo DamageInfo, float DamageOut, bool ShouldApplyDamage) { Invoke(nameof(FilterIncomingDamage), DamageInfo, DamageOut, ShouldApplyDamage); }
        public void AttachToHitObject(HitResult Hit) { Invoke(nameof(AttachToHitObject), Hit); }
    }
    public class ProjectileSphere : ProjectileBase
    {
        public ProjectileSphere(nint addr) : base(addr) { }
    }
    public class ProjectileBox : ProjectileBase
    {
        public ProjectileBox(nint addr) : base(addr) { }
    }
    public class ProjectileVisualization : Actor
    {
        public ProjectileVisualization(nint addr) : base(addr) { }
        public StaticMesh PathMesh { get { return this[nameof(PathMesh)].As<StaticMesh>(); } set { this["PathMesh"] = value; } }
        public MaterialInterface PathMaterial { get { return this[nameof(PathMaterial)].As<MaterialInterface>(); } set { this["PathMaterial"] = value; } }
        public float MeshScale { get { return this[nameof(MeshScale)].GetValue<float>(); } set { this[nameof(MeshScale)].SetValue<float>(value); } }
        public float DrawStartDistance { get { return this[nameof(DrawStartDistance)].GetValue<float>(); } set { this[nameof(DrawStartDistance)].SetValue<float>(value); } }
        public Object ImpactActorClass { get { return this[nameof(ImpactActorClass)]; } set { this[nameof(ImpactActorClass)] = value; } }
        public bool bOnlyShowImpactActorWtihValidTarget { get { return this[nameof(bOnlyShowImpactActorWtihValidTarget)].Flag; } set { this[nameof(bOnlyShowImpactActorWtihValidTarget)].Flag = value; } }
        public bool bUseNoImpactActorClass { get { return this[nameof(bUseNoImpactActorClass)].Flag; } set { this[nameof(bUseNoImpactActorClass)].Flag = value; } }
        public Object NoImpactActorClass { get { return this[nameof(NoImpactActorClass)]; } set { this[nameof(NoImpactActorClass)] = value; } }
        public Object ColorParameter { get { return this[nameof(ColorParameter)]; } set { this[nameof(ColorParameter)] = value; } }
        public bool bUsesTargetColors { get { return this[nameof(bUsesTargetColors)].Flag; } set { this[nameof(bUsesTargetColors)].Flag = value; } }
        public bool bInterpolateTargetColor { get { return this[nameof(bInterpolateTargetColor)].Flag; } set { this[nameof(bInterpolateTargetColor)].Flag = value; } }
        public TargetingColorParams TargetingColors { get { return this[nameof(TargetingColors)].As<TargetingColorParams>(); } set { this["TargetingColors"] = value; } }
        public bool bDrawPathAsMarquee { get { return this[nameof(bDrawPathAsMarquee)].Flag; } set { this[nameof(bDrawPathAsMarquee)].Flag = value; } }
        public Vector2D LineSizes { get { return this[nameof(LineSizes)].As<Vector2D>(); } set { this["LineSizes"] = value; } }
        public float MarqueeSpeed { get { return this[nameof(MarqueeSpeed)].GetValue<float>(); } set { this[nameof(MarqueeSpeed)].SetValue<float>(value); } }
        public float FullAlphaDistance { get { return this[nameof(FullAlphaDistance)].GetValue<float>(); } set { this[nameof(FullAlphaDistance)].SetValue<float>(value); } }
        public Actor ImpactActor { get { return this[nameof(ImpactActor)].As<Actor>(); } set { this["ImpactActor"] = value; } }
        public Array<SplineMeshComponent> SplineMeshes { get { return new Array<SplineMeshComponent>(this[nameof(SplineMeshes)].Address); } }
        public void VisualizeProjectileFromClass(Actor Cause, Object ProjectileClass, Vector StartLocation, Rotator StartDirection, ProjectileVisualizationParams Params, ProjectileVisualizationContext Context) { Invoke(nameof(VisualizeProjectileFromClass), Cause, ProjectileClass, StartLocation, StartDirection, Params, Context); }
        public void VisualizeProjectile(Actor Cause, Actor Projectile, Vector StartLocation, Rotator StartDirection, ProjectileVisualizationParams Params, ProjectileVisualizationContext Context) { Invoke(nameof(VisualizeProjectile), Cause, Projectile, StartLocation, StartDirection, Params, Context); }
        public bool PreDraw(ProjectileVisualizationParams Params, ProjectileVisualizationContext Context) { return Invoke<bool>(nameof(PreDraw), Params, Context); }
        public void PostDrawPath(ProjectileVisualizationParams Params, ProjectileVisualizationContext Context, LinearColor DrawColor) { Invoke(nameof(PostDrawPath), Params, Context, DrawColor); }
        public void ClearProjectileVisualization(ProjectileVisualizationContext Context) { Invoke(nameof(ClearProjectileVisualization), Context); }
    }
    public class ReplicatedHitUtil : Object
    {
        public ReplicatedHitUtil(nint addr) : base(addr) { }
        public ReplicatedTrace MakeReplicatedTraceFromHit(HitResult Hit) { return Invoke<ReplicatedTrace>(nameof(MakeReplicatedTraceFromHit), Hit); }
        public ReplicatedLocation MakeReplicatedLocationFromHit(HitResult Hit) { return Invoke<ReplicatedLocation>(nameof(MakeReplicatedLocationFromHit), Hit); }
        public ReplicatedLocation MakeReplicatedLocation(PrimitiveComponent Component, Object BoneName, Vector WorldLocation) { return Invoke<ReplicatedLocation>(nameof(MakeReplicatedLocation), Component, BoneName, WorldLocation); }
        public ReplicatedHit MakeReplicatedHitFromHit(HitResult Hit) { return Invoke<ReplicatedHit>(nameof(MakeReplicatedHitFromHit), Hit); }
        public bool GetHitFromReplicatedTrace(ReplicatedTrace ReplicatedTrace, Vector From, HitResult Hit) { return Invoke<bool>(nameof(GetHitFromReplicatedTrace), ReplicatedTrace, From, Hit); }
        public bool GetHitFromReplicatedHit(ReplicatedHit ReplicatedHit, HitResult Hit) { return Invoke<bool>(nameof(GetHitFromReplicatedHit), ReplicatedHit, Hit); }
        public void BreakReplicatedLocation(ReplicatedLocation Location, PrimitiveComponent Component, Object BoneName, Vector WorldLocation) { Invoke(nameof(BreakReplicatedLocation), Location, Component, BoneName, WorldLocation); }
    }
    public class ReviverInterface : Interface
    {
        public ReviverInterface(nint addr) : base(addr) { }
        public bool CanRevive(Actor Actor, bool bSkipWoundCheck) { return Invoke<bool>(nameof(CanRevive), Actor, bSkipWoundCheck); }
    }
    public class RopeActorBase : Actor
    {
        public RopeActorBase(nint addr) : base(addr) { }
        public PhysicsConstraintComponent EndpointConstraint { get { return this[nameof(EndpointConstraint)].As<PhysicsConstraintComponent>(); } set { this["EndpointConstraint"] = value; } }
        public PrimitiveComponent EndpointRopeAttachment { get { return this[nameof(EndpointRopeAttachment)].As<PrimitiveComponent>(); } set { this["EndpointRopeAttachment"] = value; } }
        public PhysicsConstraintComponent SourceConstraint { get { return this[nameof(SourceConstraint)].As<PhysicsConstraintComponent>(); } set { this["SourceConstraint"] = value; } }
        public PrimitiveComponent SourceRopeAttachment { get { return this[nameof(SourceRopeAttachment)].As<PrimitiveComponent>(); } set { this["SourceRopeAttachment"] = value; } }
        public RopeComponent RopeComponent { get { return this[nameof(RopeComponent)].As<RopeComponent>(); } set { this["RopeComponent"] = value; } }
        public PhysicsTweenComponent PhysicsTween { get { return this[nameof(PhysicsTween)].As<PhysicsTweenComponent>(); } set { this["PhysicsTween"] = value; } }
        public void OnAttachedSourceToComponent(SceneComponent Component, Transform Transform, Object SocketName, bool bSimulatePhysics, float AttachTime, PrimitiveComponent AttachPrimitive) { Invoke(nameof(OnAttachedSourceToComponent), Component, Transform, SocketName, bSimulatePhysics, AttachTime, AttachPrimitive); }
        public void OnAttachedEndpointToComponent(SceneComponent Component, Transform Transform, Object SocketName, bool bSimulatePhysics, float AttachTime, PrimitiveComponent AttachPrimitive) { Invoke(nameof(OnAttachedEndpointToComponent), Component, Transform, SocketName, bSimulatePhysics, AttachTime, AttachPrimitive); }
        public float IsRopeUnstable() { return Invoke<float>(nameof(IsRopeUnstable)); }
        public bool IsAttachingSource() { return Invoke<bool>(nameof(IsAttachingSource)); }
        public bool IsAttachingEndpoint() { return Invoke<bool>(nameof(IsAttachingEndpoint)); }
        public int GetSourceTweenID() { return Invoke<int>(nameof(GetSourceTweenID)); }
        public int GetEndpointTweenID() { return Invoke<int>(nameof(GetEndpointTweenID)); }
        public SceneComponent GetCurrentSourceAttachment(Object OutSocketName) { return Invoke<SceneComponent>(nameof(GetCurrentSourceAttachment), OutSocketName); }
        public SceneComponent GetCurrentEndpointAttachment(Object OutSocketName) { return Invoke<SceneComponent>(nameof(GetCurrentEndpointAttachment), OutSocketName); }
        public float CalculateInstability() { return Invoke<float>(nameof(CalculateInstability)); }
        public bool AttachSourceToComponent(SceneComponent Component, Transform Transform, Object SocketName, bool bSimulatePhysics, float AttachTime) { return Invoke<bool>(nameof(AttachSourceToComponent), Component, Transform, SocketName, bSimulatePhysics, AttachTime); }
        public bool AttachEndpointToComponent(SceneComponent Component, Transform Transform, Object SocketName, bool bSimulatePhysics, float AttachTime) { return Invoke<bool>(nameof(AttachEndpointToComponent), Component, Transform, SocketName, bSimulatePhysics, AttachTime); }
    }
    public class RopeActor : RopeActorBase
    {
        public RopeActor(nint addr) : base(addr) { }
    }
    public class SequenceInstance : CinematicInstance_Base
    {
        public SequenceInstance(nint addr) : base(addr) { }
        public Object OnEventTreeSequenceTrigger { get { return this[nameof(OnEventTreeSequenceTrigger)]; } set { this[nameof(OnEventTreeSequenceTrigger)] = value; } }
        public void OnEventTreeTrackTriggerNotified(Object TriggerName) { Invoke(nameof(OnEventTreeTrackTriggerNotified), TriggerName); }
        public float GetElapsedDetails(float OutStartTime, float OutDuration, float OutPercentage) { return Invoke<float>(nameof(GetElapsedDetails), OutStartTime, OutDuration, OutPercentage); }
    }
    public class ComputedStats : Object
    {
        public ComputedStats(nint addr) : base(addr) { }
        public StatsComponent StatsComponent { get { return this[nameof(StatsComponent)].As<StatsComponent>(); } set { this["StatsComponent"] = value; } }
        public float ScaleValueByLevel(int Level, float Value, float Inc, float Exp) { return Invoke<float>(nameof(ScaleValueByLevel), Level, Value, Inc, Exp); }
        public void ScaleStat(Object Stat, float Scalar, bool AutoInitValue) { Invoke(nameof(ScaleStat), Stat, Scalar, AutoInitValue); }
        public void PostComputeStats(StatsComponent Stats) { Invoke(nameof(PostComputeStats), Stats); }
        public void OnPostComputeStats() { Invoke(nameof(OnPostComputeStats)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void OnComputeDerivedStats() { Invoke(nameof(OnComputeDerivedStats)); }
        public void ModifyStat(Object Stat, float Value) { Invoke(nameof(ModifyStat), Stat, Value); }
        public bool HasStat(Object Stat) { return Invoke<bool>(nameof(HasStat), Stat); }
        public Actor GetStatsOwner() { return Invoke<Actor>(nameof(GetStatsOwner)); }
        public float GetStat(Object Stat, bool ApplyMods) { return Invoke<float>(nameof(GetStat), Stat, ApplyMods); }
        public void ComputeStats(StatsComponent Stats) { Invoke(nameof(ComputeStats), Stats); }
        public void ComputeDerivedStats(StatsComponent Stats) { Invoke(nameof(ComputeDerivedStats), Stats); }
    }
    public class StatsComponent : ActorComponent
    {
        public StatsComponent(nint addr) : base(addr) { }
        public DataTableRowHandle StatData { get { return this[nameof(StatData)].As<DataTableRowHandle>(); } set { this["StatData"] = value; } }
        public DataTableRowHandle StatCapData { get { return this[nameof(StatCapData)].As<DataTableRowHandle>(); } set { this["StatCapData"] = value; } }
        public Array<Object> ComputedStats { get { return new Array<Object>(this[nameof(ComputedStats)].Address); } }
        public Array<DataTable> AdditionalStats { get { return new Array<DataTable>(this[nameof(AdditionalStats)].Address); } }
        public Object OnComputeStats { get { return this[nameof(OnComputeStats)]; } set { this[nameof(OnComputeStats)] = value; } }
        public Object OnComputeDerivedStats { get { return this[nameof(OnComputeDerivedStats)]; } set { this[nameof(OnComputeDerivedStats)] = value; } }
        public Object OnPostComputeStats { get { return this[nameof(OnPostComputeStats)]; } set { this[nameof(OnPostComputeStats)] = value; } }
        public void SetComputedStats(Object NewComputedStats) { Invoke(nameof(SetComputedStats), NewComputedStats); }
        public void ScaleStat(Object Name, float Scalar, bool AutoInitValue) { Invoke(nameof(ScaleStat), Name, Scalar, AutoInitValue); }
        public float ModifyStat(Object Name, float Value) { return Invoke<float>(nameof(ModifyStat), Name, Value); }
        public bool IsStatCapped(Object Name, bool ApplyMod) { return Invoke<bool>(nameof(IsStatCapped), Name, ApplyMod); }
        public void Invalidate() { Invoke(nameof(Invalidate)); }
        public bool HasStat(Object Name, bool ApplyMod) { return Invoke<bool>(nameof(HasStat), Name, ApplyMod); }
        public int GetStatAsInt(Object Name, bool ApplyMod) { return Invoke<int>(nameof(GetStatAsInt), Name, ApplyMod); }
        public bool GetStatAsBool(Object Name, bool ApplyMod) { return Invoke<bool>(nameof(GetStatAsBool), Name, ApplyMod); }
        public float GetStat(Object Name, bool ApplyMod) { return Invoke<float>(nameof(GetStat), Name, ApplyMod); }
        public Object GetComputedStats() { return Invoke<Object>(nameof(GetComputedStats)); }
        public void ComputeStatsIfDirty() { Invoke(nameof(ComputeStatsIfDirty)); }
        public void ApplyStats(DataTableRowHandle DataTable, int Level) { Invoke(nameof(ApplyStats), DataTable, Level); }
        public void ApplyStatModsTo(float Value, Object Stat) { Invoke(nameof(ApplyStatModsTo), Value, Stat); }
    }
    public class UseItemInterface : Interface
    {
        public UseItemInterface(nint addr) : base(addr) { }
        public void UseItem(PlayerControllerGunfire PlayerController, Object ItemClass) { Invoke(nameof(UseItem), PlayerController, ItemClass); }
        public bool CanUseItem(PlayerControllerGunfire PlayerController, Object ItemClass) { return Invoke<bool>(nameof(CanUseItem), PlayerController, ItemClass); }
    }
    public class XRUtil : Object
    {
        public XRUtil(nint addr) : base(addr) { }
        public bool IsStereoEnabled() { return Invoke<bool>(nameof(IsStereoEnabled)); }
        public bool IsHMDWorn() { return Invoke<bool>(nameof(IsHMDWorn)); }
        public void EnableStereo(bool bEnable) { Invoke(nameof(EnableStereo), bEnable); }
    }
    public class EnvQueryContext_Players : EnvQueryContext
    {
        public EnvQueryContext_Players(nint addr) : base(addr) { }
    }
    public class EnvQueryContext_TargetBase : EnvQueryContext
    {
        public EnvQueryContext_TargetBase(nint addr) : base(addr) { }
    }
    public class EnvQueryContext_Target : EnvQueryContext_TargetBase
    {
        public EnvQueryContext_Target(nint addr) : base(addr) { }
    }
    public class EnvQueryContext_TargetAimPos : EnvQueryContext_TargetBase
    {
        public EnvQueryContext_TargetAimPos(nint addr) : base(addr) { }
    }
    public class EnvQueryContext_TargetLastKnownPosition : EnvQueryContext_TargetBase
    {
        public EnvQueryContext_TargetLastKnownPosition(nint addr) : base(addr) { }
    }
    public class EnvQueryGenerator_AITacticalPoint : EnvQueryGenerator
    {
        public EnvQueryGenerator_AITacticalPoint(nint addr) : base(addr) { }
        public AIDataProviderFloatValue MaxDistance { get { return this[nameof(MaxDistance)].As<AIDataProviderFloatValue>(); } set { this["MaxDistance"] = value; } }
        public AIDataProviderBoolValue LowCover { get { return this[nameof(LowCover)].As<AIDataProviderBoolValue>(); } set { this["LowCover"] = value; } }
        public AIDataProviderBoolValue CornerCover { get { return this[nameof(CornerCover)].As<AIDataProviderBoolValue>(); } set { this["CornerCover"] = value; } }
        public AIDataProviderBoolValue Custom { get { return this[nameof(Custom)].As<AIDataProviderBoolValue>(); } set { this["Custom"] = value; } }
        public Object CustomTag { get { return this[nameof(CustomTag)]; } set { this[nameof(CustomTag)] = value; } }
        public Object GenerateAround { get { return this[nameof(GenerateAround)]; } set { this[nameof(GenerateAround)] = value; } }
    }
    public class EnvQueryItemType_AITacticalPoint : EnvQueryItemType_VectorBase
    {
        public EnvQueryItemType_AITacticalPoint(nint addr) : base(addr) { }
    }
    public class EnvQueryGenerator_SimpleGridOffset : EnvQueryGenerator_SimpleGrid
    {
        public EnvQueryGenerator_SimpleGridOffset(nint addr) : base(addr) { }
        public AIDataProviderFloatValue ZOffset { get { return this[nameof(ZOffset)].As<AIDataProviderFloatValue>(); } set { this["ZOffset"] = value; } }
    }
    public class EnvQueryGenerator_SinglePoint : EnvQueryGenerator
    {
        public EnvQueryGenerator_SinglePoint(nint addr) : base(addr) { }
    }
    public class EnvQueryTest_AITacticalPoint : EnvQueryTest
    {
        public EnvQueryTest_AITacticalPoint(nint addr) : base(addr) { }
    }
    public class EnvQueryTest_Cover : EnvQueryTest
    {
        public EnvQueryTest_Cover(nint addr) : base(addr) { }
        public Object WeaponType { get { return this[nameof(WeaponType)]; } set { this[nameof(WeaponType)] = value; } }
        public bool UseLastKnownPosition { get { return this[nameof(UseLastKnownPosition)].Flag; } set { this[nameof(UseLastKnownPosition)].Flag = value; } }
        public float OptimalDistance { get { return this[nameof(OptimalDistance)].GetValue<float>(); } set { this[nameof(OptimalDistance)].SetValue<float>(value); } }
        public float TooCloseFactor { get { return this[nameof(TooCloseFactor)].GetValue<float>(); } set { this[nameof(TooCloseFactor)].SetValue<float>(value); } }
        public float TravelDistanceFactor { get { return this[nameof(TravelDistanceFactor)].GetValue<float>(); } set { this[nameof(TravelDistanceFactor)].SetValue<float>(value); } }
        public float CurrentPointFactor { get { return this[nameof(CurrentPointFactor)].GetValue<float>(); } set { this[nameof(CurrentPointFactor)].SetValue<float>(value); } }
        public float TargetHeightDiffFactor { get { return this[nameof(TargetHeightDiffFactor)].GetValue<float>(); } set { this[nameof(TargetHeightDiffFactor)].SetValue<float>(value); } }
        public float MinDistanceFromCurrentPoint { get { return this[nameof(MinDistanceFromCurrentPoint)].GetValue<float>(); } set { this[nameof(MinDistanceFromCurrentPoint)].SetValue<float>(value); } }
        public float MinAngleDiff { get { return this[nameof(MinAngleDiff)].GetValue<float>(); } set { this[nameof(MinAngleDiff)].SetValue<float>(value); } }
        public float MaxAngleDiff { get { return this[nameof(MaxAngleDiff)].GetValue<float>(); } set { this[nameof(MaxAngleDiff)].SetValue<float>(value); } }
        public float AngleDiffFactor { get { return this[nameof(AngleDiffFactor)].GetValue<float>(); } set { this[nameof(AngleDiffFactor)].SetValue<float>(value); } }
        public float CoverBufferRadius { get { return this[nameof(CoverBufferRadius)].GetValue<float>(); } set { this[nameof(CoverBufferRadius)].SetValue<float>(value); } }
        public float CoverBufferFactor { get { return this[nameof(CoverBufferFactor)].GetValue<float>(); } set { this[nameof(CoverBufferFactor)].SetValue<float>(value); } }
    }
    public class EnvQueryTest_FieldOfView : EnvQueryTest
    {
        public EnvQueryTest_FieldOfView(nint addr) : base(addr) { }
        public AIDataProviderFloatValue ItemHeightOffset { get { return this[nameof(ItemHeightOffset)].As<AIDataProviderFloatValue>(); } set { this["ItemHeightOffset"] = value; } }
        public AIDataProviderFloatValue FOV { get { return this[nameof(FOV)].As<AIDataProviderFloatValue>(); } set { this["FOV"] = value; } }
        public Object ViewFromContext { get { return this[nameof(ViewFromContext)]; } set { this[nameof(ViewFromContext)] = value; } }
        public bool RequireAll { get { return this[nameof(RequireAll)].Flag; } set { this[nameof(RequireAll)].Flag = value; } }
        public AIDataProviderFloatValue ViewDistance { get { return this[nameof(ViewDistance)].As<AIDataProviderFloatValue>(); } set { this["ViewDistance"] = value; } }
        public bool OutOfRangeValue { get { return this[nameof(OutOfRangeValue)].Flag; } set { this[nameof(OutOfRangeValue)].Flag = value; } }
        public bool AllowCrossingFieldOfView { get { return this[nameof(AllowCrossingFieldOfView)].Flag; } set { this[nameof(AllowCrossingFieldOfView)].Flag = value; } }
    }
    public class EnvQueryTest_Flee : EnvQueryTest
    {
        public EnvQueryTest_Flee(nint addr) : base(addr) { }
        public Object Context { get { return this[nameof(Context)]; } set { this[nameof(Context)] = value; } }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public Object POIType { get { return this[nameof(POIType)]; } set { this[nameof(POIType)] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public float FleeInnerRadius { get { return this[nameof(FleeInnerRadius)].GetValue<float>(); } set { this[nameof(FleeInnerRadius)].SetValue<float>(value); } }
        public float FleeOuterRadius { get { return this[nameof(FleeOuterRadius)].GetValue<float>(); } set { this[nameof(FleeOuterRadius)].SetValue<float>(value); } }
    }
    public class EnvQueryTest_GroundMaterial : EnvQueryTest
    {
        public EnvQueryTest_GroundMaterial(nint addr) : base(addr) { }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public bool TraceComplex { get { return this[nameof(TraceComplex)].Flag; } set { this[nameof(TraceComplex)].Flag = value; } }
        public float TraceOffset { get { return this[nameof(TraceOffset)].GetValue<float>(); } set { this[nameof(TraceOffset)].SetValue<float>(value); } }
        public float TraceDistance { get { return this[nameof(TraceDistance)].GetValue<float>(); } set { this[nameof(TraceDistance)].SetValue<float>(value); } }
        public float MinDistance { get { return this[nameof(MinDistance)].GetValue<float>(); } set { this[nameof(MinDistance)].SetValue<float>(value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public int SampleCount { get { return this[nameof(SampleCount)].GetValue<int>(); } set { this[nameof(SampleCount)].SetValue<int>(value); } }
        public float SampleRadius { get { return this[nameof(SampleRadius)].GetValue<float>(); } set { this[nameof(SampleRadius)].SetValue<float>(value); } }
        public float SampleOffset { get { return this[nameof(SampleOffset)].GetValue<float>(); } set { this[nameof(SampleOffset)].SetValue<float>(value); } }
        public float SampleDistance { get { return this[nameof(SampleDistance)].GetValue<float>(); } set { this[nameof(SampleDistance)].SetValue<float>(value); } }
        public Array<byte> ValidSurfaceTypes { get { return new Array<byte>(this[nameof(ValidSurfaceTypes)].Address); } }
    }
    public class EnvQueryTest_Jump : EnvQueryTest
    {
        public EnvQueryTest_Jump(nint addr) : base(addr) { }
        public Object JumpOriginContext { get { return this[nameof(JumpOriginContext)]; } set { this[nameof(JumpOriginContext)] = value; } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public EAutoArcType ArcMethod { get { return (EAutoArcType)this[nameof(ArcMethod)].GetValue<int>(); } set { this[nameof(ArcMethod)].SetValue<int>((int)value); } }
        public float ArcHeight { get { return this[nameof(ArcHeight)].GetValue<float>(); } set { this[nameof(ArcHeight)].SetValue<float>(value); } }
        public float JumpSpeed { get { return this[nameof(JumpSpeed)].GetValue<float>(); } set { this[nameof(JumpSpeed)].SetValue<float>(value); } }
        public float RetractDistance { get { return this[nameof(RetractDistance)].GetValue<float>(); } set { this[nameof(RetractDistance)].SetValue<float>(value); } }
    }
    public class EnvQueryTest_LineOfSight : EnvQueryTest
    {
        public EnvQueryTest_LineOfSight(nint addr) : base(addr) { }
        public bool UseLastKnownPosition { get { return this[nameof(UseLastKnownPosition)].Flag; } set { this[nameof(UseLastKnownPosition)].Flag = value; } }
        public bool SnapToGround { get { return this[nameof(SnapToGround)].Flag; } set { this[nameof(SnapToGround)].Flag = value; } }
        public Object CustomOccluderContext { get { return this[nameof(CustomOccluderContext)]; } set { this[nameof(CustomOccluderContext)] = value; } }
    }
    public class EnvQueryTest_Outside : EnvQueryTest
    {
        public EnvQueryTest_Outside(nint addr) : base(addr) { }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public int NumRays { get { return this[nameof(NumRays)].GetValue<int>(); } set { this[nameof(NumRays)].SetValue<int>(value); } }
        public float Angle { get { return this[nameof(Angle)].GetValue<float>(); } set { this[nameof(Angle)].SetValue<float>(value); } }
        public int InsideThresh { get { return this[nameof(InsideThresh)].GetValue<int>(); } set { this[nameof(InsideThresh)].SetValue<int>(value); } }
    }
    public class EnvQueryTest_WaterHeight : EnvQueryTest
    {
        public EnvQueryTest_WaterHeight(nint addr) : base(addr) { }
        public byte WaterTraceChannel { get { return this[nameof(WaterTraceChannel)].GetValue<byte>(); } set { this[nameof(WaterTraceChannel)].SetValue<byte>(value); } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float WaterHeight { get { return this[nameof(WaterHeight)].GetValue<float>(); } set { this[nameof(WaterHeight)].SetValue<float>(value); } }
    }
    public class CutsceneTransientActor : Actor
    {
        public CutsceneTransientActor(nint addr) : base(addr) { }
        public bool bIsInCutscene { get { return this[nameof(bIsInCutscene)].Flag; } set { this[nameof(bIsInCutscene)].Flag = value; } }
        public void OnEventCinematic(bool Start, Array<Object> CinematicTags) { Invoke(nameof(OnEventCinematic), Start, CinematicTags); }
        public void OnCinematic(bool IsPlaying, Array<Object> CinematicTags) { Invoke(nameof(OnCinematic), IsPlaying, CinematicTags); }
        public void ForceCutscene(Array<Object> CinematicTags, bool bIsPlaying) { Invoke(nameof(ForceCutscene), CinematicTags, bIsPlaying); }
    }
    public class DialogStage : Actor
    {
        public DialogStage(nint addr) : base(addr) { }
        public DialogComponent DialogComponent { get { return this[nameof(DialogComponent)].As<DialogComponent>(); } set { this["DialogComponent"] = value; } }
        public bool StageActive { get { return this[nameof(StageActive)].Flag; } set { this[nameof(StageActive)].Flag = value; } }
        public Array<CinematicInstance_Base> RunningCinematicInstances { get { return new Array<CinematicInstance_Base>(this[nameof(RunningCinematicInstances)].Address); } }
        public void SetupStage(EventTreeStage Stage) { Invoke(nameof(SetupStage), Stage); }
        public void SetCameraByName(Object Name, PlayerController TargetController) { Invoke(nameof(SetCameraByName), Name, TargetController); }
        public void SetCamera(Actor CameraActor, PlayerController TargetController) { Invoke(nameof(SetCamera), CameraActor, TargetController); }
        public void SetActiveCameraComponent(Actor Actor, CameraComponent Camera, PlayerController TargetController) { Invoke(nameof(SetActiveCameraComponent), Actor, Camera, TargetController); }
        public void RestoreCamera(bool ResetToCurrentView, PlayerController TargetController) { Invoke(nameof(RestoreCamera), ResetToCurrentView, TargetController); }
        public void PositionActorAtMark(Actor Actor, Object Mark) { Invoke(nameof(PositionActorAtMark), Actor, Mark); }
        public void PositionActor(Actor Actor, Transform Transform) { Invoke(nameof(PositionActor), Actor, Transform); }
        public bool PlaySequencerEntry(SequencerShotGroup SequenceGroup) { return Invoke<bool>(nameof(PlaySequencerEntry), SequenceGroup); }
        public void OnCinematicInstancesFinished(CinematicInstance_Base Instance) { Invoke(nameof(OnCinematicInstancesFinished), Instance); }
        public Actor GetActor(Object Name) { return Invoke<Actor>(nameof(GetActor), Name); }
        public void End() { Invoke(nameof(End)); }
        public void DetermineCameraShotDetails(EventTreeStage Stage, Object ShotName, DialogCameraShotInfo OutInfo) { Invoke(nameof(DetermineCameraShotDetails), Stage, ShotName, OutInfo); }
        public void Begin() { Invoke(nameof(Begin)); }
    }
    public class DialogCameraComponent : CineCameraComponent
    {
        public DialogCameraComponent(nint addr) : base(addr) { }
        public Object TargetCamera { get { return this[nameof(TargetCamera)]; } set { this[nameof(TargetCamera)] = value; } }
        public float EaseTime { get { return this[nameof(EaseTime)].GetValue<float>(); } set { this[nameof(EaseTime)].SetValue<float>(value); } }
        public EEaseType EaseType { get { return (EEaseType)this[nameof(EaseType)].GetValue<int>(); } set { this[nameof(EaseType)].SetValue<int>((int)value); } }
        public float EaseExponent { get { return this[nameof(EaseExponent)].GetValue<float>(); } set { this[nameof(EaseExponent)].SetValue<float>(value); } }
        public Object FocusTarget { get { return this[nameof(FocusTarget)]; } set { this[nameof(FocusTarget)] = value; } }
    }
    public class DialogProviderInterface : Interface
    {
        public DialogProviderInterface(nint addr) : base(addr) { }
        public void SetupContextVariables(DialogComponent DialogComponent) { Invoke(nameof(SetupContextVariables), DialogComponent); }
        public EventTree QueryEventTree(DialogComponent DialogComponent, EDialogType Type) { return Invoke<EventTree>(nameof(QueryEventTree), DialogComponent, Type); }
        public EventTree GetEventTree(Actor Actor) { return Invoke<EventTree>(nameof(GetEventTree), Actor); }
    }
    public class DialogInitiatorInterface : Interface
    {
        public DialogInitiatorInterface(nint addr) : base(addr) { }
        public bool ShouldExitDialogFromDamage(DialogComponent Dialog, DamageInfo Damage) { return Invoke<bool>(nameof(ShouldExitDialogFromDamage), Dialog, Damage); }
        public bool ShouldExitDialog(DialogComponent Dialog) { return Invoke<bool>(nameof(ShouldExitDialog), Dialog); }
    }
    public class DialogComponent : EventTreeComponent
    {
        public DialogComponent(nint addr) : base(addr) { }
        public EventTree EventTree { get { return this[nameof(EventTree)].As<EventTree>(); } set { this["EventTree"] = value; } }
        public bool AutoPlayDialog { get { return this[nameof(AutoPlayDialog)].Flag; } set { this[nameof(AutoPlayDialog)].Flag = value; } }
        public bool EnableProximityTriggers { get { return this[nameof(EnableProximityTriggers)].Flag; } set { this[nameof(EnableProximityTriggers)].Flag = value; } }
        public Object SpeakerID { get { return this[nameof(SpeakerID)]; } set { this[nameof(SpeakerID)] = value; } }
        public Object StageBP { get { return this[nameof(StageBP)]; } set { this[nameof(StageBP)] = value; } }
        public DialogStage Stage { get { return this[nameof(Stage)].As<DialogStage>(); } set { this["Stage"] = value; } }
        public Object DefaultAudioAttachSocket { get { return this[nameof(DefaultAudioAttachSocket)]; } set { this[nameof(DefaultAudioAttachSocket)] = value; } }
        public Object OnDialogBegin { get { return this[nameof(OnDialogBegin)]; } set { this[nameof(OnDialogBegin)] = value; } }
        public Object OnDialogEnd { get { return this[nameof(OnDialogEnd)]; } set { this[nameof(OnDialogEnd)] = value; } }
        public Object OnDialogSetStage { get { return this[nameof(OnDialogSetStage)]; } set { this[nameof(OnDialogSetStage)] = value; } }
        public Object OnDialogEvent { get { return this[nameof(OnDialogEvent)]; } set { this[nameof(OnDialogEvent)] = value; } }
        public Object OnDialogUpdate { get { return this[nameof(OnDialogUpdate)]; } set { this[nameof(OnDialogUpdate)] = value; } }
        public Object OnOptionsUpdate { get { return this[nameof(OnOptionsUpdate)]; } set { this[nameof(OnOptionsUpdate)] = value; } }
        public Object OnDialogCameraUpdate { get { return this[nameof(OnDialogCameraUpdate)]; } set { this[nameof(OnDialogCameraUpdate)] = value; } }
        public bool AllowMultipleSpeakers { get { return this[nameof(AllowMultipleSpeakers)].Flag; } set { this[nameof(AllowMultipleSpeakers)].Flag = value; } }
        public Actor DialogInitiator { get { return this[nameof(DialogInitiator)].As<Actor>(); } set { this["DialogInitiator"] = value; } }
        public bool DialogActive { get { return this[nameof(DialogActive)].Flag; } set { this[nameof(DialogActive)].Flag = value; } }
        public EventTreeStage DialogStage { get { return this[nameof(DialogStage)].As<EventTreeStage>(); } set { this["DialogStage"] = value; } }
        public Array<EventTreeAttrib> DialogAttributes { get { return new Array<EventTreeAttrib>(this[nameof(DialogAttributes)].Address); } }
        public DialogInfo Dialog { get { return this[nameof(Dialog)].As<DialogInfo>(); } set { this["Dialog"] = value; } }
        public Array<DialogOption> DialogOptions { get { return new Array<DialogOption>(this[nameof(DialogOptions)].Address); } }
        public DialogCameraShotInfo CameraShotInfo { get { return this[nameof(CameraShotInfo)].As<DialogCameraShotInfo>(); } set { this["CameraShotInfo"] = value; } }
        public Array<DialogTokenValuePair> TokenValuePairs { get { return new Array<DialogTokenValuePair>(this[nameof(TokenValuePairs)].Address); } }
        public Array<Actor> RelevantNPCS { get { return new Array<Actor>(this[nameof(RelevantNPCS)].Address); } }
        public AudioComponentGunfire DialogAudio { get { return this[nameof(DialogAudio)].As<AudioComponentGunfire>(); } set { this["DialogAudio"] = value; } }
        public Array<Object> DialogProviders { get { return new Array<Object>(this[nameof(DialogProviders)].Address); } }
        public DialogInstance CurrentDialog { get { return this[nameof(CurrentDialog)].As<DialogInstance>(); } set { this["CurrentDialog"] = value; } }
        public Object ProximityCooldowns { get { return this[nameof(ProximityCooldowns)]; } set { this[nameof(ProximityCooldowns)] = value; } }
        public void TokenValueSet(Object NameID, Object Value) { Invoke(nameof(TokenValueSet), NameID, Value); }
        public void SelectOptionByName(Object OptionName) { Invoke(nameof(SelectOptionByName), OptionName); }
        public void SelectOption(byte OptionID) { Invoke(nameof(SelectOption), OptionID); }
        public void ResetStageFromCinematic() { Invoke(nameof(ResetStageFromCinematic)); }
        public void RemoveDialogProvider(Object Provider) { Invoke(nameof(RemoveDialogProvider), Provider); }
        public void OnRep_Stage() { Invoke(nameof(OnRep_Stage)); }
        public void OnRep_Options() { Invoke(nameof(OnRep_Options)); }
        public void OnRep_Dialog() { Invoke(nameof(OnRep_Dialog)); }
        public void OnRep_CameraShot() { Invoke(nameof(OnRep_CameraShot)); }
        public void OnRep_Active() { Invoke(nameof(OnRep_Active)); }
        public void OnInitiatorTakeAnyDamage(DamageInfo Damage) { Invoke(nameof(OnInitiatorTakeAnyDamage), Damage); }
        public void OnDialogFinished(DialogInstance Instance) { Invoke(nameof(OnDialogFinished), Instance); }
        public void MulticastShowEmote(Object Speaker, Object EmoteName, bool TargetAllPlayers) { Invoke(nameof(MulticastShowEmote), Speaker, EmoteName, TargetAllPlayers); }
        public void JoinInProgressServer(PlayerController Controller) { Invoke(nameof(JoinInProgressServer), Controller); }
        public void JoinInProgressClient() { Invoke(nameof(JoinInProgressClient)); }
        public bool HasOption(Object NameID) { return Invoke<bool>(nameof(HasOption), NameID); }
        public bool HasAttributeValueForStage(Object Key) { return Invoke<bool>(nameof(HasAttributeValueForStage), Key); }
        public bool HasAttributeValueForOption(DialogOption Option, Object Key) { return Invoke<bool>(nameof(HasAttributeValueForOption), Option, Key); }
        public bool HasAttributeValue(Object Key) { return Invoke<bool>(nameof(HasAttributeValue), Key); }
        public void HandleEvent(Object EventName) { Invoke(nameof(HandleEvent), EventName); }
        public Object GetTokenReplacedText() { return Invoke<Object>(nameof(GetTokenReplacedText)); }
        public Array<Actor> GetRelevantNPCs() { return Invoke<Array<Actor>>(nameof(GetRelevantNPCs)); }
        public Actor GetRelevantNPC(Object NameID) { return Invoke<Actor>(nameof(GetRelevantNPC), NameID); }
        public Object GetAttributeValueForStage(Object Key) { return Invoke<Object>(nameof(GetAttributeValueForStage), Key); }
        public Object GetAttributeValueForOption(DialogOption Option, Object Key) { return Invoke<Object>(nameof(GetAttributeValueForOption), Option, Key); }
        public Object GetAttributeValue(Object Key) { return Invoke<Object>(nameof(GetAttributeValue), Key); }
        public EventTreeAsset GetAttributeAssetForStage(Object Key) { return Invoke<EventTreeAsset>(nameof(GetAttributeAssetForStage), Key); }
        public bool ExecuteTrigger(Object TriggerName, Actor Initiator, bool Push, bool AllowOverrideExistingStack) { return Invoke<bool>(nameof(ExecuteTrigger), TriggerName, Initiator, Push, AllowOverrideExistingStack); }
        public bool ExecuteItemTrigger(Object ItemBP, Actor Initiator) { return Invoke<bool>(nameof(ExecuteItemTrigger), ItemBP, Initiator); }
        public void EventTreeStageEvent(EventTreeStage EventTreeStage) { Invoke(nameof(EventTreeStageEvent), EventTreeStage); }
        public void EventEnd() { Invoke(nameof(EventEnd)); }
        public void EventBegin() { Invoke(nameof(EventBegin)); }
        public void DialogAdvance() { Invoke(nameof(DialogAdvance)); }
        public void BeginDialog(Actor Initiator) { Invoke(nameof(BeginDialog), Initiator); }
        public void AddRelevantNPC(Actor NPC) { Invoke(nameof(AddRelevantNPC), NPC); }
        public void AddDialogProvider(Object Provider) { Invoke(nameof(AddDialogProvider), Provider); }
    }
    public class DialogInstance : Object
    {
        public DialogInstance(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Object OnComplete { get { return this[nameof(OnComplete)]; } set { this[nameof(OnComplete)] = value; } }
        public DialogManager DialogManager { get { return this[nameof(DialogManager)].As<DialogManager>(); } set { this["DialogManager"] = value; } }
        public Array<SubtitleInstance> Subtitles { get { return new Array<SubtitleInstance>(this[nameof(Subtitles)].Address); } }
        public void OnSubtitleComplete(SubtitleInstance Subtitle) { Invoke(nameof(OnSubtitleComplete), Subtitle); }
        public void OnSubtitleAdded(SubtitleInstance Subtitle) { Invoke(nameof(OnSubtitleAdded), Subtitle); }
        public bool IsDialogSource(Actor Source) { return Invoke<bool>(nameof(IsDialogSource), Source); }
        public void ForceComplete() { Invoke(nameof(ForceComplete)); }
        public void Complete() { Invoke(nameof(Complete)); }
    }
    public class DialogManager : ActorComponent
    {
        public DialogManager(nint addr) : base(addr) { }
        public float DialogCullDistance { get { return this[nameof(DialogCullDistance)].GetValue<float>(); } set { this[nameof(DialogCullDistance)].SetValue<float>(value); } }
        public Object OnCompleteAll { get { return this[nameof(OnCompleteAll)]; } set { this[nameof(OnCompleteAll)] = value; } }
        public Array<DialogInstance> ActiveDialog { get { return new Array<DialogInstance>(this[nameof(ActiveDialog)].Address); } }
        public bool StopDialog(Actor Source) { return Invoke<bool>(nameof(StopDialog), Source); }
        public bool StopActiveDialog() { return Invoke<bool>(nameof(StopActiveDialog)); }
        public DialogInstance PlayDialogFromTargetSoundSet(Actor Source, Object SoundID, GunfireAudioPlayParams PlayParams, GunfireAudioAttachParams AttachParams, bool IgnoreVocalRange, bool UseFacialAnimation, Object Emote) { return Invoke<DialogInstance>(nameof(PlayDialogFromTargetSoundSet), Source, SoundID, PlayParams, AttachParams, IgnoreVocalRange, UseFacialAnimation, Emote); }
        public DialogInstance PlayDialogFromSound(Actor Source, SoftSoundGunfire Dialog) { return Invoke<DialogInstance>(nameof(PlayDialogFromSound), Source, Dialog); }
        public DialogInstance PlayDialog(Actor Source, DialogInfo Info) { return Invoke<DialogInstance>(nameof(PlayDialog), Source, Info); }
        public DialogManager GetDialogManager(Object WorldContextObject) { return Invoke<DialogManager>(nameof(GetDialogManager), WorldContextObject); }
        public DialogInstance GetActiveDialog(Actor Source) { return Invoke<DialogInstance>(nameof(GetActiveDialog), Source); }
    }
    public class DialogVocalRange : Object
    {
        public DialogVocalRange(nint addr) : base(addr) { }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
    }
    public class EventTree : Object
    {
        public EventTree(nint addr) : base(addr) { }
        public Array<EventTreeNode> Nodes { get { return new Array<EventTreeNode>(this[nameof(Nodes)].Address); } }
        public Object DefaultSpeaker { get { return this[nameof(DefaultSpeaker)]; } set { this[nameof(DefaultSpeaker)] = value; } }
        public EventTreeNode_Standalone MultiInteractionNode { get { return this[nameof(MultiInteractionNode)].As<EventTreeNode_Standalone>(); } set { this["MultiInteractionNode"] = value; } }
        public Object DefaultVocalRange { get { return this[nameof(DefaultVocalRange)]; } set { this[nameof(DefaultVocalRange)] = value; } }
        public Array<VariableDef> Variables { get { return new Array<VariableDef>(this[nameof(Variables)].Address); } }
        public int NextUniqueId { get { return this[nameof(NextUniqueId)].GetValue<int>(); } set { this[nameof(NextUniqueId)].SetValue<int>(value); } }
    }
    public class EventTreeAsset : DataAsset
    {
        public EventTreeAsset(nint addr) : base(addr) { }
    }
    public class EventTreeContextObject : Object
    {
        public EventTreeContextObject(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
    }
    public class EventTreeNode_Branch : EventTreeNode
    {
        public EventTreeNode_Branch(nint addr) : base(addr) { }
        public Array<Branch> Branches { get { return new Array<Branch>(this[nameof(Branches)].Address); } }
    }
    public class EventTreeNode_Cinematic_Base : EventTreeNode_Branch
    {
        public EventTreeNode_Cinematic_Base(nint addr) : base(addr) { }
        public Array<Object> CinematicTags { get { return new Array<Object>(this[nameof(CinematicTags)].Address); } }
        public bool HideOtherPlayers { get { return this[nameof(HideOtherPlayers)].Flag; } set { this[nameof(HideOtherPlayers)].Flag = value; } }
        public bool ResetNonMVPs { get { return this[nameof(ResetNonMVPs)].Flag; } set { this[nameof(ResetNonMVPs)].Flag = value; } }
        public bool ResetCameraOnComplete { get { return this[nameof(ResetCameraOnComplete)].Flag; } set { this[nameof(ResetCameraOnComplete)].Flag = value; } }
        public bool ShowSkipCinematic { get { return this[nameof(ShowSkipCinematic)].Flag; } set { this[nameof(ShowSkipCinematic)].Flag = value; } }
        public bool DefaultToPlayerCameraOnFinish { get { return this[nameof(DefaultToPlayerCameraOnFinish)].Flag; } set { this[nameof(DefaultToPlayerCameraOnFinish)].Flag = value; } }
        public bool UseLocalAreaRelevance { get { return this[nameof(UseLocalAreaRelevance)].Flag; } set { this[nameof(UseLocalAreaRelevance)].Flag = value; } }
        public bool OnlyShowCameraToInstigator { get { return this[nameof(OnlyShowCameraToInstigator)].Flag; } set { this[nameof(OnlyShowCameraToInstigator)].Flag = value; } }
        public MovieSceneSequencePlaybackSettings PlaybackSettings { get { return this[nameof(PlaybackSettings)].As<MovieSceneSequencePlaybackSettings>(); } set { this["PlaybackSettings"] = value; } }
        public Object VariableToSetOnSkip { get { return this[nameof(VariableToSetOnSkip)]; } set { this[nameof(VariableToSetOnSkip)] = value; } }
        public EventTreeComponent StoredComponent { get { return this[nameof(StoredComponent)].As<EventTreeComponent>(); } set { this["StoredComponent"] = value; } }
        public void OnSequenceTriggerForEventTree(Object TriggerName) { Invoke(nameof(OnSequenceTriggerForEventTree), TriggerName); }
        public void OnClientSequencerFinishedCinematic(CinematicPlayerSettings Settings, Object CurrentCinematic, Actor Instigator) { Invoke(nameof(OnClientSequencerFinishedCinematic), Settings, CurrentCinematic, Instigator); }
        public void OnCinematicSkipVoteEvent(Object CinematicAsset, bool Skipped) { Invoke(nameof(OnCinematicSkipVoteEvent), CinematicAsset, Skipped); }
        public void OnCinematicFinishedCallback(CinematicInstance_Base CinematicInstance) { Invoke(nameof(OnCinematicFinishedCallback), CinematicInstance); }
    }
    public class EventTreeNode_BinkCinematic : EventTreeNode_Cinematic_Base
    {
        public EventTreeNode_BinkCinematic(nint addr) : base(addr) { }
        public Object BinkMediaPlayer { get { return this[nameof(BinkMediaPlayer)]; } set { this[nameof(BinkMediaPlayer)] = value; } }
        public Object BinkTextureAsset { get { return this[nameof(BinkTextureAsset)]; } set { this[nameof(BinkTextureAsset)] = value; } }
        public SoftSoundGunfire MediaSound { get { return this[nameof(MediaSound)].As<SoftSoundGunfire>(); } set { this["MediaSound"] = value; } }
    }
    public class EventTreeNode_Challenge : EventTreeNode
    {
        public EventTreeNode_Challenge(nint addr) : base(addr) { }
        public ChallengeEvent ChallengeEvent { get { return this[nameof(ChallengeEvent)].As<ChallengeEvent>(); } set { this["ChallengeEvent"] = value; } }
    }
    public class Branch_SequenceOption : Branch
    {
        public Branch_SequenceOption(nint addr) : base(addr) { }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
    }
    public class EventTreeNode_Delay : EventTreeNode
    {
        public EventTreeNode_Delay(nint addr) : base(addr) { }
        public float Delay { get { return this[nameof(Delay)].GetValue<float>(); } set { this[nameof(Delay)].SetValue<float>(value); } }
    }
    public class Dialog_Speaker : Object
    {
        public Dialog_Speaker(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public EDialogSpeakerGender Gender { get { return (EDialogSpeakerGender)this[nameof(Gender)].GetValue<int>(); } set { this[nameof(Gender)].SetValue<int>((int)value); } }
        public bool Speaks { get { return this[nameof(Speaks)].Flag; } set { this[nameof(Speaks)].Flag = value; } }
    }
    public class Dialog_Emote : Object
    {
        public Dialog_Emote(nint addr) : base(addr) { }
        public Object AnimationTag { get { return this[nameof(AnimationTag)]; } set { this[nameof(AnimationTag)] = value; } }
    }
    public class EventTreeNode_SoundBase : EventTreeNode
    {
        public EventTreeNode_SoundBase(nint addr) : base(addr) { }
        public bool AutoComplete { get { return this[nameof(AutoComplete)].Flag; } set { this[nameof(AutoComplete)].Flag = value; } }
        public bool CompleteAfterDialog { get { return this[nameof(CompleteAfterDialog)].Flag; } set { this[nameof(CompleteAfterDialog)].Flag = value; } }
        public float WaitTimeAfterComplete { get { return this[nameof(WaitTimeAfterComplete)].GetValue<float>(); } set { this[nameof(WaitTimeAfterComplete)].SetValue<float>(value); } }
        public CameraShotNodeEntryData CameraShotDetails { get { return this[nameof(CameraShotDetails)].As<CameraShotNodeEntryData>(); } set { this["CameraShotDetails"] = value; } }
        public Array<EventTreeAttrib> Attributes { get { return new Array<EventTreeAttrib>(this[nameof(Attributes)].Address); } }
        public void OnFinishedWaiting(EventTreeComponent Component) { Invoke(nameof(OnFinishedWaiting), Component); }
    }
    public class EventTreeNode_Dialog : EventTreeNode_SoundBase
    {
        public EventTreeNode_Dialog(nint addr) : base(addr) { }
        public Object Speaker { get { return this[nameof(Speaker)]; } set { this[nameof(Speaker)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public Object LookAtTargetID { get { return this[nameof(LookAtTargetID)]; } set { this[nameof(LookAtTargetID)] = value; } }
        public bool RemoveEmoteOnFinish { get { return this[nameof(RemoveEmoteOnFinish)].Flag; } set { this[nameof(RemoveEmoteOnFinish)].Flag = value; } }
        public bool BlockInteractions { get { return this[nameof(BlockInteractions)].Flag; } set { this[nameof(BlockInteractions)].Flag = value; } }
        public SoftSoundGunfire Dialog { get { return this[nameof(Dialog)].As<SoftSoundGunfire>(); } set { this["Dialog"] = value; } }
        public GunfireAudioPlayParams DialogPlayParams { get { return this[nameof(DialogPlayParams)].As<GunfireAudioPlayParams>(); } set { this["DialogPlayParams"] = value; } }
        public GunfireAudioAttachParams DialogAttachParams { get { return this[nameof(DialogAttachParams)].As<GunfireAudioAttachParams>(); } set { this["DialogAttachParams"] = value; } }
        public Object DialogID { get { return this[nameof(DialogID)]; } set { this[nameof(DialogID)] = value; } }
        public int DialogLine { get { return this[nameof(DialogLine)].GetValue<int>(); } set { this[nameof(DialogLine)].SetValue<int>(value); } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
        public Object VocalRange { get { return this[nameof(VocalRange)]; } set { this[nameof(VocalRange)] = value; } }
        public bool IsDefaultSpeaker { get { return this[nameof(IsDefaultSpeaker)].Flag; } set { this[nameof(IsDefaultSpeaker)].Flag = value; } }
        public bool IsDefaultVocalRange { get { return this[nameof(IsDefaultVocalRange)].Flag; } set { this[nameof(IsDefaultVocalRange)].Flag = value; } }
        public void Complete(EventTreeComponent Component) { Invoke(nameof(Complete), Component); }
    }
    public class EventTreeNode_DialogInterrupt : EventTreeNode
    {
        public EventTreeNode_DialogInterrupt(nint addr) : base(addr) { }
    }
    public class Branch_DialogOption : Branch
    {
        public Branch_DialogOption(nint addr) : base(addr) { }
        public Object DialogID { get { return this[nameof(DialogID)]; } set { this[nameof(DialogID)] = value; } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public int CompletionPercent { get { return this[nameof(CompletionPercent)].GetValue<int>(); } set { this[nameof(CompletionPercent)].SetValue<int>(value); } }
        public Array<EventTreeAttrib> Attributes { get { return new Array<EventTreeAttrib>(this[nameof(Attributes)].Address); } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
    }
    public class EventTreeNode_DialogOptions : EventTreeNode_Branch
    {
        public EventTreeNode_DialogOptions(nint addr) : base(addr) { }
        public Object DialogTag { get { return this[nameof(DialogTag)]; } set { this[nameof(DialogTag)] = value; } }
        public bool AutoCompleteDialog { get { return this[nameof(AutoCompleteDialog)].Flag; } set { this[nameof(AutoCompleteDialog)].Flag = value; } }
        public void SelectOption(EventTreeComponent Component, byte Option) { Invoke(nameof(SelectOption), Component, Option); }
    }
    public class EventTreeNode_List : EventTreeNode
    {
        public EventTreeNode_List(nint addr) : base(addr) { }
        public Array<EventTreeNode> Nodes { get { return new Array<EventTreeNode>(this[nameof(Nodes)].Address); } }
    }
    public class EventTreeNode_ManualTrigger : EventTreeNode_List
    {
        public EventTreeNode_ManualTrigger(nint addr) : base(addr) { }
    }
    public class EventTreeNode_DialogOption : EventTreeNode_ManualTrigger
    {
        public EventTreeNode_DialogOption(nint addr) : base(addr) { }
        public Object DialogID { get { return this[nameof(DialogID)]; } set { this[nameof(DialogID)] = value; } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object DialogTag { get { return this[nameof(DialogTag)]; } set { this[nameof(DialogTag)] = value; } }
        public Array<EventTreeAttrib> Attributes { get { return new Array<EventTreeAttrib>(this[nameof(Attributes)].Address); } }
    }
    public class HasDialogOptionsCondition : Condition
    {
        public HasDialogOptionsCondition(nint addr) : base(addr) { }
        public Object DialogTag { get { return this[nameof(DialogTag)]; } set { this[nameof(DialogTag)] = value; } }
    }
    public class EventTreeNode_Emote : EventTreeNode
    {
        public EventTreeNode_Emote(nint addr) : base(addr) { }
        public Object Speaker { get { return this[nameof(Speaker)]; } set { this[nameof(Speaker)] = value; } }
        public bool TargetAllPlayers { get { return this[nameof(TargetAllPlayers)].Flag; } set { this[nameof(TargetAllPlayers)].Flag = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
    }
    public class EventTreeNode_Event : EventTreeNode
    {
        public EventTreeNode_Event(nint addr) : base(addr) { }
        public Object Context { get { return this[nameof(Context)]; } set { this[nameof(Context)] = value; } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
    }
    public class EventTreeNode_ExecSubroutine : EventTreeNode
    {
        public EventTreeNode_ExecSubroutine(nint addr) : base(addr) { }
        public Object Subroutine { get { return this[nameof(Subroutine)]; } set { this[nameof(Subroutine)] = value; } }
    }
    public class EventTreeNode_Exit : EventTreeNode
    {
        public EventTreeNode_Exit(nint addr) : base(addr) { }
    }
    public class EventTreeNode_ItemTrigger : EventTreeNode_ManualTrigger
    {
        public EventTreeNode_ItemTrigger(nint addr) : base(addr) { }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
    }
    public class EventTreeNode_Jump : EventTreeNode
    {
        public EventTreeNode_Jump(nint addr) : base(addr) { }
        public EventTreeNode JumpNode { get { return this[nameof(JumpNode)].As<EventTreeNode>(); } set { this["JumpNode"] = value; } }
    }
    public class EventTreeNode_LevelSequence : EventTreeNode_Cinematic_Base
    {
        public EventTreeNode_LevelSequence(nint addr) : base(addr) { }
        public Object LevelSequence { get { return this[nameof(LevelSequence)]; } set { this[nameof(LevelSequence)] = value; } }
        public CinematicTransitionParams CinematicTransitionParams { get { return this[nameof(CinematicTransitionParams)].As<CinematicTransitionParams>(); } set { this["CinematicTransitionParams"] = value; } }
    }
    public class EventTreeNode_ProximityTrigger : EventTreeNode_ManualTrigger
    {
        public EventTreeNode_ProximityTrigger(nint addr) : base(addr) { }
        public float RangeMin { get { return this[nameof(RangeMin)].GetValue<float>(); } set { this[nameof(RangeMin)].SetValue<float>(value); } }
        public float RangeMax { get { return this[nameof(RangeMax)].GetValue<float>(); } set { this[nameof(RangeMax)].SetValue<float>(value); } }
        public float CooldownMin { get { return this[nameof(CooldownMin)].GetValue<float>(); } set { this[nameof(CooldownMin)].SetValue<float>(value); } }
        public float CooldownMax { get { return this[nameof(CooldownMax)].GetValue<float>(); } set { this[nameof(CooldownMax)].SetValue<float>(value); } }
        public EYesNo HasLOS { get { return (EYesNo)this[nameof(HasLOS)].GetValue<int>(); } set { this[nameof(HasLOS)].SetValue<int>((int)value); } }
        public EYesNo InView { get { return (EYesNo)this[nameof(InView)].GetValue<int>(); } set { this[nameof(InView)].SetValue<int>((int)value); } }
    }
    public class EventTreeNode_ActivateObjective : EventTreeNode
    {
        public EventTreeNode_ActivateObjective(nint addr) : base(addr) { }
        public Object Objective { get { return this[nameof(Objective)]; } set { this[nameof(Objective)] = value; } }
        public bool AutoCompleteActiveObjectives { get { return this[nameof(AutoCompleteActiveObjectives)].Flag; } set { this[nameof(AutoCompleteActiveObjectives)].Flag = value; } }
    }
    public class EventTreeNode_CompleteObjective : EventTreeNode
    {
        public EventTreeNode_CompleteObjective(nint addr) : base(addr) { }
        public Object Objective { get { return this[nameof(Objective)]; } set { this[nameof(Objective)] = value; } }
    }
    public class EventTreeNode_CompleteQuest : EventTreeNode
    {
        public EventTreeNode_CompleteQuest(nint addr) : base(addr) { }
        public EQuestResult Result { get { return (EQuestResult)this[nameof(Result)].GetValue<int>(); } set { this[nameof(Result)].SetValue<int>((int)value); } }
    }
    public class Branch_QuestSwitch : Branch
    {
        public Branch_QuestSwitch(nint addr) : base(addr) { }
        public EQuestSwitchResult ValidForState { get { return (EQuestSwitchResult)this[nameof(ValidForState)].GetValue<int>(); } set { this[nameof(ValidForState)].SetValue<int>((int)value); } }
        public Array<Object> ValidObjectives { get { return new Array<Object>(this[nameof(ValidObjectives)].Address); } }
    }
    public class EventTreeNode_QuestSwitch : EventTreeNode_Branch
    {
        public EventTreeNode_QuestSwitch(nint addr) : base(addr) { }
    }
    public class Branch_Random : Branch
    {
        public Branch_Random(nint addr) : base(addr) { }
        public int Chance { get { return this[nameof(Chance)].GetValue<int>(); } set { this[nameof(Chance)].SetValue<int>(value); } }
    }
    public class EventTreeNode_RandomBranch : EventTreeNode_Branch
    {
        public EventTreeNode_RandomBranch(nint addr) : base(addr) { }
        public bool UseSeed { get { return this[nameof(UseSeed)].Flag; } set { this[nameof(UseSeed)].Flag = value; } }
    }
    public class EventTreeNode_SetCooldown : EventTreeNode
    {
        public EventTreeNode_SetCooldown(nint addr) : base(addr) { }
        public Object Context { get { return this[nameof(Context)]; } set { this[nameof(Context)] = value; } }
        public Object Cooldown { get { return this[nameof(Cooldown)]; } set { this[nameof(Cooldown)] = value; } }
        public float CooldownMin { get { return this[nameof(CooldownMin)].GetValue<float>(); } set { this[nameof(CooldownMin)].SetValue<float>(value); } }
        public float CooldownMax { get { return this[nameof(CooldownMax)].GetValue<float>(); } set { this[nameof(CooldownMax)].SetValue<float>(value); } }
    }
    public class EventTreeNode_SetMultipleSpeakers : EventTreeNode
    {
        public EventTreeNode_SetMultipleSpeakers(nint addr) : base(addr) { }
        public bool bAllowed { get { return this[nameof(bAllowed)].Flag; } set { this[nameof(bAllowed)].Flag = value; } }
    }
    public class EventTreeNode_SoundSet : EventTreeNode_SoundBase
    {
        public EventTreeNode_SoundSet(nint addr) : base(addr) { }
        public Object SoundIDName { get { return this[nameof(SoundIDName)]; } set { this[nameof(SoundIDName)] = value; } }
    }
    public class EventTreeNode_Stage : EventTreeNode
    {
        public EventTreeNode_Stage(nint addr) : base(addr) { }
        public EStageAction Action { get { return (EStageAction)this[nameof(Action)].GetValue<int>(); } set { this[nameof(Action)].SetValue<int>((int)value); } }
        public SequencerShotGroup SequenceGroup { get { return this[nameof(SequenceGroup)].As<SequencerShotGroup>(); } set { this["SequenceGroup"] = value; } }
        public bool OnlyTargetInstigator { get { return this[nameof(OnlyTargetInstigator)].Flag; } set { this[nameof(OnlyTargetInstigator)].Flag = value; } }
        public Array<EventTreeAttrib> Attributes { get { return new Array<EventTreeAttrib>(this[nameof(Attributes)].Address); } }
    }
    public class EventTreeNode_StageShot : EventTreeNode
    {
        public EventTreeNode_StageShot(nint addr) : base(addr) { }
        public CameraShotNodeEntryData CameraShotDetails { get { return this[nameof(CameraShotDetails)].As<CameraShotNodeEntryData>(); } set { this["CameraShotDetails"] = value; } }
    }
    public class Branch_Subroutine : Branch
    {
        public Branch_Subroutine(nint addr) : base(addr) { }
        public Object SubroutineID { get { return this[nameof(SubroutineID)]; } set { this[nameof(SubroutineID)] = value; } }
    }
    public class EventTreeNode_Subroutines : EventTreeNode_Branch
    {
        public EventTreeNode_Subroutines(nint addr) : base(addr) { }
    }
    public class Branch_Switch : Branch
    {
        public Branch_Switch(nint addr) : base(addr) { }
    }
    public class EventTreeNode_Switch : EventTreeNode_Branch
    {
        public EventTreeNode_Switch(nint addr) : base(addr) { }
    }
    public class EventTreeNode_TreeLink : EventTreeNode
    {
        public EventTreeNode_TreeLink(nint addr) : base(addr) { }
        public EventTree Tree { get { return this[nameof(Tree)].As<EventTree>(); } set { this["Tree"] = value; } }
    }
    public class EventTreeNode_Trigger : EventTreeNode_ManualTrigger
    {
        public EventTreeNode_Trigger(nint addr) : base(addr) { }
        public Object TriggerName { get { return this[nameof(TriggerName)]; } set { this[nameof(TriggerName)] = value; } }
    }
    public class EventTreeNode_ExecTrigger : EventTreeNode
    {
        public EventTreeNode_ExecTrigger(nint addr) : base(addr) { }
        public Object Trigger { get { return this[nameof(Trigger)]; } set { this[nameof(Trigger)] = value; } }
    }
    public class EncounterGroupInstance : Object
    {
        public EncounterGroupInstance(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public EncounterGroup Group { get { return this[nameof(Group)].As<EncounterGroup>(); } set { this["Group"] = value; } }
        public bool Active { get { return this[nameof(Active)].Flag; } set { this[nameof(Active)].Flag = value; } }
        public EncounterInstance Encounter { get { return this[nameof(Encounter)].As<EncounterInstance>(); } set { this["Encounter"] = value; } }
        public float Cooldown { get { return this[nameof(Cooldown)].GetValue<float>(); } set { this[nameof(Cooldown)].SetValue<float>(value); } }
        public float AggroCooldown { get { return this[nameof(AggroCooldown)].GetValue<float>(); } set { this[nameof(AggroCooldown)].SetValue<float>(value); } }
        public int NumEncounters { get { return this[nameof(NumEncounters)].GetValue<int>(); } set { this[nameof(NumEncounters)].SetValue<int>(value); } }
        public bool Stopped { get { return this[nameof(Stopped)].Flag; } set { this[nameof(Stopped)].Flag = value; } }
        public bool AutoManagePlayers { get { return this[nameof(AutoManagePlayers)].Flag; } set { this[nameof(AutoManagePlayers)].Flag = value; } }
        public bool Explored { get { return this[nameof(Explored)].Flag; } set { this[nameof(Explored)].Flag = value; } }
        public bool Suspended { get { return this[nameof(Suspended)].Flag; } set { this[nameof(Suspended)].Flag = value; } }
        public bool Valid { get { return this[nameof(Valid)].Flag; } set { this[nameof(Valid)].Flag = value; } }
        public Array<PlayerController> Players { get { return new Array<PlayerController>(this[nameof(Players)].Address); } }
    }
    public class AIDirector : ActorComponent
    {
        public AIDirector(nint addr) : base(addr) { }
        public Object OnGroupAdded { get { return this[nameof(OnGroupAdded)]; } set { this[nameof(OnGroupAdded)] = value; } }
        public Object OnGroupRemoved { get { return this[nameof(OnGroupRemoved)]; } set { this[nameof(OnGroupRemoved)] = value; } }
        public Object OnGroupEncounterComplete { get { return this[nameof(OnGroupEncounterComplete)]; } set { this[nameof(OnGroupEncounterComplete)] = value; } }
        public Object OnGroupActorSpawned { get { return this[nameof(OnGroupActorSpawned)]; } set { this[nameof(OnGroupActorSpawned)] = value; } }
        public Object OnGroupActorDead { get { return this[nameof(OnGroupActorDead)]; } set { this[nameof(OnGroupActorDead)] = value; } }
        public Object OnGroupEvent { get { return this[nameof(OnGroupEvent)]; } set { this[nameof(OnGroupEvent)] = value; } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public bool Suspended { get { return this[nameof(Suspended)].Flag; } set { this[nameof(Suspended)].Flag = value; } }
        public Array<EncounterGroupInstance> EncounterGroups { get { return new Array<EncounterGroupInstance>(this[nameof(EncounterGroups)].Address); } }
        public EIntensityState IntensityState { get { return (EIntensityState)this[nameof(IntensityState)].GetValue<int>(); } set { this[nameof(IntensityState)].SetValue<int>((int)value); } }
        public float IntensityStateChangeLockout { get { return this[nameof(IntensityStateChangeLockout)].GetValue<float>(); } set { this[nameof(IntensityStateChangeLockout)].SetValue<float>(value); } }
        public void Suspend() { Invoke(nameof(Suspend)); }
        public void StopEncounterGroup(EncounterGroupInstance EncounterGroup, bool DestroyActiveSpawns) { Invoke(nameof(StopEncounterGroup), EncounterGroup, DestroyActiveSpawns); }
        public EncounterGroupInstance StartEncounterGroup(EncounterGroup Group) { return Invoke<EncounterGroupInstance>(nameof(StartEncounterGroup), Group); }
        public void Resume() { Invoke(nameof(Resume)); }
        public void ResetIntensity() { Invoke(nameof(ResetIntensity)); }
        public void OnNotifyHit(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyHit), DamageInfo); }
        public void OnEncounterEvent(EncounterInstance Encounter, Object EventName) { Invoke(nameof(OnEncounterEvent), Encounter, EventName); }
        public void OnActorSpawned(EncounterInstance Encounter, Actor Actor) { Invoke(nameof(OnActorSpawned), Encounter, Actor); }
        public void OnActorDead(EncounterInstance Encounter, Actor Actor) { Invoke(nameof(OnActorDead), Encounter, Actor); }
        public bool HasActiveSpawns() { return Invoke<bool>(nameof(HasActiveSpawns)); }
        public float GetIntensity() { return Invoke<float>(nameof(GetIntensity)); }
        public int GetAIDirectorDebugState() { return Invoke<int>(nameof(GetAIDirectorDebugState)); }
        public void ClearAllGroups(bool DestroyActiveSpawns) { Invoke(nameof(ClearAllGroups), DestroyActiveSpawns); }
    }
    public class AIDirectorSettings : Actor
    {
        public AIDirectorSettings(nint addr) : base(addr) { }
        public Array<EncounterGroup> EncounterGroups { get { return new Array<EncounterGroup>(this[nameof(EncounterGroups)].Address); } }
    }
    public class EncounterInstance : Object
    {
        public EncounterInstance(nint addr) : base(addr) { }
        public Object OnEvent { get { return this[nameof(OnEvent)]; } set { this[nameof(OnEvent)] = value; } }
        public Object OnSpawned { get { return this[nameof(OnSpawned)]; } set { this[nameof(OnSpawned)] = value; } }
        public Object OnDead { get { return this[nameof(OnDead)]; } set { this[nameof(OnDead)] = value; } }
        public Object OnComplete { get { return this[nameof(OnComplete)]; } set { this[nameof(OnComplete)] = value; } }
        public EncounterManager EncounterManager { get { return this[nameof(EncounterManager)].As<EncounterManager>(); } set { this["EncounterManager"] = value; } }
        public Array<PlayerController> Players { get { return new Array<PlayerController>(this[nameof(Players)].Address); } }
        public SpawnList SpawnList { get { return this[nameof(SpawnList)].As<SpawnList>(); } set { this["SpawnList"] = value; } }
        public Object Owner { get { return this[nameof(Owner)]; } set { this[nameof(Owner)] = value; } }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public Object AggroGroup { get { return this[nameof(AggroGroup)]; } set { this[nameof(AggroGroup)] = value; } }
        public Object AggroGroupOverride { get { return this[nameof(AggroGroupOverride)]; } set { this[nameof(AggroGroupOverride)] = value; } }
        public int NumSpawned { get { return this[nameof(NumSpawned)].GetValue<int>(); } set { this[nameof(NumSpawned)].SetValue<int>(value); } }
        public float Counter { get { return this[nameof(Counter)].GetValue<float>(); } set { this[nameof(Counter)].SetValue<float>(value); } }
        public bool Streaming { get { return this[nameof(Streaming)].Flag; } set { this[nameof(Streaming)].Flag = value; } }
        public bool Paused { get { return this[nameof(Paused)].Flag; } set { this[nameof(Paused)].Flag = value; } }
        public int PerpetualSpawnCount { get { return this[nameof(PerpetualSpawnCount)].GetValue<int>(); } set { this[nameof(PerpetualSpawnCount)].SetValue<int>(value); } }
        public Object Error { get { return this[nameof(Error)]; } set { this[nameof(Error)] = value; } }
        public SoundGunfire SoundToPlayNextSpawn { get { return this[nameof(SoundToPlayNextSpawn)].As<SoundGunfire>(); } set { this["SoundToPlayNextSpawn"] = value; } }
        public void StopEncounter(bool DestroyActiveSpawns) { Invoke(nameof(StopEncounter), DestroyActiveSpawns); }
        public void SetAggroGroup(Object NewAggroGroup) { Invoke(nameof(SetAggroGroup), NewAggroGroup); }
        public void ResumeEncounter() { Invoke(nameof(ResumeEncounter)); }
        public void PauseEncounter() { Invoke(nameof(PauseEncounter)); }
        public int NumQueuedSpawns() { return Invoke<int>(nameof(NumQueuedSpawns)); }
        public int NumActiveSpawns() { return Invoke<int>(nameof(NumActiveSpawns)); }
        public bool IsComplete() { return Invoke<bool>(nameof(IsComplete)); }
        public void InvokeEventOnActors(Object EventName) { Invoke(nameof(InvokeEventOnActors), EventName); }
        public Array<Actor> GetSpawnedActors() { return Invoke<Array<Actor>>(nameof(GetSpawnedActors)); }
    }
    public class SpawnTableEncounterParams : SpawnTableEntry
    {
        public SpawnTableEncounterParams(nint addr) : base(addr) { }
        public bool WaitForAllSpawnsDead { get { return this[nameof(WaitForAllSpawnsDead)].Flag; } set { this[nameof(WaitForAllSpawnsDead)].Flag = value; } }
        public bool ChooseNewSpawnDirection { get { return this[nameof(ChooseNewSpawnDirection)].Flag; } set { this[nameof(ChooseNewSpawnDirection)].Flag = value; } }
        public float SpawnWeightMultiplier { get { return this[nameof(SpawnWeightMultiplier)].GetValue<float>(); } set { this[nameof(SpawnWeightMultiplier)].SetValue<float>(value); } }
        public float SpawnDelayMin { get { return this[nameof(SpawnDelayMin)].GetValue<float>(); } set { this[nameof(SpawnDelayMin)].SetValue<float>(value); } }
        public float SpawnDelayMax { get { return this[nameof(SpawnDelayMax)].GetValue<float>(); } set { this[nameof(SpawnDelayMax)].SetValue<float>(value); } }
        public SoundGunfire EncounterStartSound { get { return this[nameof(EncounterStartSound)].As<SoundGunfire>(); } set { this["EncounterStartSound"] = value; } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
    }
    public class EncounterManager : ActorComponent
    {
        public EncounterManager(nint addr) : base(addr) { }
        public Array<PlayerController> Players { get { return new Array<PlayerController>(this[nameof(Players)].Address); } }
        public Array<EncounterInstance> Encounters { get { return new Array<EncounterInstance>(this[nameof(Encounters)].Address); } }
        public Array<EncounterSpawn> SpawnQueue { get { return new Array<EncounterSpawn>(this[nameof(SpawnQueue)].Address); } }
        public Array<EncounterSpawn> ActiveSpawns { get { return new Array<EncounterSpawn>(this[nameof(ActiveSpawns)].Address); } }
        public void StopEncounter(int encounterid) { Invoke(nameof(StopEncounter), encounterid); }
        public void StopAllEncountersForOwner(Actor Owner, bool DestroyActiveSpawns) { Invoke(nameof(StopAllEncountersForOwner), Owner, DestroyActiveSpawns); }
        public void ResumeEncounter(int encounterid) { Invoke(nameof(ResumeEncounter), encounterid); }
        public void PauseEncounter(int encounterid) { Invoke(nameof(PauseEncounter), encounterid); }
        public void OnSpawnDestroyed(Actor DestroyedActor) { Invoke(nameof(OnSpawnDestroyed), DestroyedActor); }
        public void OnNotifyDead(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyDead), DamageInfo); }
        public void MulticastSpawnAudio(SoundGunfire SpawnAudio, Vector_NetQuantize Location) { Invoke(nameof(MulticastSpawnAudio), SpawnAudio, Location); }
        public bool IsFullyExplored() { return Invoke<bool>(nameof(IsFullyExplored)); }
        public bool IsComplete(int encounterid) { return Invoke<bool>(nameof(IsComplete), encounterid); }
        public int GetNumSpawnsForOwner(Actor Owner, bool IncludeQueuedSpawns) { return Invoke<int>(nameof(GetNumSpawnsForOwner), Owner, IncludeQueuedSpawns); }
        public int GetNumEncountersForOwner(Actor Owner, bool WithQueuedSpawnsOnly, bool MatchAggroGroup) { return Invoke<int>(nameof(GetNumEncountersForOwner), Owner, WithQueuedSpawnsOnly, MatchAggroGroup); }
        public int GetFrontTileID() { return Invoke<int>(nameof(GetFrontTileID)); }
        public int GetCurrentTileID() { return Invoke<int>(nameof(GetCurrentTileID)); }
        public int GetBehindTileID() { return Invoke<int>(nameof(GetBehindTileID)); }
        public EncounterInstance DoEncounter(SpawnTable SpawnTable, int Level, int Rating, Array<Object> Tags, Actor Target, int Flags) { return Invoke<EncounterInstance>(nameof(DoEncounter), SpawnTable, Level, Rating, Tags, Target, Flags); }
    }
    public class MusicDirector : ActorComponent
    {
        public MusicDirector(nint addr) : base(addr) { }
        public Object OnMusicIntensityChanged { get { return this[nameof(OnMusicIntensityChanged)]; } set { this[nameof(OnMusicIntensityChanged)] = value; } }
        public EMusicIntensity MusicIntensity { get { return (EMusicIntensity)this[nameof(MusicIntensity)].GetValue<int>(); } set { this[nameof(MusicIntensity)].SetValue<int>((int)value); } }
        public void OnRep_MusicIntensity() { Invoke(nameof(OnRep_MusicIntensity)); }
    }
    public class FloatUserSetting : UserSetting
    {
        public FloatUserSetting(nint addr) : base(addr) { }
        public float DefaultValue { get { return this[nameof(DefaultValue)].GetValue<float>(); } set { this[nameof(DefaultValue)].SetValue<float>(value); } }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
        public float Increment { get { return this[nameof(Increment)].GetValue<float>(); } set { this[nameof(Increment)].SetValue<float>(value); } }
        public bool ShowAsPercent { get { return this[nameof(ShowAsPercent)].Flag; } set { this[nameof(ShowAsPercent)].Flag = value; } }
        public int NumDecimals { get { return this[nameof(NumDecimals)].GetValue<int>(); } set { this[nameof(NumDecimals)].SetValue<int>(value); } }
        public void SetValue(float Value) { Invoke(nameof(SetValue), Value); }
        public float IncrementValue() { return Invoke<float>(nameof(IncrementValue)); }
        public float GetValue() { return Invoke<float>(nameof(GetValue)); }
        public float GetNormalizedValue() { return Invoke<float>(nameof(GetNormalizedValue)); }
        public float GetMinValue() { return Invoke<float>(nameof(GetMinValue)); }
        public float GetMaxValue() { return Invoke<float>(nameof(GetMaxValue)); }
        public float GetIncrement() { return Invoke<float>(nameof(GetIncrement)); }
        public float DecrementValue() { return Invoke<float>(nameof(DecrementValue)); }
    }
    public class AudioUserSetting : FloatUserSetting
    {
        public AudioUserSetting(nint addr) : base(addr) { }
        public SoundClass SoundClass { get { return this[nameof(SoundClass)].As<SoundClass>(); } set { this["SoundClass"] = value; } }
        public bool bAllowBoostedVolume { get { return this[nameof(bAllowBoostedVolume)].Flag; } set { this[nameof(bAllowBoostedVolume)].Flag = value; } }
        public void SetSoundClassMultiplier(float InMultiplier) { Invoke(nameof(SetSoundClassMultiplier), InMultiplier); }
        public float GetSoundClassMultiplier() { return Invoke<float>(nameof(GetSoundClassMultiplier)); }
    }
    public class VoiceInputDeviceSetting : EnumUserSetting
    {
        public VoiceInputDeviceSetting(nint addr) : base(addr) { }
    }
    public class BinaryUserSetting : UserSetting
    {
        public BinaryUserSetting(nint addr) : base(addr) { }
        public Object OffLabel { get { return this[nameof(OffLabel)]; } set { this[nameof(OffLabel)] = value; } }
        public Object OnLabel { get { return this[nameof(OnLabel)]; } set { this[nameof(OnLabel)] = value; } }
        public bool DefaultValue { get { return this[nameof(DefaultValue)].Flag; } set { this[nameof(DefaultValue)].Flag = value; } }
        public bool bInvertConsoleVariable { get { return this[nameof(bInvertConsoleVariable)].Flag; } set { this[nameof(bInvertConsoleVariable)].Flag = value; } }
        public void SetValue(bool Value) { Invoke(nameof(SetValue), Value); }
        public bool GetValue() { return Invoke<bool>(nameof(GetValue)); }
    }
    public class IntUserSetting : UserSetting
    {
        public IntUserSetting(nint addr) : base(addr) { }
        public int DefaultValue { get { return this[nameof(DefaultValue)].GetValue<int>(); } set { this[nameof(DefaultValue)].SetValue<int>(value); } }
        public void SetValue(int Value) { Invoke(nameof(SetValue), Value); }
        public int GetValue() { return Invoke<int>(nameof(GetValue)); }
    }
    public class ColorblindUserSetting : IntUserSetting
    {
        public ColorblindUserSetting(nint addr) : base(addr) { }
        public Array<EnumCVDUserSettingEntry> Entries { get { return new Array<EnumCVDUserSettingEntry>(this[nameof(Entries)].Address); } }
        public bool bWraps { get { return this[nameof(bWraps)].Flag; } set { this[nameof(bWraps)].Flag = value; } }
        public bool GetValueEnumCVD(EnumCVDUserSettingEntry OutEntry) { return Invoke<bool>(nameof(GetValueEnumCVD), OutEntry); }
        public int GetNumEntries() { return Invoke<int>(nameof(GetNumEntries)); }
        public int GetNextEntry(int CurrentValue, EnumCVDUserSettingEntry OutNext, bool bForwards) { return Invoke<int>(nameof(GetNextEntry), CurrentValue, OutNext, bForwards); }
        public bool GetEnumCVDEntryByIndex(int Index, EnumCVDUserSettingEntry OutEntry) { return Invoke<bool>(nameof(GetEnumCVDEntryByIndex), Index, OutEntry); }
    }
    public class ConsoleVariableListUserSetting : ListUserSetting
    {
        public ConsoleVariableListUserSetting(nint addr) : base(addr) { }
        public Array<CVarListUserSettingEntry> Entries { get { return new Array<CVarListUserSettingEntry>(this[nameof(Entries)].Address); } }
        public int DefaultValue { get { return this[nameof(DefaultValue)].GetValue<int>(); } set { this[nameof(DefaultValue)].SetValue<int>(value); } }
    }
    public class DisplayModeUserSetting : ListUserSetting
    {
        public DisplayModeUserSetting(nint addr) : base(addr) { }
    }
    public class ResolutionUserSetting : ListUserSetting
    {
        public ResolutionUserSetting(nint addr) : base(addr) { }
        public Array<IntPoint> AdditionalResolutions { get { return new Array<IntPoint>(this[nameof(AdditionalResolutions)].Address); } }
    }
    public class VerticalSyncUserSetting : BinaryUserSetting
    {
        public VerticalSyncUserSetting(nint addr) : base(addr) { }
    }
    public class FramerateUserSetting : ListUserSetting
    {
        public FramerateUserSetting(nint addr) : base(addr) { }
    }
    public class GameUserSettingsGunfire : GameUserSettings
    {
        public GameUserSettingsGunfire(nint addr) : base(addr) { }
        public Array<UserSetting> Settings { get { return new Array<UserSetting>(this[nameof(Settings)].Address); } }
        public Object OnSettingsBuilt { get { return this[nameof(OnSettingsBuilt)]; } set { this[nameof(OnSettingsBuilt)] = value; } }
        public void OnSetUserSettingInt(Object NameID, int Value) { Invoke(nameof(OnSetUserSettingInt), NameID, Value); }
        public void OnSetUserSettingFloat(Object NameID, int Value) { Invoke(nameof(OnSetUserSettingFloat), NameID, Value); }
        public bool NeedsHardwareBenchmark() { return Invoke<bool>(nameof(NeedsHardwareBenchmark)); }
        public Array<UserSetting> GetSettingsForCategory(Object Category) { return Invoke<Array<UserSetting>>(nameof(GetSettingsForCategory), Category); }
        public void GetInputConflicts(RebindableInputSetting Setting, GenericInput Key, Array<Object> Categories, Array<RebindableInputSetting> Conflicts) { Invoke(nameof(GetInputConflicts), Setting, Key, Categories, Conflicts); }
        public UserSetting FindUserSetting(Object NameID) { return Invoke<UserSetting>(nameof(FindUserSetting), NameID); }
        public bool AllowsInputRebindings() { return Invoke<bool>(nameof(AllowsInputRebindings)); }
    }
    public class RebindableInputSetting : UserSetting
    {
        public RebindableInputSetting(nint addr) : base(addr) { }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public InputAction InputAction { get { return this[nameof(InputAction)].As<InputAction>(); } set { this["InputAction"] = value; } }
        public Array<InputTrigger> Triggers { get { return new Array<InputTrigger>(this[nameof(Triggers)].Address); } }
        public Array<InputModifier> Modifiers { get { return new Array<InputModifier>(this[nameof(Modifiers)].Address); } }
        public bool bIsInputAction { get { return this[nameof(bIsInputAction)].Flag; } set { this[nameof(bIsInputAction)].Flag = value; } }
        public float AxisScale { get { return this[nameof(AxisScale)].GetValue<float>(); } set { this[nameof(AxisScale)].SetValue<float>(value); } }
        public GenericInput DefaultInput { get { return this[nameof(DefaultInput)].As<GenericInput>(); } set { this["DefaultInput"] = value; } }
        public byte ConflictGroup { get { return this[nameof(ConflictGroup)].GetValue<byte>(); } set { this[nameof(ConflictGroup)].SetValue<byte>(value); } }
        public Array<Object> IgnoreInputs { get { return new Array<Object>(this[nameof(IgnoreInputs)].Address); } }
        public void SetValue(GenericInput NewKey) { Invoke(nameof(SetValue), NewKey); }
        public bool HasConflictGroup(EInputConflictGroup InputGroup) { return Invoke<bool>(nameof(HasConflictGroup), InputGroup); }
        public GenericInput GetValue() { return Invoke<GenericInput>(nameof(GetValue)); }
    }
    public class InputAxisPropertiesSetting : FloatUserSetting
    {
        public InputAxisPropertiesSetting(nint addr) : base(addr) { }
        public Array<Key> AxisNames { get { return new Array<Key>(this[nameof(AxisNames)].Address); } }
    }
    public class ScalabilityUserSettingBase : ListUserSetting
    {
        public ScalabilityUserSettingBase(nint addr) : base(addr) { }
    }
    public class ScalabilityUserSetting : ScalabilityUserSettingBase
    {
        public ScalabilityUserSetting(nint addr) : base(addr) { }
    }
    public class ScalabilityGroupUserSetting : ScalabilityUserSettingBase
    {
        public ScalabilityGroupUserSetting(nint addr) : base(addr) { }
        public EScalabilityGroup ScalabilityGroup { get { return (EScalabilityGroup)this[nameof(ScalabilityGroup)].GetValue<int>(); } set { this[nameof(ScalabilityGroup)].SetValue<int>((int)value); } }
    }
    public class ToggleUserSetting : UserSetting
    {
        public ToggleUserSetting(nint addr) : base(addr) { }
        public Object OffLabel { get { return this[nameof(OffLabel)]; } set { this[nameof(OffLabel)] = value; } }
        public int OffValue { get { return this[nameof(OffValue)].GetValue<int>(); } set { this[nameof(OffValue)].SetValue<int>(value); } }
        public Object OnLabel { get { return this[nameof(OnLabel)]; } set { this[nameof(OnLabel)] = value; } }
        public int OnValue { get { return this[nameof(OnValue)].GetValue<int>(); } set { this[nameof(OnValue)].SetValue<int>(value); } }
        public bool DefaultValue { get { return this[nameof(DefaultValue)].Flag; } set { this[nameof(DefaultValue)].Flag = value; } }
        public void SetValue(bool Value) { Invoke(nameof(SetValue), Value); }
        public bool GetValue() { return Invoke<bool>(nameof(GetValue)); }
    }
    public class UpscalerUserSetting : ListUserSetting
    {
        public UpscalerUserSetting(nint addr) : base(addr) { }
    }
    public class UpscalerQualityUserSetting : ListUserSetting
    {
        public UpscalerQualityUserSetting(nint addr) : base(addr) { }
    }
    public class FrameGenerationUserSetting : BinaryUserSetting
    {
        public FrameGenerationUserSetting(nint addr) : base(addr) { }
    }
    public class GameUserSettingsList : Object
    {
        public GameUserSettingsList(nint addr) : base(addr) { }
        public Array<UserSetting_Base> Settings { get { return new Array<UserSetting_Base>(this[nameof(Settings)].Address); } }
    }
    public class UserSettingCategory : UserSetting_Base
    {
        public UserSettingCategory(nint addr) : base(addr) { }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Array<UserSetting> Children { get { return new Array<UserSetting>(this[nameof(Children)].Address); } }
    }
    public class AimableInterface : Interface
    {
        public AimableInterface(nint addr) : base(addr) { }
        public bool ShowReticule() { return Invoke<bool>(nameof(ShowReticule)); }
        public bool ShowDisabledReticule() { return Invoke<bool>(nameof(ShowDisabledReticule)); }
        public bool ShouldShowProjectileVisualization() { return Invoke<bool>(nameof(ShouldShowProjectileVisualization)); }
        public void OnStopAiming() { Invoke(nameof(OnStopAiming)); }
        public void OnStartAiming() { Invoke(nameof(OnStartAiming)); }
        public bool ModifyReticuleColor(Reticule DrawReticule, ReticulePiece DrawPiece, Color InOutColor) { return Invoke<bool>(nameof(ModifyReticuleColor), DrawReticule, DrawPiece, InOutColor); }
        public void ModifyRange(float Range) { Invoke(nameof(ModifyRange), Range); }
        public void ModifyInputDragRanges(float OutOptimalRange, float OutTotalRange) { Invoke(nameof(ModifyInputDragRanges), OutOptimalRange, OutTotalRange); }
        public Actor ModifyAimTarget(Actor HitActor) { return Invoke<Actor>(nameof(ModifyAimTarget), HitActor); }
        public void ModifyAimAdjustRanges(float OutOptimalRange, float OutTotalRange) { Invoke(nameof(ModifyAimAdjustRanges), OutOptimalRange, OutTotalRange); }
        public Reticule GetCurrentReticule() { return Invoke<Reticule>(nameof(GetCurrentReticule)); }
        public bool CanStopAiming() { return Invoke<bool>(nameof(CanStopAiming)); }
        public bool CanAim() { return Invoke<bool>(nameof(CanAim)); }
    }
    public class AimableUserInterface : Interface
    {
        public AimableUserInterface(nint addr) : base(addr) { }
        public void ModifyReticule(Actor Aimable, bool IsAimableDisabled, bool ShowDefaultReticule, bool ShowDisabledColor) { Invoke(nameof(ModifyReticule), Aimable, IsAimableDisabled, ShowDefaultReticule, ShowDisabledColor); }
        public Actor ModifyAimable(Actor Aimable) { return Invoke<Actor>(nameof(ModifyAimable), Aimable); }
    }
    public class AimingUtil : Object
    {
        public AimingUtil(nint addr) : base(addr) { }
        public bool ShouldShowProjectileVisualization(Actor Aimable) { return Invoke<bool>(nameof(ShouldShowProjectileVisualization), Aimable); }
        public float GetRange(Actor Aimable) { return Invoke<float>(nameof(GetRange), Aimable); }
        public Actor GetCurrentAimable(Actor Owner, bool bInHandOnly) { return Invoke<Actor>(nameof(GetCurrentAimable), Owner, bInHandOnly); }
        public AimingParameters GetAimingParameters(Actor Aimable) { return Invoke<AimingParameters>(nameof(GetAimingParameters), Aimable); }
        public AimingComponent GetAimingComponent(Actor Aimable) { return Invoke<AimingComponent>(nameof(GetAimingComponent), Aimable); }
        public bool CanStopAiming(Actor Aimable) { return Invoke<bool>(nameof(CanStopAiming), Aimable); }
        public bool CanAim(Actor Aimable) { return Invoke<bool>(nameof(CanAim), Aimable); }
    }
    public class ChargeableItem : Equipment
    {
        public ChargeableItem(nint addr) : base(addr) { }
        public ConditionList Conditions { get { return this[nameof(Conditions)].As<ConditionList>(); } set { this["Conditions"] = value; } }
        public EChargeableActivateType ActivationType { get { return (EChargeableActivateType)this[nameof(ActivationType)].GetValue<int>(); } set { this[nameof(ActivationType)].SetValue<int>((int)value); } }
        public bool ConsumeInput { get { return this[nameof(ConsumeInput)].Flag; } set { this[nameof(ConsumeInput)].Flag = value; } }
        public float HoldTime { get { return this[nameof(HoldTime)].GetValue<float>(); } set { this[nameof(HoldTime)].SetValue<float>(value); } }
        public float ChargeTimeInSeconds { get { return this[nameof(ChargeTimeInSeconds)].GetValue<float>(); } set { this[nameof(ChargeTimeInSeconds)].SetValue<float>(value); } }
        public Object ChargeState { get { return this[nameof(ChargeState)]; } set { this[nameof(ChargeState)] = value; } }
        public Object ChargeLabel { get { return this[nameof(ChargeLabel)]; } set { this[nameof(ChargeLabel)] = value; } }
        public EChargeState State { get { return (EChargeState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float Charge { get { return this[nameof(Charge)].GetValue<float>(); } set { this[nameof(Charge)].SetValue<float>(value); } }
        public TimerHandle HoldTimerHandle { get { return this[nameof(HoldTimerHandle)].As<TimerHandle>(); } set { this["HoldTimerHandle"] = value; } }
        public bool ValidateUse() { return Invoke<bool>(nameof(ValidateUse)); }
        public void ServerKeyReleased() { Invoke(nameof(ServerKeyReleased)); }
        public void ServerKeyPressed() { Invoke(nameof(ServerKeyPressed)); }
        public void RemoveItem() { Invoke(nameof(RemoveItem)); }
        public void OnRep_ChargeState() { Invoke(nameof(OnRep_ChargeState)); }
        public void OnChargeSuccess() { Invoke(nameof(OnChargeSuccess)); }
        public void OnChargeFail() { Invoke(nameof(OnChargeFail)); }
        public void OnChargeComplete() { Invoke(nameof(OnChargeComplete)); }
        public void OnChargeBegin() { Invoke(nameof(OnChargeBegin)); }
        public bool IsBusy() { return Invoke<bool>(nameof(IsBusy)); }
    }
    public class EquipmentSkinInstanceData : ItemInstanceData
    {
        public EquipmentSkinInstanceData(nint addr) : base(addr) { }
        public bool Equipped { get { return this[nameof(Equipped)].Flag; } set { this[nameof(Equipped)].Flag = value; } }
    }
    public class EquipmentSkin : Item
    {
        public EquipmentSkin(nint addr) : base(addr) { }
        public Object EquipmentBP { get { return this[nameof(EquipmentBP)]; } set { this[nameof(EquipmentBP)] = value; } }
        public Object VisualID { get { return this[nameof(VisualID)]; } set { this[nameof(VisualID)] = value; } }
        public bool IsSkinEquipped(InventoryComponent Inventory, int SkinID) { return Invoke<bool>(nameof(IsSkinEquipped), Inventory, SkinID); }
        public Array<int> GetSkinsForItem(InventoryComponent Inventory, int ItemId) { return Invoke<Array<int>>(nameof(GetSkinsForItem), Inventory, ItemId); }
        public EquipmentSkin GetSkinForBP(InventoryComponent Inventory, Object ItemBP) { return Invoke<EquipmentSkin>(nameof(GetSkinForBP), Inventory, ItemBP); }
        public void EquipSkin(InventoryComponent Inventory, int ItemId, int SkinID) { Invoke(nameof(EquipSkin), Inventory, ItemId, SkinID); }
    }
    public class EquipmentModInstanceData : ItemInstanceData
    {
        public EquipmentModInstanceData(nint addr) : base(addr) { }
        public int EquippedModItemID { get { return this[nameof(EquippedModItemID)].GetValue<int>(); } set { this[nameof(EquippedModItemID)].SetValue<int>(value); } }
        public byte EquippedModSlotID { get { return this[nameof(EquippedModSlotID)].GetValue<byte>(); } set { this[nameof(EquippedModSlotID)].SetValue<byte>(value); } }
    }
    public class ItemGenerator : Object
    {
        public ItemGenerator(nint addr) : base(addr) { }
        public int Chance { get { return this[nameof(Chance)].GetValue<int>(); } set { this[nameof(Chance)].SetValue<int>(value); } }
        public int LevelMin { get { return this[nameof(LevelMin)].GetValue<int>(); } set { this[nameof(LevelMin)].SetValue<int>(value); } }
        public int LevelMax { get { return this[nameof(LevelMax)].GetValue<int>(); } set { this[nameof(LevelMax)].SetValue<int>(value); } }
        public void GenerateItems(ItemGenRequest Request, Array<ItemGenResult> Results) { Invoke(nameof(GenerateItems), Request, Results); }
    }
    public class ItemGeneratorItem : ItemGenerator
    {
        public ItemGeneratorItem(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public byte QuantityMin { get { return this[nameof(QuantityMin)].GetValue<byte>(); } set { this[nameof(QuantityMin)].SetValue<byte>(value); } }
        public byte QuantityMax { get { return this[nameof(QuantityMax)].GetValue<byte>(); } set { this[nameof(QuantityMax)].SetValue<byte>(value); } }
    }
    public class ItemGeneratorLink : ItemGenerator
    {
        public ItemGeneratorLink(nint addr) : base(addr) { }
        public ItemGeneratorTable Table { get { return this[nameof(Table)].As<ItemGeneratorTable>(); } set { this["Table"] = value; } }
    }
    public class ItemGeneratorTable : ItemGenerator
    {
        public ItemGeneratorTable(nint addr) : base(addr) { }
        public EItemGenTableType TableType { get { return (EItemGenTableType)this[nameof(TableType)].GetValue<int>(); } set { this[nameof(TableType)].SetValue<int>((int)value); } }
        public Array<ItemGenerator> Entries { get { return new Array<ItemGenerator>(this[nameof(Entries)].Address); } }
    }
    public class ItemManager : GameInstanceSubsystem
    {
        public ItemManager(nint addr) : base(addr) { }
        public Array<Item> Items { get { return new Array<Item>(this[nameof(Items)].Address); } }
        public Array<Object> ItemTypes { get { return new Array<Object>(this[nameof(ItemTypes)].Address); } }
        public void GetItemsInRangeByType(Vector Position, float Radius, Object Type, Array<Item> OutItems) { Invoke(nameof(GetItemsInRangeByType), Position, Radius, Type, OutItems); }
        public ItemManager GetInstance(Object WorldContextObject) { return Invoke<ItemManager>(nameof(GetInstance), WorldContextObject); }
    }
    public class ItemUtil : Object
    {
        public ItemUtil(nint addr) : base(addr) { }
        public bool ValidateDropPosition(Actor Source, Vector Position, Vector OutPosition, bool SnapToGround, bool TestStaticCollision) { return Invoke<bool>(nameof(ValidateDropPosition), Source, Position, OutPosition, SnapToGround, TestStaticCollision); }
        public Item SpawnItem(Actor Source, Object ItemBP, Transform SpawnTransform, byte Quantity, bool Transient, bool DoDrop) { return Invoke<Item>(nameof(SpawnItem), Source, ItemBP, SpawnTransform, Quantity, Transient, DoDrop); }
        public void RedropNearbyItemsSphere(Object WorldContextObject, Vector SourcePosition, float Radius, float TraceStartHeight, float TraceDistance) { Invoke(nameof(RedropNearbyItemsSphere), WorldContextObject, SourcePosition, Radius, TraceStartHeight, TraceDistance); }
        public void RedropNearbyItemsBox(Object WorldContextObject, Vector SourcePosition, Vector Extents, float TraceStartHeight, float TraceDistance) { Invoke(nameof(RedropNearbyItemsBox), WorldContextObject, SourcePosition, Extents, TraceStartHeight, TraceDistance); }
        public void RedropItem(Item Item, float TraceStartHeight, float TraceDistance) { Invoke(nameof(RedropItem), Item, TraceStartHeight, TraceDistance); }
        public void PreSpawnDroppedItem(Item Item, byte Quantity) { Invoke(nameof(PreSpawnDroppedItem), Item, Quantity); }
        public void PostSpawnDroppedItem(Item Item) { Invoke(nameof(PostSpawnDroppedItem), Item); }
        public InspectInfo GetInspectInfoFromInventory(Actor InspectActor, InventoryComponent Inventory, int ItemId, int LevelOverride) { return Invoke<InspectInfo>(nameof(GetInspectInfoFromInventory), InspectActor, Inventory, ItemId, LevelOverride); }
        public InspectInfo GetInspectInfo(Actor InspectActor, Object ItemBP, int Level) { return Invoke<InspectInfo>(nameof(GetInspectInfo), InspectActor, ItemBP, Level); }
        public void DropLootAtLocation(Actor Source, Actor Cause, SpawnTable SpawnTable, Vector Location, Array<Object> Tags, int Rating, bool bAsync, bool bForce, bool Transient) { Invoke(nameof(DropLootAtLocation), Source, Cause, SpawnTable, Location, Tags, Rating, bAsync, bForce, Transient); }
        public void DropLoot(Actor Source, Actor Cause, SpawnTable SpawnTable, Array<Object> Tags, int Rating, bool bAsync, bool bForce, bool Transient) { Invoke(nameof(DropLoot), Source, Cause, SpawnTable, Tags, Rating, bAsync, bForce, Transient); }
        public bool DropItem(Actor Source, Object ItemBP, byte Quantity, bool Force, bool Transient) { return Invoke<bool>(nameof(DropItem), Source, ItemBP, Quantity, Force, Transient); }
    }
    public class RangedWeaponInstanceData : EquipmentInstanceData
    {
        public RangedWeaponInstanceData(nint addr) : base(addr) { }
        public int Ammo { get { return this[nameof(Ammo)].GetValue<int>(); } set { this[nameof(Ammo)].SetValue<int>(value); } }
        public int AmmoInClip { get { return this[nameof(AmmoInClip)].GetValue<int>(); } set { this[nameof(AmmoInClip)].SetValue<int>(value); } }
    }
    public class ReloadCondition : Condition
    {
        public ReloadCondition(nint addr) : base(addr) { }
    }
    public class RangedWeaponProfile : Object
    {
        public RangedWeaponProfile(nint addr) : base(addr) { }
        public float FiringSpreadIncrement { get { return this[nameof(FiringSpreadIncrement)].GetValue<float>(); } set { this[nameof(FiringSpreadIncrement)].SetValue<float>(value); } }
        public float InitialFiringSpread { get { return this[nameof(InitialFiringSpread)].GetValue<float>(); } set { this[nameof(InitialFiringSpread)].SetValue<float>(value); } }
        public CurveFloat IncrementCurve { get { return this[nameof(IncrementCurve)].As<CurveFloat>(); } set { this["IncrementCurve"] = value; } }
        public float IncrementRecoveryDelay { get { return this[nameof(IncrementRecoveryDelay)].GetValue<float>(); } set { this[nameof(IncrementRecoveryDelay)].SetValue<float>(value); } }
        public float IncrementRecoveryTime { get { return this[nameof(IncrementRecoveryTime)].GetValue<float>(); } set { this[nameof(IncrementRecoveryTime)].SetValue<float>(value); } }
        public float MoveRefIdleAdjustTime { get { return this[nameof(MoveRefIdleAdjustTime)].GetValue<float>(); } set { this[nameof(MoveRefIdleAdjustTime)].SetValue<float>(value); } }
        public float MoveRefMovingAdjustTime { get { return this[nameof(MoveRefMovingAdjustTime)].GetValue<float>(); } set { this[nameof(MoveRefMovingAdjustTime)].SetValue<float>(value); } }
        public bool bSpreadDecayFromWindup { get { return this[nameof(bSpreadDecayFromWindup)].Flag; } set { this[nameof(bSpreadDecayFromWindup)].Flag = value; } }
        public float FiringSpreadDecay { get { return this[nameof(FiringSpreadDecay)].GetValue<float>(); } set { this[nameof(FiringSpreadDecay)].SetValue<float>(value); } }
        public float FiringSpreadDecayDelay { get { return this[nameof(FiringSpreadDecayDelay)].GetValue<float>(); } set { this[nameof(FiringSpreadDecayDelay)].SetValue<float>(value); } }
        public bool bApplyDecayWhileFiring { get { return this[nameof(bApplyDecayWhileFiring)].Flag; } set { this[nameof(bApplyDecayWhileFiring)].Flag = value; } }
        public bool bUseInitialFiringSpreadDecay { get { return this[nameof(bUseInitialFiringSpreadDecay)].Flag; } set { this[nameof(bUseInitialFiringSpreadDecay)].Flag = value; } }
        public float InitialFiringSpreadDecay { get { return this[nameof(InitialFiringSpreadDecay)].GetValue<float>(); } set { this[nameof(InitialFiringSpreadDecay)].SetValue<float>(value); } }
        public bool bUseInitialAimSnapFiringSpreadDecay { get { return this[nameof(bUseInitialAimSnapFiringSpreadDecay)].Flag; } set { this[nameof(bUseInitialAimSnapFiringSpreadDecay)].Flag = value; } }
        public float InitialAimSnapFiringSpreadDecay { get { return this[nameof(InitialAimSnapFiringSpreadDecay)].GetValue<float>(); } set { this[nameof(InitialAimSnapFiringSpreadDecay)].SetValue<float>(value); } }
        public float FiringSpreadScopeDecay { get { return this[nameof(FiringSpreadScopeDecay)].GetValue<float>(); } set { this[nameof(FiringSpreadScopeDecay)].SetValue<float>(value); } }
        public float FiringSpreadScopeDecayDelay { get { return this[nameof(FiringSpreadScopeDecayDelay)].GetValue<float>(); } set { this[nameof(FiringSpreadScopeDecayDelay)].SetValue<float>(value); } }
        public bool bUseInitialFiringSpreadScopeDecay { get { return this[nameof(bUseInitialFiringSpreadScopeDecay)].Flag; } set { this[nameof(bUseInitialFiringSpreadScopeDecay)].Flag = value; } }
        public float InitialFiringSpreadScopeDecay { get { return this[nameof(InitialFiringSpreadScopeDecay)].GetValue<float>(); } set { this[nameof(InitialFiringSpreadScopeDecay)].SetValue<float>(value); } }
        public bool bUseInitialAimSnapFiringSpreadScopeDecay { get { return this[nameof(bUseInitialAimSnapFiringSpreadScopeDecay)].Flag; } set { this[nameof(bUseInitialAimSnapFiringSpreadScopeDecay)].Flag = value; } }
        public float InitialAimSnapFiringSpreadScopeDecay { get { return this[nameof(InitialAimSnapFiringSpreadScopeDecay)].GetValue<float>(); } set { this[nameof(InitialAimSnapFiringSpreadScopeDecay)].SetValue<float>(value); } }
        public float FiringSpreadMin { get { return this[nameof(FiringSpreadMin)].GetValue<float>(); } set { this[nameof(FiringSpreadMin)].SetValue<float>(value); } }
        public float FiringSpreadMax { get { return this[nameof(FiringSpreadMax)].GetValue<float>(); } set { this[nameof(FiringSpreadMax)].SetValue<float>(value); } }
        public float FiringSpreadMoveRef { get { return this[nameof(FiringSpreadMoveRef)].GetValue<float>(); } set { this[nameof(FiringSpreadMoveRef)].SetValue<float>(value); } }
        public float FiringSpreadMoveMin { get { return this[nameof(FiringSpreadMoveMin)].GetValue<float>(); } set { this[nameof(FiringSpreadMoveMin)].SetValue<float>(value); } }
        public float FiringSpreadMoveMax { get { return this[nameof(FiringSpreadMoveMax)].GetValue<float>(); } set { this[nameof(FiringSpreadMoveMax)].SetValue<float>(value); } }
        public float FiringSpreadAimMin { get { return this[nameof(FiringSpreadAimMin)].GetValue<float>(); } set { this[nameof(FiringSpreadAimMin)].SetValue<float>(value); } }
        public float FiringSpreadAimMax { get { return this[nameof(FiringSpreadAimMax)].GetValue<float>(); } set { this[nameof(FiringSpreadAimMax)].SetValue<float>(value); } }
        public float FiringSpreadAimMoveRef { get { return this[nameof(FiringSpreadAimMoveRef)].GetValue<float>(); } set { this[nameof(FiringSpreadAimMoveRef)].SetValue<float>(value); } }
        public float FiringSpreadAimMoveMin { get { return this[nameof(FiringSpreadAimMoveMin)].GetValue<float>(); } set { this[nameof(FiringSpreadAimMoveMin)].SetValue<float>(value); } }
        public float FiringSpreadAimMoveMax { get { return this[nameof(FiringSpreadAimMoveMax)].GetValue<float>(); } set { this[nameof(FiringSpreadAimMoveMax)].SetValue<float>(value); } }
        public float FiringSpreadAimScopeMin { get { return this[nameof(FiringSpreadAimScopeMin)].GetValue<float>(); } set { this[nameof(FiringSpreadAimScopeMin)].SetValue<float>(value); } }
        public float FiringSpreadAimScopeMax { get { return this[nameof(FiringSpreadAimScopeMax)].GetValue<float>(); } set { this[nameof(FiringSpreadAimScopeMax)].SetValue<float>(value); } }
        public float RecoilHorizontalMin { get { return this[nameof(RecoilHorizontalMin)].GetValue<float>(); } set { this[nameof(RecoilHorizontalMin)].SetValue<float>(value); } }
        public float RecoilHorizontalMax { get { return this[nameof(RecoilHorizontalMax)].GetValue<float>(); } set { this[nameof(RecoilHorizontalMax)].SetValue<float>(value); } }
        public float RecoilVertical { get { return this[nameof(RecoilVertical)].GetValue<float>(); } set { this[nameof(RecoilVertical)].SetValue<float>(value); } }
        public float RecoilSpeed { get { return this[nameof(RecoilSpeed)].GetValue<float>(); } set { this[nameof(RecoilSpeed)].SetValue<float>(value); } }
        public float RecoilRecover { get { return this[nameof(RecoilRecover)].GetValue<float>(); } set { this[nameof(RecoilRecover)].SetValue<float>(value); } }
        public float RecoilRecoverTime { get { return this[nameof(RecoilRecoverTime)].GetValue<float>(); } set { this[nameof(RecoilRecoverTime)].SetValue<float>(value); } }
        public float RecoilHorizontalScopeScale { get { return this[nameof(RecoilHorizontalScopeScale)].GetValue<float>(); } set { this[nameof(RecoilHorizontalScopeScale)].SetValue<float>(value); } }
        public float RecoilVerticalScopeScale { get { return this[nameof(RecoilVerticalScopeScale)].GetValue<float>(); } set { this[nameof(RecoilVerticalScopeScale)].SetValue<float>(value); } }
        public float RecoilSpeedScopeScale { get { return this[nameof(RecoilSpeedScopeScale)].GetValue<float>(); } set { this[nameof(RecoilSpeedScopeScale)].SetValue<float>(value); } }
        public float InitialSwayDelay { get { return this[nameof(InitialSwayDelay)].GetValue<float>(); } set { this[nameof(InitialSwayDelay)].SetValue<float>(value); } }
        public float InitialSwayBlendInTime { get { return this[nameof(InitialSwayBlendInTime)].GetValue<float>(); } set { this[nameof(InitialSwayBlendInTime)].SetValue<float>(value); } }
        public float SwayScalar { get { return this[nameof(SwayScalar)].GetValue<float>(); } set { this[nameof(SwayScalar)].SetValue<float>(value); } }
        public float SwayScalarAim { get { return this[nameof(SwayScalarAim)].GetValue<float>(); } set { this[nameof(SwayScalarAim)].SetValue<float>(value); } }
        public float SwayScalarScope { get { return this[nameof(SwayScalarScope)].GetValue<float>(); } set { this[nameof(SwayScalarScope)].SetValue<float>(value); } }
        public float WindupTime { get { return this[nameof(WindupTime)].GetValue<float>(); } set { this[nameof(WindupTime)].SetValue<float>(value); } }
        public float WindupOverdraw { get { return this[nameof(WindupOverdraw)].GetValue<float>(); } set { this[nameof(WindupOverdraw)].SetValue<float>(value); } }
        public bool WindupFullAutofire { get { return this[nameof(WindupFullAutofire)].Flag; } set { this[nameof(WindupFullAutofire)].Flag = value; } }
        public bool AllowFireDuringWindup { get { return this[nameof(AllowFireDuringWindup)].Flag; } set { this[nameof(AllowFireDuringWindup)].Flag = value; } }
        public bool CancelFireIfInputReleased { get { return this[nameof(CancelFireIfInputReleased)].Flag; } set { this[nameof(CancelFireIfInputReleased)].Flag = value; } }
        public float AimAdjustMin { get { return this[nameof(AimAdjustMin)].GetValue<float>(); } set { this[nameof(AimAdjustMin)].SetValue<float>(value); } }
        public float AimAdjustMax { get { return this[nameof(AimAdjustMax)].GetValue<float>(); } set { this[nameof(AimAdjustMax)].SetValue<float>(value); } }
        public float AimAdjustScopeMin { get { return this[nameof(AimAdjustScopeMin)].GetValue<float>(); } set { this[nameof(AimAdjustScopeMin)].SetValue<float>(value); } }
        public float AimAdjustScopeMax { get { return this[nameof(AimAdjustScopeMax)].GetValue<float>(); } set { this[nameof(AimAdjustScopeMax)].SetValue<float>(value); } }
        public float AimAdjustDistance { get { return this[nameof(AimAdjustDistance)].GetValue<float>(); } set { this[nameof(AimAdjustDistance)].SetValue<float>(value); } }
        public float AimAdjustFalloff { get { return this[nameof(AimAdjustFalloff)].GetValue<float>(); } set { this[nameof(AimAdjustFalloff)].SetValue<float>(value); } }
        public float AimAdjustScopeDistance { get { return this[nameof(AimAdjustScopeDistance)].GetValue<float>(); } set { this[nameof(AimAdjustScopeDistance)].SetValue<float>(value); } }
        public float AimAdjustScopeFalloff { get { return this[nameof(AimAdjustScopeFalloff)].GetValue<float>(); } set { this[nameof(AimAdjustScopeFalloff)].SetValue<float>(value); } }
        public float InputDragMin { get { return this[nameof(InputDragMin)].GetValue<float>(); } set { this[nameof(InputDragMin)].SetValue<float>(value); } }
        public float InputDragMax { get { return this[nameof(InputDragMax)].GetValue<float>(); } set { this[nameof(InputDragMax)].SetValue<float>(value); } }
        public float InputDragDistance { get { return this[nameof(InputDragDistance)].GetValue<float>(); } set { this[nameof(InputDragDistance)].SetValue<float>(value); } }
        public float InputDragFalloff { get { return this[nameof(InputDragFalloff)].GetValue<float>(); } set { this[nameof(InputDragFalloff)].SetValue<float>(value); } }
        public float InputDragScopeDistance { get { return this[nameof(InputDragScopeDistance)].GetValue<float>(); } set { this[nameof(InputDragScopeDistance)].SetValue<float>(value); } }
        public float InputDragScopeFalloff { get { return this[nameof(InputDragScopeFalloff)].GetValue<float>(); } set { this[nameof(InputDragScopeFalloff)].SetValue<float>(value); } }
        public float SoundRadius { get { return this[nameof(SoundRadius)].GetValue<float>(); } set { this[nameof(SoundRadius)].SetValue<float>(value); } }
        public float WhizBySoundRadius { get { return this[nameof(WhizBySoundRadius)].GetValue<float>(); } set { this[nameof(WhizBySoundRadius)].SetValue<float>(value); } }
        public bool bForceCameraScopeBlendInOutTime { get { return this[nameof(bForceCameraScopeBlendInOutTime)].Flag; } set { this[nameof(bForceCameraScopeBlendInOutTime)].Flag = value; } }
        public float CameraScopeBlendInOutTime { get { return this[nameof(CameraScopeBlendInOutTime)].GetValue<float>(); } set { this[nameof(CameraScopeBlendInOutTime)].SetValue<float>(value); } }
        public float ScopedCameraAimSpeedScalar { get { return this[nameof(ScopedCameraAimSpeedScalar)].GetValue<float>(); } set { this[nameof(ScopedCameraAimSpeedScalar)].SetValue<float>(value); } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
        public float CameraShakeScale { get { return this[nameof(CameraShakeScale)].GetValue<float>(); } set { this[nameof(CameraShakeScale)].SetValue<float>(value); } }
        public float CameraShakeAimScale { get { return this[nameof(CameraShakeAimScale)].GetValue<float>(); } set { this[nameof(CameraShakeAimScale)].SetValue<float>(value); } }
        public float CameraShakeScopeScale { get { return this[nameof(CameraShakeScopeScale)].GetValue<float>(); } set { this[nameof(CameraShakeScopeScale)].SetValue<float>(value); } }
        public float AIShootTime { get { return this[nameof(AIShootTime)].GetValue<float>(); } set { this[nameof(AIShootTime)].SetValue<float>(value); } }
        public float AISustainedFireTime { get { return this[nameof(AISustainedFireTime)].GetValue<float>(); } set { this[nameof(AISustainedFireTime)].SetValue<float>(value); } }
        public byte AIBurstCountMin { get { return this[nameof(AIBurstCountMin)].GetValue<byte>(); } set { this[nameof(AIBurstCountMin)].SetValue<byte>(value); } }
        public byte AIBurstCountMax { get { return this[nameof(AIBurstCountMax)].GetValue<byte>(); } set { this[nameof(AIBurstCountMax)].SetValue<byte>(value); } }
        public float AIAimSpreadIncrement { get { return this[nameof(AIAimSpreadIncrement)].GetValue<float>(); } set { this[nameof(AIAimSpreadIncrement)].SetValue<float>(value); } }
        public float AIAimSpreadDecay { get { return this[nameof(AIAimSpreadDecay)].GetValue<float>(); } set { this[nameof(AIAimSpreadDecay)].SetValue<float>(value); } }
        public float AIAimSpreadMin { get { return this[nameof(AIAimSpreadMin)].GetValue<float>(); } set { this[nameof(AIAimSpreadMin)].SetValue<float>(value); } }
        public float AIAimSpreadMax { get { return this[nameof(AIAimSpreadMax)].GetValue<float>(); } set { this[nameof(AIAimSpreadMax)].SetValue<float>(value); } }
        public float AIFiringSpreadScalar { get { return this[nameof(AIFiringSpreadScalar)].GetValue<float>(); } set { this[nameof(AIFiringSpreadScalar)].SetValue<float>(value); } }
        public float AIDamageScalar { get { return this[nameof(AIDamageScalar)].GetValue<float>(); } set { this[nameof(AIDamageScalar)].SetValue<float>(value); } }
        public float AIOptimalRange { get { return this[nameof(AIOptimalRange)].GetValue<float>(); } set { this[nameof(AIOptimalRange)].SetValue<float>(value); } }
        public float AIReadyTime { get { return this[nameof(AIReadyTime)].GetValue<float>(); } set { this[nameof(AIReadyTime)].SetValue<float>(value); } }
        public float AIReadyLingerTime { get { return this[nameof(AIReadyLingerTime)].GetValue<float>(); } set { this[nameof(AIReadyLingerTime)].SetValue<float>(value); } }
        public uint AIAttackPressure { get { return this[nameof(AIAttackPressure)].GetValue<uint>(); } set { this[nameof(AIAttackPressure)].SetValue<uint>(value); } }
    }
    public class ReticulePiece : Object
    {
        public ReticulePiece(nint addr) : base(addr) { }
        public EReticuleAlignment Alignment { get { return (EReticuleAlignment)this[nameof(Alignment)].GetValue<int>(); } set { this[nameof(Alignment)].SetValue<int>((int)value); } }
        public float RadialOffset { get { return this[nameof(RadialOffset)].GetValue<float>(); } set { this[nameof(RadialOffset)].SetValue<float>(value); } }
        public Vector2D ScreenOffset { get { return this[nameof(ScreenOffset)].As<Vector2D>(); } set { this["ScreenOffset"] = value; } }
        public float AxisAngle { get { return this[nameof(AxisAngle)].GetValue<float>(); } set { this[nameof(AxisAngle)].SetValue<float>(value); } }
        public Object AxisAngleOffsetParam { get { return this[nameof(AxisAngleOffsetParam)]; } set { this[nameof(AxisAngleOffsetParam)] = value; } }
        public float PositionScalar { get { return this[nameof(PositionScalar)].GetValue<float>(); } set { this[nameof(PositionScalar)].SetValue<float>(value); } }
        public TargetingColorParams TargetingColors { get { return this[nameof(TargetingColors)].As<TargetingColorParams>(); } set { this["TargetingColors"] = value; } }
        public float DrawScale { get { return this[nameof(DrawScale)].GetValue<float>(); } set { this[nameof(DrawScale)].SetValue<float>(value); } }
        public float FadeInTime { get { return this[nameof(FadeInTime)].GetValue<float>(); } set { this[nameof(FadeInTime)].SetValue<float>(value); } }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
        public bool bForceFadeOutWhileDisabled { get { return this[nameof(bForceFadeOutWhileDisabled)].Flag; } set { this[nameof(bForceFadeOutWhileDisabled)].Flag = value; } }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public EReticulePieceDisableMode DisableMode { get { return (EReticulePieceDisableMode)this[nameof(DisableMode)].GetValue<int>(); } set { this[nameof(DisableMode)].SetValue<int>((int)value); } }
        public bool bInvertConditions { get { return this[nameof(bInvertConditions)].Flag; } set { this[nameof(bInvertConditions)].Flag = value; } }
        public bool bLimitToSpreadThreshold { get { return this[nameof(bLimitToSpreadThreshold)].Flag; } set { this[nameof(bLimitToSpreadThreshold)].Flag = value; } }
        public float SpreadThreshold { get { return this[nameof(SpreadThreshold)].GetValue<float>(); } set { this[nameof(SpreadThreshold)].SetValue<float>(value); } }
        public bool bLimitToMaxRelativeRange { get { return this[nameof(bLimitToMaxRelativeRange)].Flag; } set { this[nameof(bLimitToMaxRelativeRange)].Flag = value; } }
        public float MaxRelativeRange { get { return this[nameof(MaxRelativeRange)].GetValue<float>(); } set { this[nameof(MaxRelativeRange)].SetValue<float>(value); } }
        public bool bLimitToCriticalRange { get { return this[nameof(bLimitToCriticalRange)].Flag; } set { this[nameof(bLimitToCriticalRange)].Flag = value; } }
        public EYesNo ShowWhileAiming { get { return (EYesNo)this[nameof(ShowWhileAiming)].GetValue<int>(); } set { this[nameof(ShowWhileAiming)].SetValue<int>((int)value); } }
        public Object CustomCondition { get { return this[nameof(CustomCondition)]; } set { this[nameof(CustomCondition)] = value; } }
        public bool bIsHitIndicator { get { return this[nameof(bIsHitIndicator)].Flag; } set { this[nameof(bIsHitIndicator)].Flag = value; } }
        public float HitScaleMin { get { return this[nameof(HitScaleMin)].GetValue<float>(); } set { this[nameof(HitScaleMin)].SetValue<float>(value); } }
        public float HitScaleMax { get { return this[nameof(HitScaleMax)].GetValue<float>(); } set { this[nameof(HitScaleMax)].SetValue<float>(value); } }
        public bool bForceDrawOnScreen { get { return this[nameof(bForceDrawOnScreen)].Flag; } set { this[nameof(bForceDrawOnScreen)].Flag = value; } }
        public Object WorldLocationOverride { get { return this[nameof(WorldLocationOverride)]; } set { this[nameof(WorldLocationOverride)] = value; } }
        public bool bDrawOnSceenIfNoProjectileVisualization { get { return this[nameof(bDrawOnSceenIfNoProjectileVisualization)].Flag; } set { this[nameof(bDrawOnSceenIfNoProjectileVisualization)].Flag = value; } }
        public float MinDistanceScale { get { return this[nameof(MinDistanceScale)].GetValue<float>(); } set { this[nameof(MinDistanceScale)].SetValue<float>(value); } }
        public float MaxDistanceScale { get { return this[nameof(MaxDistanceScale)].GetValue<float>(); } set { this[nameof(MaxDistanceScale)].SetValue<float>(value); } }
    }
    public class Reticule : DataAsset
    {
        public Reticule(nint addr) : base(addr) { }
        public TargetingColorParams TargetingColors { get { return this[nameof(TargetingColors)].As<TargetingColorParams>(); } set { this["TargetingColors"] = value; } }
        public float RadialOffset { get { return this[nameof(RadialOffset)].GetValue<float>(); } set { this[nameof(RadialOffset)].SetValue<float>(value); } }
        public bool bShowGhostReticule { get { return this[nameof(bShowGhostReticule)].Flag; } set { this[nameof(bShowGhostReticule)].Flag = value; } }
        public Color GhostedCenterReticuleColor { get { return this[nameof(GhostedCenterReticuleColor)].As<Color>(); } set { this["GhostedCenterReticuleColor"] = value; } }
        public Color GhostReticuleColor { get { return this[nameof(GhostReticuleColor)].As<Color>(); } set { this["GhostReticuleColor"] = value; } }
        public CanvasIcon GhostIcon { get { return this[nameof(GhostIcon)].As<CanvasIcon>(); } set { this["GhostIcon"] = value; } }
        public bool bUsePredictedEndLocation { get { return this[nameof(bUsePredictedEndLocation)].Flag; } set { this[nameof(bUsePredictedEndLocation)].Flag = value; } }
        public bool bUseWorldSpaceScale { get { return this[nameof(bUseWorldSpaceScale)].Flag; } set { this[nameof(bUseWorldSpaceScale)].Flag = value; } }
        public float WorldReticuleSize { get { return this[nameof(WorldReticuleSize)].GetValue<float>(); } set { this[nameof(WorldReticuleSize)].SetValue<float>(value); } }
        public Array<ReticulePiece> Pieces { get { return new Array<ReticulePiece>(this[nameof(Pieces)].Address); } }
    }
    public class ReticuleIcon : ReticulePiece
    {
        public ReticuleIcon(nint addr) : base(addr) { }
        public CanvasIcon Icon { get { return this[nameof(Icon)].As<CanvasIcon>(); } set { this["Icon"] = value; } }
    }
    public class ReticuleMaterial : ReticulePiece
    {
        public ReticuleMaterial(nint addr) : base(addr) { }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public EReticuleMaterialDrawMode DrawMode { get { return (EReticuleMaterialDrawMode)this[nameof(DrawMode)].GetValue<int>(); } set { this[nameof(DrawMode)].SetValue<int>((int)value); } }
        public float BaseMaterialSize { get { return this[nameof(BaseMaterialSize)].GetValue<float>(); } set { this[nameof(BaseMaterialSize)].SetValue<float>(value); } }
        public Vector2D FixedSize { get { return this[nameof(FixedSize)].As<Vector2D>(); } set { this["FixedSize"] = value; } }
        public Object ColorParameter { get { return this[nameof(ColorParameter)]; } set { this[nameof(ColorParameter)] = value; } }
        public Object SizeParameter { get { return this[nameof(SizeParameter)]; } set { this[nameof(SizeParameter)] = value; } }
        public Object AlphaParameter { get { return this[nameof(AlphaParameter)]; } set { this[nameof(AlphaParameter)] = value; } }
        public Object AngleParameter { get { return this[nameof(AngleParameter)]; } set { this[nameof(AngleParameter)] = value; } }
        public Array<ReticuleCustomMaterialParameter> CustomParameters { get { return new Array<ReticuleCustomMaterialParameter>(this[nameof(CustomParameters)].Address); } }
        public MaterialInstanceDynamic LastReticuleMaterial { get { return this[nameof(LastReticuleMaterial)].As<MaterialInstanceDynamic>(); } set { this["LastReticuleMaterial"] = value; } }
    }
    public class UseableItemActivationInstance : Object
    {
        public UseableItemActivationInstance(nint addr) : base(addr) { }
        public UseableItem OwningItem { get { return this[nameof(OwningItem)].As<UseableItem>(); } set { this["OwningItem"] = value; } }
        public void OnOwnerStateChange(Object StateName, Object PreviousStateName) { Invoke(nameof(OnOwnerStateChange), StateName, PreviousStateName); }
        public void OnOwnerInteractive(Object StateName, Actor Other) { Invoke(nameof(OnOwnerInteractive), StateName, Other); }
    }
    public class WeaponAffinities : Object
    {
        public WeaponAffinities(nint addr) : base(addr) { }
        public Array<WeaponAffinity> Affinities { get { return new Array<WeaponAffinity>(this[nameof(Affinities)].Address); } }
    }
    public class WeaponComponent : ActorComponent
    {
        public WeaponComponent(nint addr) : base(addr) { }
        public void NotifyHitTarget(DamageInfo DamageInfo) { Invoke(nameof(NotifyHitTarget), DamageInfo); }
        public void ModifyInspectInfo(Actor Actor, InspectInfo In, InspectInfo Out) { Invoke(nameof(ModifyInspectInfo), Actor, In, Out); }
        public void ModifyDamage(DamageInfo Info) { Invoke(nameof(ModifyDamage), Info); }
        public void ComputeStats(StatsComponent Stats) { Invoke(nameof(ComputeStats), Stats); }
    }
    public class WeaponAffinityComponent : WeaponComponent
    {
        public WeaponAffinityComponent(nint addr) : base(addr) { }
        public Object Affinities { get { return this[nameof(Affinities)]; } set { this[nameof(Affinities)] = value; } }
        public float ComputeScalar() { return Invoke<float>(nameof(ComputeScalar)); }
    }
    public class AmbientSpawnManager : ActorComponent
    {
        public AmbientSpawnManager(nint addr) : base(addr) { }
        public bool Preload { get { return this[nameof(Preload)].Flag; } set { this[nameof(Preload)].Flag = value; } }
        public Object OnSpawned { get { return this[nameof(OnSpawned)]; } set { this[nameof(OnSpawned)] = value; } }
        public Object OnDestroyed { get { return this[nameof(OnDestroyed)]; } set { this[nameof(OnDestroyed)] = value; } }
        public Array<AmbientSpawnRegion> AmbientSpawnRegions { get { return new Array<AmbientSpawnRegion>(this[nameof(AmbientSpawnRegions)].Address); } }
        public bool Generated { get { return this[nameof(Generated)].Flag; } set { this[nameof(Generated)].Flag = value; } }
        public Array<TileAmbientSpawns> AmbientSpawns { get { return new Array<TileAmbientSpawns>(this[nameof(AmbientSpawns)].Address); } }
        public void OnUninitialize() { Invoke(nameof(OnUninitialize)); }
        public void OnSetTileActive(int TileID, bool Active) { Invoke(nameof(OnSetTileActive), TileID, Active); }
        public void OnGenerateAmbientSpawns() { Invoke(nameof(OnGenerateAmbientSpawns)); }
        public void OnDead(byte Reason, CharacterGunfire Character, Actor Cause) { Invoke(nameof(OnDead), Reason, Character, Cause); }
        public void OnActorDestroyed(Actor Actor) { Invoke(nameof(OnActorDestroyed), Actor); }
        public void OnActorDead(DamageInfo DamageInfo) { Invoke(nameof(OnActorDead), DamageInfo); }
        public int GetNumActiveActorsOfType(Object ActorBP) { return Invoke<int>(nameof(GetNumActiveActorsOfType), ActorBP); }
        public TileAmbientDebugInfo GetDebugInfo(int TileID) { return Invoke<TileAmbientDebugInfo>(nameof(GetDebugInfo), TileID); }
        public int GetActiveCharacterCount() { return Invoke<int>(nameof(GetActiveCharacterCount)); }
    }
    public class AmbientSpawnRegion : Actor
    {
        public AmbientSpawnRegion(nint addr) : base(addr) { }
        public Object SpawnLayer { get { return this[nameof(SpawnLayer)]; } set { this[nameof(SpawnLayer)] = value; } }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public Array<Object> SpawnTags { get { return new Array<Object>(this[nameof(SpawnTags)].Address); } }
        public AmbientSpawnManager AmbientSpawnManager { get { return this[nameof(AmbientSpawnManager)].As<AmbientSpawnManager>(); } set { this["AmbientSpawnManager"] = value; } }
    }
    public class AmbientSpawnVisualizerComponent : ActorComponent
    {
        public AmbientSpawnVisualizerComponent(nint addr) : base(addr) { }
    }
    public class RandomTileActorInterface : Interface
    {
        public RandomTileActorInterface(nint addr) : base(addr) { }
        public void SetRandomSeed(int Seed) { Invoke(nameof(SetRandomSeed), Seed); }
    }
    public class MapGenComponent : ActorComponent
    {
        public MapGenComponent(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public Object Template { get { return this[nameof(Template)]; } set { this[nameof(Template)] = value; } }
        public TileSet TilesetOverride { get { return this[nameof(TilesetOverride)].As<TileSet>(); } set { this["TilesetOverride"] = value; } }
        public Object TemplateOverride { get { return this[nameof(TemplateOverride)]; } set { this[nameof(TemplateOverride)] = value; } }
        public Object SkyBoxOverride { get { return this[nameof(SkyBoxOverride)]; } set { this[nameof(SkyBoxOverride)] = value; } }
        public bool UseLoadedLevelAsTemplate { get { return this[nameof(UseLoadedLevelAsTemplate)].Flag; } set { this[nameof(UseLoadedLevelAsTemplate)].Flag = value; } }
        public bool AutoInitialize { get { return this[nameof(AutoInitialize)].Flag; } set { this[nameof(AutoInitialize)].Flag = value; } }
        public Vector MapOffset { get { return this[nameof(MapOffset)].As<Vector>(); } set { this["MapOffset"] = value; } }
        public Object MapInstanceName { get { return this[nameof(MapInstanceName)]; } set { this[nameof(MapInstanceName)] = value; } }
        public Object OnSetTileActive { get { return this[nameof(OnSetTileActive)]; } set { this[nameof(OnSetTileActive)] = value; } }
        public Object OnSetTileVisible { get { return this[nameof(OnSetTileVisible)]; } set { this[nameof(OnSetTileVisible)] = value; } }
        public Object OnOverallVisibilityChange { get { return this[nameof(OnOverallVisibilityChange)]; } set { this[nameof(OnOverallVisibilityChange)] = value; } }
        public Object OnGenerationComplete { get { return this[nameof(OnGenerationComplete)]; } set { this[nameof(OnGenerationComplete)] = value; } }
        public Object OnFullyLoaded { get { return this[nameof(OnFullyLoaded)]; } set { this[nameof(OnFullyLoaded)] = value; } }
        public Object OnUnloaded { get { return this[nameof(OnUnloaded)]; } set { this[nameof(OnUnloaded)] = value; } }
        public Object OnPreInitialize { get { return this[nameof(OnPreInitialize)]; } set { this[nameof(OnPreInitialize)] = value; } }
        public Object OnInitialized { get { return this[nameof(OnInitialized)]; } set { this[nameof(OnInitialized)] = value; } }
        public Object OnUninitialized { get { return this[nameof(OnUninitialized)]; } set { this[nameof(OnUninitialized)] = value; } }
        public Object OnFailed { get { return this[nameof(OnFailed)]; } set { this[nameof(OnFailed)] = value; } }
        public MapGenSettings Settings { get { return this[nameof(Settings)].As<MapGenSettings>(); } set { this["Settings"] = value; } }
        public Array<PlayerController> Players { get { return new Array<PlayerController>(this[nameof(Players)].Address); } }
        public LevelStreaming TemplateLevel { get { return this[nameof(TemplateLevel)].As<LevelStreaming>(); } set { this["TemplateLevel"] = value; } }
        public Array<LevelStreaming> TemplateSublevels { get { return new Array<LevelStreaming>(this[nameof(TemplateSublevels)].Address); } }
        public LevelStreaming SkyBoxLevel { get { return this[nameof(SkyBoxLevel)].As<LevelStreaming>(); } set { this["SkyBoxLevel"] = value; } }
        public RuntimeNavMeshBoundsVolume NavBounds { get { return this[nameof(NavBounds)].As<RuntimeNavMeshBoundsVolume>(); } set { this["NavBounds"] = value; } }
        public bool Generated { get { return this[nameof(Generated)].Flag; } set { this[nameof(Generated)].Flag = value; } }
        public Array<TileBase> TilesBase { get { return new Array<TileBase>(this[nameof(TilesBase)].Address); } }
        public bool NoTiles { get { return this[nameof(NoTiles)].Flag; } set { this[nameof(NoTiles)].Flag = value; } }
        public Array<Tile> Tiles { get { return new Array<Tile>(this[nameof(Tiles)].Address); } }
        public Array<int> PreviousVisibleTiles { get { return new Array<int>(this[nameof(PreviousVisibleTiles)].Address); } }
        public Array<MapGenAttribute> Attributes { get { return new Array<MapGenAttribute>(this[nameof(Attributes)].Address); } }
        public EMapGenState ServerState { get { return (EMapGenState)this[nameof(ServerState)].GetValue<int>(); } set { this[nameof(ServerState)].SetValue<int>((int)value); } }
        public AudioVolumeClass MapAudioVolumeClass { get { return this[nameof(MapAudioVolumeClass)].As<AudioVolumeClass>(); } set { this["MapAudioVolumeClass"] = value; } }
        public MusicSetAsset MapMusicSet { get { return this[nameof(MapMusicSet)].As<MusicSetAsset>(); } set { this["MapMusicSet"] = value; } }
        public Array<LevelStreaming> LevelsUnloading { get { return new Array<LevelStreaming>(this[nameof(LevelsUnloading)].Address); } }
        public Array<MapTileInfo> TemplateTiles { get { return new Array<MapTileInfo>(this[nameof(TemplateTiles)].Address); } }
        public Volume MapAudioVolume { get { return this[nameof(MapAudioVolume)].As<Volume>(); } set { this["MapAudioVolume"] = value; } }
        public void SetTileVisibleOverride(int ID, bool Visible) { Invoke(nameof(SetTileVisibleOverride), ID, Visible); }
        public void OnStartedVisualLogger() { Invoke(nameof(OnStartedVisualLogger)); }
        public void OnRep_TilesBase() { Invoke(nameof(OnRep_TilesBase)); }
        public void OnRep_MapMusic() { Invoke(nameof(OnRep_MapMusic)); }
        public void OnRep_MapAudioVolumeClass() { Invoke(nameof(OnRep_MapAudioVolumeClass)); }
        public bool IsVistaTile(Tile Tile) { return Invoke<bool>(nameof(IsVistaTile), Tile); }
        public bool IsTileVisited(int TileID) { return Invoke<bool>(nameof(IsTileVisited), TileID); }
        public bool IsTileGeneratingNav(int TileID) { return Invoke<bool>(nameof(IsTileGeneratingNav), TileID); }
        public bool IsTileActive(int TileID) { return Invoke<bool>(nameof(IsTileActive), TileID); }
        public bool IsPositionInTile(Vector WorldPosition, Tile Tile) { return Invoke<bool>(nameof(IsPositionInTile), WorldPosition, Tile); }
        public ETileState GetTileState(int TileID) { return Invoke<ETileState>(nameof(GetTileState), TileID); }
        public TileSet GetTileSet() { return Invoke<TileSet>(nameof(GetTileSet)); }
        public bool GetTileForActor(Actor Actor, Tile Out) { return Invoke<bool>(nameof(GetTileForActor), Actor, Out); }
        public int GetTileDistance(int TileID) { return Invoke<int>(nameof(GetTileDistance), TileID); }
        public bool GetTileByNameID(Object NameID, Tile Out) { return Invoke<bool>(nameof(GetTileByNameID), NameID, Out); }
        public bool GetTileAtPosition(Vector WorldPosition, Tile Out) { return Invoke<bool>(nameof(GetTileAtPosition), WorldPosition, Out); }
        public Level GetTemplateLoadedLevel() { return Invoke<Level>(nameof(GetTemplateLoadedLevel)); }
        public bool GetSpawnTagsAtPosition(Vector WorldPosition, Array<Object> Out) { return Invoke<bool>(nameof(GetSpawnTagsAtPosition), WorldPosition, Out); }
        public Vector GetNormalizedTilePos(Tile Tile, Vector Pos) { return Invoke<Vector>(nameof(GetNormalizedTilePos), Tile, Pos); }
        public Array<Vector> GetNormalizedTileConnectors(Tile Tile) { return Invoke<Array<Vector>>(nameof(GetNormalizedTileConnectors), Tile); }
        public Box GetNormalizedTileBounds(Tile Tile) { return Invoke<Box>(nameof(GetNormalizedTileBounds), Tile); }
        public MusicSetAsset GetMapMusicSet() { return Invoke<MusicSetAsset>(nameof(GetMapMusicSet)); }
        public Level GetMapGenLevelForActor(Actor Actor) { return Invoke<Level>(nameof(GetMapGenLevelForActor), Actor); }
        public int GetMapGenDebugState() { return Invoke<int>(nameof(GetMapGenDebugState)); }
        public bool GetMapGenAttributeForActor(EMapGenAttributeScope Scope, Actor Actor, Object Key, MapGenAttribute Out) { return Invoke<bool>(nameof(GetMapGenAttributeForActor), Scope, Actor, Key, Out); }
        public float GetLevelMaxSize(bool IncludeVista) { return Invoke<float>(nameof(GetLevelMaxSize), IncludeVista); }
        public Vector GetLevelCenter(bool IncludeVista) { return Invoke<Vector>(nameof(GetLevelCenter), IncludeVista); }
        public Box GetLevelBounds(bool IncludeVista) { return Invoke<Box>(nameof(GetLevelBounds), IncludeVista); }
        public bool GetAttribute(EMapGenAttributeScope Scope, int TileOrRegionID, Object Key, MapGenAttribute Out) { return Invoke<bool>(nameof(GetAttribute), Scope, TileOrRegionID, Key, Out); }
        public MapGenComponent FindMapGenComponentForActor(Actor Actor) { return Invoke<MapGenComponent>(nameof(FindMapGenComponentForActor), Actor); }
        public void ClearTileVisibleOverride(int ID) { Invoke(nameof(ClearTileVisibleOverride), ID); }
        public void AddAttribute(MapGenAttribute Attribute) { Invoke(nameof(AddAttribute), Attribute); }
    }
    public class MapGenSettings : Actor
    {
        public MapGenSettings(nint addr) : base(addr) { }
        public TileSet TileSet { get { return this[nameof(TileSet)].As<TileSet>(); } set { this["TileSet"] = value; } }
        public Array<TileSpawnList> SpawnLists { get { return new Array<TileSpawnList>(this[nameof(SpawnLists)].Address); } }
        public Array<MapGenAttribute> Attributes { get { return new Array<MapGenAttribute>(this[nameof(Attributes)].Address); } }
        public Array<Object> BorderTiles { get { return new Array<Object>(this[nameof(BorderTiles)].Address); } }
        public bool bOverrideAudioVolume { get { return this[nameof(bOverrideAudioVolume)].Flag; } set { this[nameof(bOverrideAudioVolume)].Flag = value; } }
        public AudioVolumeSelector AudioVolumeOverride { get { return this[nameof(AudioVolumeOverride)].As<AudioVolumeSelector>(); } set { this["AudioVolumeOverride"] = value; } }
    }
    public class MapTileConnector : PrimitiveComponent
    {
        public MapTileConnector(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public bool IsConnectorEnabled() { return Invoke<bool>(nameof(IsConnectorEnabled)); }
    }
    public class MapTileBase : Actor
    {
        public MapTileBase(nint addr) : base(addr) { }
        public IntVector Extents { get { return this[nameof(Extents)].As<IntVector>(); } set { this["Extents"] = value; } }
        public bool Overlay { get { return this[nameof(Overlay)].Flag; } set { this[nameof(Overlay)].Flag = value; } }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public TileSet TileSet { get { return this[nameof(TileSet)].As<TileSet>(); } set { this["TileSet"] = value; } }
        public Array<MapGenAttribute> Attributes { get { return new Array<MapGenAttribute>(this[nameof(Attributes)].Address); } }
    }
    public class MapTileTemplate : MapTileBase
    {
        public MapTileTemplate(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object RegionID { get { return this[nameof(RegionID)]; } set { this[nameof(RegionID)] = value; } }
        public Object TileTag { get { return this[nameof(TileTag)]; } set { this[nameof(TileTag)] = value; } }
        public byte TileFlags { get { return this[nameof(TileFlags)].GetValue<byte>(); } set { this[nameof(TileFlags)].SetValue<byte>(value); } }
        public ETileDirection Direction { get { return (ETileDirection)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public Object WorldMapID { get { return this[nameof(WorldMapID)]; } set { this[nameof(WorldMapID)] = value; } }
        public Color DisplayColor { get { return this[nameof(DisplayColor)].As<Color>(); } set { this["DisplayColor"] = value; } }
        public int TileRating { get { return this[nameof(TileRating)].GetValue<int>(); } set { this[nameof(TileRating)].SetValue<int>(value); } }
        public bool Optional { get { return this[nameof(Optional)].Flag; } set { this[nameof(Optional)].Flag = value; } }
        public Array<TileSpawnList> SpawnLists { get { return new Array<TileSpawnList>(this[nameof(SpawnLists)].Address); } }
    }
    public class MapTileInfo : MapTileBase
    {
        public MapTileInfo(nint addr) : base(addr) { }
        public bool RegisterTile { get { return this[nameof(RegisterTile)].Flag; } set { this[nameof(RegisterTile)].Flag = value; } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Array<Object> AdditionalTags { get { return new Array<Object>(this[nameof(AdditionalTags)].Address); } }
        public Object SpawnTag { get { return this[nameof(SpawnTag)]; } set { this[nameof(SpawnTag)] = value; } }
        public ETileDirection Direction { get { return (ETileDirection)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
        public byte Flags { get { return this[nameof(Flags)].GetValue<byte>(); } set { this[nameof(Flags)].SetValue<byte>(value); } }
        public int PathCost { get { return this[nameof(PathCost)].GetValue<int>(); } set { this[nameof(PathCost)].SetValue<int>(value); } }
        public Actor OriginPointActor { get { return this[nameof(OriginPointActor)].As<Actor>(); } set { this["OriginPointActor"] = value; } }
    }
    public class MapTileNav : NavMeshBoundsVolume
    {
        public MapTileNav(nint addr) : base(addr) { }
    }
    public class ResourceDef : Object
    {
        public ResourceDef(nint addr) : base(addr) { }
        public Array<ResourceType> ResourceTypes { get { return new Array<ResourceType>(this[nameof(ResourceTypes)].Address); } }
    }
    public class ResourceSpawnManager : ActorComponent
    {
        public ResourceSpawnManager(nint addr) : base(addr) { }
        public Object ResourceDef { get { return this[nameof(ResourceDef)]; } set { this[nameof(ResourceDef)] = value; } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public bool Generated { get { return this[nameof(Generated)].Flag; } set { this[nameof(Generated)].Flag = value; } }
        public Array<TileResources> Resources { get { return new Array<TileResources>(this[nameof(Resources)].Address); } }
        public void OnUninitialize() { Invoke(nameof(OnUninitialize)); }
        public void OnSpawnListLoaded(int TileID) { Invoke(nameof(OnSpawnListLoaded), TileID); }
        public void OnSetTileActive(int TileID, bool Active) { Invoke(nameof(OnSetTileActive), TileID, Active); }
        public void OnGenerateResources() { Invoke(nameof(OnGenerateResources)); }
    }
    public class RuntimeNavMeshBoundsVolume : NavMeshBoundsVolume
    {
        public RuntimeNavMeshBoundsVolume(nint addr) : base(addr) { }
        public Box Bounds { get { return this[nameof(Bounds)].As<Box>(); } set { this["Bounds"] = value; } }
    }
    public class TileUtil : Object
    {
        public TileUtil(nint addr) : base(addr) { }
        public bool IsVisible(Tile Tile) { return Invoke<bool>(nameof(IsVisible), Tile); }
        public Object GetTileLevelName(Tile Tile) { return Invoke<Object>(nameof(GetTileLevelName), Tile); }
    }
    public class MapTileInfoAsset : Object
    {
        public MapTileInfoAsset(nint addr) : base(addr) { }
        public bool RegisterTile { get { return this[nameof(RegisterTile)].Flag; } set { this[nameof(RegisterTile)].Flag = value; } }
        public TileSet TileSet { get { return this[nameof(TileSet)].As<TileSet>(); } set { this["TileSet"] = value; } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Array<Object> AdditionalTags { get { return new Array<Object>(this[nameof(AdditionalTags)].Address); } }
        public Object SpawnTag { get { return this[nameof(SpawnTag)]; } set { this[nameof(SpawnTag)] = value; } }
        public byte Flags { get { return this[nameof(Flags)].GetValue<byte>(); } set { this[nameof(Flags)].SetValue<byte>(value); } }
        public int PathCost { get { return this[nameof(PathCost)].GetValue<int>(); } set { this[nameof(PathCost)].SetValue<int>(value); } }
        public ETileDirection Direction { get { return (ETileDirection)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public Box AABB { get { return this[nameof(AABB)].As<Box>(); } set { this["AABB"] = value; } }
        public Object Level { get { return this[nameof(Level)]; } set { this[nameof(Level)] = value; } }
        public Array<MapTileEdgeInfo> Edges { get { return new Array<MapTileEdgeInfo>(this[nameof(Edges)].Address); } }
        public Array<Vector> Connectors { get { return new Array<Vector>(this[nameof(Connectors)].Address); } }
    }
    public class TileRegistry : GameInstanceSubsystem
    {
        public TileRegistry(nint addr) : base(addr) { }
        public Array<MapTileInfoAsset> MapTiles { get { return new Array<MapTileInfoAsset>(this[nameof(MapTiles)].Address); } }
        public Array<TileSet> InitializedTileSets { get { return new Array<TileSet>(this[nameof(InitializedTileSets)].Address); } }
    }
    public class TileSet : DataAsset
    {
        public TileSet(nint addr) : base(addr) { }
        public float TileSizeX { get { return this[nameof(TileSizeX)].GetValue<float>(); } set { this[nameof(TileSizeX)].SetValue<float>(value); } }
        public float TileSizeY { get { return this[nameof(TileSizeY)].GetValue<float>(); } set { this[nameof(TileSizeY)].SetValue<float>(value); } }
        public float TileSizeZ { get { return this[nameof(TileSizeZ)].GetValue<float>(); } set { this[nameof(TileSizeZ)].SetValue<float>(value); } }
        public float TileMinZ { get { return this[nameof(TileMinZ)].GetValue<float>(); } set { this[nameof(TileMinZ)].SetValue<float>(value); } }
        public float TileMaxZ { get { return this[nameof(TileMaxZ)].GetValue<float>(); } set { this[nameof(TileMaxZ)].SetValue<float>(value); } }
        public Vector BoundsExpanse { get { return this[nameof(BoundsExpanse)].As<Vector>(); } set { this["BoundsExpanse"] = value; } }
        public Array<TileSet> Include { get { return new Array<TileSet>(this[nameof(Include)].Address); } }
        public bool GenerateNavMesh { get { return this[nameof(GenerateNavMesh)].Flag; } set { this[nameof(GenerateNavMesh)].Flag = value; } }
        public bool AllowTileRotation { get { return this[nameof(AllowTileRotation)].Flag; } set { this[nameof(AllowTileRotation)].Flag = value; } }
        public int ActiveTileDepth { get { return this[nameof(ActiveTileDepth)].GetValue<int>(); } set { this[nameof(ActiveTileDepth)].SetValue<int>(value); } }
        public bool DoTileVisibility { get { return this[nameof(DoTileVisibility)].Flag; } set { this[nameof(DoTileVisibility)].Flag = value; } }
        public Object TileTransitionTag { get { return this[nameof(TileTransitionTag)]; } set { this[nameof(TileTransitionTag)] = value; } }
        public Object SkyBox { get { return this[nameof(SkyBox)]; } set { this[nameof(SkyBox)] = value; } }
        public Array<Object> SpawnTags { get { return new Array<Object>(this[nameof(SpawnTags)].Address); } }
        public float ResourceDensity { get { return this[nameof(ResourceDensity)].GetValue<float>(); } set { this[nameof(ResourceDensity)].SetValue<float>(value); } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
        public AudioVolumeSelector AudioVolumeClass { get { return this[nameof(AudioVolumeClass)].As<AudioVolumeSelector>(); } set { this["AudioVolumeClass"] = value; } }
        public Object MapMusic { get { return this[nameof(MapMusic)]; } set { this[nameof(MapMusic)] = value; } }
        public Array<SpawnGenerator> SpawnGenerators { get { return new Array<SpawnGenerator>(this[nameof(SpawnGenerators)].Address); } }
        public Array<MapTileInfoAsset> MapTiles { get { return new Array<MapTileInfoAsset>(this[nameof(MapTiles)].Address); } }
    }
    public class LODVolumeFilter : Object
    {
        public LODVolumeFilter(nint addr) : base(addr) { }
        public LODVolumeSubFilter IgnoreFilter { get { return this[nameof(IgnoreFilter)].As<LODVolumeSubFilter>(); } set { this["IgnoreFilter"] = value; } }
        public Array<LODVolumeDistanceFilter> DistanceFilters { get { return new Array<LODVolumeDistanceFilter>(this[nameof(DistanceFilters)].Address); } }
    }
    public class LODVolume : Actor
    {
        public LODVolume(nint addr) : base(addr) { }
        public bool Update { get { return this[nameof(Update)].Flag; } set { this[nameof(Update)].Flag = value; } }
        public bool UpdateManuallyOnly { get { return this[nameof(UpdateManuallyOnly)].Flag; } set { this[nameof(UpdateManuallyOnly)].Flag = value; } }
        public float VolumePriority { get { return this[nameof(VolumePriority)].GetValue<float>(); } set { this[nameof(VolumePriority)].SetValue<float>(value); } }
        public ELODVolumeVisibility DebugShowLOD { get { return (ELODVolumeVisibility)this[nameof(DebugShowLOD)].GetValue<int>(); } set { this[nameof(DebugShowLOD)].SetValue<int>((int)value); } }
        public Object FilterBP { get { return this[nameof(FilterBP)]; } set { this[nameof(FilterBP)] = value; } }
        public bool ModifyVisibilitySameFrame { get { return this[nameof(ModifyVisibilitySameFrame)].Flag; } set { this[nameof(ModifyVisibilitySameFrame)].Flag = value; } }
        public bool LODShouldApplyDistanceOveride { get { return this[nameof(LODShouldApplyDistanceOveride)].Flag; } set { this[nameof(LODShouldApplyDistanceOveride)].Flag = value; } }
        public bool ApplyOcclusionOverride { get { return this[nameof(ApplyOcclusionOverride)].Flag; } set { this[nameof(ApplyOcclusionOverride)].Flag = value; } }
        public bool ModifyVisibiltyByDistance { get { return this[nameof(ModifyVisibiltyByDistance)].Flag; } set { this[nameof(ModifyVisibiltyByDistance)].Flag = value; } }
        public bool ShouldBeActivelyManaged { get { return this[nameof(ShouldBeActivelyManaged)].Flag; } set { this[nameof(ShouldBeActivelyManaged)].Flag = value; } }
        public float VisibiltyDistance { get { return this[nameof(VisibiltyDistance)].GetValue<float>(); } set { this[nameof(VisibiltyDistance)].SetValue<float>(value); } }
        public float HiddenDistance { get { return this[nameof(HiddenDistance)].GetValue<float>(); } set { this[nameof(HiddenDistance)].SetValue<float>(value); } }
        public int ActorTransitionPerFrame { get { return this[nameof(ActorTransitionPerFrame)].GetValue<int>(); } set { this[nameof(ActorTransitionPerFrame)].SetValue<int>(value); } }
        public float DistanceMultiplier { get { return this[nameof(DistanceMultiplier)].GetValue<float>(); } set { this[nameof(DistanceMultiplier)].SetValue<float>(value); } }
        public Array<Actor> NearActors { get { return new Array<Actor>(this[nameof(NearActors)].Address); } }
        public Array<Actor> DistantActors { get { return new Array<Actor>(this[nameof(DistantActors)].Address); } }
        public BoxComponent Volume { get { return this[nameof(Volume)].As<BoxComponent>(); } set { this["Volume"] = value; } }
        public bool bReadyForModifications { get { return this[nameof(bReadyForModifications)].Flag; } set { this[nameof(bReadyForModifications)].Flag = value; } }
        public bool bActorAddedtoWorld { get { return this[nameof(bActorAddedtoWorld)].Flag; } set { this[nameof(bActorAddedtoWorld)].Flag = value; } }
        public bool bIsActive { get { return this[nameof(bIsActive)].Flag; } set { this[nameof(bIsActive)].Flag = value; } }
        public TileCoord OwningTileCoord { get { return this[nameof(OwningTileCoord)].As<TileCoord>(); } set { this["OwningTileCoord"] = value; } }
        public int OwningTileID { get { return this[nameof(OwningTileID)].GetValue<int>(); } set { this[nameof(OwningTileID)].SetValue<int>(value); } }
        public ELODVolumeVisibility CurrentVisibility { get { return (ELODVolumeVisibility)this[nameof(CurrentVisibility)].GetValue<int>(); } set { this[nameof(CurrentVisibility)].SetValue<int>((int)value); } }
        public bool bPendingVisibility { get { return this[nameof(bPendingVisibility)].Flag; } set { this[nameof(bPendingVisibility)].Flag = value; } }
        public int CurrentPendingVisibleIndex { get { return this[nameof(CurrentPendingVisibleIndex)].GetValue<int>(); } set { this[nameof(CurrentPendingVisibleIndex)].SetValue<int>(value); } }
        public int CurrentPendingHiddenIndex { get { return this[nameof(CurrentPendingHiddenIndex)].GetValue<int>(); } set { this[nameof(CurrentPendingHiddenIndex)].SetValue<int>(value); } }
        public Array<Actor> PendingVisibleActors { get { return new Array<Actor>(this[nameof(PendingVisibleActors)].Address); } }
        public Array<Actor> PendingHiddenActors { get { return new Array<Actor>(this[nameof(PendingHiddenActors)].Address); } }
        public bool bEmptyPendingVisible { get { return this[nameof(bEmptyPendingVisible)].Flag; } set { this[nameof(bEmptyPendingVisible)].Flag = value; } }
        public bool bEmptyPendingHidden { get { return this[nameof(bEmptyPendingHidden)].Flag; } set { this[nameof(bEmptyPendingHidden)].Flag = value; } }
        public void SetLODVisibility(ELODVolumeVisibility LODType) { Invoke(nameof(SetLODVisibility), LODType); }
    }
    public class LODVolumeManager : ActorComponent
    {
        public LODVolumeManager(nint addr) : base(addr) { }
        public float MaxUpdateInterval { get { return this[nameof(MaxUpdateInterval)].GetValue<float>(); } set { this[nameof(MaxUpdateInterval)].SetValue<float>(value); } }
        public TimerHandle CooldownHandle { get { return this[nameof(CooldownHandle)].As<TimerHandle>(); } set { this["CooldownHandle"] = value; } }
        public bool OnCooldown { get { return this[nameof(OnCooldown)].Flag; } set { this[nameof(OnCooldown)].Flag = value; } }
        public Array<LODVolumeInfo> Volumes { get { return new Array<LODVolumeInfo>(this[nameof(Volumes)].Address); } }
        public void UpdateVolumesVisibility() { Invoke(nameof(UpdateVolumesVisibility)); }
        public void UnregisterVolume(LODVolume DestroyedVolume) { Invoke(nameof(UnregisterVolume), DestroyedVolume); }
        public void RegisterVolume(LODVolume SpawnedVolume) { Invoke(nameof(RegisterVolume), SpawnedVolume); }
        public void OnFinishCooldown() { Invoke(nameof(OnFinishCooldown)); }
        public float GetPlayerRangeToVolume(LODVolume Volume) { return Invoke<float>(nameof(GetPlayerRangeToVolume), Volume); }
        public LODVolumeManager GetInstance(Object WorldContextObject) { return Invoke<LODVolumeManager>(nameof(GetInstance), WorldContextObject); }
    }
    public class SplineBase : Actor
    {
        public SplineBase(nint addr) : base(addr) { }
        public bool bInstanceToBeMerged { get { return this[nameof(bInstanceToBeMerged)].Flag; } set { this[nameof(bInstanceToBeMerged)].Flag = value; } }
    }
    public class ExplorableMinimapComponent : ActorComponent
    {
        public ExplorableMinimapComponent(nint addr) : base(addr) { }
        public Object ActorClass { get { return this[nameof(ActorClass)]; } set { this[nameof(ActorClass)] = value; } }
        public bool bFaceCamera { get { return this[nameof(bFaceCamera)].Flag; } set { this[nameof(bFaceCamera)].Flag = value; } }
        public Array<Object> RequiredTags { get { return new Array<Object>(this[nameof(RequiredTags)].Address); } }
        public bool bIsSecret { get { return this[nameof(bIsSecret)].Flag; } set { this[nameof(bIsSecret)].Flag = value; } }
        public float RevealRange { get { return this[nameof(RevealRange)].GetValue<float>(); } set { this[nameof(RevealRange)].SetValue<float>(value); } }
        public float RevealRangeZ { get { return this[nameof(RevealRangeZ)].GetValue<float>(); } set { this[nameof(RevealRangeZ)].SetValue<float>(value); } }
        public Object PositionParamName { get { return this[nameof(PositionParamName)]; } set { this[nameof(PositionParamName)] = value; } }
        public MaterialParameterCollection MaterialParamCollection { get { return this[nameof(MaterialParamCollection)].As<MaterialParameterCollection>(); } set { this["MaterialParamCollection"] = value; } }
        public MaterialParameterCollectionInstance MaterialParamCollectionInst { get { return this[nameof(MaterialParamCollectionInst)].As<MaterialParameterCollectionInstance>(); } set { this["MaterialParamCollectionInst"] = value; } }
        public void SetIsSecret(bool InIsSecret) { Invoke(nameof(SetIsSecret), InIsSecret); }
        public Actor GetSpawnedActor() { return Invoke<Actor>(nameof(GetSpawnedActor)); }
    }
    public class ExplorableMinimapManager : TickableWorldSubsystem
    {
        public ExplorableMinimapManager(nint addr) : base(addr) { }
        public SceneComponent CameraSceneComponent { get { return this[nameof(CameraSceneComponent)].As<SceneComponent>(); } set { this["CameraSceneComponent"] = value; } }
        public Object MinimapEntityRegistrationChanged { get { return this[nameof(MinimapEntityRegistrationChanged)]; } set { this[nameof(MinimapEntityRegistrationChanged)] = value; } }
        public Object MinimapEntitySpawnRegistered { get { return this[nameof(MinimapEntitySpawnRegistered)]; } set { this[nameof(MinimapEntitySpawnRegistered)] = value; } }
        public Object MinimapEntitySpawnUnregistered { get { return this[nameof(MinimapEntitySpawnUnregistered)]; } set { this[nameof(MinimapEntitySpawnUnregistered)] = value; } }
        public ExplorableMinimapModel ExplorableMinimapModel { get { return this[nameof(ExplorableMinimapModel)].As<ExplorableMinimapModel>(); } set { this["ExplorableMinimapModel"] = value; } }
        public void ShutdownMinimap() { Invoke(nameof(ShutdownMinimap)); }
        public void SetCaptureEveryFrame(bool bValue) { Invoke(nameof(SetCaptureEveryFrame), bValue); }
        public bool IsTooltipEnabled() { return Invoke<bool>(nameof(IsTooltipEnabled)); }
        public bool IsMinimapEnabled() { return Invoke<bool>(nameof(IsMinimapEnabled)); }
        public bool IsFullscreenMinimapActive() { return Invoke<bool>(nameof(IsFullscreenMinimapActive)); }
        public bool IsFogOfWarEnabled() { return Invoke<bool>(nameof(IsFogOfWarEnabled)); }
        public Array<Actor> GetSpawnedMinimapEntities() { return Invoke<Array<Actor>>(nameof(GetSpawnedMinimapEntities)); }
        public Actor GetRefActorFromMinimapEntity(Actor MinimapEntity) { return Invoke<Actor>(nameof(GetRefActorFromMinimapEntity), MinimapEntity); }
        public ExplorableMinimapModel GetExplorableMinimapModel() { return Invoke<ExplorableMinimapModel>(nameof(GetExplorableMinimapModel)); }
        public ExplorableMinimapManager GetExplorableMinimapManager(Object WorldContextObject) { return Invoke<ExplorableMinimapManager>(nameof(GetExplorableMinimapManager), WorldContextObject); }
        public void EnableTooltips(bool bEnable) { Invoke(nameof(EnableTooltips), bEnable); }
        public void EnableMinimap(bool bEnable) { Invoke(nameof(EnableMinimap), bEnable); }
        public void EnableFogOfWar(bool bEnable) { Invoke(nameof(EnableFogOfWar), bEnable); }
    }
    public class ExplorableMinimapModelOverlay : Interface
    {
        public ExplorableMinimapModelOverlay(nint addr) : base(addr) { }
        public UserWidget CreateWidget(Actor MinimapActor) { return Invoke<UserWidget>(nameof(CreateWidget), MinimapActor); }
    }
    public class ExplorableStaticMeshComponent : StaticMeshComponent
    {
        public ExplorableStaticMeshComponent(nint addr) : base(addr) { }
    }
    public class ExplorableMinimapTooltip : WidgetComponent
    {
        public ExplorableMinimapTooltip(nint addr) : base(addr) { }
        public Object ToolTipText { get { return this[nameof(ToolTipText)]; } set { this[nameof(ToolTipText)] = value; } }
        public float TooltipHideDelay { get { return this[nameof(TooltipHideDelay)].GetValue<float>(); } set { this[nameof(TooltipHideDelay)].SetValue<float>(value); } }
    }
    public class MinimapTileSupport : Actor
    {
        public MinimapTileSupport(nint addr) : base(addr) { }
        public PersistenceComponent PersistenceComponent { get { return this[nameof(PersistenceComponent)].As<PersistenceComponent>(); } set { this["PersistenceComponent"] = value; } }
        public Array<Object> MinimapStaticMeshList { get { return new Array<Object>(this[nameof(MinimapStaticMeshList)].Address); } }
        public Array<int> HiddenAreaIDs { get { return new Array<int>(this[nameof(HiddenAreaIDs)].Address); } }
        public bool RevealMinimap { get { return this[nameof(RevealMinimap)].Flag; } set { this[nameof(RevealMinimap)].Flag = value; } }
        public Array<int> RevealedHiddenAreasIDs { get { return new Array<int>(this[nameof(RevealedHiddenAreasIDs)].Address); } }
    }
    public class MiniMapImage : Image
    {
        public MiniMapImage(nint addr) : base(addr) { }
    }
    public class MusicManager : ActorComponent
    {
        public MusicManager(nint addr) : base(addr) { }
        public EMusicState AutomatedState { get { return (EMusicState)this[nameof(AutomatedState)].GetValue<int>(); } set { this[nameof(AutomatedState)].SetValue<int>((int)value); } }
        public EMusicState ManualState { get { return (EMusicState)this[nameof(ManualState)].GetValue<int>(); } set { this[nameof(ManualState)].SetValue<int>((int)value); } }
        public Array<MusicSetInstance> ActiveMusicSets { get { return new Array<MusicSetInstance>(this[nameof(ActiveMusicSets)].Address); } }
        public void PostMusicEvent(EMusicEvent Event) { Invoke(nameof(PostMusicEvent), Event); }
        public bool IsMusicSetActive(MusicSetAsset MusicSet, Object Instigator) { return Invoke<bool>(nameof(IsMusicSetActive), MusicSet, Instigator); }
        public MusicManager GetMusicManager(Object WorldContextObject) { return Invoke<MusicManager>(nameof(GetMusicManager), WorldContextObject); }
        public EMusicState GetCurrentState() { return Invoke<EMusicState>(nameof(GetCurrentState)); }
        public void DeactivateMusicSet(MusicSetAsset MusicSet, Object Instigator, Object OutroStinger, bool bForceStop) { Invoke(nameof(DeactivateMusicSet), MusicSet, Instigator, OutroStinger, bForceStop); }
        public void ActivateMusicSet(MusicSetAsset MusicSet, Object Instigator) { Invoke(nameof(ActivateMusicSet), MusicSet, Instigator); }
    }
    public class GunfireMusicSetAsset : MusicSetAsset
    {
        public GunfireMusicSetAsset(nint addr) : base(addr) { }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
        public Array<GunfireMusicState> States { get { return new Array<GunfireMusicState>(this[nameof(States)].Address); } }
        public Array<GunfireMusicStinger> Stingers { get { return new Array<GunfireMusicStinger>(this[nameof(Stingers)].Address); } }
    }
    public class GlobalObjectPool : ActorComponent
    {
        public GlobalObjectPool(nint addr) : base(addr) { }
        public Array<SimplePoolPrecache> StartingPools { get { return new Array<SimplePoolPrecache>(this[nameof(StartingPools)].Address); } }
        public Object Pools { get { return this[nameof(Pools)]; } set { this[nameof(Pools)] = value; } }
        public GlobalObjectPool GetInstance(World World) { return Invoke<GlobalObjectPool>(nameof(GetInstance), World); }
        public void Empty() { Invoke(nameof(Empty)); }
    }
    public class PooledItem : Object
    {
        public PooledItem(nint addr) : base(addr) { }
        public Object Value { get { return this[nameof(Value)].As<Object>(); } set { this["Value"] = value; } }
    }
    public class PooledActor : PooledItem
    {
        public PooledActor(nint addr) : base(addr) { }
    }
    public class PooledTracer : PooledActor
    {
        public PooledTracer(nint addr) : base(addr) { }
    }
    public class PooledSceneComponent : PooledItem
    {
        public PooledSceneComponent(nint addr) : base(addr) { }
    }
    public class ActorPooledProjectileInterface : Interface
    {
        public ActorPooledProjectileInterface(nint addr) : base(addr) { }
        public bool WantsPoolForClass(Object ProjectileClass) { return Invoke<bool>(nameof(WantsPoolForClass), ProjectileClass); }
    }
    public class PooledProjectileUtil : Object
    {
        public PooledProjectileUtil(nint addr) : base(addr) { }
        public bool InitializeProjectilePool(Object WorldContextObject, PooledProjectileParams PoolParams, bool bSetInitialSizeOnly) { return Invoke<bool>(nameof(InitializeProjectilePool), WorldContextObject, PoolParams, bSetInitialSizeOnly); }
    }
    public class SingleObjectPool : Object
    {
        public SingleObjectPool(nint addr) : base(addr) { }
        public Object ItemClass { get { return this[nameof(ItemClass)]; } set { this[nameof(ItemClass)] = value; } }
        public Array<PooledItem> Pool { get { return new Array<PooledItem>(this[nameof(Pool)].Address); } }
    }
    public class AttributesComponent : ActorComponent
    {
        public AttributesComponent(nint addr) : base(addr) { }
        public Array<Attribute> Attributes { get { return new Array<Attribute>(this[nameof(Attributes)].Address); } }
        public Array<AttributeLevel> AttributeLevels { get { return new Array<AttributeLevel>(this[nameof(AttributeLevels)].Address); } }
        public int AttributePointsPerLevel { get { return this[nameof(AttributePointsPerLevel)].GetValue<int>(); } set { this[nameof(AttributePointsPerLevel)].SetValue<int>(value); } }
        public int AttributePoints { get { return this[nameof(AttributePoints)].GetValue<int>(); } set { this[nameof(AttributePoints)].SetValue<int>(value); } }
        public int AttributePointsSpent { get { return this[nameof(AttributePointsSpent)].GetValue<int>(); } set { this[nameof(AttributePointsSpent)].SetValue<int>(value); } }
        public DataTable AttributePointsStats { get { return this[nameof(AttributePointsStats)].As<DataTable>(); } set { this["AttributePointsStats"] = value; } }
        public Object OnBeginPreview { get { return this[nameof(OnBeginPreview)]; } set { this[nameof(OnBeginPreview)] = value; } }
        public Object OnEndPreview { get { return this[nameof(OnEndPreview)]; } set { this[nameof(OnEndPreview)] = value; } }
        public Object OnPreviewStats { get { return this[nameof(OnPreviewStats)]; } set { this[nameof(OnPreviewStats)] = value; } }
        public Object OnPreAttributeIncreased { get { return this[nameof(OnPreAttributeIncreased)]; } set { this[nameof(OnPreAttributeIncreased)] = value; } }
        public Object OnPostAttributeIncreased { get { return this[nameof(OnPostAttributeIncreased)]; } set { this[nameof(OnPostAttributeIncreased)] = value; } }
        public int PreviewAttributePointsSpent { get { return this[nameof(PreviewAttributePointsSpent)].GetValue<int>(); } set { this[nameof(PreviewAttributePointsSpent)].SetValue<int>(value); } }
        public void SetAttributePoints(int AvailablePoints) { Invoke(nameof(SetAttributePoints), AvailablePoints); }
        public bool SetAttributeLevel(Object ID, int LevelToSet) { return Invoke<bool>(nameof(SetAttributeLevel), ID, LevelToSet); }
        public void PreviewIncreaseAttribute(Object ID) { Invoke(nameof(PreviewIncreaseAttribute), ID); }
        public void PreviewDecreaseAttribute(Object ID) { Invoke(nameof(PreviewDecreaseAttribute), ID); }
        public void PreviewCommit() { Invoke(nameof(PreviewCommit)); }
        public void OnRep_Attributes() { Invoke(nameof(OnRep_Attributes)); }
        public void OnLevelUp() { Invoke(nameof(OnLevelUp)); }
        public void OnComputeStats() { Invoke(nameof(OnComputeStats)); }
        public void OnComputeDerivedStats() { Invoke(nameof(OnComputeDerivedStats)); }
        public bool IsPreviewing() { return Invoke<bool>(nameof(IsPreviewing)); }
        public void IncreaseAttribute(Object ID) { Invoke(nameof(IncreaseAttribute), ID); }
        public float GetPreviewStatValue(Object Stat, bool ApplyMod) { return Invoke<float>(nameof(GetPreviewStatValue), Stat, ApplyMod); }
        public int GetPreviewAvailableAttributePoints() { return Invoke<int>(nameof(GetPreviewAvailableAttributePoints)); }
        public int GetPreviewAttributeLevel(Object ID) { return Invoke<int>(nameof(GetPreviewAttributeLevel), ID); }
        public int GetAvailableAttributePoints() { return Invoke<int>(nameof(GetAvailableAttributePoints)); }
        public int GetAttributeLevel(Object ID) { return Invoke<int>(nameof(GetAttributeLevel), ID); }
        public int GetAttributeCost(Object ID) { return Invoke<int>(nameof(GetAttributeCost), ID); }
        public Attribute GetAttributeByID(Object ID) { return Invoke<Attribute>(nameof(GetAttributeByID), ID); }
        public void EndPreview() { Invoke(nameof(EndPreview)); }
        public void BeginPreview() { Invoke(nameof(BeginPreview)); }
    }
    public class HasTraitCondition : Condition
    {
        public HasTraitCondition(nint addr) : base(addr) { }
        public Object Trait { get { return this[nameof(Trait)]; } set { this[nameof(Trait)] = value; } }
        public int RequiredLevel { get { return this[nameof(RequiredLevel)].GetValue<int>(); } set { this[nameof(RequiredLevel)].SetValue<int>(value); } }
    }
    public class StatModTable : Object
    {
        public StatModTable(nint addr) : base(addr) { }
        public bool IsModifierValidForContext(Actor SourceActor, DataTable Table, int ModifierLevel, Object ModifierBP, Object TableContextObject, bool UnequippedIsValid) { return Invoke<bool>(nameof(IsModifierValidForContext), SourceActor, Table, ModifierLevel, ModifierBP, TableContextObject, UnequippedIsValid); }
        public bool HasModifier(DataTable Table, Object ModifierBP) { return Invoke<bool>(nameof(HasModifier), Table, ModifierBP); }
        public void GetModifiers(Actor SourceActor, DataTable Table, int FromLevel, int ToLevel, Array<InspectInfo> OutInspectInfo) { Invoke(nameof(GetModifiers), SourceActor, Table, FromLevel, ToLevel, OutInspectInfo); }
    }
    public class TraitType : Object
    {
        public TraitType(nint addr) : base(addr) { }
    }
    public class QuestEntityComponent : ActorComponent
    {
        public QuestEntityComponent(nint addr) : base(addr) { }
    }
    public class QuestLocation : QuestComponent
    {
        public QuestLocation(nint addr) : base(addr) { }
    }
    public class QuestStateCondition : Condition
    {
        public QuestStateCondition(nint addr) : base(addr) { }
        public Object QuestNameID { get { return this[nameof(QuestNameID)]; } set { this[nameof(QuestNameID)] = value; } }
        public Object ObjectiveNameID { get { return this[nameof(ObjectiveNameID)]; } set { this[nameof(ObjectiveNameID)] = value; } }
        public EQuestState QuestState { get { return (EQuestState)this[nameof(QuestState)].GetValue<int>(); } set { this[nameof(QuestState)].SetValue<int>((int)value); } }
    }
    public class QuestObjective : ActorComponent
    {
        public QuestObjective(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int CounterMax { get { return this[nameof(CounterMax)].GetValue<int>(); } set { this[nameof(CounterMax)].SetValue<int>(value); } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
        public bool Pinned { get { return this[nameof(Pinned)].Flag; } set { this[nameof(Pinned)].Flag = value; } }
        public EQuestState State { get { return (EQuestState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public EQuestResult Result { get { return (EQuestResult)this[nameof(Result)].GetValue<int>(); } set { this[nameof(Result)].SetValue<int>((int)value); } }
        public byte Counter { get { return this[nameof(Counter)].GetValue<byte>(); } set { this[nameof(Counter)].SetValue<byte>(value); } }
        public float Timer { get { return this[nameof(Timer)].GetValue<float>(); } set { this[nameof(Timer)].SetValue<float>(value); } }
        public Actor RefActor { get { return this[nameof(RefActor)].As<Actor>(); } set { this["RefActor"] = value; } }
        public Object OnObjectiveActivated { get { return this[nameof(OnObjectiveActivated)]; } set { this[nameof(OnObjectiveActivated)] = value; } }
        public Object OnObjectiveCompleted { get { return this[nameof(OnObjectiveCompleted)]; } set { this[nameof(OnObjectiveCompleted)] = value; } }
        public Object OnObjectiveReset { get { return this[nameof(OnObjectiveReset)]; } set { this[nameof(OnObjectiveReset)] = value; } }
        public Object OnObjectiveTimerComplete { get { return this[nameof(OnObjectiveTimerComplete)]; } set { this[nameof(OnObjectiveTimerComplete)] = value; } }
        public Object OnObjectiveUpdated { get { return this[nameof(OnObjectiveUpdated)]; } set { this[nameof(OnObjectiveUpdated)] = value; } }
        public void SetTimer(float Time) { Invoke(nameof(SetTimer), Time); }
        public void SetRefActor(Actor Actor) { Invoke(nameof(SetRefActor), Actor); }
        public void SetPinned(bool ShouldBePinned) { Invoke(nameof(SetPinned), ShouldBePinned); }
        public void SetCounter(int Current, int Max) { Invoke(nameof(SetCounter), Current, Max); }
        public void ResetObjective() { Invoke(nameof(ResetObjective)); }
        public void ResetCounter() { Invoke(nameof(ResetCounter)); }
        public void OnRep_ObjectiveData() { Invoke(nameof(OnRep_ObjectiveData)); }
        public void OnInitializeQuest() { Invoke(nameof(OnInitializeQuest)); }
        public bool IsObjectiveComplete() { return Invoke<bool>(nameof(IsObjectiveComplete)); }
        public bool IsObjectiveActive() { return Invoke<bool>(nameof(IsObjectiveActive)); }
        public void IncrementCounter(bool AutoComplete) { Invoke(nameof(IncrementCounter), AutoComplete); }
        public Object GetNameID() { return Invoke<Object>(nameof(GetNameID)); }
        public void CompleteObjective(EQuestResult ObjectiveResult) { Invoke(nameof(CompleteObjective), ObjectiveResult); }
        public void ClearTimer(bool bSilent) { Invoke(nameof(ClearTimer), bSilent); }
        public void ActivateObjective(bool AutoCompleteActiveObjectives) { Invoke(nameof(ActivateObjective), AutoCompleteActiveObjectives); }
    }
    public class MovieSceneDialogSection : MovieSceneSection
    {
        public MovieSceneDialogSection(nint addr) : base(addr) { }
        public Object DialogText { get { return this[nameof(DialogText)]; } set { this[nameof(DialogText)] = value; } }
        public SoundGunfire Dialog { get { return this[nameof(Dialog)].As<SoundGunfire>(); } set { this["Dialog"] = value; } }
        public GunfireAudioPlayParams DialogPlayParams { get { return this[nameof(DialogPlayParams)].As<GunfireAudioPlayParams>(); } set { this["DialogPlayParams"] = value; } }
        public GunfireAudioAttachParams DialogAttachParams { get { return this[nameof(DialogAttachParams)].As<GunfireAudioAttachParams>(); } set { this["DialogAttachParams"] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
        public bool IgnoreVocalRange { get { return this[nameof(IgnoreVocalRange)].Flag; } set { this[nameof(IgnoreVocalRange)].Flag = value; } }
        public Guid ObjectBindingID { get { return this[nameof(ObjectBindingID)].As<Guid>(); } set { this["ObjectBindingID"] = value; } }
        public Object OnDialogFinished { get { return this[nameof(OnDialogFinished)]; } set { this[nameof(OnDialogFinished)] = value; } }
    }
    public class MovieSceneDialogTrack : MovieSceneNameableTrack
    {
        public MovieSceneDialogTrack(nint addr) : base(addr) { }
        public Array<MovieSceneSection> DialogSections { get { return new Array<MovieSceneSection>(this[nameof(DialogSections)].Address); } }
    }
    public class MovieSceneEquipmentSection : MovieSceneSection
    {
        public MovieSceneEquipmentSection(nint addr) : base(addr) { }
        public MovieSceneEquipmentSectionData EquipmentData { get { return this[nameof(EquipmentData)].As<MovieSceneEquipmentSectionData>(); } set { this["EquipmentData"] = value; } }
    }
    public class MovieSceneEquipmentTrack : MovieSceneNameableTrack
    {
        public MovieSceneEquipmentTrack(nint addr) : base(addr) { }
        public EFireEventsAtPosition EventPosition { get { return (EFireEventsAtPosition)this[nameof(EventPosition)].GetValue<int>(); } set { this[nameof(EventPosition)].SetValue<int>((int)value); } }
        public Array<MovieSceneSection> Sections { get { return new Array<MovieSceneSection>(this[nameof(Sections)].Address); } }
    }
    public class MovieSceneEventTreeSection : MovieSceneSection
    {
        public MovieSceneEventTreeSection(nint addr) : base(addr) { }
        public MovieSceneEventTreeSectionData EventData { get { return this[nameof(EventData)].As<MovieSceneEventTreeSectionData>(); } set { this["EventData"] = value; } }
    }
    public class MovieSceneEventTreeTrack : MovieSceneNameableTrack
    {
        public MovieSceneEventTreeTrack(nint addr) : base(addr) { }
        public bool bFireEventsWhenForwards { get { return this[nameof(bFireEventsWhenForwards)].Flag; } set { this[nameof(bFireEventsWhenForwards)].Flag = value; } }
        public bool bFireEventsWhenBackwards { get { return this[nameof(bFireEventsWhenBackwards)].Flag; } set { this[nameof(bFireEventsWhenBackwards)].Flag = value; } }
        public EFireEventsAtPosition EventPosition { get { return (EFireEventsAtPosition)this[nameof(EventPosition)].GetValue<int>(); } set { this[nameof(EventPosition)].SetValue<int>((int)value); } }
        public Array<MovieSceneObjectBindingID> EventReceivers { get { return new Array<MovieSceneObjectBindingID>(this[nameof(EventReceivers)].Address); } }
        public Object OnTrackTriggerNotified { get { return this[nameof(OnTrackTriggerNotified)]; } set { this[nameof(OnTrackTriggerNotified)] = value; } }
        public Array<MovieSceneSection> Sections { get { return new Array<MovieSceneSection>(this[nameof(Sections)].Address); } }
    }
    public class MovieScenePossessableTrack : MovieSceneNameableTrack
    {
        public MovieScenePossessableTrack(nint addr) : base(addr) { }
        public Array<MovieSceneSection> DummySectionArray { get { return new Array<MovieSceneSection>(this[nameof(DummySectionArray)].Address); } }
        public Object TargetPossessionClass { get { return this[nameof(TargetPossessionClass)]; } set { this[nameof(TargetPossessionClass)] = value; } }
        public Object OptionalTagForObjectToPossess { get { return this[nameof(OptionalTagForObjectToPossess)]; } set { this[nameof(OptionalTagForObjectToPossess)] = value; } }
        public bool SpawnActorIfNotFound { get { return this[nameof(SpawnActorIfNotFound)].Flag; } set { this[nameof(SpawnActorIfNotFound)].Flag = value; } }
        public bool PersistSpawnedActor { get { return this[nameof(PersistSpawnedActor)].Flag; } set { this[nameof(PersistSpawnedActor)].Flag = value; } }
        public bool PossessLocalMalePlayer { get { return this[nameof(PossessLocalMalePlayer)].Flag; } set { this[nameof(PossessLocalMalePlayer)].Flag = value; } }
        public bool PossessLocalFemalePlayer { get { return this[nameof(PossessLocalFemalePlayer)].Flag; } set { this[nameof(PossessLocalFemalePlayer)].Flag = value; } }
        public EPlayerPossessionType PlayerPossessionType { get { return (EPlayerPossessionType)this[nameof(PlayerPossessionType)].GetValue<int>(); } set { this[nameof(PlayerPossessionType)].SetValue<int>((int)value); } }
        public EPlayerPossessionGenderTarget GenderTarget { get { return (EPlayerPossessionGenderTarget)this[nameof(GenderTarget)].GetValue<int>(); } set { this[nameof(GenderTarget)].SetValue<int>((int)value); } }
        public bool DisableAI { get { return this[nameof(DisableAI)].Flag; } set { this[nameof(DisableAI)].Flag = value; } }
        public Object TargetStateOnRelease { get { return this[nameof(TargetStateOnRelease)]; } set { this[nameof(TargetStateOnRelease)] = value; } }
        public Array<Object> TargetTagsOnRelease { get { return new Array<Object>(this[nameof(TargetTagsOnRelease)].Address); } }
    }
    public class MovieScenePriorityFadeTrack : MovieSceneFadeTrack
    {
        public MovieScenePriorityFadeTrack(nint addr) : base(addr) { }
        public EFireEventsAtPosition EventPosition { get { return (EFireEventsAtPosition)this[nameof(EventPosition)].GetValue<int>(); } set { this[nameof(EventPosition)].SetValue<int>((int)value); } }
    }
    public class MovieSceneSoundSetSection : MovieSceneSection
    {
        public MovieSceneSoundSetSection(nint addr) : base(addr) { }
        public Object SoundIDName { get { return this[nameof(SoundIDName)]; } set { this[nameof(SoundIDName)] = value; } }
        public GunfireAudioPlayParams PlayParams { get { return this[nameof(PlayParams)].As<GunfireAudioPlayParams>(); } set { this["PlayParams"] = value; } }
        public GunfireAudioAttachParams AttachParams { get { return this[nameof(AttachParams)].As<GunfireAudioAttachParams>(); } set { this["AttachParams"] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public bool IgnoreVocalRange { get { return this[nameof(IgnoreVocalRange)].Flag; } set { this[nameof(IgnoreVocalRange)].Flag = value; } }
        public bool UseFacialAnimation { get { return this[nameof(UseFacialAnimation)].Flag; } set { this[nameof(UseFacialAnimation)].Flag = value; } }
        public Guid ObjectBindingID { get { return this[nameof(ObjectBindingID)].As<Guid>(); } set { this["ObjectBindingID"] = value; } }
        public Object OnSoundSetFinished { get { return this[nameof(OnSoundSetFinished)]; } set { this[nameof(OnSoundSetFinished)] = value; } }
    }
    public class MovieSceneSoundSetTrack : MovieSceneNameableTrack
    {
        public MovieSceneSoundSetTrack(nint addr) : base(addr) { }
        public Array<MovieSceneSection> SoundSetSections { get { return new Array<MovieSceneSection>(this[nameof(SoundSetSections)].Address); } }
    }
    public class MovieSceneUIEventSection : MovieSceneSection
    {
        public MovieSceneUIEventSection(nint addr) : base(addr) { }
        public Guid ObjectBindingID { get { return this[nameof(ObjectBindingID)].As<Guid>(); } set { this["ObjectBindingID"] = value; } }
        public SequencerUIEventPayload UIEventPayload { get { return this[nameof(UIEventPayload)].As<SequencerUIEventPayload>(); } set { this["UIEventPayload"] = value; } }
    }
    public class MovieSceneUIEventTrack : MovieSceneNameableTrack
    {
        public MovieSceneUIEventTrack(nint addr) : base(addr) { }
        public Array<MovieSceneSection> UIEventSections { get { return new Array<MovieSceneSection>(this[nameof(UIEventSections)].Address); } }
    }
    public class SequenceRenderSettings : Object
    {
        public SequenceRenderSettings(nint addr) : base(addr) { }
        public Array<Object> CVars { get { return new Array<Object>(this[nameof(CVars)].Address); } }
    }
    public class SequencerShotEntry : Object
    {
        public SequencerShotEntry(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public LevelSequence Sequence { get { return this[nameof(Sequence)].As<LevelSequence>(); } set { this["Sequence"] = value; } }
        public ESequenceOriginLocationOverride TargetOverride { get { return (ESequenceOriginLocationOverride)this[nameof(TargetOverride)].GetValue<int>(); } set { this[nameof(TargetOverride)].SetValue<int>((int)value); } }
        public Object ShotDialogObjectID { get { return this[nameof(ShotDialogObjectID)]; } set { this[nameof(ShotDialogObjectID)] = value; } }
        public bool CanLoop { get { return this[nameof(CanLoop)].Flag; } set { this[nameof(CanLoop)].Flag = value; } }
        public float PlaybackSpeedOverride { get { return this[nameof(PlaybackSpeedOverride)].GetValue<float>(); } set { this[nameof(PlaybackSpeedOverride)].SetValue<float>(value); } }
        public float PlaybackStartTimeEndRange { get { return this[nameof(PlaybackStartTimeEndRange)].GetValue<float>(); } set { this[nameof(PlaybackStartTimeEndRange)].SetValue<float>(value); } }
    }
    public class SequencerShotGroup : Object
    {
        public SequencerShotGroup(nint addr) : base(addr) { }
        public Array<SequencerShotEntry> ShotEntries { get { return new Array<SequencerShotEntry>(this[nameof(ShotEntries)].Address); } }
        public float GroupPlaybackSpeedOverride { get { return this[nameof(GroupPlaybackSpeedOverride)].GetValue<float>(); } set { this[nameof(GroupPlaybackSpeedOverride)].SetValue<float>(value); } }
        public byte TargetTypes { get { return this[nameof(TargetTypes)].GetValue<byte>(); } set { this[nameof(TargetTypes)].SetValue<byte>(value); } }
    }
    public class SpawnPointBase : ManagedActor
    {
        public SpawnPointBase(nint addr) : base(addr) { }
        public Object SpawnState { get { return this[nameof(SpawnState)]; } set { this[nameof(SpawnState)] = value; } }
        public Object OnSpawnFinished { get { return this[nameof(OnSpawnFinished)]; } set { this[nameof(OnSpawnFinished)] = value; } }
        public void Warp(Actor Actor) { Invoke(nameof(Warp), Actor); }
        public Actor SpawnActor(Object ActorClass, bool SpawnInRoot) { return Invoke<Actor>(nameof(SpawnActor), ActorClass, SpawnInRoot); }
        public void QueueSpawnActor(Object ActorClass, Actor OwningActor, bool SpawnInRoot) { Invoke(nameof(QueueSpawnActor), ActorClass, OwningActor, SpawnInRoot); }
        public void PreSpawn(Actor Actor) { Invoke(nameof(PreSpawn), Actor); }
        public void PostSpawn(Actor Actor) { Invoke(nameof(PostSpawn), Actor); }
        public void OnPreSpawn(Actor Actor) { Invoke(nameof(OnPreSpawn), Actor); }
        public void OnPostSpawn(Actor Actor) { Invoke(nameof(OnPostSpawn), Actor); }
        public void NotifySpawnComplete(Actor Actor) { Invoke(nameof(NotifySpawnComplete), Actor); }
        public void FinishSpawn(Actor Actor) { Invoke(nameof(FinishSpawn), Actor); }
        public Actor BeginSpawn(Actor OwningActor, Object ActorClass, bool SpawnInRoot) { return Invoke<Actor>(nameof(BeginSpawn), OwningActor, ActorClass, SpawnInRoot); }
    }
    public class SpawnPoint : SpawnPointBase
    {
        public SpawnPoint(nint addr) : base(addr) { }
        public bool AutoRegisterSpawnPoint { get { return this[nameof(AutoRegisterSpawnPoint)].Flag; } set { this[nameof(AutoRegisterSpawnPoint)].Flag = value; } }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public bool Busy { get { return this[nameof(Busy)].Flag; } set { this[nameof(Busy)].Flag = value; } }
        public ESpawnPointType SpawnPointType { get { return (ESpawnPointType)this[nameof(SpawnPointType)].GetValue<int>(); } set { this[nameof(SpawnPointType)].SetValue<int>((int)value); } }
        public SceneComponent SpawnPosition { get { return this[nameof(SpawnPosition)].As<SceneComponent>(); } set { this["SpawnPosition"] = value; } }
        public SceneComponent SpawnEndPosition { get { return this[nameof(SpawnEndPosition)].As<SceneComponent>(); } set { this["SpawnEndPosition"] = value; } }
        public Array<Object> SpawnTags { get { return new Array<Object>(this[nameof(SpawnTags)].Address); } }
        public float SpawnMinCooldown { get { return this[nameof(SpawnMinCooldown)].GetValue<float>(); } set { this[nameof(SpawnMinCooldown)].SetValue<float>(value); } }
        public float SpawnMaxCooldown { get { return this[nameof(SpawnMaxCooldown)].GetValue<float>(); } set { this[nameof(SpawnMaxCooldown)].SetValue<float>(value); } }
        public float SpawnPointGroundCastDistance { get { return this[nameof(SpawnPointGroundCastDistance)].GetValue<float>(); } set { this[nameof(SpawnPointGroundCastDistance)].SetValue<float>(value); } }
        public void StartPreSpawn(Actor Actor) { Invoke(nameof(StartPreSpawn), Actor); }
        public void StartCoolDown() { Invoke(nameof(StartCoolDown)); }
        public void SetEnabled(bool EnabledIn) { Invoke(nameof(SetEnabled), EnabledIn); }
        public void SetBusy(bool IsBusy) { Invoke(nameof(SetBusy), IsBusy); }
        public void OnPostEditMove() { Invoke(nameof(OnPostEditMove)); }
        public bool IsCooledDown() { return Invoke<bool>(nameof(IsCooledDown)); }
        public bool GetEnabled() { return Invoke<bool>(nameof(GetEnabled)); }
        public bool GetBusy() { return Invoke<bool>(nameof(GetBusy)); }
        public void ClearCoolDown() { Invoke(nameof(ClearCoolDown)); }
    }
    public class CharacterSpawnPoint : SpawnPoint
    {
        public CharacterSpawnPoint(nint addr) : base(addr) { }
        public Object OnCharacterSpawned { get { return this[nameof(OnCharacterSpawned)]; } set { this[nameof(OnCharacterSpawned)] = value; } }
        public Object OnCharacterDied { get { return this[nameof(OnCharacterDied)]; } set { this[nameof(OnCharacterDied)] = value; } }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public Object EnemyType { get { return this[nameof(EnemyType)]; } set { this[nameof(EnemyType)] = value; } }
        public Array<Object> CharacterTags { get { return new Array<Object>(this[nameof(CharacterTags)].Address); } }
        public float SpawnDelayMin { get { return this[nameof(SpawnDelayMin)].GetValue<float>(); } set { this[nameof(SpawnDelayMin)].SetValue<float>(value); } }
        public float SpawnDelayMax { get { return this[nameof(SpawnDelayMax)].GetValue<float>(); } set { this[nameof(SpawnDelayMax)].SetValue<float>(value); } }
        public float PerceptionScalar { get { return this[nameof(PerceptionScalar)].GetValue<float>(); } set { this[nameof(PerceptionScalar)].SetValue<float>(value); } }
        public AIPathPoint PatrolPath { get { return this[nameof(PatrolPath)].As<AIPathPoint>(); } set { this["PatrolPath"] = value; } }
        public AIPathPoint SpawnPath { get { return this[nameof(SpawnPath)].As<AIPathPoint>(); } set { this["SpawnPath"] = value; } }
        public bool bApplyThreat { get { return this[nameof(bApplyThreat)].Flag; } set { this[nameof(bApplyThreat)].Flag = value; } }
        public float ThreatToApply { get { return this[nameof(ThreatToApply)].GetValue<float>(); } set { this[nameof(ThreatToApply)].SetValue<float>(value); } }
        public bool bUsesDeferredSpawnOptimization { get { return this[nameof(bUsesDeferredSpawnOptimization)].Flag; } set { this[nameof(bUsesDeferredSpawnOptimization)].Flag = value; } }
        public CharacterGunfire SpawnedCharacter { get { return this[nameof(SpawnedCharacter)].As<CharacterGunfire>(); } set { this["SpawnedCharacter"] = value; } }
        public TimerHandle DeferredSpawnHandle { get { return this[nameof(DeferredSpawnHandle)].As<TimerHandle>(); } set { this["DeferredSpawnHandle"] = value; } }
        public bool bUseEditorVisuals { get { return this[nameof(bUseEditorVisuals)].Flag; } set { this[nameof(bUseEditorVisuals)].Flag = value; } }
        public SpawnPointManager SpawnPointManager { get { return this[nameof(SpawnPointManager)].As<SpawnPointManager>(); } set { this["SpawnPointManager"] = value; } }
        public Array<CharacterGunfire> SpawnedCharactersList { get { return new Array<CharacterGunfire>(this[nameof(SpawnedCharactersList)].Address); } }
        public void Spawn(bool bUseDeferredOptimization) { Invoke(nameof(Spawn), bUseDeferredOptimization); }
        public void ResetSpawn(bool DestroySpawnedActors) { Invoke(nameof(ResetSpawn), DestroySpawnedActors); }
        public void PostInitSpawnPoint() { Invoke(nameof(PostInitSpawnPoint)); }
        public void OnCharacterDestroyed(Actor DestroyedActor) { Invoke(nameof(OnCharacterDestroyed), DestroyedActor); }
        public void OnCharacterDead(byte Reason, CharacterGunfire Character, Actor Cause) { Invoke(nameof(OnCharacterDead), Reason, Character, Cause); }
        public int GetNumAliveSpawns() { return Invoke<int>(nameof(GetNumAliveSpawns)); }
        public Object GetEnemyTypeOverride() { return Invoke<Object>(nameof(GetEnemyTypeOverride)); }
        public bool CanSpawnFromDelay() { return Invoke<bool>(nameof(CanSpawnFromDelay)); }
        public bool CanSpawn() { return Invoke<bool>(nameof(CanSpawn)); }
    }
    public class SpawnPointGeneratorSeed : Actor
    {
        public SpawnPointGeneratorSeed(nint addr) : base(addr) { }
    }
    public class SpawnPointManager : ActorComponent
    {
        public SpawnPointManager(nint addr) : base(addr) { }
        public Array<SpawnPoint> SpawnPoints { get { return new Array<SpawnPoint>(this[nameof(SpawnPoints)].Address); } }
        public Array<SpawnPoint> PlayerSpawnPoints { get { return new Array<SpawnPoint>(this[nameof(PlayerSpawnPoints)].Address); } }
        public Array<SpawnPoint> SpawnPointDefaults { get { return new Array<SpawnPoint>(this[nameof(SpawnPointDefaults)].Address); } }
        public Array<QueuedSpawn> SpawnQueue { get { return new Array<QueuedSpawn>(this[nameof(SpawnQueue)].Address); } }
        public RecastNavMesh NavMesh { get { return this[nameof(NavMesh)].As<RecastNavMesh>(); } set { this["NavMesh"] = value; } }
        public void SpawnCharacter(SpawnEntry Entry, Actor Owner, Vector SpawnPos, bool Transient) { Invoke(nameof(SpawnCharacter), Entry, Owner, SpawnPos, Transient); }
        public Actor SpawnActorDeferred(Object WorldContextObject, Object ActorBP, Transform Transform) { return Invoke<Actor>(nameof(SpawnActorDeferred), WorldContextObject, ActorBP, Transform); }
        public void Spawn(Box Region, SpawnList SpawnList, Level OwningLevel, bool Transient, Array<Actor> SpawnedActors) { Invoke(nameof(Spawn), Region, SpawnList, OwningLevel, Transient, SpawnedActors); }
        public SpawnPointManager GetInstance(Object WorldContextObject) { return Invoke<SpawnPointManager>(nameof(GetInstance), WorldContextObject); }
        public bool FindSpawnPointOnNavMesh(Actor RefActor, Vector RefPosition, Vector OutPosition, float RadiusMin, float RadiusMax, bool InFOV) { return Invoke<bool>(nameof(FindSpawnPointOnNavMesh), RefActor, RefPosition, OutPosition, RadiusMin, RadiusMax, InFOV); }
        public bool FindNearbySpawnPosition(Actor Actor, Vector OutPosition, float RadiusMin, float RadiusMax, bool InFOVOnly) { return Invoke<bool>(nameof(FindNearbySpawnPosition), Actor, OutPosition, RadiusMin, RadiusMax, InFOVOnly); }
        public void FinalizeSpawnActor(Actor Actor, Transform Transform) { Invoke(nameof(FinalizeSpawnActor), Actor, Transform); }
    }
    public class SpawnTableCharacter : SpawnTableElement
    {
        public SpawnTableCharacter(nint addr) : base(addr) { }
        public Object CharacterBP { get { return this[nameof(CharacterBP)]; } set { this[nameof(CharacterBP)] = value; } }
        public Array<Object> RandomCharacterBP { get { return new Array<Object>(this[nameof(RandomCharacterBP)].Address); } }
        public Array<Object> ActorTags { get { return new Array<Object>(this[nameof(ActorTags)].Address); } }
        public int QuantityMin { get { return this[nameof(QuantityMin)].GetValue<int>(); } set { this[nameof(QuantityMin)].SetValue<int>(value); } }
        public int QuantityMax { get { return this[nameof(QuantityMax)].GetValue<int>(); } set { this[nameof(QuantityMax)].SetValue<int>(value); } }
        public bool QuantityScaling { get { return this[nameof(QuantityScaling)].Flag; } set { this[nameof(QuantityScaling)].Flag = value; } }
        public Array<Object> SpawnPointTags { get { return new Array<Object>(this[nameof(SpawnPointTags)].Address); } }
        public bool SpawnOnNavmesh { get { return this[nameof(SpawnOnNavmesh)].Flag; } set { this[nameof(SpawnOnNavmesh)].Flag = value; } }
        public bool SpawnAccessibleOnly { get { return this[nameof(SpawnAccessibleOnly)].Flag; } set { this[nameof(SpawnAccessibleOnly)].Flag = value; } }
        public ESpawnVisibility SpawnVisibility { get { return (ESpawnVisibility)this[nameof(SpawnVisibility)].GetValue<int>(); } set { this[nameof(SpawnVisibility)].SetValue<int>((int)value); } }
        public float SpawnDistanceMin { get { return this[nameof(SpawnDistanceMin)].GetValue<float>(); } set { this[nameof(SpawnDistanceMin)].SetValue<float>(value); } }
        public float SpawnDistanceMax { get { return this[nameof(SpawnDistanceMax)].GetValue<float>(); } set { this[nameof(SpawnDistanceMax)].SetValue<float>(value); } }
        public bool ForceSpawnDistance { get { return this[nameof(ForceSpawnDistance)].Flag; } set { this[nameof(ForceSpawnDistance)].Flag = value; } }
        public float SpawnRateMin { get { return this[nameof(SpawnRateMin)].GetValue<float>(); } set { this[nameof(SpawnRateMin)].SetValue<float>(value); } }
        public float SpawnRateMax { get { return this[nameof(SpawnRateMax)].GetValue<float>(); } set { this[nameof(SpawnRateMax)].SetValue<float>(value); } }
        public ESpawnFrom SpawnFrom { get { return (ESpawnFrom)this[nameof(SpawnFrom)].GetValue<int>(); } set { this[nameof(SpawnFrom)].SetValue<int>((int)value); } }
        public float SpawnArc { get { return this[nameof(SpawnArc)].GetValue<float>(); } set { this[nameof(SpawnArc)].SetValue<float>(value); } }
        public Object SpawnFaction { get { return this[nameof(SpawnFaction)]; } set { this[nameof(SpawnFaction)] = value; } }
        public ESpawnThrottling SpawnThrottling { get { return (ESpawnThrottling)this[nameof(SpawnThrottling)].GetValue<int>(); } set { this[nameof(SpawnThrottling)].SetValue<int>((int)value); } }
        public float SpawnWeightMultiplier { get { return this[nameof(SpawnWeightMultiplier)].GetValue<float>(); } set { this[nameof(SpawnWeightMultiplier)].SetValue<float>(value); } }
        public bool UseSpawnPointSpawnParams { get { return this[nameof(UseSpawnPointSpawnParams)].Flag; } set { this[nameof(UseSpawnPointSpawnParams)].Flag = value; } }
        public ESpawnVisibility SpawnPointSpawnVisibility { get { return (ESpawnVisibility)this[nameof(SpawnPointSpawnVisibility)].GetValue<int>(); } set { this[nameof(SpawnPointSpawnVisibility)].SetValue<int>((int)value); } }
        public float SpawnPointSpawnDistanceMin { get { return this[nameof(SpawnPointSpawnDistanceMin)].GetValue<float>(); } set { this[nameof(SpawnPointSpawnDistanceMin)].SetValue<float>(value); } }
        public float SpawnPointSpawnDistanceMax { get { return this[nameof(SpawnPointSpawnDistanceMax)].GetValue<float>(); } set { this[nameof(SpawnPointSpawnDistanceMax)].SetValue<float>(value); } }
    }
    public class SpawnTableItem : SpawnTableElement
    {
        public SpawnTableItem(nint addr) : base(addr) { }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
        public int QuantityMin { get { return this[nameof(QuantityMin)].GetValue<int>(); } set { this[nameof(QuantityMin)].SetValue<int>(value); } }
        public int QuantityMax { get { return this[nameof(QuantityMax)].GetValue<int>(); } set { this[nameof(QuantityMax)].SetValue<int>(value); } }
        public float QuantityScalarPerLevel { get { return this[nameof(QuantityScalarPerLevel)].GetValue<float>(); } set { this[nameof(QuantityScalarPerLevel)].SetValue<float>(value); } }
        public Array<Object> QuantityStats { get { return new Array<Object>(this[nameof(QuantityStats)].Address); } }
        public int ItemLevel { get { return this[nameof(ItemLevel)].GetValue<int>(); } set { this[nameof(ItemLevel)].SetValue<int>(value); } }
        public bool SetGeneratedItemLevel { get { return this[nameof(SetGeneratedItemLevel)].Flag; } set { this[nameof(SetGeneratedItemLevel)].Flag = value; } }
        public int GeneratedItemLevelOffsetMin { get { return this[nameof(GeneratedItemLevelOffsetMin)].GetValue<int>(); } set { this[nameof(GeneratedItemLevelOffsetMin)].SetValue<int>(value); } }
        public int GeneratedItemLevelOffsetMax { get { return this[nameof(GeneratedItemLevelOffsetMax)].GetValue<int>(); } set { this[nameof(GeneratedItemLevelOffsetMax)].SetValue<int>(value); } }
        public Array<Object> SpawnPointTags { get { return new Array<Object>(this[nameof(SpawnPointTags)].Address); } }
    }
    public class SpawnTableActor : SpawnTableElement
    {
        public SpawnTableActor(nint addr) : base(addr) { }
        public Object ActorBP { get { return this[nameof(ActorBP)]; } set { this[nameof(ActorBP)] = value; } }
        public int QuantityMin { get { return this[nameof(QuantityMin)].GetValue<int>(); } set { this[nameof(QuantityMin)].SetValue<int>(value); } }
        public int QuantityMax { get { return this[nameof(QuantityMax)].GetValue<int>(); } set { this[nameof(QuantityMax)].SetValue<int>(value); } }
        public bool QuantityScaling { get { return this[nameof(QuantityScaling)].Flag; } set { this[nameof(QuantityScaling)].Flag = value; } }
        public Array<Object> SpawnPointTags { get { return new Array<Object>(this[nameof(SpawnPointTags)].Address); } }
        public bool SpawnAccessibleOnly { get { return this[nameof(SpawnAccessibleOnly)].Flag; } set { this[nameof(SpawnAccessibleOnly)].Flag = value; } }
    }
    public class SpawnTableLink : SpawnTableEntry
    {
        public SpawnTableLink(nint addr) : base(addr) { }
        public SpawnTable Table { get { return this[nameof(Table)].As<SpawnTable>(); } set { this["Table"] = value; } }
        public Array<Object> AdditionalTags { get { return new Array<Object>(this[nameof(AdditionalTags)].Address); } }
        public int QuantityMin { get { return this[nameof(QuantityMin)].GetValue<int>(); } set { this[nameof(QuantityMin)].SetValue<int>(value); } }
        public int QuantityMax { get { return this[nameof(QuantityMax)].GetValue<int>(); } set { this[nameof(QuantityMax)].SetValue<int>(value); } }
    }
    public class SpawnTable : SpawnTableEntry
    {
        public SpawnTable(nint addr) : base(addr) { }
        public ESpawnTableType TableType { get { return (ESpawnTableType)this[nameof(TableType)].GetValue<int>(); } set { this[nameof(TableType)].SetValue<int>((int)value); } }
        public Array<SpawnTableEntry> Entries { get { return new Array<SpawnTableEntry>(this[nameof(Entries)].Address); } }
        public int TableGroupRollMin { get { return this[nameof(TableGroupRollMin)].GetValue<int>(); } set { this[nameof(TableGroupRollMin)].SetValue<int>(value); } }
        public int TableGroupRollMax { get { return this[nameof(TableGroupRollMax)].GetValue<int>(); } set { this[nameof(TableGroupRollMax)].SetValue<int>(value); } }
        public void GenerateWithSeed(Object WorldContextObject, int Level, int Rating, Array<Object> InTags, SpawnList SpawnList, ESpawnType Type, int RandomSeed) { Invoke(nameof(GenerateWithSeed), WorldContextObject, Level, Rating, InTags, SpawnList, Type, RandomSeed); }
        public void Generate(Object WorldContextObject, int Level, int Rating, Array<Object> InTags, SpawnList SpawnList, ESpawnType Type) { Invoke(nameof(Generate), WorldContextObject, Level, Rating, InTags, SpawnList, Type); }
    }
    public class SpawnUtil : Object
    {
        public SpawnUtil(nint addr) : base(addr) { }
        public bool PickSingleItem(Object WorldContextObject, SpawnTable SpawnTable, int Level, Array<Object> SpawnTags, SpawnEntry Out) { return Invoke<bool>(nameof(PickSingleItem), WorldContextObject, SpawnTable, Level, SpawnTags, Out); }
        public bool FindRadialSpawnPosition(Actor SpawnPoint, Actor Actor, float Radius, int Slots, Transform SpawnPosition) { return Invoke<bool>(nameof(FindRadialSpawnPosition), SpawnPoint, Actor, Radius, Slots, SpawnPosition); }
    }
    public class ActorStateTransition : InheritableObject
    {
        public ActorStateTransition(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public ActorStateID DestinationStateID { get { return this[nameof(DestinationStateID)].As<ActorStateID>(); } set { this["DestinationStateID"] = value; } }
        public Object Comment { get { return this[nameof(Comment)]; } set { this[nameof(Comment)] = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public bool bResetDestinationAnimationID { get { return this[nameof(bResetDestinationAnimationID)].Flag; } set { this[nameof(bResetDestinationAnimationID)].Flag = value; } }
        public ActorState CachedState { get { return this[nameof(CachedState)].As<ActorState>(); } set { this["CachedState"] = value; } }
    }
    public class CompoundState : ActorState
    {
        public CompoundState(nint addr) : base(addr) { }
        public ActorStateID DefaultStateID { get { return this[nameof(DefaultStateID)].As<ActorStateID>(); } set { this["DefaultStateID"] = value; } }
        public Array<ActorState> States { get { return new Array<ActorState>(this[nameof(States)].Address); } }
    }
    public class BlueprintCondition : Condition
    {
        public BlueprintCondition(nint addr) : base(addr) { }
        public bool TestCondition(Actor Actor) { return Invoke<bool>(nameof(TestCondition), Actor); }
    }
    public class ActorContextCondition : Condition
    {
        public ActorContextCondition(nint addr) : base(addr) { }
        public EActorContext Context { get { return (EActorContext)this[nameof(Context)].GetValue<int>(); } set { this[nameof(Context)].SetValue<int>((int)value); } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class AimTargetCondition : Condition
    {
        public AimTargetCondition(nint addr) : base(addr) { }
    }
    public class AngleDiffCondition : Condition
    {
        public AngleDiffCondition(nint addr) : base(addr) { }
        public EAngleComponent AngleComponent { get { return (EAngleComponent)this[nameof(AngleComponent)].GetValue<int>(); } set { this[nameof(AngleComponent)].SetValue<int>((int)value); } }
        public EAngleRef Angle1Ref { get { return (EAngleRef)this[nameof(Angle1Ref)].GetValue<int>(); } set { this[nameof(Angle1Ref)].SetValue<int>((int)value); } }
        public float Angle1RefOffset { get { return this[nameof(Angle1RefOffset)].GetValue<float>(); } set { this[nameof(Angle1RefOffset)].SetValue<float>(value); } }
        public EAngleRef Angle2Ref { get { return (EAngleRef)this[nameof(Angle2Ref)].GetValue<int>(); } set { this[nameof(Angle2Ref)].SetValue<int>((int)value); } }
        public float Angle2RefOffset { get { return this[nameof(Angle2RefOffset)].GetValue<float>(); } set { this[nameof(Angle2RefOffset)].SetValue<float>(value); } }
        public float Arc { get { return this[nameof(Arc)].GetValue<float>(); } set { this[nameof(Arc)].SetValue<float>(value); } }
    }
    public class ApexCondition : Condition
    {
        public ApexCondition(nint addr) : base(addr) { }
        public float MaximumXYVelocity { get { return this[nameof(MaximumXYVelocity)].GetValue<float>(); } set { this[nameof(MaximumXYVelocity)].SetValue<float>(value); } }
    }
    public class ButtonCondition : Condition
    {
        public ButtonCondition(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public ButtonState State { get { return (ButtonState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float TimeInState { get { return this[nameof(TimeInState)].GetValue<float>(); } set { this[nameof(TimeInState)].SetValue<float>(value); } }
        public float InputBufferTime { get { return this[nameof(InputBufferTime)].GetValue<float>(); } set { this[nameof(InputBufferTime)].SetValue<float>(value); } }
        public float WindowStart { get { return this[nameof(WindowStart)].GetValue<float>(); } set { this[nameof(WindowStart)].SetValue<float>(value); } }
        public float WindowEnd { get { return this[nameof(WindowEnd)].GetValue<float>(); } set { this[nameof(WindowEnd)].SetValue<float>(value); } }
        public Object Window { get { return this[nameof(Window)]; } set { this[nameof(Window)] = value; } }
        public bool PersistValid { get { return this[nameof(PersistValid)].Flag; } set { this[nameof(PersistValid)].Flag = value; } }
        public bool PersistNotValid { get { return this[nameof(PersistNotValid)].Flag; } set { this[nameof(PersistNotValid)].Flag = value; } }
    }
    public class CanStopAimingCondition : Condition
    {
        public CanStopAimingCondition(nint addr) : base(addr) { }
    }
    public class CanStopCondition : Condition
    {
        public CanStopCondition(nint addr) : base(addr) { }
        public float DistanceThreshold { get { return this[nameof(DistanceThreshold)].GetValue<float>(); } set { this[nameof(DistanceThreshold)].SetValue<float>(value); } }
        public bool bStopOnPendingInterrupt { get { return this[nameof(bStopOnPendingInterrupt)].Flag; } set { this[nameof(bStopOnPendingInterrupt)].Flag = value; } }
    }
    public class ChallengeCompleteCondition : Condition
    {
        public ChallengeCompleteCondition(nint addr) : base(addr) { }
        public Object Challenge { get { return this[nameof(Challenge)]; } set { this[nameof(Challenge)] = value; } }
    }
    public class ChanceCondition : Condition
    {
        public ChanceCondition(nint addr) : base(addr) { }
        public int Chance { get { return this[nameof(Chance)].GetValue<int>(); } set { this[nameof(Chance)].SetValue<int>(value); } }
        public int ChanceIncreaseOnFail { get { return this[nameof(ChanceIncreaseOnFail)].GetValue<int>(); } set { this[nameof(ChanceIncreaseOnFail)].SetValue<int>(value); } }
        public bool StoreConditionState { get { return this[nameof(StoreConditionState)].Flag; } set { this[nameof(StoreConditionState)].Flag = value; } }
    }
    public class CharacterLevelCondition : Condition
    {
        public CharacterLevelCondition(nint addr) : base(addr) { }
        public int RequiredCharacterLevel { get { return this[nameof(RequiredCharacterLevel)].GetValue<int>(); } set { this[nameof(RequiredCharacterLevel)].SetValue<int>(value); } }
    }
    public class ChargeCondition : Condition
    {
        public ChargeCondition(nint addr) : base(addr) { }
        public EVelocityType Type { get { return (EVelocityType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public float Threshold { get { return this[nameof(Threshold)].GetValue<float>(); } set { this[nameof(Threshold)].SetValue<float>(value); } }
        public bool bIgnoreTimeDilation { get { return this[nameof(bIgnoreTimeDilation)].Flag; } set { this[nameof(bIgnoreTimeDilation)].Flag = value; } }
    }
    public class CinematicCondition : Condition
    {
        public CinematicCondition(nint addr) : base(addr) { }
    }
    public class CliffConditionParams : Object
    {
        public CliffConditionParams(nint addr) : base(addr) { }
        public int CliffCheckIterations { get { return this[nameof(CliffCheckIterations)].GetValue<int>(); } set { this[nameof(CliffCheckIterations)].SetValue<int>(value); } }
        public bool bUseMoveInputDirection { get { return this[nameof(bUseMoveInputDirection)].Flag; } set { this[nameof(bUseMoveInputDirection)].Flag = value; } }
        public float MinimumInputStrength { get { return this[nameof(MinimumInputStrength)].GetValue<float>(); } set { this[nameof(MinimumInputStrength)].SetValue<float>(value); } }
        public bool bUseVelocityDirection { get { return this[nameof(bUseVelocityDirection)].Flag; } set { this[nameof(bUseVelocityDirection)].Flag = value; } }
        public float MinimumVelocity { get { return this[nameof(MinimumVelocity)].GetValue<float>(); } set { this[nameof(MinimumVelocity)].SetValue<float>(value); } }
        public float DirectionAngleOffset { get { return this[nameof(DirectionAngleOffset)].GetValue<float>(); } set { this[nameof(DirectionAngleOffset)].SetValue<float>(value); } }
        public float GroundCheckHorizontalDistance { get { return this[nameof(GroundCheckHorizontalDistance)].GetValue<float>(); } set { this[nameof(GroundCheckHorizontalDistance)].SetValue<float>(value); } }
        public float GroundCheckVerticalDistance { get { return this[nameof(GroundCheckVerticalDistance)].GetValue<float>(); } set { this[nameof(GroundCheckVerticalDistance)].SetValue<float>(value); } }
        public float MinimumCliffHeight { get { return this[nameof(MinimumCliffHeight)].GetValue<float>(); } set { this[nameof(MinimumCliffHeight)].SetValue<float>(value); } }
        public float CliffHeightSweepRadius { get { return this[nameof(CliffHeightSweepRadius)].GetValue<float>(); } set { this[nameof(CliffHeightSweepRadius)].SetValue<float>(value); } }
        public float CliffHeightIterationDistance { get { return this[nameof(CliffHeightIterationDistance)].GetValue<float>(); } set { this[nameof(CliffHeightIterationDistance)].SetValue<float>(value); } }
        public bool bOnlyIfNotWalkable { get { return this[nameof(bOnlyIfNotWalkable)].Flag; } set { this[nameof(bOnlyIfNotWalkable)].Flag = value; } }
        public ECliffWallCheckMethod WallCheckMethod { get { return (ECliffWallCheckMethod)this[nameof(WallCheckMethod)].GetValue<int>(); } set { this[nameof(WallCheckMethod)].SetValue<int>((int)value); } }
        public float WallCheckDistance { get { return this[nameof(WallCheckDistance)].GetValue<float>(); } set { this[nameof(WallCheckDistance)].SetValue<float>(value); } }
        public float MinimumWallCheckDistanceFromCliffPosition { get { return this[nameof(MinimumWallCheckDistanceFromCliffPosition)].GetValue<float>(); } set { this[nameof(MinimumWallCheckDistanceFromCliffPosition)].SetValue<float>(value); } }
        public float WallCheckHeightOffset { get { return this[nameof(WallCheckHeightOffset)].GetValue<float>(); } set { this[nameof(WallCheckHeightOffset)].SetValue<float>(value); } }
        public float WallCheckSlideAngle { get { return this[nameof(WallCheckSlideAngle)].GetValue<float>(); } set { this[nameof(WallCheckSlideAngle)].SetValue<float>(value); } }
    }
    public class CliffConditionParams_Default : CliffConditionParams
    {
        public CliffConditionParams_Default(nint addr) : base(addr) { }
    }
    public class CliffCondition : TraversalCondition
    {
        public CliffCondition(nint addr) : base(addr) { }
        public Object Params { get { return this[nameof(Params)]; } set { this[nameof(Params)] = value; } }
    }
    public class CooldownCondition : Condition
    {
        public CooldownCondition(nint addr) : base(addr) { }
        public Object Cooldown { get { return this[nameof(Cooldown)]; } set { this[nameof(Cooldown)] = value; } }
    }
    public class CounterCondition : Condition
    {
        public CounterCondition(nint addr) : base(addr) { }
        public uint Counter { get { return this[nameof(Counter)].GetValue<uint>(); } set { this[nameof(Counter)].SetValue<uint>(value); } }
    }
    public class CustomCondition : Condition
    {
        public CustomCondition(nint addr) : base(addr) { }
        public Object FunctionName { get { return this[nameof(FunctionName)]; } set { this[nameof(FunctionName)] = value; } }
    }
    public class DamageTakenCondition : Condition
    {
        public DamageTakenCondition(nint addr) : base(addr) { }
        public Array<Object> DamageClasses { get { return new Array<Object>(this[nameof(DamageClasses)].Address); } }
        public Object HitLocation { get { return this[nameof(HitLocation)]; } set { this[nameof(HitLocation)] = value; } }
        public float DamageWindow { get { return this[nameof(DamageWindow)].GetValue<float>(); } set { this[nameof(DamageWindow)].SetValue<float>(value); } }
        public float MinDamagePercent { get { return this[nameof(MinDamagePercent)].GetValue<float>(); } set { this[nameof(MinDamagePercent)].SetValue<float>(value); } }
        public float MaxDamagePercent { get { return this[nameof(MaxDamagePercent)].GetValue<float>(); } set { this[nameof(MaxDamagePercent)].SetValue<float>(value); } }
        public bool bIgnoreImpactScalar { get { return this[nameof(bIgnoreImpactScalar)].Flag; } set { this[nameof(bIgnoreImpactScalar)].Flag = value; } }
        public float ReferenceAngle { get { return this[nameof(ReferenceAngle)].GetValue<float>(); } set { this[nameof(ReferenceAngle)].SetValue<float>(value); } }
        public float Arc { get { return this[nameof(Arc)].GetValue<float>(); } set { this[nameof(Arc)].SetValue<float>(value); } }
    }
    public class DifficultyCondition : Condition
    {
        public DifficultyCondition(nint addr) : base(addr) { }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public int Difficulty { get { return this[nameof(Difficulty)].GetValue<int>(); } set { this[nameof(Difficulty)].SetValue<int>(value); } }
    }
    public class DiveCondition : Condition
    {
        public DiveCondition(nint addr) : base(addr) { }
        public Array<Object> Types { get { return new Array<Object>(this[nameof(Types)].Address); } }
    }
    public class EquipmentLevelCondition : Condition
    {
        public EquipmentLevelCondition(nint addr) : base(addr) { }
        public int RequiredLevel { get { return this[nameof(RequiredLevel)].GetValue<int>(); } set { this[nameof(RequiredLevel)].SetValue<int>(value); } }
    }
    public class EquippedItemChangedCondition : Condition
    {
        public EquippedItemChangedCondition(nint addr) : base(addr) { }
        public Object ItemType { get { return this[nameof(ItemType)]; } set { this[nameof(ItemType)] = value; } }
    }
    public class FallCondition : Condition
    {
        public FallCondition(nint addr) : base(addr) { }
        public EFallConditionCheck CheckBy { get { return (EFallConditionCheck)this[nameof(CheckBy)].GetValue<int>(); } set { this[nameof(CheckBy)].SetValue<int>((int)value); } }
        public float MinimumFallDistance { get { return this[nameof(MinimumFallDistance)].GetValue<float>(); } set { this[nameof(MinimumFallDistance)].SetValue<float>(value); } }
    }
    public class FlinchCondition : Condition
    {
        public FlinchCondition(nint addr) : base(addr) { }
    }
    public class GroupCondition : Condition
    {
        public GroupCondition(nint addr) : base(addr) { }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class HasCameraControlCondition : Condition
    {
        public HasCameraControlCondition(nint addr) : base(addr) { }
        public bool bRequiresFullControl { get { return this[nameof(bRequiresFullControl)].Flag; } set { this[nameof(bRequiresFullControl)].Flag = value; } }
    }
    public class HasInteractiveCondition : Condition
    {
        public HasInteractiveCondition(nint addr) : base(addr) { }
    }
    public class HasItemByTypeCondition : Condition
    {
        public HasItemByTypeCondition(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public byte Quantity { get { return this[nameof(Quantity)].GetValue<byte>(); } set { this[nameof(Quantity)].SetValue<byte>(value); } }
        public EYesNo Equipped { get { return (EYesNo)this[nameof(Equipped)].GetValue<int>(); } set { this[nameof(Equipped)].SetValue<int>((int)value); } }
        public EYesNo Active { get { return (EYesNo)this[nameof(Active)].GetValue<int>(); } set { this[nameof(Active)].SetValue<int>((int)value); } }
        public EYesNo InHand { get { return (EYesNo)this[nameof(InHand)].GetValue<int>(); } set { this[nameof(InHand)].SetValue<int>((int)value); } }
    }
    public class HasItemCondition : Condition
    {
        public HasItemCondition(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public bool IncludedSubClassess { get { return this[nameof(IncludedSubClassess)].Flag; } set { this[nameof(IncludedSubClassess)].Flag = value; } }
        public bool IncludeMyChildClassess { get { return this[nameof(IncludeMyChildClassess)].Flag; } set { this[nameof(IncludeMyChildClassess)].Flag = value; } }
        public byte Quantity { get { return this[nameof(Quantity)].GetValue<byte>(); } set { this[nameof(Quantity)].SetValue<byte>(value); } }
        public EYesNo Equipped { get { return (EYesNo)this[nameof(Equipped)].GetValue<int>(); } set { this[nameof(Equipped)].SetValue<int>((int)value); } }
        public EYesNo Active { get { return (EYesNo)this[nameof(Active)].GetValue<int>(); } set { this[nameof(Active)].SetValue<int>((int)value); } }
        public EYesNo InHand { get { return (EYesNo)this[nameof(InHand)].GetValue<int>(); } set { this[nameof(InHand)].SetValue<int>((int)value); } }
    }
    public class HasPendingInterruptCondition : Condition
    {
        public HasPendingInterruptCondition(nint addr) : base(addr) { }
    }
    public class HasTraitAtLevelCondition : Condition
    {
        public HasTraitAtLevelCondition(nint addr) : base(addr) { }
        public Object RequiredTrait { get { return this[nameof(RequiredTrait)]; } set { this[nameof(RequiredTrait)] = value; } }
        public int RequiredTraitLevel { get { return this[nameof(RequiredTraitLevel)].GetValue<int>(); } set { this[nameof(RequiredTraitLevel)].SetValue<int>(value); } }
        public bool FilterOnlyArchetypes { get { return this[nameof(FilterOnlyArchetypes)].Flag; } set { this[nameof(FilterOnlyArchetypes)].Flag = value; } }
    }
    public class HealthCondition : Condition
    {
        public HealthCondition(nint addr) : base(addr) { }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public bool Normalized { get { return this[nameof(Normalized)].Flag; } set { this[nameof(Normalized)].Flag = value; } }
    }
    public class InCombatCondition : Condition
    {
        public InCombatCondition(nint addr) : base(addr) { }
    }
    public class InInteractiveCondition : Condition
    {
        public InInteractiveCondition(nint addr) : base(addr) { }
        public ActorStateID InteractiveState { get { return this[nameof(InteractiveState)].As<ActorStateID>(); } set { this["InteractiveState"] = value; } }
        public bool bValidateInteractive { get { return this[nameof(bValidateInteractive)].Flag; } set { this[nameof(bValidateInteractive)].Flag = value; } }
    }
    public class InPhysicsBoundsCondition : Condition
    {
        public InPhysicsBoundsCondition(nint addr) : base(addr) { }
        public bool bFallbackToWaterBounds { get { return this[nameof(bFallbackToWaterBounds)].Flag; } set { this[nameof(bFallbackToWaterBounds)].Flag = value; } }
        public Array<Object> Types { get { return new Array<Object>(this[nameof(Types)].Address); } }
    }
    public class InspectableCondition : Condition
    {
        public InspectableCondition(nint addr) : base(addr) { }
        public EInspectableConditionCheck CheckBy { get { return (EInspectableConditionCheck)this[nameof(CheckBy)].GetValue<int>(); } set { this[nameof(CheckBy)].SetValue<int>((int)value); } }
    }
    public class InViewCondition : Condition
    {
        public InViewCondition(nint addr) : base(addr) { }
        public EYesNo CheckAllPlayers { get { return (EYesNo)this[nameof(CheckAllPlayers)].GetValue<int>(); } set { this[nameof(CheckAllPlayers)].SetValue<int>((int)value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public float ActorBoundsScale { get { return this[nameof(ActorBoundsScale)].GetValue<float>(); } set { this[nameof(ActorBoundsScale)].SetValue<float>(value); } }
    }
    public class IsClimbingCondition : Condition
    {
        public IsClimbingCondition(nint addr) : base(addr) { }
        public EYesNo IsTraversing { get { return (EYesNo)this[nameof(IsTraversing)].GetValue<int>(); } set { this[nameof(IsTraversing)].SetValue<int>((int)value); } }
        public EYesNo IsContinuousClimb { get { return (EYesNo)this[nameof(IsContinuousClimb)].GetValue<int>(); } set { this[nameof(IsContinuousClimb)].SetValue<int>((int)value); } }
        public EYesNo IsSurfaceTransition { get { return (EYesNo)this[nameof(IsSurfaceTransition)].GetValue<int>(); } set { this[nameof(IsSurfaceTransition)].SetValue<int>((int)value); } }
        public EYesNo ValidateSurface { get { return (EYesNo)this[nameof(ValidateSurface)].GetValue<int>(); } set { this[nameof(ValidateSurface)].SetValue<int>((int)value); } }
        public EYesNo ValidateInput { get { return (EYesNo)this[nameof(ValidateInput)].GetValue<int>(); } set { this[nameof(ValidateInput)].SetValue<int>((int)value); } }
        public float MaximumInputAngle { get { return this[nameof(MaximumInputAngle)].GetValue<float>(); } set { this[nameof(MaximumInputAngle)].SetValue<float>(value); } }
        public EYesNo ValidateFacing { get { return (EYesNo)this[nameof(ValidateFacing)].GetValue<int>(); } set { this[nameof(ValidateFacing)].SetValue<int>((int)value); } }
        public float FacingTolerance { get { return this[nameof(FacingTolerance)].GetValue<float>(); } set { this[nameof(FacingTolerance)].SetValue<float>(value); } }
        public Array<Object> ClimbGroups { get { return new Array<Object>(this[nameof(ClimbGroups)].Address); } }
        public Array<Object> SurfaceTags { get { return new Array<Object>(this[nameof(SurfaceTags)].Address); } }
    }
    public class KeyCondition : Condition
    {
        public KeyCondition(nint addr) : base(addr) { }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class LadderCondition : TraversalCondition
    {
        public LadderCondition(nint addr) : base(addr) { }
        public Object LadderParams { get { return this[nameof(LadderParams)]; } set { this[nameof(LadderParams)] = value; } }
        public bool Reverse { get { return this[nameof(Reverse)].Flag; } set { this[nameof(Reverse)].Flag = value; } }
        public int MinimumRungs { get { return this[nameof(MinimumRungs)].GetValue<int>(); } set { this[nameof(MinimumRungs)].SetValue<int>(value); } }
    }
    public class LandingPredictionConditionParams : Object
    {
        public LandingPredictionConditionParams(nint addr) : base(addr) { }
        public Object CliffParams { get { return this[nameof(CliffParams)]; } set { this[nameof(CliffParams)] = value; } }
        public float IterationAngle { get { return this[nameof(IterationAngle)].GetValue<float>(); } set { this[nameof(IterationAngle)].SetValue<float>(value); } }
        public int AdditionalIterations { get { return this[nameof(AdditionalIterations)].GetValue<int>(); } set { this[nameof(AdditionalIterations)].SetValue<int>(value); } }
        public float ForwardDistance { get { return this[nameof(ForwardDistance)].GetValue<float>(); } set { this[nameof(ForwardDistance)].SetValue<float>(value); } }
        public float HeightTolerance { get { return this[nameof(HeightTolerance)].GetValue<float>(); } set { this[nameof(HeightTolerance)].SetValue<float>(value); } }
        public float PlatformStartHeight { get { return this[nameof(PlatformStartHeight)].GetValue<float>(); } set { this[nameof(PlatformStartHeight)].SetValue<float>(value); } }
        public float PlatformHeightCheckDistance { get { return this[nameof(PlatformHeightCheckDistance)].GetValue<float>(); } set { this[nameof(PlatformHeightCheckDistance)].SetValue<float>(value); } }
        public float PlatformMaxHeightDelta { get { return this[nameof(PlatformMaxHeightDelta)].GetValue<float>(); } set { this[nameof(PlatformMaxHeightDelta)].SetValue<float>(value); } }
        public float PlatformCapsuleRadiusScale { get { return this[nameof(PlatformCapsuleRadiusScale)].GetValue<float>(); } set { this[nameof(PlatformCapsuleRadiusScale)].SetValue<float>(value); } }
    }
    public class LandingPredictionConditionParams_Default : LandingPredictionConditionParams
    {
        public LandingPredictionConditionParams_Default(nint addr) : base(addr) { }
    }
    public class LandingPredictionCondition : TraversalCondition
    {
        public LandingPredictionCondition(nint addr) : base(addr) { }
        public Object Params { get { return this[nameof(Params)]; } set { this[nameof(Params)] = value; } }
    }
    public class LastAttackCondition : Condition
    {
        public LastAttackCondition(nint addr) : base(addr) { }
        public ELastAttackCondition Condition { get { return (ELastAttackCondition)this[nameof(Condition)].GetValue<int>(); } set { this[nameof(Condition)].SetValue<int>((int)value); } }
        public Object RequiredCause { get { return this[nameof(RequiredCause)]; } set { this[nameof(RequiredCause)] = value; } }
        public Array<Object> AllowedDamageTypes { get { return new Array<Object>(this[nameof(AllowedDamageTypes)].Address); } }
        public Array<Object> RequiredTargetTags { get { return new Array<Object>(this[nameof(RequiredTargetTags)].Address); } }
        public EYesNo Critical { get { return (EYesNo)this[nameof(Critical)].GetValue<int>(); } set { this[nameof(Critical)].SetValue<int>((int)value); } }
        public EYesNo Killed { get { return (EYesNo)this[nameof(Killed)].GetValue<int>(); } set { this[nameof(Killed)].SetValue<int>((int)value); } }
        public EYesNo CurrentTarget { get { return (EYesNo)this[nameof(CurrentTarget)].GetValue<int>(); } set { this[nameof(CurrentTarget)].SetValue<int>((int)value); } }
        public EYesNo RequiredResult { get { return (EYesNo)this[nameof(RequiredResult)].GetValue<int>(); } set { this[nameof(RequiredResult)].SetValue<int>((int)value); } }
    }
    public class LastHitCondition : Condition
    {
        public LastHitCondition(nint addr) : base(addr) { }
        public Array<Object> DamageClasses { get { return new Array<Object>(this[nameof(DamageClasses)].Address); } }
        public int MinPower { get { return this[nameof(MinPower)].GetValue<int>(); } set { this[nameof(MinPower)].SetValue<int>(value); } }
        public int MaxPower { get { return this[nameof(MaxPower)].GetValue<int>(); } set { this[nameof(MaxPower)].SetValue<int>(value); } }
    }
    public class LedgeGrabCondition : TraversalCondition
    {
        public LedgeGrabCondition(nint addr) : base(addr) { }
        public ELedgeGrabType LedgeGrabType { get { return (ELedgeGrabType)this[nameof(LedgeGrabType)].GetValue<int>(); } set { this[nameof(LedgeGrabType)].SetValue<int>((int)value); } }
    }
    public class MoveInputCondition : Condition
    {
        public MoveInputCondition(nint addr) : base(addr) { }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public EMoveInputType Type { get { return (EMoveInputType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public bool PersistValid { get { return this[nameof(PersistValid)].Flag; } set { this[nameof(PersistValid)].Flag = value; } }
        public bool PersistNotValid { get { return this[nameof(PersistNotValid)].Flag; } set { this[nameof(PersistNotValid)].Flag = value; } }
    }
    public class NavMeshTestCondition : Condition
    {
        public NavMeshTestCondition(nint addr) : base(addr) { }
        public float Direction { get { return this[nameof(Direction)].GetValue<float>(); } set { this[nameof(Direction)].SetValue<float>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
    }
    public class GroundCheckParams : Object
    {
        public GroundCheckParams(nint addr) : base(addr) { }
        public EGroundCheckType GroundCheckType { get { return (EGroundCheckType)this[nameof(GroundCheckType)].GetValue<int>(); } set { this[nameof(GroundCheckType)].SetValue<int>((int)value); } }
        public Array<byte> ValidSurfaceTypes { get { return new Array<byte>(this[nameof(ValidSurfaceTypes)].Address); } }
        public float CastDistance { get { return this[nameof(CastDistance)].GetValue<float>(); } set { this[nameof(CastDistance)].SetValue<float>(value); } }
        public float TraceCapsuleRadiusScale { get { return this[nameof(TraceCapsuleRadiusScale)].GetValue<float>(); } set { this[nameof(TraceCapsuleRadiusScale)].SetValue<float>(value); } }
        public float MinGroundDistance { get { return this[nameof(MinGroundDistance)].GetValue<float>(); } set { this[nameof(MinGroundDistance)].SetValue<float>(value); } }
    }
    public class GroundCheckParams_Default : GroundCheckParams
    {
        public GroundCheckParams_Default(nint addr) : base(addr) { }
    }
    public class OnGroundCondition : Condition
    {
        public OnGroundCondition(nint addr) : base(addr) { }
        public EGroundCheckType GroundCheckType { get { return (EGroundCheckType)this[nameof(GroundCheckType)].GetValue<int>(); } set { this[nameof(GroundCheckType)].SetValue<int>((int)value); } }
        public float CastDistance { get { return this[nameof(CastDistance)].GetValue<float>(); } set { this[nameof(CastDistance)].SetValue<float>(value); } }
        public float MinHitDistance { get { return this[nameof(MinHitDistance)].GetValue<float>(); } set { this[nameof(MinHitDistance)].SetValue<float>(value); } }
        public float TraceCapsuleRadiusScale { get { return this[nameof(TraceCapsuleRadiusScale)].GetValue<float>(); } set { this[nameof(TraceCapsuleRadiusScale)].SetValue<float>(value); } }
        public Array<byte> ValidSurfaceTypes { get { return new Array<byte>(this[nameof(ValidSurfaceTypes)].Address); } }
        public Object GroundCheckParams { get { return this[nameof(GroundCheckParams)]; } set { this[nameof(GroundCheckParams)] = value; } }
    }
    public class PhysCastCondition : Condition
    {
        public PhysCastCondition(nint addr) : base(addr) { }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public Object RefNode { get { return this[nameof(RefNode)]; } set { this[nameof(RefNode)] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public bool TraceComplex { get { return this[nameof(TraceComplex)].Flag; } set { this[nameof(TraceComplex)].Flag = value; } }
        public Array<Object> ValidActorTypes { get { return new Array<Object>(this[nameof(ValidActorTypes)].Address); } }
        public Array<byte> ValidSurfaceTypes { get { return new Array<byte>(this[nameof(ValidSurfaceTypes)].Address); } }
    }
    public class RayCastCondition : PhysCastCondition
    {
        public RayCastCondition(nint addr) : base(addr) { }
        public float Angle { get { return this[nameof(Angle)].GetValue<float>(); } set { this[nameof(Angle)].SetValue<float>(value); } }
        public float HeightOffset { get { return this[nameof(HeightOffset)].GetValue<float>(); } set { this[nameof(HeightOffset)].SetValue<float>(value); } }
    }
    public class SpentTraitPointsCondition : Condition
    {
        public SpentTraitPointsCondition(nint addr) : base(addr) { }
        public int RequiredTraitPointsSpent { get { return this[nameof(RequiredTraitPointsSpent)].GetValue<int>(); } set { this[nameof(RequiredTraitPointsSpent)].SetValue<int>(value); } }
    }
    public class SphereCastCondition : PhysCastCondition
    {
        public SphereCastCondition(nint addr) : base(addr) { }
        public Vector Offset { get { return this[nameof(Offset)].As<Vector>(); } set { this["Offset"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public bool bUseRelativeDirection { get { return this[nameof(bUseRelativeDirection)].Flag; } set { this[nameof(bUseRelativeDirection)].Flag = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class StaminaCondition : Condition
    {
        public StaminaCondition(nint addr) : base(addr) { }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class StatCondition : Condition
    {
        public StatCondition(nint addr) : base(addr) { }
        public Object StatName { get { return this[nameof(StatName)]; } set { this[nameof(StatName)] = value; } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public bool ApplyModifiers { get { return this[nameof(ApplyModifiers)].Flag; } set { this[nameof(ApplyModifiers)].Flag = value; } }
    }
    public class StateCompleteCondition : Condition
    {
        public StateCompleteCondition(nint addr) : base(addr) { }
    }
    public class StateElapsedCondition : Condition
    {
        public StateElapsedCondition(nint addr) : base(addr) { }
        public float ElapsedTime { get { return this[nameof(ElapsedTime)].GetValue<float>(); } set { this[nameof(ElapsedTime)].SetValue<float>(value); } }
        public bool Normalized { get { return this[nameof(Normalized)].Flag; } set { this[nameof(Normalized)].Flag = value; } }
    }
    public class StateEventCondition : Condition
    {
        public StateEventCondition(nint addr) : base(addr) { }
        public Object Event { get { return this[nameof(Event)]; } set { this[nameof(Event)] = value; } }
    }
    public class StateWindowCondition : Condition
    {
        public StateWindowCondition(nint addr) : base(addr) { }
        public Object Window { get { return this[nameof(Window)]; } set { this[nameof(Window)] = value; } }
    }
    public class SwimmingCondition : Condition
    {
        public SwimmingCondition(nint addr) : base(addr) { }
        public ESwimmingType Type { get { return (ESwimmingType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public ESwimmingStateMethod Method { get { return (ESwimmingStateMethod)this[nameof(Method)].GetValue<int>(); } set { this[nameof(Method)].SetValue<int>((int)value); } }
        public ESwimmingType GetSwimmingState(StateMachineComponent StateMachine) { return Invoke<ESwimmingType>(nameof(GetSwimmingState), StateMachine); }
    }
    public class TagCondition : Condition
    {
        public TagCondition(nint addr) : base(addr) { }
        public ETagLocation LocationOfTags { get { return (ETagLocation)this[nameof(LocationOfTags)].GetValue<int>(); } set { this[nameof(LocationOfTags)].SetValue<int>((int)value); } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public bool AllOrNothing { get { return this[nameof(AllOrNothing)].Flag; } set { this[nameof(AllOrNothing)].Flag = value; } }
    }
    public class VaultSettings : Object
    {
        public VaultSettings(nint addr) : base(addr) { }
        public EVaultQueryType QueryType { get { return (EVaultQueryType)this[nameof(QueryType)].GetValue<int>(); } set { this[nameof(QueryType)].SetValue<int>((int)value); } }
        public EVaultDirectionType VaultDirection { get { return (EVaultDirectionType)this[nameof(VaultDirection)].GetValue<int>(); } set { this[nameof(VaultDirection)].SetValue<int>((int)value); } }
        public float LedgeDirectionArc { get { return this[nameof(LedgeDirectionArc)].GetValue<float>(); } set { this[nameof(LedgeDirectionArc)].SetValue<float>(value); } }
        public int LedgeDirectionAdditionalSamples { get { return this[nameof(LedgeDirectionAdditionalSamples)].GetValue<int>(); } set { this[nameof(LedgeDirectionAdditionalSamples)].SetValue<int>(value); } }
        public float VaultOverDistance { get { return this[nameof(VaultOverDistance)].GetValue<float>(); } set { this[nameof(VaultOverDistance)].SetValue<float>(value); } }
        public float VaultUpDistance { get { return this[nameof(VaultUpDistance)].GetValue<float>(); } set { this[nameof(VaultUpDistance)].SetValue<float>(value); } }
        public float VaultPivotHeight { get { return this[nameof(VaultPivotHeight)].GetValue<float>(); } set { this[nameof(VaultPivotHeight)].SetValue<float>(value); } }
        public float VaultPivotOffset { get { return this[nameof(VaultPivotOffset)].GetValue<float>(); } set { this[nameof(VaultPivotOffset)].SetValue<float>(value); } }
        public int VaultPivotIterations { get { return this[nameof(VaultPivotIterations)].GetValue<int>(); } set { this[nameof(VaultPivotIterations)].SetValue<int>(value); } }
        public float VaultCastDownDistance { get { return this[nameof(VaultCastDownDistance)].GetValue<float>(); } set { this[nameof(VaultCastDownDistance)].SetValue<float>(value); } }
        public float VaultMinHeight { get { return this[nameof(VaultMinHeight)].GetValue<float>(); } set { this[nameof(VaultMinHeight)].SetValue<float>(value); } }
        public float VaultMaxHeight { get { return this[nameof(VaultMaxHeight)].GetValue<float>(); } set { this[nameof(VaultMaxHeight)].SetValue<float>(value); } }
        public float VaultOpeningSize { get { return this[nameof(VaultOpeningSize)].GetValue<float>(); } set { this[nameof(VaultOpeningSize)].SetValue<float>(value); } }
        public float VaultCheckDistance { get { return this[nameof(VaultCheckDistance)].GetValue<float>(); } set { this[nameof(VaultCheckDistance)].SetValue<float>(value); } }
        public float VaultMaxSideStep { get { return this[nameof(VaultMaxSideStep)].GetValue<float>(); } set { this[nameof(VaultMaxSideStep)].SetValue<float>(value); } }
        public Vector2D StartingOffsets { get { return this[nameof(StartingOffsets)].As<Vector2D>(); } set { this["StartingOffsets"] = value; } }
        public float StartingOffsetExtraCapsuleRadiusScale { get { return this[nameof(StartingOffsetExtraCapsuleRadiusScale)].GetValue<float>(); } set { this[nameof(StartingOffsetExtraCapsuleRadiusScale)].SetValue<float>(value); } }
        public float AIStartingOffsetExtraCapsuleRadiusScale { get { return this[nameof(AIStartingOffsetExtraCapsuleRadiusScale)].GetValue<float>(); } set { this[nameof(AIStartingOffsetExtraCapsuleRadiusScale)].SetValue<float>(value); } }
        public float MinLedgeDistance { get { return this[nameof(MinLedgeDistance)].GetValue<float>(); } set { this[nameof(MinLedgeDistance)].SetValue<float>(value); } }
        public bool bOnlyIfValidEndingLocation { get { return this[nameof(bOnlyIfValidEndingLocation)].Flag; } set { this[nameof(bOnlyIfValidEndingLocation)].Flag = value; } }
        public float EndingLocationMaxHeightDeviation { get { return this[nameof(EndingLocationMaxHeightDeviation)].GetValue<float>(); } set { this[nameof(EndingLocationMaxHeightDeviation)].SetValue<float>(value); } }
        public float BackwardsTraceScale { get { return this[nameof(BackwardsTraceScale)].GetValue<float>(); } set { this[nameof(BackwardsTraceScale)].SetValue<float>(value); } }
        public bool bOnlyIfNotWalkable { get { return this[nameof(bOnlyIfNotWalkable)].Flag; } set { this[nameof(bOnlyIfNotWalkable)].Flag = value; } }
        public int WalkableCheckIterations { get { return this[nameof(WalkableCheckIterations)].GetValue<int>(); } set { this[nameof(WalkableCheckIterations)].SetValue<int>(value); } }
        public float MinCliffHeight { get { return this[nameof(MinCliffHeight)].GetValue<float>(); } set { this[nameof(MinCliffHeight)].SetValue<float>(value); } }
        public byte VaultCollisionChannel { get { return this[nameof(VaultCollisionChannel)].GetValue<byte>(); } set { this[nameof(VaultCollisionChannel)].SetValue<byte>(value); } }
        public float ActorRadiusScale { get { return this[nameof(ActorRadiusScale)].GetValue<float>(); } set { this[nameof(ActorRadiusScale)].SetValue<float>(value); } }
        public bool bTestForCeiling { get { return this[nameof(bTestForCeiling)].Flag; } set { this[nameof(bTestForCeiling)].Flag = value; } }
        public float CeilingCheckRadiusScale { get { return this[nameof(CeilingCheckRadiusScale)].GetValue<float>(); } set { this[nameof(CeilingCheckRadiusScale)].SetValue<float>(value); } }
        public Object VaultOverNavArea { get { return this[nameof(VaultOverNavArea)]; } set { this[nameof(VaultOverNavArea)] = value; } }
        public Object VaultUpNavArea { get { return this[nameof(VaultUpNavArea)]; } set { this[nameof(VaultUpNavArea)] = value; } }
        public bool bRequiresClimbingData { get { return this[nameof(bRequiresClimbingData)].Flag; } set { this[nameof(bRequiresClimbingData)].Flag = value; } }
    }
    public class TraversalSettings : Object
    {
        public TraversalSettings(nint addr) : base(addr) { }
        public float FeetPlantOffset { get { return this[nameof(FeetPlantOffset)].GetValue<float>(); } set { this[nameof(FeetPlantOffset)].SetValue<float>(value); } }
        public float HandPlantOffset { get { return this[nameof(HandPlantOffset)].GetValue<float>(); } set { this[nameof(HandPlantOffset)].SetValue<float>(value); } }
        public float HandAnimationOffset { get { return this[nameof(HandAnimationOffset)].GetValue<float>(); } set { this[nameof(HandAnimationOffset)].SetValue<float>(value); } }
        public float BodyAnimationOffset { get { return this[nameof(BodyAnimationOffset)].GetValue<float>(); } set { this[nameof(BodyAnimationOffset)].SetValue<float>(value); } }
        public float TestWallTraceDistanceDelta { get { return this[nameof(TestWallTraceDistanceDelta)].GetValue<float>(); } set { this[nameof(TestWallTraceDistanceDelta)].SetValue<float>(value); } }
        public Array<Object> ClassesToIgnoreForWallCheck { get { return new Array<Object>(this[nameof(ClassesToIgnoreForWallCheck)].Address); } }
        public bool bUseComplexCollisionWhenTestingForWalls { get { return this[nameof(bUseComplexCollisionWhenTestingForWalls)].Flag; } set { this[nameof(bUseComplexCollisionWhenTestingForWalls)].Flag = value; } }
        public float ValidWallAngleThreshold { get { return this[nameof(ValidWallAngleThreshold)].GetValue<float>(); } set { this[nameof(ValidWallAngleThreshold)].SetValue<float>(value); } }
        public float FacingThreshold { get { return this[nameof(FacingThreshold)].GetValue<float>(); } set { this[nameof(FacingThreshold)].SetValue<float>(value); } }
        public Array<byte> LedgeGrabChannels { get { return new Array<byte>(this[nameof(LedgeGrabChannels)].Address); } }
        public float LedgeGrabStartOffset { get { return this[nameof(LedgeGrabStartOffset)].GetValue<float>(); } set { this[nameof(LedgeGrabStartOffset)].SetValue<float>(value); } }
        public float LedgeGrabStopOffset { get { return this[nameof(LedgeGrabStopOffset)].GetValue<float>(); } set { this[nameof(LedgeGrabStopOffset)].SetValue<float>(value); } }
        public float LedgeGrabCheckIncrement { get { return this[nameof(LedgeGrabCheckIncrement)].GetValue<float>(); } set { this[nameof(LedgeGrabCheckIncrement)].SetValue<float>(value); } }
        public float LedgeGrabDistance { get { return this[nameof(LedgeGrabDistance)].GetValue<float>(); } set { this[nameof(LedgeGrabDistance)].SetValue<float>(value); } }
        public float SolidTestWallPointDistance { get { return this[nameof(SolidTestWallPointDistance)].GetValue<float>(); } set { this[nameof(SolidTestWallPointDistance)].SetValue<float>(value); } }
        public float InsetTestWallPointDistance { get { return this[nameof(InsetTestWallPointDistance)].GetValue<float>(); } set { this[nameof(InsetTestWallPointDistance)].SetValue<float>(value); } }
        public bool bLedgeGrabValidateEndingLocation { get { return this[nameof(bLedgeGrabValidateEndingLocation)].Flag; } set { this[nameof(bLedgeGrabValidateEndingLocation)].Flag = value; } }
        public float LedgeGrabEndingLocationMaxHeightDeviation { get { return this[nameof(LedgeGrabEndingLocationMaxHeightDeviation)].GetValue<float>(); } set { this[nameof(LedgeGrabEndingLocationMaxHeightDeviation)].SetValue<float>(value); } }
        public float LedgeGrabBackwardsTraceScale { get { return this[nameof(LedgeGrabBackwardsTraceScale)].GetValue<float>(); } set { this[nameof(LedgeGrabBackwardsTraceScale)].SetValue<float>(value); } }
        public float ClingDistance { get { return this[nameof(ClingDistance)].GetValue<float>(); } set { this[nameof(ClingDistance)].SetValue<float>(value); } }
        public float ClingTestWallPointDistance { get { return this[nameof(ClingTestWallPointDistance)].GetValue<float>(); } set { this[nameof(ClingTestWallPointDistance)].SetValue<float>(value); } }
        public float ClingHandOffset { get { return this[nameof(ClingHandOffset)].GetValue<float>(); } set { this[nameof(ClingHandOffset)].SetValue<float>(value); } }
        public Array<Object> ClassesToAllowForWallCling { get { return new Array<Object>(this[nameof(ClassesToAllowForWallCling)].Address); } }
        public float WaterSurfaceAboveOffset { get { return this[nameof(WaterSurfaceAboveOffset)].GetValue<float>(); } set { this[nameof(WaterSurfaceAboveOffset)].SetValue<float>(value); } }
        public float WaterSurfaceBelowOffset { get { return this[nameof(WaterSurfaceBelowOffset)].GetValue<float>(); } set { this[nameof(WaterSurfaceBelowOffset)].SetValue<float>(value); } }
        public float WaterSurfaceEntryScaleZ { get { return this[nameof(WaterSurfaceEntryScaleZ)].GetValue<float>(); } set { this[nameof(WaterSurfaceEntryScaleZ)].SetValue<float>(value); } }
        public float WaterSurfaceEntryMinVelocity { get { return this[nameof(WaterSurfaceEntryMinVelocity)].GetValue<float>(); } set { this[nameof(WaterSurfaceEntryMinVelocity)].SetValue<float>(value); } }
        public bool bWaterSurfaceEntryOnEmerge { get { return this[nameof(bWaterSurfaceEntryOnEmerge)].Flag; } set { this[nameof(bWaterSurfaceEntryOnEmerge)].Flag = value; } }
        public float EmergeAcceleration { get { return this[nameof(EmergeAcceleration)].GetValue<float>(); } set { this[nameof(EmergeAcceleration)].SetValue<float>(value); } }
        public float EmergeFullStrengthDepth { get { return this[nameof(EmergeFullStrengthDepth)].GetValue<float>(); } set { this[nameof(EmergeFullStrengthDepth)].SetValue<float>(value); } }
        public float SubmergeDepth { get { return this[nameof(SubmergeDepth)].GetValue<float>(); } set { this[nameof(SubmergeDepth)].SetValue<float>(value); } }
        public float SubmergeAcceleration { get { return this[nameof(SubmergeAcceleration)].GetValue<float>(); } set { this[nameof(SubmergeAcceleration)].SetValue<float>(value); } }
        public float DiveMinDistance { get { return this[nameof(DiveMinDistance)].GetValue<float>(); } set { this[nameof(DiveMinDistance)].SetValue<float>(value); } }
        public float DiveCastDistance { get { return this[nameof(DiveCastDistance)].GetValue<float>(); } set { this[nameof(DiveCastDistance)].SetValue<float>(value); } }
        public float DiveMinWaterDepth { get { return this[nameof(DiveMinWaterDepth)].GetValue<float>(); } set { this[nameof(DiveMinWaterDepth)].SetValue<float>(value); } }
        public Array<byte> ClimbingPhysicsCollisionChannels { get { return new Array<byte>(this[nameof(ClimbingPhysicsCollisionChannels)].Address); } }
        public Object ClimbingTraversalWindow { get { return this[nameof(ClimbingTraversalWindow)]; } set { this[nameof(ClimbingTraversalWindow)] = value; } }
        public Array<ClimbAppendageSettings> ClimbingAppendages { get { return new Array<ClimbAppendageSettings>(this[nameof(ClimbingAppendages)].Address); } }
    }
    public class TraversalSurfaceCondition : Condition
    {
        public TraversalSurfaceCondition(nint addr) : base(addr) { }
    }
    public class UnCrouchCondition : Condition
    {
        public UnCrouchCondition(nint addr) : base(addr) { }
    }
    public class VariableConditionBase : Condition
    {
        public VariableConditionBase(nint addr) : base(addr) { }
        public Object VariableKey { get { return this[nameof(VariableKey)]; } set { this[nameof(VariableKey)] = value; } }
        public EBlackboardVariableType VariableType { get { return (EBlackboardVariableType)this[nameof(VariableType)].GetValue<int>(); } set { this[nameof(VariableType)].SetValue<int>((int)value); } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float NumericValue { get { return this[nameof(NumericValue)].GetValue<float>(); } set { this[nameof(NumericValue)].SetValue<float>(value); } }
        public bool BooleanValue { get { return this[nameof(BooleanValue)].Flag; } set { this[nameof(BooleanValue)].Flag = value; } }
        public Object StringValue { get { return this[nameof(StringValue)]; } set { this[nameof(StringValue)] = value; } }
        public Object ClassValue { get { return this[nameof(ClassValue)].As<Object>(); } set { this["ClassValue"] = value; } } // ClassPtrProperty
        public Object ObjectType { get { return this[nameof(ObjectType)]; } set { this[nameof(ObjectType)] = value; } }
    }
    public class VariableCondition : VariableConditionBase
    {
        public VariableCondition(nint addr) : base(addr) { }
        public Object VariableName { get { return this[nameof(VariableName)]; } set { this[nameof(VariableName)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class BlackboardVariableCondition : VariableConditionBase
    {
        public BlackboardVariableCondition(nint addr) : base(addr) { }
        public BlackboardNumValue NumericData { get { return this[nameof(NumericData)].As<BlackboardNumValue>(); } set { this["NumericData"] = value; } }
        public BlackboardBoolValue BooleanData { get { return this[nameof(BooleanData)].As<BlackboardBoolValue>(); } set { this["BooleanData"] = value; } }
        public BlackboardStringValue TextData { get { return this[nameof(TextData)].As<BlackboardStringValue>(); } set { this["TextData"] = value; } }
        public BlackboardObjectValue ObjectData { get { return this[nameof(ObjectData)].As<BlackboardObjectValue>(); } set { this["ObjectData"] = value; } }
        public BlackboardClassValue ClassData { get { return this[nameof(ClassData)].As<BlackboardClassValue>(); } set { this["ClassData"] = value; } }
    }
    public class VaultCondition : TraversalCondition
    {
        public VaultCondition(nint addr) : base(addr) { }
        public Object VaultSettings { get { return this[nameof(VaultSettings)]; } set { this[nameof(VaultSettings)] = value; } }
        public EVaultType VaultType { get { return (EVaultType)this[nameof(VaultType)].GetValue<int>(); } set { this[nameof(VaultType)].SetValue<int>((int)value); } }
    }
    public class VelocityCondition : Condition
    {
        public VelocityCondition(nint addr) : base(addr) { }
        public EVelocityType Type { get { return (EVelocityType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class VitalityCondition : Condition
    {
        public VitalityCondition(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public bool Normalized { get { return this[nameof(Normalized)].Flag; } set { this[nameof(Normalized)].Flag = value; } }
    }
    public class WallCheckCondition : Condition
    {
        public WallCheckCondition(nint addr) : base(addr) { }
        public EWallCheckType Type { get { return (EWallCheckType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public float MaxHitAngle { get { return this[nameof(MaxHitAngle)].GetValue<float>(); } set { this[nameof(MaxHitAngle)].SetValue<float>(value); } }
    }
    public class WaterCondition : Condition
    {
        public WaterCondition(nint addr) : base(addr) { }
        public float SubmergeDepth { get { return this[nameof(SubmergeDepth)].GetValue<float>(); } set { this[nameof(SubmergeDepth)].SetValue<float>(value); } }
        public CompareOp SubmergeDepthCompare { get { return (CompareOp)this[nameof(SubmergeDepthCompare)].GetValue<int>(); } set { this[nameof(SubmergeDepthCompare)].SetValue<int>((int)value); } }
        public float WaterDepth { get { return this[nameof(WaterDepth)].GetValue<float>(); } set { this[nameof(WaterDepth)].SetValue<float>(value); } }
        public CompareOp WaterDepthCompare { get { return (CompareOp)this[nameof(WaterDepthCompare)].GetValue<int>(); } set { this[nameof(WaterDepthCompare)].SetValue<int>((int)value); } }
    }
    public class WaterSurfaceCondition : TraversalCondition
    {
        public WaterSurfaceCondition(nint addr) : base(addr) { }
        public EWaterSurfaceDirection WaterSurfaceDirection { get { return (EWaterSurfaceDirection)this[nameof(WaterSurfaceDirection)].GetValue<int>(); } set { this[nameof(WaterSurfaceDirection)].SetValue<int>((int)value); } }
    }
    public class AimingDecorator : ActorStateDecorator
    {
        public AimingDecorator(nint addr) : base(addr) { }
        public Array<Object> Types { get { return new Array<Object>(this[nameof(Types)].Address); } }
        public bool bHideEquipmentOnExit { get { return this[nameof(bHideEquipmentOnExit)].Flag; } set { this[nameof(bHideEquipmentOnExit)].Flag = value; } }
    }
    public class AnimTagStateDecorator : ActorStateDecorator
    {
        public AnimTagStateDecorator(nint addr) : base(addr) { }
        public Array<Object> AnimationTags { get { return new Array<Object>(this[nameof(AnimationTags)].Address); } }
    }
    public class BlockEvadeStateDecorator : ActorStateDecorator
    {
        public BlockEvadeStateDecorator(nint addr) : base(addr) { }
        public bool Evade { get { return this[nameof(Evade)].Flag; } set { this[nameof(Evade)].Flag = value; } }
        public float EvadeWindow { get { return this[nameof(EvadeWindow)].GetValue<float>(); } set { this[nameof(EvadeWindow)].SetValue<float>(value); } }
        public Object EvadeStateWindow { get { return this[nameof(EvadeStateWindow)]; } set { this[nameof(EvadeStateWindow)] = value; } }
        public float EvadeCounterWindow { get { return this[nameof(EvadeCounterWindow)].GetValue<float>(); } set { this[nameof(EvadeCounterWindow)].SetValue<float>(value); } }
        public bool bLock { get { return this[nameof(bLock)].Flag; } set { this[nameof(bLock)].Flag = value; } }
        public bool BlockCounter { get { return this[nameof(BlockCounter)].Flag; } set { this[nameof(BlockCounter)].Flag = value; } }
        public float BlockArc { get { return this[nameof(BlockArc)].GetValue<float>(); } set { this[nameof(BlockArc)].SetValue<float>(value); } }
        public Object BlockWindow { get { return this[nameof(BlockWindow)]; } set { this[nameof(BlockWindow)] = value; } }
        public Object BlockInput { get { return this[nameof(BlockInput)]; } set { this[nameof(BlockInput)] = value; } }
        public float BlockCounterWindow { get { return this[nameof(BlockCounterWindow)].GetValue<float>(); } set { this[nameof(BlockCounterWindow)].SetValue<float>(value); } }
        public float CounterAttackLockOut { get { return this[nameof(CounterAttackLockOut)].GetValue<float>(); } set { this[nameof(CounterAttackLockOut)].SetValue<float>(value); } }
        public void SimulateDodge(DamageInfo DamageInfo) { Invoke(nameof(SimulateDodge), DamageInfo); }
    }
    public class ClampVelocityDecorator : ActorStateDecorator
    {
        public ClampVelocityDecorator(nint addr) : base(addr) { }
        public bool bClampVerticalVelocity { get { return this[nameof(bClampVerticalVelocity)].Flag; } set { this[nameof(bClampVerticalVelocity)].Flag = value; } }
        public float MinVerticalVelocity { get { return this[nameof(MinVerticalVelocity)].GetValue<float>(); } set { this[nameof(MinVerticalVelocity)].SetValue<float>(value); } }
        public float MaxVerticalVelocity { get { return this[nameof(MaxVerticalVelocity)].GetValue<float>(); } set { this[nameof(MaxVerticalVelocity)].SetValue<float>(value); } }
        public bool bClampHorizontalVelocity { get { return this[nameof(bClampHorizontalVelocity)].Flag; } set { this[nameof(bClampHorizontalVelocity)].Flag = value; } }
        public EClampVelocityHorizontalDirection Direction { get { return (EClampVelocityHorizontalDirection)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public float MinHorizontalVelocity { get { return this[nameof(MinHorizontalVelocity)].GetValue<float>(); } set { this[nameof(MinHorizontalVelocity)].SetValue<float>(value); } }
        public float MaxHorizontalVelocity { get { return this[nameof(MaxHorizontalVelocity)].GetValue<float>(); } set { this[nameof(MaxHorizontalVelocity)].SetValue<float>(value); } }
        public bool bClampOnEntry { get { return this[nameof(bClampOnEntry)].Flag; } set { this[nameof(bClampOnEntry)].Flag = value; } }
        public bool bClampOnExit { get { return this[nameof(bClampOnExit)].Flag; } set { this[nameof(bClampOnExit)].Flag = value; } }
        public bool bClampOnUpdate { get { return this[nameof(bClampOnUpdate)].Flag; } set { this[nameof(bClampOnUpdate)].Flag = value; } }
    }
    public class ClearLockTargetStateDecorator : ActorStateDecorator
    {
        public ClearLockTargetStateDecorator(nint addr) : base(addr) { }
    }
    public class CollisionModeStateDecorator : ActorStateDecorator
    {
        public CollisionModeStateDecorator(nint addr) : base(addr) { }
        public bool bSetCollisionOnEnter { get { return this[nameof(bSetCollisionOnEnter)].Flag; } set { this[nameof(bSetCollisionOnEnter)].Flag = value; } }
        public byte CollisionOnEnter { get { return this[nameof(CollisionOnEnter)].GetValue<byte>(); } set { this[nameof(CollisionOnEnter)].SetValue<byte>(value); } }
        public bool bOverrideSoftCollisionOnEnter { get { return this[nameof(bOverrideSoftCollisionOnEnter)].Flag; } set { this[nameof(bOverrideSoftCollisionOnEnter)].Flag = value; } }
        public ESoftCollisionMode SoftCollisionOnEnter { get { return (ESoftCollisionMode)this[nameof(SoftCollisionOnEnter)].GetValue<int>(); } set { this[nameof(SoftCollisionOnEnter)].SetValue<int>((int)value); } }
        public bool bRestoreCollision { get { return this[nameof(bRestoreCollision)].Flag; } set { this[nameof(bRestoreCollision)].Flag = value; } }
        public bool bRestoreSoftCollision { get { return this[nameof(bRestoreSoftCollision)].Flag; } set { this[nameof(bRestoreSoftCollision)].Flag = value; } }
        public bool bSetCollisionOnExit { get { return this[nameof(bSetCollisionOnExit)].Flag; } set { this[nameof(bSetCollisionOnExit)].Flag = value; } }
        public byte CollisionOnExit { get { return this[nameof(CollisionOnExit)].GetValue<byte>(); } set { this[nameof(CollisionOnExit)].SetValue<byte>(value); } }
        public bool bOverrideSoftCollisionOnExit { get { return this[nameof(bOverrideSoftCollisionOnExit)].Flag; } set { this[nameof(bOverrideSoftCollisionOnExit)].Flag = value; } }
        public ESoftCollisionMode SoftCollisionOnExit { get { return (ESoftCollisionMode)this[nameof(SoftCollisionOnExit)].GetValue<int>(); } set { this[nameof(SoftCollisionOnExit)].SetValue<int>((int)value); } }
    }
    public class CooldownStateDecorator : ActorStateDecorator
    {
        public CooldownStateDecorator(nint addr) : base(addr) { }
        public ECooldownType Type { get { return (ECooldownType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public ECooldownScope Scope { get { return (ECooldownScope)this[nameof(Scope)].GetValue<int>(); } set { this[nameof(Scope)].SetValue<int>((int)value); } }
        public ECooldownAction Action { get { return (ECooldownAction)this[nameof(Action)].GetValue<int>(); } set { this[nameof(Action)].SetValue<int>((int)value); } }
        public bool ValidateCooldown { get { return this[nameof(ValidateCooldown)].Flag; } set { this[nameof(ValidateCooldown)].Flag = value; } }
        public Object Cooldown { get { return this[nameof(Cooldown)]; } set { this[nameof(Cooldown)] = value; } }
        public float CooldownMin { get { return this[nameof(CooldownMin)].GetValue<float>(); } set { this[nameof(CooldownMin)].SetValue<float>(value); } }
        public float CooldownMax { get { return this[nameof(CooldownMax)].GetValue<float>(); } set { this[nameof(CooldownMax)].SetValue<float>(value); } }
    }
    public class CrouchStateDecorator : ActorStateDecorator
    {
        public CrouchStateDecorator(nint addr) : base(addr) { }
    }
    public class DamageStateDecorator : ActorStateDecorator
    {
        public DamageStateDecorator(nint addr) : base(addr) { }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float DamageMod { get { return this[nameof(DamageMod)].GetValue<float>(); } set { this[nameof(DamageMod)].SetValue<float>(value); } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public Object ImpactDirection { get { return this[nameof(ImpactDirection)]; } set { this[nameof(ImpactDirection)] = value; } }
    }
    public class DebugPrintStateDecorator : ActorStateDecorator
    {
        public DebugPrintStateDecorator(nint addr) : base(addr) { }
    }
    public class DisableInputDecorator : ActorStateDecorator
    {
        public DisableInputDecorator(nint addr) : base(addr) { }
    }
    public class DisableTargetLockStateDecorator : ActorStateDecorator
    {
        public DisableTargetLockStateDecorator(nint addr) : base(addr) { }
    }
    public class EquipItemDecorator : ActorStateDecorator
    {
        public EquipItemDecorator(nint addr) : base(addr) { }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
        public int SlotIndex { get { return this[nameof(SlotIndex)].GetValue<int>(); } set { this[nameof(SlotIndex)].SetValue<int>(value); } }
        public bool bUnequip { get { return this[nameof(bUnequip)].Flag; } set { this[nameof(bUnequip)].Flag = value; } }
    }
    public class EventStateDecorator : ActorStateDecorator
    {
        public EventStateDecorator(nint addr) : base(addr) { }
        public Object EnterEvent { get { return this[nameof(EnterEvent)]; } set { this[nameof(EnterEvent)] = value; } }
        public Object ExitEvent { get { return this[nameof(ExitEvent)]; } set { this[nameof(ExitEvent)] = value; } }
    }
    public class ExcludeNavAreaStateDecorator : ActorStateDecorator
    {
        public ExcludeNavAreaStateDecorator(nint addr) : base(addr) { }
        public Array<Object> ExcludedAreas { get { return new Array<Object>(this[nameof(ExcludedAreas)].Address); } }
    }
    public class FacingOverrideDecorator : ActorStateDecorator
    {
        public FacingOverrideDecorator(nint addr) : base(addr) { }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public CharacterFacing NewFacing { get { return (CharacterFacing)this[nameof(NewFacing)].GetValue<int>(); } set { this[nameof(NewFacing)].SetValue<int>((int)value); } }
        public bool bOneTimeCheck { get { return this[nameof(bOneTimeCheck)].Flag; } set { this[nameof(bOneTimeCheck)].Flag = value; } }
    }
    public class FallDamageDecorator : ActorStateDecorator
    {
        public FallDamageDecorator(nint addr) : base(addr) { }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public bool bRestoreOnExit { get { return this[nameof(bRestoreOnExit)].Flag; } set { this[nameof(bRestoreOnExit)].Flag = value; } }
        public bool bResetOnExit { get { return this[nameof(bResetOnExit)].Flag; } set { this[nameof(bResetOnExit)].Flag = value; } }
    }
    public class InitialFacingDecorator : ActorStateDecorator
    {
        public InitialFacingDecorator(nint addr) : base(addr) { }
        public EInitialFacing InitialFacing { get { return (EInitialFacing)this[nameof(InitialFacing)].GetValue<int>(); } set { this[nameof(InitialFacing)].SetValue<int>((int)value); } }
        public float FacingOffset { get { return this[nameof(FacingOffset)].GetValue<float>(); } set { this[nameof(FacingOffset)].SetValue<float>(value); } }
        public float RotationTime { get { return this[nameof(RotationTime)].GetValue<float>(); } set { this[nameof(RotationTime)].SetValue<float>(value); } }
        public bool EasesIn { get { return this[nameof(EasesIn)].Flag; } set { this[nameof(EasesIn)].Flag = value; } }
        public float EaseExponent { get { return this[nameof(EaseExponent)].GetValue<float>(); } set { this[nameof(EaseExponent)].SetValue<float>(value); } }
    }
    public class LadderStateDecorator : ActorStateDecorator
    {
        public LadderStateDecorator(nint addr) : base(addr) { }
        public Object LadderParams { get { return this[nameof(LadderParams)]; } set { this[nameof(LadderParams)] = value; } }
        public bool ProjectLocationForAI { get { return this[nameof(ProjectLocationForAI)].Flag; } set { this[nameof(ProjectLocationForAI)].Flag = value; } }
    }
    public class LadderStateUtil : Object
    {
        public LadderStateUtil(nint addr) : base(addr) { }
    }
    public class MoveInputStateDecorator : ActorStateDecorator
    {
        public MoveInputStateDecorator(nint addr) : base(addr) { }
        public bool bRestoreOnExit { get { return this[nameof(bRestoreOnExit)].Flag; } set { this[nameof(bRestoreOnExit)].Flag = value; } }
        public bool bEnableMoveInput { get { return this[nameof(bEnableMoveInput)].Flag; } set { this[nameof(bEnableMoveInput)].Flag = value; } }
        public Object MoveInputEnableWindow { get { return this[nameof(MoveInputEnableWindow)]; } set { this[nameof(MoveInputEnableWindow)] = value; } }
        public Object MoveInputDisableWindow { get { return this[nameof(MoveInputDisableWindow)]; } set { this[nameof(MoveInputDisableWindow)] = value; } }
        public bool bOverrideMoveInputMethod { get { return this[nameof(bOverrideMoveInputMethod)].Flag; } set { this[nameof(bOverrideMoveInputMethod)].Flag = value; } }
        public EMoveInputMethod MoveInputMethod { get { return (EMoveInputMethod)this[nameof(MoveInputMethod)].GetValue<int>(); } set { this[nameof(MoveInputMethod)].SetValue<int>((int)value); } }
    }
    public class MovementTypeDecorator : ActorStateDecorator
    {
        public MovementTypeDecorator(nint addr) : base(addr) { }
        public byte NewMovementMode { get { return this[nameof(NewMovementMode)].GetValue<byte>(); } set { this[nameof(NewMovementMode)].SetValue<byte>(value); } }
        public bool RestoreOnExit { get { return this[nameof(RestoreOnExit)].Flag; } set { this[nameof(RestoreOnExit)].Flag = value; } }
    }
    public class RootMotionScalarStateDecorator : ActorStateDecorator
    {
        public RootMotionScalarStateDecorator(nint addr) : base(addr) { }
        public StatValue RootMotionMod { get { return this[nameof(RootMotionMod)].As<StatValue>(); } set { this["RootMotionMod"] = value; } }
        public StatValue RootMotionScalar { get { return this[nameof(RootMotionScalar)].As<StatValue>(); } set { this["RootMotionScalar"] = value; } }
    }
    public class ShowEquipmentDecorator : ShowEquipmentAbstractDecorator
    {
        public ShowEquipmentDecorator(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public Object EquipmentType { get { return this[nameof(EquipmentType)]; } set { this[nameof(EquipmentType)] = value; } }
        public bool bCanEditType { get { return this[nameof(bCanEditType)].Flag; } set { this[nameof(bCanEditType)].Flag = value; } }
        public bool bCanEditEquipmentType { get { return this[nameof(bCanEditEquipmentType)].Flag; } set { this[nameof(bCanEditEquipmentType)].Flag = value; } }
    }
    public class SoftCollisionWeightStateDecorator : ActorStateDecorator
    {
        public SoftCollisionWeightStateDecorator(nint addr) : base(addr) { }
        public float SoftCollisionWeight { get { return this[nameof(SoftCollisionWeight)].GetValue<float>(); } set { this[nameof(SoftCollisionWeight)].SetValue<float>(value); } }
        public bool bShouldRestorePreviousWeight { get { return this[nameof(bShouldRestorePreviousWeight)].Flag; } set { this[nameof(bShouldRestorePreviousWeight)].Flag = value; } }
    }
    public class SoundTagStateDecorator : ActorStateDecorator
    {
        public SoundTagStateDecorator(nint addr) : base(addr) { }
        public Array<Object> SoundTags { get { return new Array<Object>(this[nameof(SoundTags)].Address); } }
    }
    public class StaminaStateDecorator : ActorStateDecorator
    {
        public StaminaStateDecorator(nint addr) : base(addr) { }
        public bool ValidateStamina { get { return this[nameof(ValidateStamina)].Flag; } set { this[nameof(ValidateStamina)].Flag = value; } }
        public int StaminaStartFrame { get { return this[nameof(StaminaStartFrame)].GetValue<int>(); } set { this[nameof(StaminaStartFrame)].SetValue<int>(value); } }
        public float StaminaOnStart { get { return this[nameof(StaminaOnStart)].GetValue<float>(); } set { this[nameof(StaminaOnStart)].SetValue<float>(value); } }
        public float StaminaOnExit { get { return this[nameof(StaminaOnExit)].GetValue<float>(); } set { this[nameof(StaminaOnExit)].SetValue<float>(value); } }
        public float StaminaPerSec { get { return this[nameof(StaminaPerSec)].GetValue<float>(); } set { this[nameof(StaminaPerSec)].SetValue<float>(value); } }
        public int StaminaLockFrame { get { return this[nameof(StaminaLockFrame)].GetValue<int>(); } set { this[nameof(StaminaLockFrame)].SetValue<int>(value); } }
        public float StaminaRegenDelay { get { return this[nameof(StaminaRegenDelay)].GetValue<float>(); } set { this[nameof(StaminaRegenDelay)].SetValue<float>(value); } }
        public float StaminaRegenScalar { get { return this[nameof(StaminaRegenScalar)].GetValue<float>(); } set { this[nameof(StaminaRegenScalar)].SetValue<float>(value); } }
    }
    public class StatStateDecorator : ActorStateDecorator
    {
        public StatStateDecorator(nint addr) : base(addr) { }
        public Array<StatDecoratorStat> StatsToModify { get { return new Array<StatDecoratorStat>(this[nameof(StatsToModify)].Address); } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
        public void ComputeStats(Actor Actor) { Invoke(nameof(ComputeStats), Actor); }
    }
    public class SwimmingStateDecorator : ActorStateDecorator
    {
        public SwimmingStateDecorator(nint addr) : base(addr) { }
        public ESwimmingType Type { get { return (ESwimmingType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public bool bClampZ { get { return this[nameof(bClampZ)].Flag; } set { this[nameof(bClampZ)].Flag = value; } }
        public bool bHandleWaterEntry { get { return this[nameof(bHandleWaterEntry)].Flag; } set { this[nameof(bHandleWaterEntry)].Flag = value; } }
    }
    public class TimeDilationDecorator : ActorStateDecorator
    {
        public TimeDilationDecorator(nint addr) : base(addr) { }
        public float Dilation { get { return this[nameof(Dilation)].GetValue<float>(); } set { this[nameof(Dilation)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float EaseInTime { get { return this[nameof(EaseInTime)].GetValue<float>(); } set { this[nameof(EaseInTime)].SetValue<float>(value); } }
        public float EaseOutTime { get { return this[nameof(EaseOutTime)].GetValue<float>(); } set { this[nameof(EaseOutTime)].SetValue<float>(value); } }
    }
    public class ClearTimeDilationDecorator : ActorStateDecorator
    {
        public ClearTimeDilationDecorator(nint addr) : base(addr) { }
    }
    public class UseItemStateDecorator : ActorStateDecorator
    {
        public UseItemStateDecorator(nint addr) : base(addr) { }
        public StaticMesh AttachMesh { get { return this[nameof(AttachMesh)].As<StaticMesh>(); } set { this["AttachMesh"] = value; } }
        public Object AttachComponent { get { return this[nameof(AttachComponent)]; } set { this[nameof(AttachComponent)] = value; } }
        public Object FireEventOnExit { get { return this[nameof(FireEventOnExit)]; } set { this[nameof(FireEventOnExit)] = value; } }
        public bool Remove { get { return this[nameof(Remove)].Flag; } set { this[nameof(Remove)].Flag = value; } }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public byte Quantity { get { return this[nameof(Quantity)].GetValue<byte>(); } set { this[nameof(Quantity)].SetValue<byte>(value); } }
    }
    public class VitalityStateDecorator : ActorStateDecorator
    {
        public VitalityStateDecorator(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public bool ValidateVitality { get { return this[nameof(ValidateVitality)].Flag; } set { this[nameof(ValidateVitality)].Flag = value; } }
        public int VitalityStartFrame { get { return this[nameof(VitalityStartFrame)].GetValue<int>(); } set { this[nameof(VitalityStartFrame)].SetValue<int>(value); } }
        public float VitalityOnStart { get { return this[nameof(VitalityOnStart)].GetValue<float>(); } set { this[nameof(VitalityOnStart)].SetValue<float>(value); } }
        public StatValue VitalityOnStartScalar { get { return this[nameof(VitalityOnStartScalar)].As<StatValue>(); } set { this["VitalityOnStartScalar"] = value; } }
        public bool bClearRegenDelayOnStart { get { return this[nameof(bClearRegenDelayOnStart)].Flag; } set { this[nameof(bClearRegenDelayOnStart)].Flag = value; } }
        public float VitalityOnExit { get { return this[nameof(VitalityOnExit)].GetValue<float>(); } set { this[nameof(VitalityOnExit)].SetValue<float>(value); } }
        public StatValue VitalityOnExitScalar { get { return this[nameof(VitalityOnExitScalar)].As<StatValue>(); } set { this["VitalityOnExitScalar"] = value; } }
        public StatValue VitalityPerSec { get { return this[nameof(VitalityPerSec)].As<StatValue>(); } set { this["VitalityPerSec"] = value; } }
        public int VitalityLockFrame { get { return this[nameof(VitalityLockFrame)].GetValue<int>(); } set { this[nameof(VitalityLockFrame)].SetValue<int>(value); } }
        public float VitalityRegenDelay { get { return this[nameof(VitalityRegenDelay)].GetValue<float>(); } set { this[nameof(VitalityRegenDelay)].SetValue<float>(value); } }
        public StatValue VitalityRegenDelayScalar { get { return this[nameof(VitalityRegenDelayScalar)].As<StatValue>(); } set { this["VitalityRegenDelayScalar"] = value; } }
        public float VitalityRegenScalar { get { return this[nameof(VitalityRegenScalar)].GetValue<float>(); } set { this[nameof(VitalityRegenScalar)].SetValue<float>(value); } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class WaterEntryDecorator : ActorStateDecorator
    {
        public WaterEntryDecorator(nint addr) : base(addr) { }
    }
    public class LadderParams : Object
    {
        public LadderParams(nint addr) : base(addr) { }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public float TraceDistance { get { return this[nameof(TraceDistance)].GetValue<float>(); } set { this[nameof(TraceDistance)].SetValue<float>(value); } }
        public float TraceHeightOffset { get { return this[nameof(TraceHeightOffset)].GetValue<float>(); } set { this[nameof(TraceHeightOffset)].SetValue<float>(value); } }
        public float ValidArc { get { return this[nameof(ValidArc)].GetValue<float>(); } set { this[nameof(ValidArc)].SetValue<float>(value); } }
        public bool bUseNavLink { get { return this[nameof(bUseNavLink)].Flag; } set { this[nameof(bUseNavLink)].Flag = value; } }
        public bool bSearchTowardsVelocity { get { return this[nameof(bSearchTowardsVelocity)].Flag; } set { this[nameof(bSearchTowardsVelocity)].Flag = value; } }
        public float GrabHeight { get { return this[nameof(GrabHeight)].GetValue<float>(); } set { this[nameof(GrabHeight)].SetValue<float>(value); } }
        public float GrabOffset { get { return this[nameof(GrabOffset)].GetValue<float>(); } set { this[nameof(GrabOffset)].SetValue<float>(value); } }
        public float ReverseGrabHeight { get { return this[nameof(ReverseGrabHeight)].GetValue<float>(); } set { this[nameof(ReverseGrabHeight)].SetValue<float>(value); } }
        public float ReverseGrabOffset { get { return this[nameof(ReverseGrabOffset)].GetValue<float>(); } set { this[nameof(ReverseGrabOffset)].SetValue<float>(value); } }
        public int BottomExitRungs { get { return this[nameof(BottomExitRungs)].GetValue<int>(); } set { this[nameof(BottomExitRungs)].SetValue<int>(value); } }
        public int TopExitRungs { get { return this[nameof(TopExitRungs)].GetValue<int>(); } set { this[nameof(TopExitRungs)].SetValue<int>(value); } }
        public float RungSpacing { get { return this[nameof(RungSpacing)].GetValue<float>(); } set { this[nameof(RungSpacing)].SetValue<float>(value); } }
        public float RungGrabHeight { get { return this[nameof(RungGrabHeight)].GetValue<float>(); } set { this[nameof(RungGrabHeight)].SetValue<float>(value); } }
        public float GrabHeightShift { get { return this[nameof(GrabHeightShift)].GetValue<float>(); } set { this[nameof(GrabHeightShift)].SetValue<float>(value); } }
        public int RungOccupancy { get { return this[nameof(RungOccupancy)].GetValue<int>(); } set { this[nameof(RungOccupancy)].SetValue<int>(value); } }
        public int RungShift { get { return this[nameof(RungShift)].GetValue<int>(); } set { this[nameof(RungShift)].SetValue<int>(value); } }
    }
    public class StateMachine : InheritableAsset
    {
        public StateMachine(nint addr) : base(addr) { }
        public Object DefaultState { get { return this[nameof(DefaultState)]; } set { this[nameof(DefaultState)] = value; } }
        public Array<ActorState> States { get { return new Array<ActorState>(this[nameof(States)].Address); } }
        public Array<ActorState> HitReactions { get { return new Array<ActorState>(this[nameof(HitReactions)].Address); } }
        public ActorState GetStateParent(ActorState State) { return Invoke<ActorState>(nameof(GetStateParent), State); }
        public ActorState GetState(Object NameID) { return Invoke<ActorState>(nameof(GetState), NameID); }
        public ActorState GetRootState(ActorState State) { return Invoke<ActorState>(nameof(GetRootState), State); }
    }
    public class StateMachineComponent : ActorComponent
    {
        public StateMachineComponent(nint addr) : base(addr) { }
        public Object OnStateChange { get { return this[nameof(OnStateChange)]; } set { this[nameof(OnStateChange)] = value; } }
        public Object OnStateComplete { get { return this[nameof(OnStateComplete)]; } set { this[nameof(OnStateComplete)] = value; } }
        public Object OnStateInterruptUpdate { get { return this[nameof(OnStateInterruptUpdate)]; } set { this[nameof(OnStateInterruptUpdate)] = value; } }
        public Object OnInteractive { get { return this[nameof(OnInteractive)]; } set { this[nameof(OnInteractive)] = value; } }
        public StateMachine StateMachine { get { return this[nameof(StateMachine)].As<StateMachine>(); } set { this["StateMachine"] = value; } }
        public Object StartState { get { return this[nameof(StartState)]; } set { this[nameof(StartState)] = value; } }
        public Object AnimationLayer { get { return this[nameof(AnimationLayer)]; } set { this[nameof(AnimationLayer)] = value; } }
        public Object FlinchAnimationLayer { get { return this[nameof(FlinchAnimationLayer)]; } set { this[nameof(FlinchAnimationLayer)] = value; } }
        public bool Secondary { get { return this[nameof(Secondary)].Flag; } set { this[nameof(Secondary)].Flag = value; } }
        public Object InteractCullComponent { get { return this[nameof(InteractCullComponent)]; } set { this[nameof(InteractCullComponent)] = value; } }
        public CharacterGunfire Character { get { return this[nameof(Character)].As<CharacterGunfire>(); } set { this["Character"] = value; } }
        public LadderReference CurrentLadder { get { return this[nameof(CurrentLadder)].As<LadderReference>(); } set { this["CurrentLadder"] = value; } }
        public ActorState CurrentState { get { return this[nameof(CurrentState)].As<ActorState>(); } set { this["CurrentState"] = value; } }
        public StateInfo CurrentStateInfo { get { return this[nameof(CurrentStateInfo)].As<StateInfo>(); } set { this["CurrentStateInfo"] = value; } }
        public AnimInstanceGunfire OverrideAnimInstance { get { return this[nameof(OverrideAnimInstance)].As<AnimInstanceGunfire>(); } set { this["OverrideAnimInstance"] = value; } }
        public AnimInstanceGunfire AnimInstance { get { return this[nameof(AnimInstance)].As<AnimInstanceGunfire>(); } set { this["AnimInstance"] = value; } }
        public SceneComponent CachedInteractCullComponent { get { return this[nameof(CachedInteractCullComponent)].As<SceneComponent>(); } set { this["CachedInteractCullComponent"] = value; } }
        public void SetWindow(Object Name) { Invoke(nameof(SetWindow), Name); }
        public void SetEvent(Object Name) { Invoke(nameof(SetEvent), Name); }
        public void ServerSetTraversalState(StateID StateID, float Heading, Vector Position, byte CurrentClientAck) { Invoke(nameof(ServerSetTraversalState), StateID, Heading, Position, CurrentClientAck); }
        public void ServerSetState(StateID StateID, float LockDirection, byte CurrentClientAck) { Invoke(nameof(ServerSetState), StateID, LockDirection, CurrentClientAck); }
        public void ServerSetLadder(LadderReference LadderReference) { Invoke(nameof(ServerSetLadder), LadderReference); }
        public void ServerSetInteractiveResult(EInteractiveResult State, float MashValue) { Invoke(nameof(ServerSetInteractiveResult), State, MashValue); }
        public void ServerSetClimbingState(StateID StateID, ClimbableSurfaceResult ClimbableSurface, byte CurrentClientAck) { Invoke(nameof(ServerSetClimbingState), StateID, ClimbableSurface, CurrentClientAck); }
        public void ServerResendInteractive(ushort StateChangeID) { Invoke(nameof(ServerResendInteractive), StateChangeID); }
        public void ServerDoInteractive(Object NameID, Actor Other, bool bOnlyIfValid) { Invoke(nameof(ServerDoInteractive), NameID, Other, bOnlyIfValid); }
        public bool ResetStateToDefault(bool bOnlySetIfValid) { return Invoke<bool>(nameof(ResetStateToDefault), bOnlySetIfValid); }
        public void OnRep_CurrentStateInfo() { Invoke(nameof(OnRep_CurrentStateInfo)); }
        public void OnPostComputeStats() { Invoke(nameof(OnPostComputeStats)); }
        public void MulticastDoFlinchWithHitLocation(HitReactionState HitReaction, Object HitLocation) { Invoke(nameof(MulticastDoFlinchWithHitLocation), HitReaction, HitLocation); }
        public void MulticastDoFlinch(HitReactionState HitReaction) { Invoke(nameof(MulticastDoFlinch), HitReaction); }
        public bool K2_SetState(Object NameID, bool bOnlySetIfValid) { return Invoke<bool>(nameof(K2_SetState), NameID, bOnlySetIfValid); }
        public bool IsWindowSet(Object Name) { return Invoke<bool>(nameof(IsWindowSet), Name); }
        public bool IsInterruptible() { return Invoke<bool>(nameof(IsInterruptible)); }
        public bool IsEventSet(Object Name) { return Invoke<bool>(nameof(IsEventSet), Name); }
        public void InitAnimInstance() { Invoke(nameof(InitAnimInstance)); }
        public bool InInteractive() { return Invoke<bool>(nameof(InInteractive)); }
        public bool HasPendingInterrupt() { return Invoke<bool>(nameof(HasPendingInterrupt)); }
        public Object GetStateName() { return Invoke<Object>(nameof(GetStateName)); }
        public Actor GetPendingInteractiveOther() { return Invoke<Actor>(nameof(GetPendingInteractiveOther)); }
        public Actor GetInteractiveOther() { return Invoke<Actor>(nameof(GetInteractiveOther)); }
        public HitReactionType GetHitReactionType() { return Invoke<HitReactionType>(nameof(GetHitReactionType)); }
        public float GetElapsedStateTime() { return Invoke<float>(nameof(GetElapsedStateTime)); }
        public Object GetDebugInfo(int DebugLevel) { return Invoke<Object>(nameof(GetDebugInfo), DebugLevel); }
        public ActorState GetCurrentState() { return Invoke<ActorState>(nameof(GetCurrentState)); }
        public bool DoInteractive(Object NameID, Actor Other, bool bOnlyIfValid) { return Invoke<bool>(nameof(DoInteractive), NameID, Other, bOnlyIfValid); }
        public void ClientSetState(StateID State, float LockDirection, byte CurrentClientAck) { Invoke(nameof(ClientSetState), State, LockDirection, CurrentClientAck); }
        public void ClientFailedLadderOccupancy() { Invoke(nameof(ClientFailedLadderOccupancy)); }
        public void ClientDoInteractive(StateInfo Info, byte NewClientAck) { Invoke(nameof(ClientDoInteractive), Info, NewClientAck); }
        public void ClientAbortInteractive() { Invoke(nameof(ClientAbortInteractive)); }
        public void ClearWindow(Object Name, bool bClearAll) { Invoke(nameof(ClearWindow), Name, bClearAll); }
        public void BeginLerp(float Time, bool LerpPosition, bool LerpRotation, bool EaseIn, float EaseExponent, bool ForceClearPreviousLerp) { Invoke(nameof(BeginLerp), Time, LerpPosition, LerpRotation, EaseIn, EaseExponent, ForceClearPreviousLerp); }
    }
    public class HitReactionState : AnimActorState
    {
        public HitReactionState(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public HitReactionType Type { get { return (HitReactionType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public EHitResult HitResult { get { return (EHitResult)this[nameof(HitResult)].GetValue<int>(); } set { this[nameof(HitResult)].SetValue<int>((int)value); } }
        public Object Group { get { return this[nameof(Group)]; } set { this[nameof(Group)] = value; } }
        public Object HitLocation { get { return this[nameof(HitLocation)]; } set { this[nameof(HitLocation)] = value; } }
        public Array<ActorStateID> ValidStateIDs { get { return new Array<ActorStateID>(this[nameof(ValidStateIDs)].Address); } }
        public Array<ActorStateID> InvalidStateIDs { get { return new Array<ActorStateID>(this[nameof(InvalidStateIDs)].Address); } }
        public float ReferenceAngle { get { return this[nameof(ReferenceAngle)].GetValue<float>(); } set { this[nameof(ReferenceAngle)].SetValue<float>(value); } }
        public float Arc { get { return this[nameof(Arc)].GetValue<float>(); } set { this[nameof(Arc)].SetValue<float>(value); } }
        public bool IgnoreNoImpact { get { return this[nameof(IgnoreNoImpact)].Flag; } set { this[nameof(IgnoreNoImpact)].Flag = value; } }
        public bool OnlyIfBlocked { get { return this[nameof(OnlyIfBlocked)].Flag; } set { this[nameof(OnlyIfBlocked)].Flag = value; } }
        public bool SetLastHitReactionTimeOnExit { get { return this[nameof(SetLastHitReactionTimeOnExit)].Flag; } set { this[nameof(SetLastHitReactionTimeOnExit)].Flag = value; } }
        public int MinPower { get { return this[nameof(MinPower)].GetValue<int>(); } set { this[nameof(MinPower)].SetValue<int>(value); } }
        public int MaxPower { get { return this[nameof(MaxPower)].GetValue<int>(); } set { this[nameof(MaxPower)].SetValue<int>(value); } }
        public Array<Object> DamageClasses { get { return new Array<Object>(this[nameof(DamageClasses)].Address); } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public float DamageWindow { get { return this[nameof(DamageWindow)].GetValue<float>(); } set { this[nameof(DamageWindow)].SetValue<float>(value); } }
        public float MinDamagePercent { get { return this[nameof(MinDamagePercent)].GetValue<float>(); } set { this[nameof(MinDamagePercent)].SetValue<float>(value); } }
        public float MaxDamagePercent { get { return this[nameof(MaxDamagePercent)].GetValue<float>(); } set { this[nameof(MaxDamagePercent)].SetValue<float>(value); } }
        public float DamageAccumulationScalar { get { return this[nameof(DamageAccumulationScalar)].GetValue<float>(); } set { this[nameof(DamageAccumulationScalar)].SetValue<float>(value); } }
        public bool bIgnoreImpactScalar { get { return this[nameof(bIgnoreImpactScalar)].Flag; } set { this[nameof(bIgnoreImpactScalar)].Flag = value; } }
        public bool IgnoreMPHealthScaling { get { return this[nameof(IgnoreMPHealthScaling)].Flag; } set { this[nameof(IgnoreMPHealthScaling)].Flag = value; } }
    }
    public class InteractiveState : ActorState
    {
        public InteractiveState(nint addr) : base(addr) { }
        public Object AnimationID { get { return this[nameof(AnimationID)]; } set { this[nameof(AnimationID)] = value; } }
        public Object InterruptState { get { return this[nameof(InterruptState)]; } set { this[nameof(InterruptState)] = value; } }
        public Object AnimationOtherID { get { return this[nameof(AnimationOtherID)]; } set { this[nameof(AnimationOtherID)] = value; } }
        public Object InterruptStateOther { get { return this[nameof(InterruptStateOther)]; } set { this[nameof(InterruptStateOther)] = value; } }
        public EInteractiveInitiator Initiator { get { return (EInteractiveInitiator)this[nameof(Initiator)].GetValue<int>(); } set { this[nameof(Initiator)].SetValue<int>((int)value); } }
        public EInteractiveInitiator Anchor { get { return (EInteractiveInitiator)this[nameof(Anchor)].GetValue<int>(); } set { this[nameof(Anchor)].SetValue<int>((int)value); } }
        public bool bInitiatorIsSubject { get { return this[nameof(bInitiatorIsSubject)].Flag; } set { this[nameof(bInitiatorIsSubject)].Flag = value; } }
        public EInteractiveType InteractType { get { return (EInteractiveType)this[nameof(InteractType)].GetValue<int>(); } set { this[nameof(InteractType)].SetValue<int>((int)value); } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public bool AllowHitReactions { get { return this[nameof(AllowHitReactions)].Flag; } set { this[nameof(AllowHitReactions)].Flag = value; } }
        public bool AllowDamage { get { return this[nameof(AllowDamage)].Flag; } set { this[nameof(AllowDamage)].Flag = value; } }
        public bool AllowDeath { get { return this[nameof(AllowDeath)].Flag; } set { this[nameof(AllowDeath)].Flag = value; } }
        public bool AllowOtherInteractives { get { return this[nameof(AllowOtherInteractives)].Flag; } set { this[nameof(AllowOtherInteractives)].Flag = value; } }
        public bool StowEquipment { get { return this[nameof(StowEquipment)].Flag; } set { this[nameof(StowEquipment)].Flag = value; } }
        public bool RestoreEquipment { get { return this[nameof(RestoreEquipment)].Flag; } set { this[nameof(RestoreEquipment)].Flag = value; } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public float NonAnchorGravityScale { get { return this[nameof(NonAnchorGravityScale)].GetValue<float>(); } set { this[nameof(NonAnchorGravityScale)].SetValue<float>(value); } }
        public bool bConvergeToAnchor { get { return this[nameof(bConvergeToAnchor)].Flag; } set { this[nameof(bConvergeToAnchor)].Flag = value; } }
        public bool AnchorFaceOtherOnStart { get { return this[nameof(AnchorFaceOtherOnStart)].Flag; } set { this[nameof(AnchorFaceOtherOnStart)].Flag = value; } }
        public Object NonAnchorFacingNode { get { return this[nameof(NonAnchorFacingNode)]; } set { this[nameof(NonAnchorFacingNode)] = value; } }
        public EAnchorFaceOtherMethod FaceOtherMethod { get { return (EAnchorFaceOtherMethod)this[nameof(FaceOtherMethod)].GetValue<int>(); } set { this[nameof(FaceOtherMethod)].SetValue<int>((int)value); } }
        public float AnchorFaceOffset { get { return this[nameof(AnchorFaceOffset)].GetValue<float>(); } set { this[nameof(AnchorFaceOffset)].SetValue<float>(value); } }
        public bool AnchorFaceOtherEaseIn { get { return this[nameof(AnchorFaceOtherEaseIn)].Flag; } set { this[nameof(AnchorFaceOtherEaseIn)].Flag = value; } }
        public float AnchorFaceOtherExponent { get { return this[nameof(AnchorFaceOtherExponent)].GetValue<float>(); } set { this[nameof(AnchorFaceOtherExponent)].SetValue<float>(value); } }
        public bool DisableNonAnchorCollision { get { return this[nameof(DisableNonAnchorCollision)].Flag; } set { this[nameof(DisableNonAnchorCollision)].Flag = value; } }
        public bool ResetAnchorCollisionOnExit { get { return this[nameof(ResetAnchorCollisionOnExit)].Flag; } set { this[nameof(ResetAnchorCollisionOnExit)].Flag = value; } }
        public bool ResetNonAnchorCollisionOnExit { get { return this[nameof(ResetNonAnchorCollisionOnExit)].Flag; } set { this[nameof(ResetNonAnchorCollisionOnExit)].Flag = value; } }
        public bool IgnoreOtherActorWhileMoving { get { return this[nameof(IgnoreOtherActorWhileMoving)].Flag; } set { this[nameof(IgnoreOtherActorWhileMoving)].Flag = value; } }
        public EInteractiveConvergeMode ConvergeMode { get { return (EInteractiveConvergeMode)this[nameof(ConvergeMode)].GetValue<int>(); } set { this[nameof(ConvergeMode)].SetValue<int>((int)value); } }
        public bool PlayInteractAfterFinishedConverging { get { return this[nameof(PlayInteractAfterFinishedConverging)].Flag; } set { this[nameof(PlayInteractAfterFinishedConverging)].Flag = value; } }
        public Object ConvergeAnimationID { get { return this[nameof(ConvergeAnimationID)]; } set { this[nameof(ConvergeAnimationID)] = value; } }
        public Object ConvergeAnimationOtherID { get { return this[nameof(ConvergeAnimationOtherID)]; } set { this[nameof(ConvergeAnimationOtherID)] = value; } }
        public float ConvergeTime { get { return this[nameof(ConvergeTime)].GetValue<float>(); } set { this[nameof(ConvergeTime)].SetValue<float>(value); } }
        public float ConvergeRadius { get { return this[nameof(ConvergeRadius)].GetValue<float>(); } set { this[nameof(ConvergeRadius)].SetValue<float>(value); } }
        public bool SnapNonAnchorToGround { get { return this[nameof(SnapNonAnchorToGround)].Flag; } set { this[nameof(SnapNonAnchorToGround)].Flag = value; } }
        public float SnapToGroundOffset { get { return this[nameof(SnapToGroundOffset)].GetValue<float>(); } set { this[nameof(SnapToGroundOffset)].SetValue<float>(value); } }
        public float SnapToGroundCastDistance { get { return this[nameof(SnapToGroundCastDistance)].GetValue<float>(); } set { this[nameof(SnapToGroundCastDistance)].SetValue<float>(value); } }
        public bool IgnoreAnchorWhenSnappingToGround { get { return this[nameof(IgnoreAnchorWhenSnappingToGround)].Flag; } set { this[nameof(IgnoreAnchorWhenSnappingToGround)].Flag = value; } }
        public bool SimulateWalkingOnConverge { get { return this[nameof(SimulateWalkingOnConverge)].Flag; } set { this[nameof(SimulateWalkingOnConverge)].Flag = value; } }
        public float SimulatedWalkBlendOut { get { return this[nameof(SimulatedWalkBlendOut)].GetValue<float>(); } set { this[nameof(SimulatedWalkBlendOut)].SetValue<float>(value); } }
        public float SimulatedVelocity { get { return this[nameof(SimulatedVelocity)].GetValue<float>(); } set { this[nameof(SimulatedVelocity)].SetValue<float>(value); } }
        public bool VelocityControlsConvergeTime { get { return this[nameof(VelocityControlsConvergeTime)].Flag; } set { this[nameof(VelocityControlsConvergeTime)].Flag = value; } }
        public bool ConvergeEaseIn { get { return this[nameof(ConvergeEaseIn)].Flag; } set { this[nameof(ConvergeEaseIn)].Flag = value; } }
        public float ConvergeEaseExponent { get { return this[nameof(ConvergeEaseExponent)].GetValue<float>(); } set { this[nameof(ConvergeEaseExponent)].SetValue<float>(value); } }
        public bool DisableNonAnchorOverlaps { get { return this[nameof(DisableNonAnchorOverlaps)].Flag; } set { this[nameof(DisableNonAnchorOverlaps)].Flag = value; } }
        public bool RestoreOtherDefaultMovement { get { return this[nameof(RestoreOtherDefaultMovement)].Flag; } set { this[nameof(RestoreOtherDefaultMovement)].Flag = value; } }
        public Object CollisionEnableWindow { get { return this[nameof(CollisionEnableWindow)]; } set { this[nameof(CollisionEnableWindow)] = value; } }
        public bool bUsePreviousInteractRefNode { get { return this[nameof(bUsePreviousInteractRefNode)].Flag; } set { this[nameof(bUsePreviousInteractRefNode)].Flag = value; } }
        public Object InteractRefNode { get { return this[nameof(InteractRefNode)]; } set { this[nameof(InteractRefNode)] = value; } }
        public bool bDisableNonAnchorSpecialCharacterCollision { get { return this[nameof(bDisableNonAnchorSpecialCharacterCollision)].Flag; } set { this[nameof(bDisableNonAnchorSpecialCharacterCollision)].Flag = value; } }
        public Object InteractValidatorNode { get { return this[nameof(InteractValidatorNode)]; } set { this[nameof(InteractValidatorNode)] = value; } }
        public float InteractRange { get { return this[nameof(InteractRange)].GetValue<float>(); } set { this[nameof(InteractRange)].SetValue<float>(value); } }
        public float InteractRangeZ { get { return this[nameof(InteractRangeZ)].GetValue<float>(); } set { this[nameof(InteractRangeZ)].SetValue<float>(value); } }
        public EInteractArcValidationType ArcValidationType { get { return (EInteractArcValidationType)this[nameof(ArcValidationType)].GetValue<int>(); } set { this[nameof(ArcValidationType)].SetValue<int>((int)value); } }
        public float InteractRefAngle { get { return this[nameof(InteractRefAngle)].GetValue<float>(); } set { this[nameof(InteractRefAngle)].SetValue<float>(value); } }
        public float InteractArc { get { return this[nameof(InteractArc)].GetValue<float>(); } set { this[nameof(InteractArc)].SetValue<float>(value); } }
        public float PositionArcAngleOffset { get { return this[nameof(PositionArcAngleOffset)].GetValue<float>(); } set { this[nameof(PositionArcAngleOffset)].SetValue<float>(value); } }
        public bool ValidateLOS { get { return this[nameof(ValidateLOS)].Flag; } set { this[nameof(ValidateLOS)].Flag = value; } }
        public bool ValidateCapsule { get { return this[nameof(ValidateCapsule)].Flag; } set { this[nameof(ValidateCapsule)].Flag = value; } }
        public float CapsuleInflation { get { return this[nameof(CapsuleInflation)].GetValue<float>(); } set { this[nameof(CapsuleInflation)].SetValue<float>(value); } }
        public float CapsuleHeightOffset { get { return this[nameof(CapsuleHeightOffset)].GetValue<float>(); } set { this[nameof(CapsuleHeightOffset)].SetValue<float>(value); } }
        public Object ValidateShape { get { return this[nameof(ValidateShape)]; } set { this[nameof(ValidateShape)] = value; } }
        public Array<ActorStateID> ValidStateIDs { get { return new Array<ActorStateID>(this[nameof(ValidStateIDs)].Address); } }
        public Object InputAction { get { return this[nameof(InputAction)]; } set { this[nameof(InputAction)] = value; } }
        public float InputWindowStart { get { return this[nameof(InputWindowStart)].GetValue<float>(); } set { this[nameof(InputWindowStart)].SetValue<float>(value); } }
        public float InputWindowEnd { get { return this[nameof(InputWindowEnd)].GetValue<float>(); } set { this[nameof(InputWindowEnd)].SetValue<float>(value); } }
        public Object InputActionLabel { get { return this[nameof(InputActionLabel)]; } set { this[nameof(InputActionLabel)] = value; } }
        public bool InputMashEnable { get { return this[nameof(InputMashEnable)].Flag; } set { this[nameof(InputMashEnable)].Flag = value; } }
        public float InputMashStart { get { return this[nameof(InputMashStart)].GetValue<float>(); } set { this[nameof(InputMashStart)].SetValue<float>(value); } }
        public float InputMashIncrement { get { return this[nameof(InputMashIncrement)].GetValue<float>(); } set { this[nameof(InputMashIncrement)].SetValue<float>(value); } }
        public float InputMashDecay { get { return this[nameof(InputMashDecay)].GetValue<float>(); } set { this[nameof(InputMashDecay)].SetValue<float>(value); } }
        public float InputMashSuccessThreshold { get { return this[nameof(InputMashSuccessThreshold)].GetValue<float>(); } set { this[nameof(InputMashSuccessThreshold)].SetValue<float>(value); } }
        public float InputMashFailureThreshold { get { return this[nameof(InputMashFailureThreshold)].GetValue<float>(); } set { this[nameof(InputMashFailureThreshold)].SetValue<float>(value); } }
        public Object UINode { get { return this[nameof(UINode)]; } set { this[nameof(UINode)] = value; } }
        public Object UILabel { get { return this[nameof(UILabel)]; } set { this[nameof(UILabel)] = value; } }
        public Object UIIconName { get { return this[nameof(UIIconName)]; } set { this[nameof(UIIconName)] = value; } }
        public Texture2D UIIcon { get { return this[nameof(UIIcon)].As<Texture2D>(); } set { this["UIIcon"] = value; } }
        public bool bDrawWhenNotFocus { get { return this[nameof(bDrawWhenNotFocus)].Flag; } set { this[nameof(bDrawWhenNotFocus)].Flag = value; } }
        public bool bShouldDrawWhenOffScreen { get { return this[nameof(bShouldDrawWhenOffScreen)].Flag; } set { this[nameof(bShouldDrawWhenOffScreen)].Flag = value; } }
        public Conditions ConditionsOther { get { return this[nameof(ConditionsOther)].As<Conditions>(); } set { this["ConditionsOther"] = value; } }
        public InteractiveConditions OtherConditions { get { return this[nameof(OtherConditions)].As<InteractiveConditions>(); } set { this["OtherConditions"] = value; } }
    }
    public class InteractiveResult : Condition
    {
        public InteractiveResult(nint addr) : base(addr) { }
        public EInteractiveResult Result { get { return (EInteractiveResult)this[nameof(Result)].GetValue<int>(); } set { this[nameof(Result)].SetValue<int>((int)value); } }
    }
    public class InteractiveConvergeCompleteCondition : Condition
    {
        public InteractiveConvergeCompleteCondition(nint addr) : base(addr) { }
    }
    public class InteractiveStateTransition : ActorStateTransition
    {
        public InteractiveStateTransition(nint addr) : base(addr) { }
        public Object DestinationStateOther { get { return this[nameof(DestinationStateOther)]; } set { this[nameof(DestinationStateOther)] = value; } }
        public Conditions ConditionsOther { get { return this[nameof(ConditionsOther)].As<Conditions>(); } set { this["ConditionsOther"] = value; } }
        public InteractiveConditions OtherConditions { get { return this[nameof(OtherConditions)].As<InteractiveConditions>(); } set { this["OtherConditions"] = value; } }
        public ActorState CachedStateOther { get { return this[nameof(CachedStateOther)].As<ActorState>(); } set { this["CachedStateOther"] = value; } }
    }
    public class JumpState : TraversalState
    {
        public JumpState(nint addr) : base(addr) { }
        public EJumpStateType Type { get { return (EJumpStateType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object CliffParams { get { return this[nameof(CliffParams)]; } set { this[nameof(CliffParams)] = value; } }
        public float JumpDistance { get { return this[nameof(JumpDistance)].GetValue<float>(); } set { this[nameof(JumpDistance)].SetValue<float>(value); } }
        public Object LedgeEvent { get { return this[nameof(LedgeEvent)]; } set { this[nameof(LedgeEvent)] = value; } }
        public Object LandingParams { get { return this[nameof(LandingParams)]; } set { this[nameof(LandingParams)] = value; } }
        public bool bDisableGravityUntilJumpImpulse { get { return this[nameof(bDisableGravityUntilJumpImpulse)].Flag; } set { this[nameof(bDisableGravityUntilJumpImpulse)].Flag = value; } }
    }
    public class LadderState : TraversalState
    {
        public LadderState(nint addr) : base(addr) { }
        public Object LadderParams { get { return this[nameof(LadderParams)]; } set { this[nameof(LadderParams)] = value; } }
        public float GrabHeight { get { return this[nameof(GrabHeight)].GetValue<float>(); } set { this[nameof(GrabHeight)].SetValue<float>(value); } }
        public float GrabOffset { get { return this[nameof(GrabOffset)].GetValue<float>(); } set { this[nameof(GrabOffset)].SetValue<float>(value); } }
        public bool SnapToRungOnEnter { get { return this[nameof(SnapToRungOnEnter)].Flag; } set { this[nameof(SnapToRungOnEnter)].Flag = value; } }
        public ELadderDistanceAnimTag RungAnimTag { get { return (ELadderDistanceAnimTag)this[nameof(RungAnimTag)].GetValue<int>(); } set { this[nameof(RungAnimTag)].SetValue<int>((int)value); } }
        public Array<int> ValidRungs { get { return new Array<int>(this[nameof(ValidRungs)].Address); } }
        public float SnapLerpMinimumDist { get { return this[nameof(SnapLerpMinimumDist)].GetValue<float>(); } set { this[nameof(SnapLerpMinimumDist)].SetValue<float>(value); } }
    }
    public class LadderExitCondition : Condition
    {
        public LadderExitCondition(nint addr) : base(addr) { }
        public bool Reverse { get { return this[nameof(Reverse)].Flag; } set { this[nameof(Reverse)].Flag = value; } }
        public bool bOverrideNumExitRungs { get { return this[nameof(bOverrideNumExitRungs)].Flag; } set { this[nameof(bOverrideNumExitRungs)].Flag = value; } }
        public int NumRungsFromTop { get { return this[nameof(NumRungsFromTop)].GetValue<int>(); } set { this[nameof(NumRungsFromTop)].SetValue<int>(value); } }
    }
    public class LadderEnterCondition : Condition
    {
        public LadderEnterCondition(nint addr) : base(addr) { }
        public Object LadderParams { get { return this[nameof(LadderParams)]; } set { this[nameof(LadderParams)] = value; } }
        public bool LadderMustBeEmpty { get { return this[nameof(LadderMustBeEmpty)].Flag; } set { this[nameof(LadderMustBeEmpty)].Flag = value; } }
        public ELadderEntryType EntryType { get { return (ELadderEntryType)this[nameof(EntryType)].GetValue<int>(); } set { this[nameof(EntryType)].SetValue<int>((int)value); } }
        public bool bValidateEntryArc { get { return this[nameof(bValidateEntryArc)].Flag; } set { this[nameof(bValidateEntryArc)].Flag = value; } }
        public float EntryArc { get { return this[nameof(EntryArc)].GetValue<float>(); } set { this[nameof(EntryArc)].SetValue<float>(value); } }
        public int AdditionalOccupancyRungs { get { return this[nameof(AdditionalOccupancyRungs)].GetValue<int>(); } set { this[nameof(AdditionalOccupancyRungs)].SetValue<int>(value); } }
    }
    public class LadderTrafficCondition : Condition
    {
        public LadderTrafficCondition(nint addr) : base(addr) { }
        public ELadderTrafficType TrafficType { get { return (ELadderTrafficType)this[nameof(TrafficType)].GetValue<int>(); } set { this[nameof(TrafficType)].SetValue<int>((int)value); } }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public Object LadderParams { get { return this[nameof(LadderParams)]; } set { this[nameof(LadderParams)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class LadderMovementCondition : Condition
    {
        public LadderMovementCondition(nint addr) : base(addr) { }
        public ELadderClimbDirection Direction { get { return (ELadderClimbDirection)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public int AdditionalRungs { get { return this[nameof(AdditionalRungs)].GetValue<int>(); } set { this[nameof(AdditionalRungs)].SetValue<int>(value); } }
    }
    public class PushableIKSettings : ActorComponent
    {
        public PushableIKSettings(nint addr) : base(addr) { }
        public Array<PushIKAppendage> Appendages { get { return new Array<PushIKAppendage>(this[nameof(Appendages)].Address); } }
    }
    public class PushState : InteractiveState
    {
        public PushState(nint addr) : base(addr) { }
        public float MaxAnchorSpeed { get { return this[nameof(MaxAnchorSpeed)].GetValue<float>(); } set { this[nameof(MaxAnchorSpeed)].SetValue<float>(value); } }
        public float MaxAnchorVerticalSpeed { get { return this[nameof(MaxAnchorVerticalSpeed)].GetValue<float>(); } set { this[nameof(MaxAnchorVerticalSpeed)].SetValue<float>(value); } }
        public float MaxDistanceFromConvergePoint { get { return this[nameof(MaxDistanceFromConvergePoint)].GetValue<float>(); } set { this[nameof(MaxDistanceFromConvergePoint)].SetValue<float>(value); } }
        public float MaxTiltArc { get { return this[nameof(MaxTiltArc)].GetValue<float>(); } set { this[nameof(MaxTiltArc)].SetValue<float>(value); } }
        public float ObstructionCheckDistance { get { return this[nameof(ObstructionCheckDistance)].GetValue<float>(); } set { this[nameof(ObstructionCheckDistance)].SetValue<float>(value); } }
        public float ObstructionCheckCapsuleScale { get { return this[nameof(ObstructionCheckCapsuleScale)].GetValue<float>(); } set { this[nameof(ObstructionCheckCapsuleScale)].SetValue<float>(value); } }
        public float ObstructionCheckCapsuleHeightOffset { get { return this[nameof(ObstructionCheckCapsuleHeightOffset)].GetValue<float>(); } set { this[nameof(ObstructionCheckCapsuleHeightOffset)].SetValue<float>(value); } }
        public bool bPushAnchor { get { return this[nameof(bPushAnchor)].Flag; } set { this[nameof(bPushAnchor)].Flag = value; } }
        public EPushMethod PushMethod { get { return (EPushMethod)this[nameof(PushMethod)].GetValue<int>(); } set { this[nameof(PushMethod)].SetValue<int>((int)value); } }
        public float PushForce { get { return this[nameof(PushForce)].GetValue<float>(); } set { this[nameof(PushForce)].SetValue<float>(value); } }
        public float PushForceAcceleration { get { return this[nameof(PushForceAcceleration)].GetValue<float>(); } set { this[nameof(PushForceAcceleration)].SetValue<float>(value); } }
        public float InitialPushForceScale { get { return this[nameof(InitialPushForceScale)].GetValue<float>(); } set { this[nameof(InitialPushForceScale)].SetValue<float>(value); } }
        public float LiftingForce { get { return this[nameof(LiftingForce)].GetValue<float>(); } set { this[nameof(LiftingForce)].SetValue<float>(value); } }
        public float BrakingForce { get { return this[nameof(BrakingForce)].GetValue<float>(); } set { this[nameof(BrakingForce)].SetValue<float>(value); } }
        public bool bScaleForceWithMass { get { return this[nameof(bScaleForceWithMass)].Flag; } set { this[nameof(bScaleForceWithMass)].Flag = value; } }
        public float MaxPushVelocity { get { return this[nameof(MaxPushVelocity)].GetValue<float>(); } set { this[nameof(MaxPushVelocity)].SetValue<float>(value); } }
        public float MinimumInputStrength { get { return this[nameof(MinimumInputStrength)].GetValue<float>(); } set { this[nameof(MinimumInputStrength)].SetValue<float>(value); } }
        public float WallCheckDistance { get { return this[nameof(WallCheckDistance)].GetValue<float>(); } set { this[nameof(WallCheckDistance)].SetValue<float>(value); } }
        public float WallCheckWidth { get { return this[nameof(WallCheckWidth)].GetValue<float>(); } set { this[nameof(WallCheckWidth)].SetValue<float>(value); } }
        public float InputValidationDistance { get { return this[nameof(InputValidationDistance)].GetValue<float>(); } set { this[nameof(InputValidationDistance)].SetValue<float>(value); } }
        public float InputValidationCapsuleScale { get { return this[nameof(InputValidationCapsuleScale)].GetValue<float>(); } set { this[nameof(InputValidationCapsuleScale)].SetValue<float>(value); } }
        public float InputValidationCapsuleHeightOffset { get { return this[nameof(InputValidationCapsuleHeightOffset)].GetValue<float>(); } set { this[nameof(InputValidationCapsuleHeightOffset)].SetValue<float>(value); } }
        public bool bUseDigitalInput { get { return this[nameof(bUseDigitalInput)].Flag; } set { this[nameof(bUseDigitalInput)].Flag = value; } }
        public EInteractivePushForceLocation PushLocation { get { return (EInteractivePushForceLocation)this[nameof(PushLocation)].GetValue<int>(); } set { this[nameof(PushLocation)].SetValue<int>((int)value); } }
        public Vector RelativePushOffset { get { return this[nameof(RelativePushOffset)].As<Vector>(); } set { this["RelativePushOffset"] = value; } }
        public float MaxPushArc { get { return this[nameof(MaxPushArc)].GetValue<float>(); } set { this[nameof(MaxPushArc)].SetValue<float>(value); } }
        public float BrakingArc { get { return this[nameof(BrakingArc)].GetValue<float>(); } set { this[nameof(BrakingArc)].SetValue<float>(value); } }
        public float MinimumPushTime { get { return this[nameof(MinimumPushTime)].GetValue<float>(); } set { this[nameof(MinimumPushTime)].SetValue<float>(value); } }
        public float MinimumBrakeTime { get { return this[nameof(MinimumBrakeTime)].GetValue<float>(); } set { this[nameof(MinimumBrakeTime)].SetValue<float>(value); } }
        public float MaximumBrakeTime { get { return this[nameof(MaximumBrakeTime)].GetValue<float>(); } set { this[nameof(MaximumBrakeTime)].SetValue<float>(value); } }
        public float MaxAngularVelocity { get { return this[nameof(MaxAngularVelocity)].GetValue<float>(); } set { this[nameof(MaxAngularVelocity)].SetValue<float>(value); } }
        public bool bReoreintToVelocity { get { return this[nameof(bReoreintToVelocity)].Flag; } set { this[nameof(bReoreintToVelocity)].Flag = value; } }
        public Vector2D ReorientToVelocityRates { get { return this[nameof(ReorientToVelocityRates)].As<Vector2D>(); } set { this["ReorientToVelocityRates"] = value; } }
        public Vector2D ReorientToVelocityAngleRefs { get { return this[nameof(ReorientToVelocityAngleRefs)].As<Vector2D>(); } set { this["ReorientToVelocityAngleRefs"] = value; } }
        public float TurnSpeedAcceleration { get { return this[nameof(TurnSpeedAcceleration)].GetValue<float>(); } set { this[nameof(TurnSpeedAcceleration)].SetValue<float>(value); } }
        public float ReorientToVelocityHeightOffset { get { return this[nameof(ReorientToVelocityHeightOffset)].GetValue<float>(); } set { this[nameof(ReorientToVelocityHeightOffset)].SetValue<float>(value); } }
        public float ReorientToVelocityMinSpeed { get { return this[nameof(ReorientToVelocityMinSpeed)].GetValue<float>(); } set { this[nameof(ReorientToVelocityMinSpeed)].SetValue<float>(value); } }
        public float ReorientToVelocityArc { get { return this[nameof(ReorientToVelocityArc)].GetValue<float>(); } set { this[nameof(ReorientToVelocityArc)].SetValue<float>(value); } }
        public float ReorientToVelocityAdjustAngle { get { return this[nameof(ReorientToVelocityAdjustAngle)].GetValue<float>(); } set { this[nameof(ReorientToVelocityAdjustAngle)].SetValue<float>(value); } }
        public float MinimumPivotRadius { get { return this[nameof(MinimumPivotRadius)].GetValue<float>(); } set { this[nameof(MinimumPivotRadius)].SetValue<float>(value); } }
        public CharacterFacing Facing { get { return (CharacterFacing)this[nameof(Facing)].GetValue<int>(); } set { this[nameof(Facing)].SetValue<int>((int)value); } }
        public float FacingOffset { get { return this[nameof(FacingOffset)].GetValue<float>(); } set { this[nameof(FacingOffset)].SetValue<float>(value); } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float MaxSpeedBackwards { get { return this[nameof(MaxSpeedBackwards)].GetValue<float>(); } set { this[nameof(MaxSpeedBackwards)].SetValue<float>(value); } }
        public float BackwardStartAngle { get { return this[nameof(BackwardStartAngle)].GetValue<float>(); } set { this[nameof(BackwardStartAngle)].SetValue<float>(value); } }
        public StatValue MaxSpeedScalar { get { return this[nameof(MaxSpeedScalar)].As<StatValue>(); } set { this["MaxSpeedScalar"] = value; } }
        public float Acceleration { get { return this[nameof(Acceleration)].GetValue<float>(); } set { this[nameof(Acceleration)].SetValue<float>(value); } }
        public float Deceleration { get { return this[nameof(Deceleration)].GetValue<float>(); } set { this[nameof(Deceleration)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public float TurnSmoothTime { get { return this[nameof(TurnSmoothTime)].GetValue<float>(); } set { this[nameof(TurnSmoothTime)].SetValue<float>(value); } }
        public float GroundFriction { get { return this[nameof(GroundFriction)].GetValue<float>(); } set { this[nameof(GroundFriction)].SetValue<float>(value); } }
        public ERootMotionVelocityMethod RootMotionMethod { get { return (ERootMotionVelocityMethod)this[nameof(RootMotionMethod)].GetValue<int>(); } set { this[nameof(RootMotionMethod)].SetValue<int>((int)value); } }
        public bool bUseExclusiveRootMotion { get { return this[nameof(bUseExclusiveRootMotion)].Flag; } set { this[nameof(bUseExclusiveRootMotion)].Flag = value; } }
        public bool ConstrainToGround { get { return this[nameof(ConstrainToGround)].Flag; } set { this[nameof(ConstrainToGround)].Flag = value; } }
        public bool UseHeadingAsAccelDirection { get { return this[nameof(UseHeadingAsAccelDirection)].Flag; } set { this[nameof(UseHeadingAsAccelDirection)].Flag = value; } }
        public bool bAllowVerticalInputAcceleration { get { return this[nameof(bAllowVerticalInputAcceleration)].Flag; } set { this[nameof(bAllowVerticalInputAcceleration)].Flag = value; } }
        public bool bForceDigitalInput { get { return this[nameof(bForceDigitalInput)].Flag; } set { this[nameof(bForceDigitalInput)].Flag = value; } }
    }
    public class VaultState : TraversalState
    {
        public VaultState(nint addr) : base(addr) { }
        public Object VaultSettings { get { return this[nameof(VaultSettings)]; } set { this[nameof(VaultSettings)] = value; } }
    }
    public class WaterSurfaceState : TraversalState
    {
        public WaterSurfaceState(nint addr) : base(addr) { }
        public EWaterSurfaceTraversalType TraversalType { get { return (EWaterSurfaceTraversalType)this[nameof(TraversalType)].GetValue<int>(); } set { this[nameof(TraversalType)].SetValue<int>((int)value); } }
    }
    /*public class GunfireGauntletController : GauntletTestController
    {
        public GunfireGauntletController(nint addr) : base(addr) { }
        public void StopTesting() { Invoke(nameof(StopTesting)); }
        public void StopProfiling() { Invoke(nameof(StopProfiling)); }
        public void StartTesting() { Invoke(nameof(StartTesting)); }
        public void StartProfiling() { Invoke(nameof(StartProfiling)); }
    }*/
    public class AdvImage : Image
    {
        public AdvImage(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public void SetNameID(Object InNameID) { Invoke(nameof(SetNameID), InNameID); }
        public void OnResetIconCache() { Invoke(nameof(OnResetIconCache)); }
        public void OnDeviceChanged(int ControllerId, EInputDevice NewDevice) { Invoke(nameof(OnDeviceChanged), ControllerId, NewDevice); }
    }
    public class AdvTextBlock : Widget
    {
        public AdvTextBlock(nint addr) : base(addr) { }
        public Object OnTextFilled { get { return this[nameof(OnTextFilled)]; } set { this[nameof(OnTextFilled)] = value; } }
        public Object OnWidgetReady { get { return this[nameof(OnWidgetReady)]; } set { this[nameof(OnWidgetReady)] = value; } }
        public Object OnPageSet { get { return this[nameof(OnPageSet)]; } set { this[nameof(OnPageSet)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public bool AutoWrapText { get { return this[nameof(AutoWrapText)].Flag; } set { this[nameof(AutoWrapText)].Flag = value; } }
        public byte Justification { get { return this[nameof(Justification)].GetValue<byte>(); } set { this[nameof(Justification)].SetValue<byte>(value); } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public Vector2D ShadowOffset { get { return this[nameof(ShadowOffset)].As<Vector2D>(); } set { this["ShadowOffset"] = value; } }
        public LinearColor ShadowColor { get { return this[nameof(ShadowColor)].As<LinearColor>(); } set { this["ShadowColor"] = value; } }
        public float WrapTextAt { get { return this[nameof(WrapTextAt)].GetValue<float>(); } set { this[nameof(WrapTextAt)].SetValue<float>(value); } }
        public Margin Margin { get { return this[nameof(Margin)].As<Margin>(); } set { this["Margin"] = value; } }
        public float LineHeightPercentage { get { return this[nameof(LineHeightPercentage)].GetValue<float>(); } set { this[nameof(LineHeightPercentage)].SetValue<float>(value); } }
        public float FillInSpeed { get { return this[nameof(FillInSpeed)].GetValue<float>(); } set { this[nameof(FillInSpeed)].SetValue<float>(value); } }
        public bool RebuildAfterDeviceChange { get { return this[nameof(RebuildAfterDeviceChange)].Flag; } set { this[nameof(RebuildAfterDeviceChange)].Flag = value; } }
        public bool bAutoStartFillIn { get { return this[nameof(bAutoStartFillIn)].Flag; } set { this[nameof(bAutoStartFillIn)].Flag = value; } }
        public void StartTextFill(bool bStartFromBeginning) { Invoke(nameof(StartTextFill), bStartFromBeginning); }
        public void SetText(Object newText, float NewFillSpeed, bool bShouldAutoStartFillIn) { Invoke(nameof(SetText), newText, NewFillSpeed, bShouldAutoStartFillIn); }
        public void SetLineHeightPercentage(float InLineHeightPercentage) { Invoke(nameof(SetLineHeightPercentage), InLineHeightPercentage); }
        public void SetCurrentPage(int Page) { Invoke(nameof(SetCurrentPage), Page); }
        public void PauseTextFill() { Invoke(nameof(PauseTextFill)); }
        public void OnDeviceChanged(int ControllerId, EInputDevice NewDevice) { Invoke(nameof(OnDeviceChanged), ControllerId, NewDevice); }
        public bool IsTextFillPaused() { return Invoke<bool>(nameof(IsTextFillPaused)); }
        public bool IsReady() { return Invoke<bool>(nameof(IsReady)); }
        public int GetNumPages() { return Invoke<int>(nameof(GetNumPages)); }
        public void ForceRecompute() { Invoke(nameof(ForceRecompute)); }
        public Vector2D ComputeDesiredSize() { return Invoke<Vector2D>(nameof(ComputeDesiredSize)); }
        public void CompleteTextFill() { Invoke(nameof(CompleteTextFill)); }
        public void ClearText() { Invoke(nameof(ClearText)); }
    }
    public class AdvTextBlockSettings : Object
    {
        public AdvTextBlockSettings(nint addr) : base(addr) { }
        public Array<FontStyleConfigEntry> FontStyles { get { return new Array<FontStyleConfigEntry>(this[nameof(FontStyles)].Address); } }
    }
    public class CheatToastWidget : UserWidget
    {
        public CheatToastWidget(nint addr) : base(addr) { }
        public void InitializeCheat(CheatInputAction Cheat, Array<Key> ActivationKeys) { Invoke(nameof(InitializeCheat), Cheat, ActivationKeys); }
    }
    public class FlymodeInputWidget : UserWidget
    {
        public FlymodeInputWidget(nint addr) : base(addr) { }
        public bool IsPreviewMode { get { return this[nameof(IsPreviewMode)].Flag; } set { this[nameof(IsPreviewMode)].Flag = value; } }
        public void ToggleWaypointDisplay() { Invoke(nameof(ToggleWaypointDisplay)); }
        public void Populate(EInputDevice Device, bool bIsPreview) { Invoke(nameof(Populate), Device, bIsPreview); }
    }
    public class CursorResponseManager : ActorComponent
    {
        public CursorResponseManager(nint addr) : base(addr) { }
        public Object OnCursorHoverEvent { get { return this[nameof(OnCursorHoverEvent)]; } set { this[nameof(OnCursorHoverEvent)] = value; } }
        public Object OnCursorClickEvent { get { return this[nameof(OnCursorClickEvent)]; } set { this[nameof(OnCursorClickEvent)] = value; } }
        public PlayerController CachedController { get { return this[nameof(CachedController)].As<PlayerController>(); } set { this["CachedController"] = value; } }
        public void SetClickBehavior(ECursorInteractBehavior Behavior) { Invoke(nameof(SetClickBehavior), Behavior); }
        public void SetActiveState(bool bShouldBeActive) { Invoke(nameof(SetActiveState), bShouldBeActive); }
        public CursorResponseManager GetInstance(PlayerController Controller) { return Invoke<CursorResponseManager>(nameof(GetInstance), Controller); }
        public bool GetActiveState() { return Invoke<bool>(nameof(GetActiveState)); }
    }
    public class UIHudDamageNumberComponent : UIHudComponent
    {
        public UIHudDamageNumberComponent(nint addr) : base(addr) { }
        public Vector2D ScreenOffset { get { return this[nameof(ScreenOffset)].As<Vector2D>(); } set { this["ScreenOffset"] = value; } }
        public LinearColor DefaultColor { get { return this[nameof(DefaultColor)].As<LinearColor>(); } set { this["DefaultColor"] = value; } }
        public DamageNumberParameters DefaultParameters { get { return this[nameof(DefaultParameters)].As<DamageNumberParameters>(); } set { this["DefaultParameters"] = value; } }
        public bool bInterpolateColorsOnOverlap { get { return this[nameof(bInterpolateColorsOnOverlap)].Flag; } set { this[nameof(bInterpolateColorsOnOverlap)].Flag = value; } }
        public LinearColor CriticalColor { get { return this[nameof(CriticalColor)].As<LinearColor>(); } set { this["CriticalColor"] = value; } }
        public bool bUseCriticalParameters { get { return this[nameof(bUseCriticalParameters)].Flag; } set { this[nameof(bUseCriticalParameters)].Flag = value; } }
        public DamageNumberParameters CriticalParameters { get { return this[nameof(CriticalParameters)].As<DamageNumberParameters>(); } set { this["CriticalParameters"] = value; } }
        public Object CriticalSuffix { get { return this[nameof(CriticalSuffix)]; } set { this[nameof(CriticalSuffix)] = value; } }
        public LinearColor WeakSpotColor { get { return this[nameof(WeakSpotColor)].As<LinearColor>(); } set { this["WeakSpotColor"] = value; } }
        public bool bUseWeakSpotParameters { get { return this[nameof(bUseWeakSpotParameters)].Flag; } set { this[nameof(bUseWeakSpotParameters)].Flag = value; } }
        public DamageNumberParameters WeakSpotParameters { get { return this[nameof(WeakSpotParameters)].As<DamageNumberParameters>(); } set { this["WeakSpotParameters"] = value; } }
        public Object WeakSpotSuffix { get { return this[nameof(WeakSpotSuffix)]; } set { this[nameof(WeakSpotSuffix)] = value; } }
        public LinearColor CriticalWeakSpotColor { get { return this[nameof(CriticalWeakSpotColor)].As<LinearColor>(); } set { this["CriticalWeakSpotColor"] = value; } }
        public bool bUseCriticalWeakSpotParameters { get { return this[nameof(bUseCriticalWeakSpotParameters)].Flag; } set { this[nameof(bUseCriticalWeakSpotParameters)].Flag = value; } }
        public DamageNumberParameters CriticalWeakSpotParameters { get { return this[nameof(CriticalWeakSpotParameters)].As<DamageNumberParameters>(); } set { this["CriticalWeakSpotParameters"] = value; } }
        public bool bUseZeroDamageText { get { return this[nameof(bUseZeroDamageText)].Flag; } set { this[nameof(bUseZeroDamageText)].Flag = value; } }
        public Object ZeroDamageText { get { return this[nameof(ZeroDamageText)]; } set { this[nameof(ZeroDamageText)] = value; } }
        public bool bUseRoundedDamageAsZeroDamage { get { return this[nameof(bUseRoundedDamageAsZeroDamage)].Flag; } set { this[nameof(bUseRoundedDamageAsZeroDamage)].Flag = value; } }
        public bool bIgnoreSpecialsOnZeroDamage { get { return this[nameof(bIgnoreSpecialsOnZeroDamage)].Flag; } set { this[nameof(bIgnoreSpecialsOnZeroDamage)].Flag = value; } }
        public float ResistColorAlpha { get { return this[nameof(ResistColorAlpha)].GetValue<float>(); } set { this[nameof(ResistColorAlpha)].SetValue<float>(value); } }
        public LinearColor ResistColor { get { return this[nameof(ResistColor)].As<LinearColor>(); } set { this["ResistColor"] = value; } }
        public CharacterGunfire CachedCharacter { get { return this[nameof(CachedCharacter)].As<CharacterGunfire>(); } set { this["CachedCharacter"] = value; } }
        public PlayerControllerGunfire CachedController { get { return this[nameof(CachedController)].As<PlayerControllerGunfire>(); } set { this["CachedController"] = value; } }
        public void OnNotifyHitTarget(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyHitTarget), DamageInfo); }
        public void ClearNumberQueue() { Invoke(nameof(ClearNumberQueue)); }
    }
    public class UIHudHitIndicatorComponent : UIHudComponent
    {
        public UIHudHitIndicatorComponent(nint addr) : base(addr) { }
        public Texture2D HitIndicator { get { return this[nameof(HitIndicator)].As<Texture2D>(); } set { this["HitIndicator"] = value; } }
        public float HitIndicatorAlpha { get { return this[nameof(HitIndicatorAlpha)].GetValue<float>(); } set { this[nameof(HitIndicatorAlpha)].SetValue<float>(value); } }
        public float HitIndicatorScale { get { return this[nameof(HitIndicatorScale)].GetValue<float>(); } set { this[nameof(HitIndicatorScale)].SetValue<float>(value); } }
        public float HitIndicatorTimeout { get { return this[nameof(HitIndicatorTimeout)].GetValue<float>(); } set { this[nameof(HitIndicatorTimeout)].SetValue<float>(value); } }
        public float HitIndicatorOffset { get { return this[nameof(HitIndicatorOffset)].GetValue<float>(); } set { this[nameof(HitIndicatorOffset)].SetValue<float>(value); } }
        public Texture2D HitFlash { get { return this[nameof(HitFlash)].As<Texture2D>(); } set { this["HitFlash"] = value; } }
        public float HitFlashAlpha { get { return this[nameof(HitFlashAlpha)].GetValue<float>(); } set { this[nameof(HitFlashAlpha)].SetValue<float>(value); } }
        public float HitFlashTimeout { get { return this[nameof(HitFlashTimeout)].GetValue<float>(); } set { this[nameof(HitFlashTimeout)].SetValue<float>(value); } }
        public Array<int> IgnorePowerLevel { get { return new Array<int>(this[nameof(IgnorePowerLevel)].Address); } }
        public CharacterGunfire CachedCharacter { get { return this[nameof(CachedCharacter)].As<CharacterGunfire>(); } set { this["CachedCharacter"] = value; } }
        public void OnNotifyTakeDamage(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyTakeDamage), DamageInfo); }
    }
    public class InteractiveInstigatorInterface : Interface
    {
        public InteractiveInstigatorInterface(nint addr) : base(addr) { }
        public bool CanDoStateInteraction(StateMachineComponent StateMachine, Object StateName) { return Invoke<bool>(nameof(CanDoStateInteraction), StateMachine, StateName); }
        public bool CanDoItemInteraction(Item Item) { return Invoke<bool>(nameof(CanDoItemInteraction), Item); }
        public bool CanDoClimbingTransition(ClimbingComponent ClimbingComponent) { return Invoke<bool>(nameof(CanDoClimbingTransition), ClimbingComponent); }
        public bool CanDoCharacterRevive(WoundedComponent WoundedComponent) { return Invoke<bool>(nameof(CanDoCharacterRevive), WoundedComponent); }
    }
    public class UIHudInteractComponent : UIHudComponent
    {
        public UIHudInteractComponent(nint addr) : base(addr) { }
        public InputAction InteractAction { get { return this[nameof(InteractAction)].As<InputAction>(); } set { this["InteractAction"] = value; } }
        public float InteractActionHoldTime { get { return this[nameof(InteractActionHoldTime)].GetValue<float>(); } set { this[nameof(InteractActionHoldTime)].SetValue<float>(value); } }
        public float InteractiveStateQueryRange { get { return this[nameof(InteractiveStateQueryRange)].GetValue<float>(); } set { this[nameof(InteractiveStateQueryRange)].SetValue<float>(value); } }
        public float InteractiveStateQueryHeight { get { return this[nameof(InteractiveStateQueryHeight)].GetValue<float>(); } set { this[nameof(InteractiveStateQueryHeight)].SetValue<float>(value); } }
        public int MaxInteractiveStateResults { get { return this[nameof(MaxInteractiveStateResults)].GetValue<int>(); } set { this[nameof(MaxInteractiveStateResults)].SetValue<int>(value); } }
        public float InteractiveStateUnfocusedScaleMax { get { return this[nameof(InteractiveStateUnfocusedScaleMax)].GetValue<float>(); } set { this[nameof(InteractiveStateUnfocusedScaleMax)].SetValue<float>(value); } }
        public float InteractiveStateUnfocusedAlphaMax { get { return this[nameof(InteractiveStateUnfocusedAlphaMax)].GetValue<float>(); } set { this[nameof(InteractiveStateUnfocusedAlphaMax)].SetValue<float>(value); } }
        public float ItemQueryRange { get { return this[nameof(ItemQueryRange)].GetValue<float>(); } set { this[nameof(ItemQueryRange)].SetValue<float>(value); } }
        public float ItemQueryHeight { get { return this[nameof(ItemQueryHeight)].GetValue<float>(); } set { this[nameof(ItemQueryHeight)].SetValue<float>(value); } }
        public bool ItemShowWhenNotFocused { get { return this[nameof(ItemShowWhenNotFocused)].Flag; } set { this[nameof(ItemShowWhenNotFocused)].Flag = value; } }
        public float RevivableQueryRange { get { return this[nameof(RevivableQueryRange)].GetValue<float>(); } set { this[nameof(RevivableQueryRange)].SetValue<float>(value); } }
        public float RevivableQueryHeight { get { return this[nameof(RevivableQueryHeight)].GetValue<float>(); } set { this[nameof(RevivableQueryHeight)].SetValue<float>(value); } }
        public bool ForceDrawWhenNotFocused { get { return this[nameof(ForceDrawWhenNotFocused)].Flag; } set { this[nameof(ForceDrawWhenNotFocused)].Flag = value; } }
        public int IconSize { get { return this[nameof(IconSize)].GetValue<int>(); } set { this[nameof(IconSize)].SetValue<int>(value); } }
        public float ItemIconScale { get { return this[nameof(ItemIconScale)].GetValue<float>(); } set { this[nameof(ItemIconScale)].SetValue<float>(value); } }
        public int ArrowSize { get { return this[nameof(ArrowSize)].GetValue<int>(); } set { this[nameof(ArrowSize)].SetValue<int>(value); } }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public Texture2D ItemIconBorder { get { return this[nameof(ItemIconBorder)].As<Texture2D>(); } set { this["ItemIconBorder"] = value; } }
        public Texture2D Arrow { get { return this[nameof(Arrow)].As<Texture2D>(); } set { this["Arrow"] = value; } }
        public Object GenericInteractionIconName { get { return this[nameof(GenericInteractionIconName)]; } set { this[nameof(GenericInteractionIconName)] = value; } }
        public Texture2D GenericInteractionIcon { get { return this[nameof(GenericInteractionIcon)].As<Texture2D>(); } set { this["GenericInteractionIcon"] = value; } }
        public Object GenericItemIconName { get { return this[nameof(GenericItemIconName)]; } set { this[nameof(GenericItemIconName)] = value; } }
        public Texture2D GenericItemIcon { get { return this[nameof(GenericItemIcon)].As<Texture2D>(); } set { this["GenericItemIcon"] = value; } }
        public Object ReviveIconName { get { return this[nameof(ReviveIconName)]; } set { this[nameof(ReviveIconName)] = value; } }
        public Texture2D ReviveIcon { get { return this[nameof(ReviveIcon)].As<Texture2D>(); } set { this["ReviveIcon"] = value; } }
        public Object MashProgressDialogClass { get { return this[nameof(MashProgressDialogClass)]; } set { this[nameof(MashProgressDialogClass)] = value; } }
        public Object OnInteractiveInfo { get { return this[nameof(OnInteractiveInfo)]; } set { this[nameof(OnInteractiveInfo)] = value; } }
        public Object OnInteractiveFocus { get { return this[nameof(OnInteractiveFocus)]; } set { this[nameof(OnInteractiveFocus)] = value; } }
        public Object OnInteractiveLostFocus { get { return this[nameof(OnInteractiveLostFocus)]; } set { this[nameof(OnInteractiveLostFocus)] = value; } }
        public Object OnInteractiveHold { get { return this[nameof(OnInteractiveHold)]; } set { this[nameof(OnInteractiveHold)] = value; } }
        public TimerHandle HoldTimerHandle { get { return this[nameof(HoldTimerHandle)].As<TimerHandle>(); } set { this["HoldTimerHandle"] = value; } }
        public UIActor MashProgressDialog { get { return this[nameof(MashProgressDialog)].As<UIActor>(); } set { this["MashProgressDialog"] = value; } }
        public Array<HudInteractive> Interactives { get { return new Array<HudInteractive>(this[nameof(Interactives)].Address); } }
        public void OnInteractCancel() { Invoke(nameof(OnInteractCancel)); }
        public bool OnInteract() { return Invoke<bool>(nameof(OnInteract)); }
        public void Interact() { Invoke(nameof(Interact)); }
        public bool HasFocusedInteractive() { return Invoke<bool>(nameof(HasFocusedInteractive)); }
        public float GetMashPercentage() { return Invoke<float>(nameof(GetMashPercentage)); }
        public Object GetMashInteractImage() { return Invoke<Object>(nameof(GetMashInteractImage)); }
        public Actor GetFocusedInteractiveActor() { return Invoke<Actor>(nameof(GetFocusedInteractiveActor)); }
        public Vector GetFocusedIconScreenPosition() { return Invoke<Vector>(nameof(GetFocusedIconScreenPosition)); }
    }
    public class UIHudReticuleComponent : UIHudComponent
    {
        public UIHudReticuleComponent(nint addr) : base(addr) { }
        public EReticuleDrawMode DrawMode { get { return (EReticuleDrawMode)this[nameof(DrawMode)].GetValue<int>(); } set { this[nameof(DrawMode)].SetValue<int>((int)value); } }
        public Object WeaponType { get { return this[nameof(WeaponType)]; } set { this[nameof(WeaponType)] = value; } }
        public Reticule DefaultReticule { get { return this[nameof(DefaultReticule)].As<Reticule>(); } set { this["DefaultReticule"] = value; } }
        public Color HitColor { get { return this[nameof(HitColor)].As<Color>(); } set { this["HitColor"] = value; } }
        public Color HitCriticalColor { get { return this[nameof(HitCriticalColor)].As<Color>(); } set { this["HitCriticalColor"] = value; } }
        public float HitIndicatorSmoothTime { get { return this[nameof(HitIndicatorSmoothTime)].GetValue<float>(); } set { this[nameof(HitIndicatorSmoothTime)].SetValue<float>(value); } }
        public float SpreadBlendRate { get { return this[nameof(SpreadBlendRate)].GetValue<float>(); } set { this[nameof(SpreadBlendRate)].SetValue<float>(value); } }
        public EDisabledWeaponVisuals DisabledWeaponVisuals { get { return (EDisabledWeaponVisuals)this[nameof(DisabledWeaponVisuals)].GetValue<int>(); } set { this[nameof(DisabledWeaponVisuals)].SetValue<int>((int)value); } }
        public bool bLimitToAimAssistRange { get { return this[nameof(bLimitToAimAssistRange)].Flag; } set { this[nameof(bLimitToAimAssistRange)].Flag = value; } }
        public float GhostReticuleSmoothingRate { get { return this[nameof(GhostReticuleSmoothingRate)].GetValue<float>(); } set { this[nameof(GhostReticuleSmoothingRate)].SetValue<float>(value); } }
        public float MaxGhostReticuleOffset { get { return this[nameof(MaxGhostReticuleOffset)].GetValue<float>(); } set { this[nameof(MaxGhostReticuleOffset)].SetValue<float>(value); } }
        public float CenterToGhostReticuleTolerance { get { return this[nameof(CenterToGhostReticuleTolerance)].GetValue<float>(); } set { this[nameof(CenterToGhostReticuleTolerance)].SetValue<float>(value); } }
        public bool AllowGhostReticuleOnCharacters { get { return this[nameof(AllowGhostReticuleOnCharacters)].Flag; } set { this[nameof(AllowGhostReticuleOnCharacters)].Flag = value; } }
        public CharacterGunfire CachedCharacter { get { return this[nameof(CachedCharacter)].As<CharacterGunfire>(); } set { this["CachedCharacter"] = value; } }
        public void ShowHitIndicator(bool bIsCritical) { Invoke(nameof(ShowHitIndicator), bIsCritical); }
        public void OnNotifyHitTarget(DamageInfo DamageInfo) { Invoke(nameof(OnNotifyHitTarget), DamageInfo); }
        public RangedWeapon GetRangedWeapon() { return Invoke<RangedWeapon>(nameof(GetRangedWeapon)); }
        public float GetHitAlpha() { return Invoke<float>(nameof(GetHitAlpha)); }
        public float GetCurrentSpread() { return Invoke<float>(nameof(GetCurrentSpread)); }
        public Actor GetAimable() { return Invoke<Actor>(nameof(GetAimable)); }
    }
    public class FocusableCanvasPanel : CanvasPanel
    {
        public FocusableCanvasPanel(nint addr) : base(addr) { }
    }
    public class FocusButtonSlot : PanelSlot
    {
        public FocusButtonSlot(nint addr) : base(addr) { }
        public Margin Padding { get { return this[nameof(Padding)].As<Margin>(); } set { this["Padding"] = value; } }
        public byte HorizontalAlignment { get { return this[nameof(HorizontalAlignment)].GetValue<byte>(); } set { this[nameof(HorizontalAlignment)].SetValue<byte>(value); } }
        public byte VerticalAlignment { get { return this[nameof(VerticalAlignment)].GetValue<byte>(); } set { this[nameof(VerticalAlignment)].SetValue<byte>(value); } }
        public void SetVerticalAlignment(byte InVerticalAlignment) { Invoke(nameof(SetVerticalAlignment), InVerticalAlignment); }
        public void SetPadding(Margin InPadding) { Invoke(nameof(SetPadding), InPadding); }
        public void SetHorizontalAlignment(byte InHorizontalAlignment) { Invoke(nameof(SetHorizontalAlignment), InHorizontalAlignment); }
    }
    public class FocusButtonWidget : ContentWidget
    {
        public FocusButtonWidget(nint addr) : base(addr) { }
        public AdvButtonStyle WidgetStyle { get { return this[nameof(WidgetStyle)].As<AdvButtonStyle>(); } set { this["WidgetStyle"] = value; } }
        public LinearColor ColorAndOpacity { get { return this[nameof(ColorAndOpacity)].As<LinearColor>(); } set { this["ColorAndOpacity"] = value; } }
        public LinearColor BackgroundColor { get { return this[nameof(BackgroundColor)].As<LinearColor>(); } set { this["BackgroundColor"] = value; } }
        public byte ClickMethod { get { return this[nameof(ClickMethod)].GetValue<byte>(); } set { this[nameof(ClickMethod)].SetValue<byte>(value); } }
        public byte TouchMethod { get { return this[nameof(TouchMethod)].GetValue<byte>(); } set { this[nameof(TouchMethod)].SetValue<byte>(value); } }
        public byte PressMethod { get { return this[nameof(PressMethod)].GetValue<byte>(); } set { this[nameof(PressMethod)].SetValue<byte>(value); } }
        public bool FocusOnMouseEnter { get { return this[nameof(FocusOnMouseEnter)].Flag; } set { this[nameof(FocusOnMouseEnter)].Flag = value; } }
        public bool IsFocusable { get { return this[nameof(IsFocusable)].Flag; } set { this[nameof(IsFocusable)].Flag = value; } }
        public bool AutoNavigateFocus { get { return this[nameof(AutoNavigateFocus)].Flag; } set { this[nameof(AutoNavigateFocus)].Flag = value; } }
        public bool AllowMouseClick { get { return this[nameof(AllowMouseClick)].Flag; } set { this[nameof(AllowMouseClick)].Flag = value; } }
        public bool AllowKeyClick { get { return this[nameof(AllowKeyClick)].Flag; } set { this[nameof(AllowKeyClick)].Flag = value; } }
        public bool AllowCursorHover { get { return this[nameof(AllowCursorHover)].Flag; } set { this[nameof(AllowCursorHover)].Flag = value; } }
        public Object InputAction { get { return this[nameof(InputAction)]; } set { this[nameof(InputAction)] = value; } }
        public bool bIgnoreRepeatPresses { get { return this[nameof(bIgnoreRepeatPresses)].Flag; } set { this[nameof(bIgnoreRepeatPresses)].Flag = value; } }
        public Object InputAxis { get { return this[nameof(InputAxis)]; } set { this[nameof(InputAxis)] = value; } }
        public bool bScrollWithInputAxis { get { return this[nameof(bScrollWithInputAxis)].Flag; } set { this[nameof(bScrollWithInputAxis)].Flag = value; } }
        public bool bScrollOnlyWhenFocused { get { return this[nameof(bScrollOnlyWhenFocused)].Flag; } set { this[nameof(bScrollOnlyWhenFocused)].Flag = value; } }
        public float ScrollVelocityPerSecond { get { return this[nameof(ScrollVelocityPerSecond)].GetValue<float>(); } set { this[nameof(ScrollVelocityPerSecond)].SetValue<float>(value); } }
        public bool bNotifyInactiveFocusLossOnChange { get { return this[nameof(bNotifyInactiveFocusLossOnChange)].Flag; } set { this[nameof(bNotifyInactiveFocusLossOnChange)].Flag = value; } }
        public Object OnFocus { get { return this[nameof(OnFocus)]; } set { this[nameof(OnFocus)] = value; } }
        public Object OnFocusLost { get { return this[nameof(OnFocusLost)]; } set { this[nameof(OnFocusLost)] = value; } }
        public Object OnInactiveFocus { get { return this[nameof(OnInactiveFocus)]; } set { this[nameof(OnInactiveFocus)] = value; } }
        public Object OnInactiveFocusLost { get { return this[nameof(OnInactiveFocusLost)]; } set { this[nameof(OnInactiveFocusLost)] = value; } }
        public Object OnClicked { get { return this[nameof(OnClicked)]; } set { this[nameof(OnClicked)] = value; } }
        public Object OnDoubleClicked { get { return this[nameof(OnDoubleClicked)]; } set { this[nameof(OnDoubleClicked)] = value; } }
        public Object OnPressed { get { return this[nameof(OnPressed)]; } set { this[nameof(OnPressed)] = value; } }
        public Object OnReleased { get { return this[nameof(OnReleased)]; } set { this[nameof(OnReleased)] = value; } }
        public Object OnKey { get { return this[nameof(OnKey)]; } set { this[nameof(OnKey)] = value; } }
        public Object OnKeyUp { get { return this[nameof(OnKeyUp)]; } set { this[nameof(OnKeyUp)] = value; } }
        public Object OnNavigate { get { return this[nameof(OnNavigate)]; } set { this[nameof(OnNavigate)] = value; } }
        public Object OnMouseRightClick { get { return this[nameof(OnMouseRightClick)]; } set { this[nameof(OnMouseRightClick)] = value; } }
        public Object OnMouseEnter { get { return this[nameof(OnMouseEnter)]; } set { this[nameof(OnMouseEnter)] = value; } }
        public Object OnMouseLeave { get { return this[nameof(OnMouseLeave)]; } set { this[nameof(OnMouseLeave)] = value; } }
        public Object OnMouseMove { get { return this[nameof(OnMouseMove)]; } set { this[nameof(OnMouseMove)] = value; } }
        public Object OnAxisInput { get { return this[nameof(OnAxisInput)]; } set { this[nameof(OnAxisInput)] = value; } }
        public Array<FocusTooltipWidget> InputOverrideTooltips { get { return new Array<FocusTooltipWidget>(this[nameof(InputOverrideTooltips)].Address); } }
        public FocusManager CachedFocusManager { get { return this[nameof(CachedFocusManager)].As<FocusManager>(); } set { this["CachedFocusManager"] = value; } }
        public void SetTexture(Texture2D Texture) { Invoke(nameof(SetTexture), Texture); }
        public void SetMaterial(MaterialInstance Material) { Invoke(nameof(SetMaterial), Material); }
        public void SetIsFocusable(bool Focusable) { Invoke(nameof(SetIsFocusable), Focusable); }
        public void SetForceHover(bool Enabled) { Invoke(nameof(SetForceHover), Enabled); }
        public void SetForceFocusVisualState(bool Force) { Invoke(nameof(SetForceFocusVisualState), Force); }
        public void SetCursorHoverable(bool CanCursorHover) { Invoke(nameof(SetCursorHoverable), CanCursorHover); }
        public void SetColorAndOpacity(LinearColor InColorAndOpacity) { Invoke(nameof(SetColorAndOpacity), InColorAndOpacity); }
        public void SetBackgroundColor(LinearColor InBackgroundColor) { Invoke(nameof(SetBackgroundColor), InBackgroundColor); }
        public void SetAllowMouseClick(bool IsMouseClickable) { Invoke(nameof(SetAllowMouseClick), IsMouseClickable); }
        public void SetAllowKeyClick(bool IsKeyClickable) { Invoke(nameof(SetAllowKeyClick), IsKeyClickable); }
        public bool IsPressed() { return Invoke<bool>(nameof(IsPressed)); }
        public bool HasInactiveFocus() { return Invoke<bool>(nameof(HasInactiveFocus)); }
        public bool HasFocus() { return Invoke<bool>(nameof(HasFocus)); }
        public Vector2D GetAbsoluteCoords() { return Invoke<Vector2D>(nameof(GetAbsoluteCoords)); }
        public void ClickButton() { Invoke(nameof(ClickButton)); }
    }
    public class FocusGroup : CanvasPanel
    {
        public FocusGroup(nint addr) : base(addr) { }
        public bool AllowInactiveFocus { get { return this[nameof(AllowInactiveFocus)].Flag; } set { this[nameof(AllowInactiveFocus)].Flag = value; } }
        public void ShowInactiveFocus(bool Show) { Invoke(nameof(ShowInactiveFocus), Show); }
        public void Focus() { Invoke(nameof(Focus)); }
    }
    public class FocusManInputHandler : Object
    {
        public FocusManInputHandler(nint addr) : base(addr) { }
    }
    public class FocusManInputAxisHandler : Object
    {
        public FocusManInputAxisHandler(nint addr) : base(addr) { }
    }
    public class FocusManager : ActorComponent
    {
        public FocusManager(nint addr) : base(addr) { }
        public FocusInfo CurrentFocus { get { return this[nameof(CurrentFocus)].As<FocusInfo>(); } set { this["CurrentFocus"] = value; } }
        public FocusInfo LastLostFocus { get { return this[nameof(LastLostFocus)].As<FocusInfo>(); } set { this["LastLostFocus"] = value; } }
        public Array<FocusInfo> DirtyFocus { get { return new Array<FocusInfo>(this[nameof(DirtyFocus)].Address); } }
        public TabFocusInfo TabFocus { get { return this[nameof(TabFocus)].As<TabFocusInfo>(); } set { this["TabFocus"] = value; } }
        public Array<FocusInfo> FocusStack { get { return new Array<FocusInfo>(this[nameof(FocusStack)].Address); } }
        public Array<TabFocusInfo> TabFocusStack { get { return new Array<TabFocusInfo>(this[nameof(TabFocusStack)].Address); } }
        public Array<UserWidget> CurrentWidgetStack { get { return new Array<UserWidget>(this[nameof(CurrentWidgetStack)].Address); } }
        public InputComponent InputComponent { get { return this[nameof(InputComponent)].As<InputComponent>(); } set { this["InputComponent"] = value; } }
        public Array<FocusManInputHandler> InputActionBindings { get { return new Array<FocusManInputHandler>(this[nameof(InputActionBindings)].Address); } }
        public Array<FocusManInputAxisHandler> InputAxisBindings { get { return new Array<FocusManInputAxisHandler>(this[nameof(InputAxisBindings)].Address); } }
        public PlayerController PlayerController { get { return this[nameof(PlayerController)].As<PlayerController>(); } set { this["PlayerController"] = value; } }
        public bool GivenSoleFocus { get { return this[nameof(GivenSoleFocus)].Flag; } set { this[nameof(GivenSoleFocus)].Flag = value; } }
        public bool RestorePanelFocus(PlayerController Controller, Widget Widget) { return Invoke<bool>(nameof(RestorePanelFocus), Controller, Widget); }
        public void RestoreFocus() { Invoke(nameof(RestoreFocus)); }
        public void ReleaseFocus() { Invoke(nameof(ReleaseFocus)); }
        public Widget GetWidgetByName(Widget Widget, Object WidgetName) { return Invoke<Widget>(nameof(GetWidgetByName), Widget, WidgetName); }
        public Widget GetRoot(Widget Widget) { return Invoke<Widget>(nameof(GetRoot), Widget); }
        public Widget GetParent(Widget Widget) { return Invoke<Widget>(nameof(GetParent), Widget); }
        public FocusManager GetInstance(PlayerController Controller) { return Invoke<FocusManager>(nameof(GetInstance), Controller); }
        public bool FocusFirstAvailable(PlayerController Controller, Widget Widget, int UserIndex, Widget OriginalWidget) { return Invoke<bool>(nameof(FocusFirstAvailable), Controller, Widget, UserIndex, OriginalWidget); }
        public Widget FindWidgetByName(Widget Widget, Object WidgetName) { return Invoke<Widget>(nameof(FindWidgetByName), Widget, WidgetName); }
        public void EnableInput(PlayerController InPlayerController) { Invoke(nameof(EnableInput), InPlayerController); }
        public void DisableInput(PlayerController InPlayerController) { Invoke(nameof(DisableInput), InPlayerController); }
        public bool AttemptSetButtonFocus(PlayerController Controller, FocusButtonWidget Widget) { return Invoke<bool>(nameof(AttemptSetButtonFocus), Controller, Widget); }
    }
    public class FocusTooltipWidget : UserWidget
    {
        public FocusTooltipWidget(nint addr) : base(addr) { }
        public Widget TooltipParentWidget { get { return this[nameof(TooltipParentWidget)].As<Widget>(); } set { this["TooltipParentWidget"] = value; } }
        public Array<FocusButtonWidget> ChildButtons { get { return new Array<FocusButtonWidget>(this[nameof(ChildButtons)].Address); } }
        public FocusButtonWidget ParentWidgetFocusButton { get { return this[nameof(ParentWidgetFocusButton)].As<FocusButtonWidget>(); } set { this["ParentWidgetFocusButton"] = value; } }
    }
    public class FocusVisual : ContentWidget
    {
        public FocusVisual(nint addr) : base(addr) { }
        public AdvButtonStyle Style { get { return this[nameof(Style)].As<AdvButtonStyle>(); } set { this["Style"] = value; } }
        public LinearColor ColorAndOpacity { get { return this[nameof(ColorAndOpacity)].As<LinearColor>(); } set { this["ColorAndOpacity"] = value; } }
        public LinearColor BackgroundColor { get { return this[nameof(BackgroundColor)].As<LinearColor>(); } set { this["BackgroundColor"] = value; } }
        public ContentWidget CachedFocusButton { get { return this[nameof(CachedFocusButton)].As<ContentWidget>(); } set { this["CachedFocusButton"] = value; } }
        public void SetTexture(Texture2D Texture) { Invoke(nameof(SetTexture), Texture); }
        public void SetColorAndOpacity(LinearColor InColorAndOpacity) { Invoke(nameof(SetColorAndOpacity), InColorAndOpacity); }
        public void SetBackgroundColor(LinearColor InBackgroundColor) { Invoke(nameof(SetBackgroundColor), InBackgroundColor); }
    }
    public class UserWidgetGunfire : UserWidget
    {
        public UserWidgetGunfire(nint addr) : base(addr) { }
        public Object OnRootVisibilityChanged { get { return this[nameof(OnRootVisibilityChanged)]; } set { this[nameof(OnRootVisibilityChanged)] = value; } }
        public Object OnRemovedFromParent { get { return this[nameof(OnRemovedFromParent)]; } set { this[nameof(OnRemovedFromParent)] = value; } }
    }
    public class FocusWidget : UserWidgetGunfire
    {
        public FocusWidget(nint addr) : base(addr) { }
        public Object OnFocus { get { return this[nameof(OnFocus)]; } set { this[nameof(OnFocus)] = value; } }
        public Object OnClicked { get { return this[nameof(OnClicked)]; } set { this[nameof(OnClicked)] = value; } }
        public Object OnClickedContext { get { return this[nameof(OnClickedContext)]; } set { this[nameof(OnClickedContext)] = value; } }
        public Object OnPressed { get { return this[nameof(OnPressed)]; } set { this[nameof(OnPressed)] = value; } }
        public Object OnReleased { get { return this[nameof(OnReleased)]; } set { this[nameof(OnReleased)] = value; } }
        public Object OnKey { get { return this[nameof(OnKey)]; } set { this[nameof(OnKey)] = value; } }
        public Object OnNavigate { get { return this[nameof(OnNavigate)]; } set { this[nameof(OnNavigate)] = value; } }
        public void SetInactiveFocus() { Invoke(nameof(SetInactiveFocus)); }
        public void Remove() { Invoke(nameof(Remove)); }
        public void Focus() { Invoke(nameof(Focus)); }
        public void ClearFocus() { Invoke(nameof(ClearFocus)); }
    }
    public class GunfireHardwareCursor : Object
    {
        public GunfireHardwareCursor(nint addr) : base(addr) { }
        public GameViewportClientGunfire CachedViewport { get { return this[nameof(CachedViewport)].As<GameViewportClientGunfire>(); } set { this["CachedViewport"] = value; } }
        public void UpdateHardwareCursorOnDeviceChange() { Invoke(nameof(UpdateHardwareCursorOnDeviceChange)); }
    }
    public class ImageEntry : InheritableObject
    {
        public ImageEntry(nint addr) : base(addr) { }
        public EInputDevice Device { get { return (EInputDevice)this[nameof(Device)].GetValue<int>(); } set { this[nameof(Device)].SetValue<int>((int)value); } }
        public SlateBrush ImageBrush { get { return this[nameof(ImageBrush)].As<SlateBrush>(); } set { this["ImageBrush"] = value; } }
        public UserWidget Widget { get { return this[nameof(Widget)].As<UserWidget>(); } set { this["Widget"] = value; } }
        public int VerticalAlignmentOffset { get { return this[nameof(VerticalAlignmentOffset)].GetValue<int>(); } set { this[nameof(VerticalAlignmentOffset)].SetValue<int>(value); } }
    }
    public class ImageID : InheritableNamedObject
    {
        public ImageID(nint addr) : base(addr) { }
        public Array<ImageEntry> ImageEntries { get { return new Array<ImageEntry>(this[nameof(ImageEntries)].Address); } }
    }
    public class ImageSet : InheritableNamedAsset
    {
        public ImageSet(nint addr) : base(addr) { }
        public EInputDevice PrimaryDevice { get { return (EInputDevice)this[nameof(PrimaryDevice)].GetValue<int>(); } set { this[nameof(PrimaryDevice)].SetValue<int>((int)value); } }
    }
    public class ImageSetSettings : Object
    {
        public ImageSetSettings(nint addr) : base(addr) { }
        public SoftObjectPath ImageSetName { get { return this[nameof(ImageSetName)].As<SoftObjectPath>(); } set { this["ImageSetName"] = value; } }
        public SoftObjectPath AltImageSetName { get { return this[nameof(AltImageSetName)].As<SoftObjectPath>(); } set { this["AltImageSetName"] = value; } }
    }
    public class ImageSetManager : Object
    {
        public ImageSetManager(nint addr) : base(addr) { }
        public Array<Object> RegisteredSets { get { return new Array<Object>(this[nameof(RegisteredSets)].Address); } }
    }
    public class NotificationWidget : UserWidget
    {
        public NotificationWidget(nint addr) : base(addr) { }
        public void SetMessageTextEvent(Object Heading, Object Body) { Invoke(nameof(SetMessageTextEvent), Heading, Body); }
        public void OnStatusChangeEvent(ETechReqStatusChange StatusChangeEvent) { Invoke(nameof(OnStatusChangeEvent), StatusChangeEvent); }
        public void OnOnlineFailEvent(EGunfireOnlineEvent OnlineFailEvent) { Invoke(nameof(OnOnlineFailEvent), OnlineFailEvent); }
        public void OnInputModeChanged() { Invoke(nameof(OnInputModeChanged)); }
        public void OnHudVisibilityChanged(UIHud HUD, bool Visible) { Invoke(nameof(OnHudVisibilityChanged), HUD, Visible); }
        public void OnDismissed(Widget Unused) { Invoke(nameof(OnDismissed), Unused); }
        public void OnCinematic(PlayerControllerGunfire Player, bool bIsInCinematicMode) { Invoke(nameof(OnCinematic), Player, bIsInCinematicMode); }
    }
    public class TabButton : ContentWidget
    {
        public TabButton(nint addr) : base(addr) { }
        public Object TabPanel { get { return this[nameof(TabPanel)]; } set { this[nameof(TabPanel)] = value; } }
        public AdvButtonStyle WidgetStyle { get { return this[nameof(WidgetStyle)].As<AdvButtonStyle>(); } set { this["WidgetStyle"] = value; } }
        public LinearColor ColorAndOpacity { get { return this[nameof(ColorAndOpacity)].As<LinearColor>(); } set { this["ColorAndOpacity"] = value; } }
        public LinearColor BackgroundColor { get { return this[nameof(BackgroundColor)].As<LinearColor>(); } set { this["BackgroundColor"] = value; } }
        public Object TabNextAction { get { return this[nameof(TabNextAction)]; } set { this[nameof(TabNextAction)] = value; } }
        public Object TabPrevAction { get { return this[nameof(TabPrevAction)]; } set { this[nameof(TabPrevAction)] = value; } }
        public Object OnPressed { get { return this[nameof(OnPressed)]; } set { this[nameof(OnPressed)] = value; } }
        public Object OnReleased { get { return this[nameof(OnReleased)]; } set { this[nameof(OnReleased)] = value; } }
        public Object OnTabFocused { get { return this[nameof(OnTabFocused)]; } set { this[nameof(OnTabFocused)] = value; } }
        public Widget TabPanelCached { get { return this[nameof(TabPanelCached)].As<Widget>(); } set { this["TabPanelCached"] = value; } }
        public FocusManager CachedFocusManager { get { return this[nameof(CachedFocusManager)].As<FocusManager>(); } set { this["CachedFocusManager"] = value; } }
        public FocusWidget UserFocusWidget { get { return this[nameof(UserFocusWidget)].As<FocusWidget>(); } set { this["UserFocusWidget"] = value; } }
        public void SetTexture(Texture2D Texture) { Invoke(nameof(SetTexture), Texture); }
        public void SetTabPanel(Widget Widget) { Invoke(nameof(SetTabPanel), Widget); }
        public void SetColorAndOpacity(LinearColor InColorAndOpacity) { Invoke(nameof(SetColorAndOpacity), InColorAndOpacity); }
        public void SetBackgroundColor(LinearColor InBackgroundColor) { Invoke(nameof(SetBackgroundColor), InBackgroundColor); }
        public bool IsPressed() { return Invoke<bool>(nameof(IsPressed)); }
        public Widget GetTabPanel() { return Invoke<Widget>(nameof(GetTabPanel)); }
        public void FocusTab() { Invoke(nameof(FocusTab)); }
    }
    public class TabButtonSlot : PanelSlot
    {
        public TabButtonSlot(nint addr) : base(addr) { }
        public Margin Padding { get { return this[nameof(Padding)].As<Margin>(); } set { this["Padding"] = value; } }
        public byte HorizontalAlignment { get { return this[nameof(HorizontalAlignment)].GetValue<byte>(); } set { this[nameof(HorizontalAlignment)].SetValue<byte>(value); } }
        public byte VerticalAlignment { get { return this[nameof(VerticalAlignment)].GetValue<byte>(); } set { this[nameof(VerticalAlignment)].SetValue<byte>(value); } }
        public void SetVerticalAlignment(byte InVerticalAlignment) { Invoke(nameof(SetVerticalAlignment), InVerticalAlignment); }
        public void SetPadding(Margin InPadding) { Invoke(nameof(SetPadding), InPadding); }
        public void SetHorizontalAlignment(byte InHorizontalAlignment) { Invoke(nameof(SetHorizontalAlignment), InHorizontalAlignment); }
    }
    public class TutorialPromptWidget : UserWidget
    {
        public TutorialPromptWidget(nint addr) : base(addr) { }
    }
    public class UITweenManager : ActorComponent
    {
        public UITweenManager(nint addr) : base(addr) { }
        public Object OnTweenFinished { get { return this[nameof(OnTweenFinished)]; } set { this[nameof(OnTweenFinished)] = value; } }
        public bool StopTween(int TweenID) { return Invoke<bool>(nameof(StopTween), TweenID); }
        public int StartTimer(float Time, Object Event) { return Invoke<int>(nameof(StartTimer), Time, Event); }
        public int Size(Widget Widget, Vector2D DesiredSize, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(Size), Widget, DesiredSize, Time, EaseType, Exponent); }
        public int ScaleByCurve(Widget Widget, CurveFloat Curve, float Time, float Offset) { return Invoke<int>(nameof(ScaleByCurve), Widget, Curve, Time, Offset); }
        public int Scale(Widget Widget, Vector2D DesiredScale, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(Scale), Widget, DesiredScale, Time, EaseType, Exponent); }
        public int MoveTo(Widget Widget, Widget ToWidget, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(MoveTo), Widget, ToWidget, Time, EaseType, Exponent); }
        public int MoveRelative(Widget Widget, Vector2D Offset, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(MoveRelative), Widget, Offset, Time, EaseType, Exponent); }
        public int Move(Widget Widget, Vector2D Destination, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(Move), Widget, Destination, Time, EaseType, Exponent); }
        public bool IsTweenFinished(int TweenID) { return Invoke<bool>(nameof(IsTweenFinished), TweenID); }
        public void InvalidateHandle(int TweenHandle) { Invoke(nameof(InvalidateHandle), TweenHandle); }
        public UITweenManager GetInstance(Object WorldContextObject) { return Invoke<UITweenManager>(nameof(GetInstance), WorldContextObject); }
        public int FlashColor(Widget Widget, LinearColor FromColor, LinearColor ToColor, float Time, float Exponent) { return Invoke<int>(nameof(FlashColor), Widget, FromColor, ToColor, Time, Exponent); }
        public int ColorByCurve(Widget Widget, LinearColor FromColor, LinearColor ToColor, CurveFloat Curve, float Time) { return Invoke<int>(nameof(ColorByCurve), Widget, FromColor, ToColor, Curve, Time); }
        public int AnimateColor(Widget Widget, LinearColor ToColor, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateColor), Widget, ToColor, Time, EaseType, Exponent); }
        public int AnimateAlpha(Widget Widget, float ToAlpha, float Time, EUIEaseType EaseType, float Exponent) { return Invoke<int>(nameof(AnimateAlpha), Widget, ToAlpha, Time, EaseType, Exponent); }
    }
    public class UIUtil : Object
    {
        public UIUtil(nint addr) : base(addr) { }
        public bool ShouldBeVisible(Widget Widget) { return Invoke<bool>(nameof(ShouldBeVisible), Widget); }
        public void RefreshTooltipVisibility(bool bCanSpawnNewTooltip) { Invoke(nameof(RefreshTooltipVisibility), bCanSpawnNewTooltip); }
        public void RefreshCursorVisibility() { Invoke(nameof(RefreshCursorVisibility)); }
        public void IsTearingDown(Object WorldContextObject, bool IsTearingDown) { Invoke(nameof(IsTearingDown), WorldContextObject, IsTearingDown); }
        public void GetWidgetsByClass(Widget Widget, Object Class, Array<Widget> OutWidgets) { Invoke(nameof(GetWidgetsByClass), Widget, Class, OutWidgets); }
        public void FormatText(Object OutText, Array<TextFormatTokenPair> FormatTokens) { Invoke(nameof(FormatText), OutText, FormatTokens); }
    }
    public class ValidationListBase : ValidationEntryBase
    {
        public ValidationListBase(nint addr) : base(addr) { }
    }
    public class ValidationList : ValidationListBase
    {
        public ValidationList(nint addr) : base(addr) { }
        public Array<ValidationTableEntry> ValidationEntries { get { return new Array<ValidationTableEntry>(this[nameof(ValidationEntries)].Address); } }
    }
    public class ValidationTable : ValidationEntryBase
    {
        public ValidationTable(nint addr) : base(addr) { }
        public Array<ValidationListBase> ValidationList { get { return new Array<ValidationListBase>(this[nameof(ValidationList)].Address); } }
    }
    public class VariableComponent : ActorComponent
    {
        public VariableComponent(nint addr) : base(addr) { }
        public Variables VariableDefinitions { get { return this[nameof(VariableDefinitions)].As<Variables>(); } set { this["VariableDefinitions"] = value; } }
        public bool RegisterOwnerVariables { get { return this[nameof(RegisterOwnerVariables)].Flag; } set { this[nameof(RegisterOwnerVariables)].Flag = value; } }
        public Array<VariableDef> OwnerVariables { get { return new Array<VariableDef>(this[nameof(OwnerVariables)].Address); } }
        public bool DummyVar { get { return this[nameof(DummyVar)].Flag; } set { this[nameof(DummyVar)].Flag = value; } }
        public void SetVariableName(Object NameID, Object Value, float Expiration) { Invoke(nameof(SetVariableName), NameID, Value, Expiration); }
        public void SetVariableInt(Object NameID, int Value, float Expiration) { Invoke(nameof(SetVariableInt), NameID, Value, Expiration); }
        public void SetVariableFloat(Object NameID, float Value, float Expiration) { Invoke(nameof(SetVariableFloat), NameID, Value, Expiration); }
        public void SetVariableBool(Object NameID, bool Value, float Expiration) { Invoke(nameof(SetVariableBool), NameID, Value, Expiration); }
        public Object GetVariableName(Object NameID) { return Invoke<Object>(nameof(GetVariableName), NameID); }
        public int GetVariableInt(Object NameID) { return Invoke<int>(nameof(GetVariableInt), NameID); }
        public float GetVariableFloat(Object NameID) { return Invoke<float>(nameof(GetVariableFloat), NameID); }
        public bool GetVariableBool(Object NameID) { return Invoke<bool>(nameof(GetVariableBool), NameID); }
        public bool EvaluateStatements(Actor ContextActor, VariableStatements Statements) { return Invoke<bool>(nameof(EvaluateStatements), ContextActor, Statements); }
    }
    public class RootVariableContext : ActorComponent
    {
        public RootVariableContext(nint addr) : base(addr) { }
        public Array<ConditionalVariables> SourceConditions { get { return new Array<ConditionalVariables>(this[nameof(SourceConditions)].Address); } }
        public void UnregisterContext(Object Name, VariableComponent Variables) { Invoke(nameof(UnregisterContext), Name, Variables); }
        public void RegisterContext(Object Name, VariableComponent Variables) { Invoke(nameof(RegisterContext), Name, Variables); }
        public void K2_GetContextVariables(Object Name, Array<VariableComponent> VariablesOut) { Invoke(nameof(K2_GetContextVariables), Name, VariablesOut); }
        public RootVariableContext GetInstance(Object WorldContextObject) { return Invoke<RootVariableContext>(nameof(GetInstance), WorldContextObject); }
    }
    public class Variables : DataAsset
    {
        public Variables(nint addr) : base(addr) { }
        public Object ContextName { get { return this[nameof(ContextName)]; } set { this[nameof(ContextName)] = value; } }
        public Object ContextAlias { get { return this[nameof(ContextAlias)]; } set { this[nameof(ContextAlias)] = value; } }
        public bool AutoRegisterContext { get { return this[nameof(AutoRegisterContext)].Flag; } set { this[nameof(AutoRegisterContext)].Flag = value; } }
        public Array<VariableDef> Variables_value { get { return new Array<VariableDef>(this[nameof(Variables)].Address); } }
    }
    public class ConditionalVariables : DataAsset
    {
        public ConditionalVariables(nint addr) : base(addr) { }
        public Array<ConditionalVariableDef> Variables { get { return new Array<ConditionalVariableDef>(this[nameof(Variables)].Address); } }
    }
    public enum EAwarenessSignal : int
    {
        Sound = 0,
        Light = 1,
        EAwarenessSignal_MAX = 2,
    }
    public class CheatInputAction : Object
    {
        public CheatInputAction(nint addr) : base(addr) { }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object Command { get { return this[nameof(Command)]; } set { this[nameof(Command)] = value; } }
        public Array<VariableBinding> Variables { get { return new Array<VariableBinding>(this[nameof(Variables)].Address); } }
        public Array<InputActionKeyMapping> Keys { get { return new Array<InputActionKeyMapping>(this[nameof(Keys)].Address); } }
    }
    public class VariableBinding : Object
    {
        public VariableBinding(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object DefaultValue { get { return this[nameof(DefaultValue)]; } set { this[nameof(DefaultValue)] = value; } }
    }
    public class DamageInfo : DamageEvent
    {
        public DamageInfo(nint addr) : base(addr) { }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float AbsorbedDamage { get { return this[nameof(AbsorbedDamage)].GetValue<float>(); } set { this[nameof(AbsorbedDamage)].SetValue<float>(value); } }
        public float DamageMod { get { return this[nameof(DamageMod)].GetValue<float>(); } set { this[nameof(DamageMod)].SetValue<float>(value); } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public float ImpactScalar { get { return this[nameof(ImpactScalar)].GetValue<float>(); } set { this[nameof(ImpactScalar)].SetValue<float>(value); } }
        public float CritChance { get { return this[nameof(CritChance)].GetValue<float>(); } set { this[nameof(CritChance)].SetValue<float>(value); } }
        public float CritDamageMod { get { return this[nameof(CritDamageMod)].GetValue<float>(); } set { this[nameof(CritDamageMod)].SetValue<float>(value); } }
        public float WeakSpotDamageMod { get { return this[nameof(WeakSpotDamageMod)].GetValue<float>(); } set { this[nameof(WeakSpotDamageMod)].SetValue<float>(value); } }
        public int PowerOverride { get { return this[nameof(PowerOverride)].GetValue<int>(); } set { this[nameof(PowerOverride)].SetValue<int>(value); } }
        public float DifficultyDamageScalar { get { return this[nameof(DifficultyDamageScalar)].GetValue<float>(); } set { this[nameof(DifficultyDamageScalar)].SetValue<float>(value); } }
        public Object Owner { get { return this[nameof(Owner)]; } set { this[nameof(Owner)] = value; } }
        public Object Cause { get { return this[nameof(Cause)]; } set { this[nameof(Cause)] = value; } }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public HitResult HitInfo { get { return this[nameof(HitInfo)].As<HitResult>(); } set { this["HitInfo"] = value; } }
        public Object HitLocation { get { return this[nameof(HitLocation)]; } set { this[nameof(HitLocation)] = value; } }
        public Vector ImpactDirection { get { return this[nameof(ImpactDirection)].As<Vector>(); } set { this["ImpactDirection"] = value; } }
        public Object ImpactDirectionTag { get { return this[nameof(ImpactDirectionTag)]; } set { this[nameof(ImpactDirectionTag)] = value; } }
        public float UnmodifiedDamage { get { return this[nameof(UnmodifiedDamage)].GetValue<float>(); } set { this[nameof(UnmodifiedDamage)].SetValue<float>(value); } }
        public float HealthDelta { get { return this[nameof(HealthDelta)].GetValue<float>(); } set { this[nameof(HealthDelta)].SetValue<float>(value); } }
        public int SprayCount { get { return this[nameof(SprayCount)].GetValue<int>(); } set { this[nameof(SprayCount)].SetValue<int>(value); } }
        public int TotalSprayCount { get { return this[nameof(TotalSprayCount)].GetValue<int>(); } set { this[nameof(TotalSprayCount)].SetValue<int>(value); } }
        public bool NoImpacts { get { return this[nameof(NoImpacts)].Flag; } set { this[nameof(NoImpacts)].Flag = value; } }
        public bool SecondaryDamage { get { return this[nameof(SecondaryDamage)].Flag; } set { this[nameof(SecondaryDamage)].Flag = value; } }
        public bool Critical { get { return this[nameof(Critical)].Flag; } set { this[nameof(Critical)].Flag = value; } }
        public bool AllowsCrits { get { return this[nameof(AllowsCrits)].Flag; } set { this[nameof(AllowsCrits)].Flag = value; } }
        public bool WeakSpot { get { return this[nameof(WeakSpot)].Flag; } set { this[nameof(WeakSpot)].Flag = value; } }
        public bool AllowsWeakSpots { get { return this[nameof(AllowsWeakSpots)].Flag; } set { this[nameof(AllowsWeakSpots)].Flag = value; } }
        public bool Resisted { get { return this[nameof(Resisted)].Flag; } set { this[nameof(Resisted)].Flag = value; } }
        public bool HitLocationDestroyed { get { return this[nameof(HitLocationDestroyed)].Flag; } set { this[nameof(HitLocationDestroyed)].Flag = value; } }
        public bool Wounded { get { return this[nameof(Wounded)].Flag; } set { this[nameof(Wounded)].Flag = value; } }
        public bool Killed { get { return this[nameof(Killed)].Flag; } set { this[nameof(Killed)].Flag = value; } }
        public bool Blockable { get { return this[nameof(Blockable)].Flag; } set { this[nameof(Blockable)].Flag = value; } }
        public bool Evadable { get { return this[nameof(Evadable)].Flag; } set { this[nameof(Evadable)].Flag = value; } }
        public bool Blocked { get { return this[nameof(Blocked)].Flag; } set { this[nameof(Blocked)].Flag = value; } }
        public bool BlockCounter { get { return this[nameof(BlockCounter)].Flag; } set { this[nameof(BlockCounter)].Flag = value; } }
        public bool Evaded { get { return this[nameof(Evaded)].Flag; } set { this[nameof(Evaded)].Flag = value; } }
        public bool Spray { get { return this[nameof(Spray)].Flag; } set { this[nameof(Spray)].Flag = value; } }
        public bool IgnoreRange { get { return this[nameof(IgnoreRange)].Flag; } set { this[nameof(IgnoreRange)].Flag = value; } }
        public bool ConvertDamageToSecondaryHealthPool { get { return this[nameof(ConvertDamageToSecondaryHealthPool)].Flag; } set { this[nameof(ConvertDamageToSecondaryHealthPool)].Flag = value; } }
        public int Victims { get { return this[nameof(Victims)].GetValue<int>(); } set { this[nameof(Victims)].SetValue<int>(value); } }
        public Object Variables { get { return this[nameof(Variables)]; } set { this[nameof(Variables)] = value; } }
    }
    public class DamageInfoVariable : Object
    {
        public DamageInfoVariable(nint addr) : base(addr) { }
        public bool bVal { get { return this[nameof(bVal)].Flag; } set { this[nameof(bVal)].Flag = value; } }
        public int iVal { get { return this[nameof(iVal)].GetValue<int>(); } set { this[nameof(iVal)].SetValue<int>(value); } }
        public float fVal { get { return this[nameof(fVal)].GetValue<float>(); } set { this[nameof(fVal)].SetValue<float>(value); } }
        public Object oVal { get { return this[nameof(oVal)]; } set { this[nameof(oVal)] = value; } }
    }
    public class EventTreeStage : Object
    {
        public EventTreeStage(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public SequencerShotGroup SequenceGroup { get { return this[nameof(SequenceGroup)].As<SequencerShotGroup>(); } set { this["SequenceGroup"] = value; } }
        public bool bOnlyTargetInstigator { get { return this[nameof(bOnlyTargetInstigator)].Flag; } set { this[nameof(bOnlyTargetInstigator)].Flag = value; } }
        public Array<EventTreeAttrib> Attributes { get { return new Array<EventTreeAttrib>(this[nameof(Attributes)].Address); } }
    }
    public class EventTreeAttrib : Object
    {
        public EventTreeAttrib(nint addr) : base(addr) { }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
        public EventTreeAsset Asset { get { return this[nameof(Asset)].As<EventTreeAsset>(); } set { this["Asset"] = value; } }
    }
    public enum EAffiliation : int
    {
        SuperFriendly = 0,
        Friendly = 1,
        Neutral = 2,
        Hostile = 3,
        All = 4,
        EAffiliation_MAX = 5,
    }
    public class HealingInfo : Object
    {
        public HealingInfo(nint addr) : base(addr) { }
        public float Healing { get { return this[nameof(Healing)].GetValue<float>(); } set { this[nameof(Healing)].SetValue<float>(value); } }
        public float HealingMod { get { return this[nameof(HealingMod)].GetValue<float>(); } set { this[nameof(HealingMod)].SetValue<float>(value); } }
        public float HealingScalar { get { return this[nameof(HealingScalar)].GetValue<float>(); } set { this[nameof(HealingScalar)].SetValue<float>(value); } }
        public Object HealingType { get { return this[nameof(HealingType)]; } set { this[nameof(HealingType)] = value; } }
        public Object Owner { get { return this[nameof(Owner)]; } set { this[nameof(Owner)] = value; } }
        public Object Cause { get { return this[nameof(Cause)]; } set { this[nameof(Cause)] = value; } }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public float HealthDeltaApplied { get { return this[nameof(HealthDeltaApplied)].GetValue<float>(); } set { this[nameof(HealthDeltaApplied)].SetValue<float>(value); } }
    }
    public enum ButtonEvent : int
    {
        None = 0,
        Pressed = 1,
        Released = 2,
        ButtonEvent_MAX = 3,
    }
    public class HudInteractive : Object
    {
        public HudInteractive(nint addr) : base(addr) { }
        public EHudInteractiveType Type { get { return (EHudInteractiveType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public InteractiveState InteractiveState { get { return this[nameof(InteractiveState)].As<InteractiveState>(); } set { this["InteractiveState"] = value; } }
    }
    public enum EHudInteractiveType : int
    {
        None = 0,
        InteractiveState = 1,
        InteractiveMashState = 2,
        Item = 3,
        Revive = 4,
        Climb = 5,
        EHudInteractiveType_MAX = 6,
    }
    public class InventoryResult : Object
    {
        public InventoryResult(nint addr) : base(addr) { }
        public int DeltaQuantity { get { return this[nameof(DeltaQuantity)].GetValue<int>(); } set { this[nameof(DeltaQuantity)].SetValue<int>(value); } }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
        public Array<int> AffectedItems { get { return new Array<int>(this[nameof(AffectedItems)].Address); } }
        public bool bDoNotify { get { return this[nameof(bDoNotify)].Flag; } set { this[nameof(bDoNotify)].Flag = value; } }
    }
    public enum EItemNotifyReason : int
    {
        Default = 0,
        PickedUp = 1,
        Crafted = 2,
        Reward = 3,
        AccountKeeping = 4,
        Transfer = 5,
        Custom1 = 6,
        Custom2 = 7,
        Custom3 = 8,
        Custom4 = 9,
        EItemNotifyReason_MAX = 10,
    }
    public class ItemSocketSlot : Object
    {
        public ItemSocketSlot(nint addr) : base(addr) { }
        public Object ItemType { get { return this[nameof(ItemType)]; } set { this[nameof(ItemType)] = value; } }
        public bool bShowItemInSocket { get { return this[nameof(bShowItemInSocket)].Flag; } set { this[nameof(bShowItemInSocket)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public bool bFull { get { return this[nameof(bFull)].Flag; } set { this[nameof(bFull)].Flag = value; } }
        public bool bCanAddItem { get { return this[nameof(bCanAddItem)].Flag; } set { this[nameof(bCanAddItem)].Flag = value; } }
        public bool bCanRemoveItem { get { return this[nameof(bCanRemoveItem)].Flag; } set { this[nameof(bCanRemoveItem)].Flag = value; } }
        public Item VisualInstance { get { return this[nameof(VisualInstance)].As<Item>(); } set { this["VisualInstance"] = value; } }
        public Object SlottedType { get { return this[nameof(SlottedType)]; } set { this[nameof(SlottedType)] = value; } }
        public bool bTransient { get { return this[nameof(bTransient)].Flag; } set { this[nameof(bTransient)].Flag = value; } }
    }
    public enum EPlayerJoinState : int
    {
        Disconnected = 0,
        SynchronizingData = 1,
        JoiningAsPlayer = 2,
        JoiningAsSpectator = 3,
        JoinedAsPlayer = 4,
        JoinedAsSpectator = 5,
        EPlayerJoinState_MAX = 6,
    }
    public enum EMusicIntensity : int
    {
        Ambient = 0,
        Tension = 1,
        CombatLow = 2,
        CombatMid = 3,
        CombatHigh = 4,
        EMusicIntensity_MAX = 5,
    }
    public enum EAnimationState : int
    {
        Started = 0,
        Stopped = 1,
        EAnimationState_MAX = 2,
    }
    public class ClimbableSurfaceResult : Object
    {
        public ClimbableSurfaceResult(nint addr) : base(addr) { }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public ClimbableSplineComponent ClimbableSpline { get { return this[nameof(ClimbableSpline)].As<ClimbableSplineComponent>(); } set { this["ClimbableSpline"] = value; } }
        public SceneComponent AttachComponent { get { return this[nameof(AttachComponent)].As<SceneComponent>(); } set { this["AttachComponent"] = value; } }
        public Vector AttachPoint { get { return this[nameof(AttachPoint)].As<Vector>(); } set { this["AttachPoint"] = value; } }
        public Vector RelativeAttachPoint { get { return this[nameof(RelativeAttachPoint)].As<Vector>(); } set { this["RelativeAttachPoint"] = value; } }
        public Quat AttachOrientation { get { return this[nameof(AttachOrientation)].As<Quat>(); } set { this["AttachOrientation"] = value; } }
        public Quat RelativeAttachOrientation { get { return this[nameof(RelativeAttachOrientation)].As<Quat>(); } set { this["RelativeAttachOrientation"] = value; } }
        public Vector SurfaceNormal { get { return this[nameof(SurfaceNormal)].As<Vector>(); } set { this["SurfaceNormal"] = value; } }
        public Vector RelativeSurfaceNormal { get { return this[nameof(RelativeSurfaceNormal)].As<Vector>(); } set { this["RelativeSurfaceNormal"] = value; } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public float SplineInputKey { get { return this[nameof(SplineInputKey)].GetValue<float>(); } set { this[nameof(SplineInputKey)].SetValue<float>(value); } }
        public float Divergence { get { return this[nameof(Divergence)].GetValue<float>(); } set { this[nameof(Divergence)].SetValue<float>(value); } }
        public float MoveDistance { get { return this[nameof(MoveDistance)].GetValue<float>(); } set { this[nameof(MoveDistance)].SetValue<float>(value); } }
        public float MoveAngle { get { return this[nameof(MoveAngle)].GetValue<float>(); } set { this[nameof(MoveAngle)].SetValue<float>(value); } }
        public Vector IdealInputDirection { get { return this[nameof(IdealInputDirection)].As<Vector>(); } set { this["IdealInputDirection"] = value; } }
        public Transform SplineTransform { get { return this[nameof(SplineTransform)].As<Transform>(); } set { this["SplineTransform"] = value; } }
        public bool bContinuous { get { return this[nameof(bContinuous)].Flag; } set { this[nameof(bContinuous)].Flag = value; } }
        public bool bUseLeadingPosition { get { return this[nameof(bUseLeadingPosition)].Flag; } set { this[nameof(bUseLeadingPosition)].Flag = value; } }
        public float BlendTimeOverride { get { return this[nameof(BlendTimeOverride)].GetValue<float>(); } set { this[nameof(BlendTimeOverride)].SetValue<float>(value); } }
        public bool bIsInitialClimb { get { return this[nameof(bIsInitialClimb)].Flag; } set { this[nameof(bIsInitialClimb)].Flag = value; } }
    }
    public enum ECursorInteractType : int
    {
        Focus = 0,
        Release = 1,
        ECursorInteractType_MAX = 2,
    }
    public enum ECursorOverType : int
    {
        Enter = 0,
        Exit = 1,
        ECursorOverType_MAX = 2,
    }
    public enum EInputDevice : int
    {
        None = 0,
        KeyboardAndMouse = 1,
        Gamepad = 2,
        Touch = 3,
        EInputDevice_MAX = 4,
    }
    public class GunfireAudioPlayingID : Object
    {
        public GunfireAudioPlayingID(nint addr) : base(addr) { }
    }
    public enum EAttackType : int
    {
        AttackType_None = 0,
        AttackType_Melee = 1,
        AttackType_Ranged = 2,
        AttackType_MAX = 3,
    }
    public class CinematicPlayerSettings : Object
    {
        public CinematicPlayerSettings(nint addr) : base(addr) { }
        public MovieSceneSequencePlaybackSettings PlaybackSettings { get { return this[nameof(PlaybackSettings)].As<MovieSceneSequencePlaybackSettings>(); } set { this["PlaybackSettings"] = value; } }
        public CinematicTransitionParams CinematicTransitionParams { get { return this[nameof(CinematicTransitionParams)].As<CinematicTransitionParams>(); } set { this["CinematicTransitionParams"] = value; } }
        public Array<PlayerGunfire> RelevantPlayers { get { return new Array<PlayerGunfire>(this[nameof(RelevantPlayers)].Address); } }
        public bool HideOtherPlayers { get { return this[nameof(HideOtherPlayers)].Flag; } set { this[nameof(HideOtherPlayers)].Flag = value; } }
        public bool ResetNonMVPs { get { return this[nameof(ResetNonMVPs)].Flag; } set { this[nameof(ResetNonMVPs)].Flag = value; } }
        public bool ResetCameraOnComplete { get { return this[nameof(ResetCameraOnComplete)].Flag; } set { this[nameof(ResetCameraOnComplete)].Flag = value; } }
        public bool ShowSkipCinematic { get { return this[nameof(ShowSkipCinematic)].Flag; } set { this[nameof(ShowSkipCinematic)].Flag = value; } }
        public bool DefaultToPlayerCameraOnFinish { get { return this[nameof(DefaultToPlayerCameraOnFinish)].Flag; } set { this[nameof(DefaultToPlayerCameraOnFinish)].Flag = value; } }
        public bool UseLocalAreaRelevance { get { return this[nameof(UseLocalAreaRelevance)].Flag; } set { this[nameof(UseLocalAreaRelevance)].Flag = value; } }
        public bool OnlyShowCameraToInstigator { get { return this[nameof(OnlyShowCameraToInstigator)].Flag; } set { this[nameof(OnlyShowCameraToInstigator)].Flag = value; } }
        public Object CachedSequenceSettings { get { return this[nameof(CachedSequenceSettings)]; } set { this[nameof(CachedSequenceSettings)] = value; } }
        public Pawn InstigatorPawn { get { return this[nameof(InstigatorPawn)].As<Pawn>(); } set { this["InstigatorPawn"] = value; } }
        public int RequiredReplicatedActorsToStart { get { return this[nameof(RequiredReplicatedActorsToStart)].GetValue<int>(); } set { this[nameof(RequiredReplicatedActorsToStart)].SetValue<int>(value); } }
        public bool IsNetworkedCinematic { get { return this[nameof(IsNetworkedCinematic)].Flag; } set { this[nameof(IsNetworkedCinematic)].Flag = value; } }
        public Actor ShotTarget { get { return this[nameof(ShotTarget)].As<Actor>(); } set { this["ShotTarget"] = value; } }
        public bool IgnoreShotTargetRotation { get { return this[nameof(IgnoreShotTargetRotation)].Flag; } set { this[nameof(IgnoreShotTargetRotation)].Flag = value; } }
        public bool ShouldFireEndCinematicEvent { get { return this[nameof(ShouldFireEndCinematicEvent)].Flag; } set { this[nameof(ShouldFireEndCinematicEvent)].Flag = value; } }
        public int ReplicationChangeID { get { return this[nameof(ReplicationChangeID)].GetValue<int>(); } set { this[nameof(ReplicationChangeID)].SetValue<int>(value); } }
        public Object MediaTexture { get { return this[nameof(MediaTexture)].As<Object>(); } set { this["MediaTexture"] = value; } }
        public SoundGunfire MediaSound { get { return this[nameof(MediaSound)].As<SoundGunfire>(); } set { this["MediaSound"] = value; } }
    }
    public class SoundGunfire : Object
    {
        public SoundGunfire(nint addr) : base(addr) { }
        public Object SoundObject { get { return this[nameof(SoundObject)].As<Object>(); } set { this["SoundObject"] = value; } }
    }
    public class CinematicTransitionParams : Object
    {
        public CinematicTransitionParams(nint addr) : base(addr) { }
        public bool DoCustomTransition { get { return this[nameof(DoCustomTransition)].Flag; } set { this[nameof(DoCustomTransition)].Flag = value; } }
        public bool NeedsMovementToStartTransition { get { return this[nameof(NeedsMovementToStartTransition)].Flag; } set { this[nameof(NeedsMovementToStartTransition)].Flag = value; } }
        public float ExitBlendTime { get { return this[nameof(ExitBlendTime)].GetValue<float>(); } set { this[nameof(ExitBlendTime)].SetValue<float>(value); } }
        public float AspectRatioBlendTime { get { return this[nameof(AspectRatioBlendTime)].GetValue<float>(); } set { this[nameof(AspectRatioBlendTime)].SetValue<float>(value); } }
    }
    public class SequencerUIEventPayload : Object
    {
        public SequencerUIEventPayload(nint addr) : base(addr) { }
        public int ElementIndex { get { return this[nameof(ElementIndex)].GetValue<int>(); } set { this[nameof(ElementIndex)].SetValue<int>(value); } }
        public Vector2D CustomChildWidgetElementPlacement { get { return this[nameof(CustomChildWidgetElementPlacement)].As<Vector2D>(); } set { this["CustomChildWidgetElementPlacement"] = value; } }
        public Object UITextToDisplay { get { return this[nameof(UITextToDisplay)]; } set { this[nameof(UITextToDisplay)] = value; } }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public Object ChildWidgetToAdd { get { return this[nameof(ChildWidgetToAdd)]; } set { this[nameof(ChildWidgetToAdd)] = value; } }
        public float FadeInDuration { get { return this[nameof(FadeInDuration)].GetValue<float>(); } set { this[nameof(FadeInDuration)].SetValue<float>(value); } }
        public float FadeOutDuration { get { return this[nameof(FadeOutDuration)].GetValue<float>(); } set { this[nameof(FadeOutDuration)].SetValue<float>(value); } }
    }
    public enum EItemUseType : int
    {
        SinglePress = 0,
        DoublePress = 1,
        Hold = 2,
        Release = 3,
        EItemUseType_MAX = 4,
    }
    public enum EQuestResult : int
    {
        Success = 0,
        Failure = 1,
        EQuestResult_MAX = 2,
    }
    public class ReceptacleSlot : Object
    {
        public ReceptacleSlot(nint addr) : base(addr) { }
        public Object ItemType { get { return this[nameof(ItemType)]; } set { this[nameof(ItemType)] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public bool bFull { get { return this[nameof(bFull)].Flag; } set { this[nameof(bFull)].Flag = value; } }
        public bool bCanAddItem { get { return this[nameof(bCanAddItem)].Flag; } set { this[nameof(bCanAddItem)].Flag = value; } }
        public bool bCanRemoveItem { get { return this[nameof(bCanRemoveItem)].Flag; } set { this[nameof(bCanRemoveItem)].Flag = value; } }
        public Item VisualInstance { get { return this[nameof(VisualInstance)].As<Item>(); } set { this["VisualInstance"] = value; } }
        public Object SlottedType { get { return this[nameof(SlottedType)]; } set { this[nameof(SlottedType)] = value; } }
    }
    public class RelevantActor : Object
    {
        public RelevantActor(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public EAffiliation Affiliation { get { return (EAffiliation)this[nameof(Affiliation)].GetValue<int>(); } set { this[nameof(Affiliation)].SetValue<int>((int)value); } }
        public EAwarenessState AwarenessState { get { return (EAwarenessState)this[nameof(AwarenessState)].GetValue<int>(); } set { this[nameof(AwarenessState)].SetValue<int>((int)value); } }
        public float AwarenessStateTimer { get { return this[nameof(AwarenessStateTimer)].GetValue<float>(); } set { this[nameof(AwarenessStateTimer)].SetValue<float>(value); } }
        public Vector LastKnownPosition { get { return this[nameof(LastKnownPosition)].As<Vector>(); } set { this["LastKnownPosition"] = value; } }
        public Vector LastKnownVisiblePosition { get { return this[nameof(LastKnownVisiblePosition)].As<Vector>(); } set { this["LastKnownVisiblePosition"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public EVisState VisState { get { return (EVisState)this[nameof(VisState)].GetValue<int>(); } set { this[nameof(VisState)].SetValue<int>((int)value); } }
        public bool bHasPreviouslyBeenVisible { get { return this[nameof(bHasPreviouslyBeenVisible)].Flag; } set { this[nameof(bHasPreviouslyBeenVisible)].Flag = value; } }
        public bool bHasSphereLOS { get { return this[nameof(bHasSphereLOS)].Flag; } set { this[nameof(bHasSphereLOS)].Flag = value; } }
        public bool bHasLOS { get { return this[nameof(bHasLOS)].Flag; } set { this[nameof(bHasLOS)].Flag = value; } }
        public bool bHasLOF { get { return this[nameof(bHasLOF)].Flag; } set { this[nameof(bHasLOF)].Flag = value; } }
        public bool bHasDirectPath { get { return this[nameof(bHasDirectPath)].Flag; } set { this[nameof(bHasDirectPath)].Flag = value; } }
        public bool bPersistent { get { return this[nameof(bPersistent)].Flag; } set { this[nameof(bPersistent)].Flag = value; } }
        public bool bAlwaysRelevant { get { return this[nameof(bAlwaysRelevant)].Flag; } set { this[nameof(bAlwaysRelevant)].Flag = value; } }
        public float Threat { get { return this[nameof(Threat)].GetValue<float>(); } set { this[nameof(Threat)].SetValue<float>(value); } }
        public float SightAwareness { get { return this[nameof(SightAwareness)].GetValue<float>(); } set { this[nameof(SightAwareness)].SetValue<float>(value); } }
        public float BonusLostSightRange { get { return this[nameof(BonusLostSightRange)].GetValue<float>(); } set { this[nameof(BonusLostSightRange)].SetValue<float>(value); } }
    }
    public enum EVisState : int
    {
        Unknown = 0,
        DontCare = 1,
        Visible = 2,
        NotVisible = 3,
        LostSight = 4,
        EVisState_MAX = 5,
    }
    public enum EAwarenessState : int
    {
        None = 0,
        Alert = 1,
        Aware = 2,
        EAwarenessState_MAX = 3,
    }
    public class TutorialPrompt : TableRowBase
    {
        public TutorialPrompt(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object TextController { get { return this[nameof(TextController)]; } set { this[nameof(TextController)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Object Node { get { return this[nameof(Node)]; } set { this[nameof(Node)] = value; } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public bool OverrideEnabled { get { return this[nameof(OverrideEnabled)].Flag; } set { this[nameof(OverrideEnabled)].Flag = value; } }
    }
    public enum EWoundedState : int
    {
        None = 0,
        Wounded = 1,
        Reviving = 2,
        EWoundedState_MAX = 3,
    }
    public enum EDetailLevel : int
    {
        Low = 0,
        Medium = 1,
        High = 2,
        EDetailLevel_MAX = 3,
    }
    public class GraphPosition : Object
    {
        public GraphPosition(nint addr) : base(addr) { }
        public int Row { get { return this[nameof(Row)].GetValue<int>(); } set { this[nameof(Row)].SetValue<int>(value); } }
        public int Column { get { return this[nameof(Column)].GetValue<int>(); } set { this[nameof(Column)].SetValue<int>(value); } }
    }
    public class SpawnList : Object
    {
        public SpawnList(nint addr) : base(addr) { }
        public Array<SpawnEntry> Spawns { get { return new Array<SpawnEntry>(this[nameof(Spawns)].Address); } }
    }
    public class SpawnEntry : Object
    {
        public SpawnEntry(nint addr) : base(addr) { }
        public ESpawnType Type { get { return (ESpawnType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object ActorBP { get { return this[nameof(ActorBP)]; } set { this[nameof(ActorBP)] = value; } }
        public Array<Object> ActorTags { get { return new Array<Object>(this[nameof(ActorTags)].Address); } }
        public Object SpawnFaction { get { return this[nameof(SpawnFaction)]; } set { this[nameof(SpawnFaction)] = value; } }
        public Object CachedActorBP { get { return this[nameof(CachedActorBP)]; } set { this[nameof(CachedActorBP)] = value; } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int Quantity { get { return this[nameof(Quantity)].GetValue<int>(); } set { this[nameof(Quantity)].SetValue<int>(value); } }
        public Array<Object> SpawnPointTags { get { return new Array<Object>(this[nameof(SpawnPointTags)].Address); } }
        public byte SpawnFlags { get { return this[nameof(SpawnFlags)].GetValue<byte>(); } set { this[nameof(SpawnFlags)].SetValue<byte>(value); } }
        public SpawnTableEntry Entry { get { return this[nameof(Entry)].As<SpawnTableEntry>(); } set { this["Entry"] = value; } }
    }
    public enum ESpawnType : int
    {
        All = 0,
        Actor = 1,
        Item = 2,
        Character = 3,
        UserDefined1 = 4,
        UserDefined2 = 5,
        UserDefined3 = 6,
        UserDefined4 = 7,
        UserDefined5 = 8,
        EncounterParams = 9,
        ESpawnType_MAX = 10,
    }
    public enum ECombatSize : int
    {
        Normal = 0,
        Big = 1,
        ECombatSize_MAX = 2,
    }
    public enum EPathState : int
    {
        DontCare = 0,
        NotValid = 1,
        Valid = 2,
        EPathState_MAX = 3,
    }
    public enum ENodePathStatus : int
    {
        Idle = 0,
        Pathing = 1,
        Waiting = 2,
        Complete = 3,
        DontCare = 4,
        ENodePathStatus_MAX = 5,
    }
    public enum EDirectionalAnimationComponent : int
    {
        YawOnly = 0,
        PitchOnly = 1,
        PitchAndYaw = 2,
        EDirectionalAnimationComponent_MAX = 3,
    }
    public enum EChallengeObjectType : int
    {
        Increment = 0,
        Threshold = 1,
        EChallengeObjectType_MAX = 2,
    }
    public enum EChallengeAuthorityType : int
    {
        Any = 0,
        Server = 1,
        Local = 2,
        EChallengeAuthorityType_MAX = 3,
    }
    public enum EChallengeBroadcastType : int
    {
        Everyone = 0,
        Local = 1,
        Specified = 2,
        EChallengeBroadcastType_MAX = 3,
    }
    public enum EAchievementSyncMode : int
    {
        NoAchievementUnlock = 0,
        AchievementUnlock = 1,
        EAchievementSyncMode_MAX = 2,
    }
    public enum EChallengeAchievementSyncMode : int
    {
        ServerDataAuthoratative = 0,
        ClientDataAuthoratative = 1,
        NeitherIsAuthoritative = 2,
        EChallengeAchievementSyncMode_MAX = 3,
    }
    public enum EObjectiveType : int
    {
        Standard = 0,
        Link = 1,
        EObjectiveType_MAX = 2,
    }
    public enum CharacterFacing : int
    {
        MoveDir = 0,
        Camera = 1,
        Target = 2,
        TargetOnly = 3,
        TargetOnStart = 4,
        ImpactDirOnStart = 5,
        MoveDirOnStart = 6,
        TargetOrMoveDirOnStart = 7,
        TargetOrCameraOnStart = 8,
        RootRotation = 9,
        TargetOrNone = 10,
        Fixed = 11,
        MoveDirOnStartThenTarget = 12,
        NavLinkDirection = 13,
        Velocity = 14,
        MoveDirForwardsOnly = 15,
        DamageOwner = 16,
        DamageOwnerOnStart = 17,
        CameraOnStart = 18,
        Current = 19,
        CharacterFacing_MAX = 20,
    }
    public enum ERootMotionVelocityMethod : int
    {
        RootMotionOnly = 0,
        IgnoreRootMotion = 1,
        AccumulativeRootMotion = 2,
        ApplyAsDelta = 3,
        IgnoreGravity = 4,
        ApplyGravityWithDownwardRootMotion = 5,
        ERootMotionVelocityMethod_MAX = 6,
    }
    public enum EEaseType : int
    {
        EaseIn = 0,
        EaseOut = 1,
        EaseInOut = 2,
        EEaseType_MAX = 3,
    }
    public enum EAudioPlaybackTypes : int
    {
        None = 0,
        OneShot = 1,
        Looping = 2,
        EAudioPlaybackTypes_MAX = 3,
    }
    public enum EHardwareCursorStyle : int
    {
        None = 0,
        Default = 1,
        Hovered = 2,
        EHardwareCursorStyle_MAX = 3,
    }
    public enum EInteractiveInitiator : int
    {
        Us = 0,
        Other = 1,
        EInteractiveInitiator_MAX = 2,
    }
    public enum EInteractiveHost : int
    {
        Us = 0,
        Other = 1,
        EInteractiveHost_MAX = 2,
    }
    public enum EInteractiveType : int
    {
        Info = 0,
        Action = 1,
        Event = 2,
        EInteractiveType_MAX = 3,
    }
    public enum EInteractArcValidationType : int
    {
        Ignore = 0,
        AngleOnly = 1,
        AngleAndPosition = 2,
        FacingOnly = 3,
        PositionOnly = 4,
        FacingAndPosition = 5,
        EInteractArcValidationType_MAX = 6,
    }
    public enum EAnchorFaceOtherMethod : int
    {
        Instant = 0,
        InstantTeleportPhysics = 1,
        UseConvergeTime = 2,
        EAnchorFaceOtherMethod_MAX = 3,
    }
    public enum EInteractiveResult : int
    {
        NoResult = 0,
        Success = 1,
        Failure = 2,
        EInteractiveResult_MAX = 3,
    }
    public enum EInteractiveConvergeMode : int
    {
        NoConverge = 0,
        AttachOnly = 1,
        FaceAnchor = 2,
        Converge = 3,
        ConvergeKeepUpright = 4,
        EInteractiveConvergeMode_MAX = 5,
    }
    public enum EEquipAttachType : int
    {
        Active = 0,
        Inactive = 1,
        Stowed = 2,
        EEquipAttachType_MAX = 3,
    }
    public enum CompareOp : int
    {
        GreaterThan = 0,
        LessThan = 1,
        GreaterThanEqual = 2,
        LessThanEqual = 3,
        Equal = 4,
        CompareOp_MAX = 5,
    }
    public enum EYesNo : int
    {
        Yes = 0,
        No = 1,
        DontCare = 2,
        EYesNo_MAX = 3,
    }
    public enum ELogicalOperator : int
    {
        And = 0,
        Or = 1,
        Xor = 2,
        ELogicalOperator_MAX = 3,
    }
    public enum EMusicState : int
    {
        None = 0,
        Conversation = 1,
        Ambient = 2,
        Tension = 3,
        Combat = 4,
        EMusicState_MAX = 5,
    }
    public enum EMusicEvent : int
    {
        None = 0,
        BeginLevelLoad = 1,
        FinishLevelLoad = 2,
        EMusicEvent_MAX = 3,
    }
    public enum ELadderClimbDirection : int
    {
        UP = 0,
        DOWN = 1,
        ELadderClimbDirection_MAX = 2,
    }
    public enum EActorContext : int
    {
        Actor = 0,
        Owner = 1,
        Target = 2,
        Weapon = 3,
        EActorContext_MAX = 4,
    }
    public enum EWeaponPhantomType : int
    {
        Dynamic = 0,
        Discrete = 1,
        EWeaponPhantomType_MAX = 2,
    }
    public enum EEffectSpawnDirection : int
    {
        ImpactNormal = 0,
        PhantomDirection = 1,
        NegativePhantomDirection = 2,
        RandomDirection = 3,
        SpecificDirection = 4,
        EEffectSpawnDirection_MAX = 5,
    }
    public enum EWeaponPhantomReplicationMode : int
    {
        ServerAuthoritative = 0,
        ClientAuthoritative = 1,
        EWeaponPhantomReplicationMode_MAX = 2,
    }
    public enum EWeaponPhantomGeometryType : int
    {
        Optional = 0,
        Required = 1,
        Exclude = 2,
        EWeaponPhantomGeometryType_MAX = 3,
    }
    public enum EWeaponPhantomCollisionCheckMethod : int
    {
        ClosestPoint = 0,
        Trace = 1,
        EndToEnd = 2,
        EWeaponPhantomCollisionCheckMethod_MAX = 3,
    }
    public enum EActorCustomizationMaterialParameterType : int
    {
        Scalar = 0,
        Color = 1,
        Texture = 2,
        Tween = 3,
        EActorCustomizationMaterialParameterType_MAX = 4,
    }
    public enum EParamApply : int
    {
        ApplyOnAdd = 0,
        ApplyOnRemove = 1,
        ApplyOnAddAndReverseOnRemove = 2,
        EParamApply_MAX = 3,
    }
    public enum EAwarenessFlags : int
    {
        Undefined = 0,
        SmallCritter = 1,
        LargeCritter = 2,
        Monster = 3,
        Player = 4,
        UserType1 = 5,
        UserType2 = 6,
        UserType3 = 7,
        UserType4 = 8,
        EAwarenessFlags_MAX = 9,
    }
    public enum EPlayerRelevancyMode : int
    {
        None = 0,
        ForceEvaluate = 1,
        AlwaysRelevantIfInAggroGroup = 2,
        AlwaysRelevant = 3,
        EPlayerRelevancyMode_MAX = 4,
    }
    public enum ENavAreaFlag : int
    {
        Default = 0,
        Jump = 1,
        Fall = 2,
        Ladder = 3,
        LadderOff = 4,
        Vault = 5,
        VaultOn = 6,
        VaultOnMid = 7,
        VaultOnHigh = 8,
        VaultOverMid = 9,
        VaultOverHigh = 10,
        Custom1 = 11,
        Custom2 = 12,
        Custom3 = 13,
        Custom4 = 14,
        MAX = 15,
    }
    public enum EAITacticalPointType : int
    {
        Invalid = 0,
        LowCover = 1,
        CornerCoverLeft = 2,
        CornerCoverRight = 3,
        Dynamic = 4,
        Custom = 5,
        EAITacticalPointType_MAX = 6,
    }
    public enum EAIDistanceType : int
    {
        XYZ = 0,
        XY = 1,
        Z = 2,
        EAIDistanceType_MAX = 3,
    }
    public enum ELadderPathSearch : int
    {
        TARGET_ABOVE = 0,
        TARGET_BELOW = 1,
        ANY_PATH = 2,
        ELadderPathSearch_MAX = 3,
    }
    public enum ELadderPathToValidate : int
    {
        CurrentPath = 0,
        NewPath = 1,
        BestPath = 2,
        ELadderPathToValidate_MAX = 3,
    }
    public enum ELadderOccupancySearch : int
    {
        RUNG_ABOVE = 0,
        RUNG_BELOW = 1,
        ENTRY_FROM_TOP = 2,
        ENTRY_FROM_BOTTOM = 3,
        ELadderOccupancySearch_MAX = 4,
    }
    public enum EConvergeToType : int
    {
        TacticalPoint = 0,
        BlackboardKey = 1,
        LocalPlayer = 2,
        EConvergeToType_MAX = 3,
    }
    public enum EEnvQueryDecoratorAction : int
    {
        PathToTacticalPoint = 0,
        TacticalPointOnly = 1,
        None = 2,
        EEnvQueryDecoratorAction_MAX = 3,
    }
    public enum EJumpType : int
    {
        NavLink = 0,
        ToTarget = 1,
        ToTargetKeepFacing = 2,
        EJumpType_MAX = 3,
    }
    public enum EResurrectTargetType : int
    {
        Dead = 0,
        Wounded = 1,
        Both = 2,
        EResurrectTargetType_MAX = 3,
    }
    public enum EAnimationNamedSelectionMode : int
    {
        Random = 0,
        Directional = 1,
        DirectionalInput = 2,
        EAnimationNamedSelectionMode_MAX = 3,
    }
    public enum EAnimationVelocityMode : int
    {
        Movement = 0,
        Simulated = 1,
        Override = 2,
        EAnimationVelocityMode_MAX = 3,
    }
    public enum ENotifyOptimizationType : int
    {
        None = 0,
        Queued = 1,
        ENotifyOptimizationType_MAX = 2,
    }
    public enum EAwarenessSource : int
    {
        Us = 0,
        Target = 1,
        EAwarenessSource_MAX = 2,
    }
    public enum EAnimImpactType : int
    {
        Foot = 0,
        FootSprint = 1,
        FootScuff = 2,
        Hand = 3,
        HandSprint = 4,
        Land = 5,
        Body = 6,
        Slam = 7,
        EAnimImpactType_MAX = 8,
    }
    public enum EAnimImpactTraceDirection : int
    {
        Down = 0,
        Forward = 1,
        EAnimImpactTraceDirection_MAX = 2,
    }
    public enum EDirectionSide : int
    {
        Left = 0,
        Right = 1,
        Middle = 2,
        Custom = 3,
        DontCare = 4,
        EDirectionSide_MAX = 5,
    }
    public enum EBoidMoveType : int
    {
        Ground = 0,
        Water = 1,
        Air = 2,
        EBoidMoveType_MAX = 3,
    }
    public enum EBoidMoveState : int
    {
        Idle = 0,
        Wander = 1,
        Goal = 2,
        Direction = 3,
        EBoidMoveState_MAX = 4,
    }
    public enum EBoidSpawnStyle : int
    {
        Ground = 0,
        Air = 1,
        EBoidSpawnStyle_MAX = 2,
    }
    public enum ECincematicMode : int
    {
        None = 0,
        Complete = 1,
        ECincematicMode_MAX = 2,
    }
    public enum ECameraFollow : int
    {
        Stationary = 0,
        FollowXYZ = 1,
        FollowZ = 2,
        ECameraFollow_MAX = 3,
    }
    public enum ECameraTurnDir : int
    {
        None = 0,
        Left = 1,
        Right = 2,
        ECameraTurnDir_MAX = 3,
    }
    public enum EAutoCenterCondition : int
    {
        Never = 0,
        NotMoving = 1,
        Moving = 2,
        MovingWithMoveInput = 3,
        Always = 4,
        EAutoCenterCondition_MAX = 5,
    }
    public enum EBaseLocationMethod : int
    {
        CapsuleBase = 0,
        MeshBase = 1,
        MeshCenter = 2,
        EBaseLocationMethod_MAX = 3,
    }
    public enum ESwimCameraState : int
    {
        Emerged = 0,
        Emerging = 1,
        Submerged = 2,
        Submerging = 3,
        ESwimCameraState_MAX = 4,
    }
    public enum ETPSCameraOrientation : int
    {
        Undefined = 0,
        Left = 1,
        Right = 2,
        ETPSCameraOrientation_MAX = 3,
    }
    public enum ETPSAimType : int
    {
        None = 0,
        Aim = 1,
        Scope = 2,
        ETPSAimType_MAX = 3,
    }
    public enum EAdhesionActivateMode : int
    {
        Always = 0,
        CameraInput = 1,
        CameraOrMoveInput = 2,
        EAdhesionActivateMode_MAX = 3,
    }
    public enum EOrientTowardsHeadingCondition : int
    {
        Never = 0,
        MoveInput = 1,
        Moving = 2,
        MovingAndMoveInput = 3,
        MovingOrMoveInput = 4,
        Always = 5,
        EOrientTowardsHeadingCondition_MAX = 6,
    }
    public enum EChallengeScope : int
    {
        LocalOnly = 0,
        HostOnly = 1,
        Everyone = 2,
        EChallengeScope_MAX = 3,
    }
    public enum EChallengeTrigger : int
    {
        Unlocked = 0,
        Revealed = 1,
        Updated = 2,
        Complete = 3,
        RankComplete = 4,
        EChallengeTrigger_MAX = 5,
    }
    public enum EClimbMovementType : int
    {
        Discrete = 0,
        Continuous = 1,
        EClimbMovementType_MAX = 2,
    }
    public enum EClimbAnimationType : int
    {
        Generic = 0,
        Start = 1,
        Stop = 2,
        Loop = 3,
        EClimbAnimationType_MAX = 4,
    }
    public enum EClimbInputMethod : int
    {
        None = 0,
        MoveInput = 1,
        Prompt = 2,
        MoveInputAndPrompt = 3,
        EClimbInputMethod_MAX = 4,
    }
    public enum EClimbMoveInputFilter : int
    {
        Any = 0,
        HorizontalOnly = 1,
        VerticalOnly = 2,
        EClimbMoveInputFilter_MAX = 3,
    }
    public enum EClimbTransitionType : int
    {
        Any = 0,
        Contiguous = 1,
        NonContiguous = 2,
        NonContiguousWithInputPrompt = 3,
        EClimbTransitionType_MAX = 4,
    }
    public enum EClimbTurnAwayDirection : int
    {
        Left = 0,
        Right = 1,
        None = 2,
        EClimbTurnAwayDirection_MAX = 3,
    }
    public enum EClimbValidationMode : int
    {
        RootMotion = 0,
        ActorOrientation = 1,
        EClimbValidationMode_MAX = 2,
    }
    public enum EClimbTransitionResult : int
    {
        Success = 0,
        Failure = 1,
        SuccessWithInput = 2,
        Occupied = 3,
        EClimbTransitionResult_MAX = 4,
    }
    public enum ECanClimbFilterMethod : int
    {
        AfterCurrentClimb = 0,
        ContinuousTransition = 1,
        Any = 2,
        ECanClimbFilterMethod_MAX = 3,
    }
    public enum EClimbingTransitionRequiredInput : int
    {
        Any = 0,
        None = 1,
        MoveInputOnly = 2,
        PromptOnly = 3,
        MoveInputAndPrompt = 4,
        RequiresMoveInput = 5,
        RequiresPrompt = 6,
        EClimbingTransitionRequiredInput_MAX = 7,
    }
    public enum EClimbingQueryStatus : int
    {
        Successful = 0,
        PendingTraversal = 1,
        PendingInput = 2,
        PendingOccupancy = 3,
        Failure = 4,
        EClimbingQueryStatus_MAX = 5,
    }
    public enum EClimbFacing : int
    {
        Surface = 0,
        Spline = 1,
        Hanging = 2,
        Overhead = 3,
        EClimbFacing_MAX = 4,
    }
    public enum EClimbDirectionBias : int
    {
        Right = 0,
        Left = 1,
        DontCare = 2,
        EClimbDirectionBias_MAX = 3,
    }
    public enum EClimbStateType : int
    {
        Traversal = 0,
        Reorient = 1,
        Idle = 2,
        EClimbStateType_MAX = 3,
    }
    public enum EClimbingSurfaceModifierType : int
    {
        NoSurfaces = 0,
        AllowSurfaces = 1,
        EClimbingSurfaceModifierType_MAX = 2,
    }
    public enum EBreakableState : int
    {
        Unbroken = 0,
        Breaking = 1,
        Broken = 2,
        EBreakableState_MAX = 3,
    }
    public enum ERecipeType : int
    {
        Craft = 0,
        Decompose = 1,
        Upgrade = 2,
        Infusion = 3,
        ERecipeType_MAX = 4,
    }
    public enum EDetailPriority : int
    {
        Low = 0,
        Normal = 1,
        High = 2,
        Manditory = 3,
        EDetailPriority_MAX = 4,
    }
    public enum EHeuristicBoundsPanelAlignment : int
    {
        TopLeft = 0,
        Top = 1,
        TopRight = 2,
        Right = 3,
        BottomRight = 4,
        Bottom = 5,
        BottomLeft = 6,
        Left = 7,
        Center = 8,
        EHeuristicBoundsPanelAlignment_MAX = 9,
    }
    public enum EHeuristicBoundsTraceResult : int
    {
        Fail_OutOfRange = 0,
        Fail_OutsideFoV = 1,
        Fail_OutsideBounds = 2,
        Success = 3,
        EHeuristicBoundsTraceResult_MAX = 4,
    }
    public enum EHeuristicBoundsShape : int
    {
        Disc = 0,
        Box = 1,
        EHeuristicBoundsShape_MAX = 2,
    }
    public enum ENavModifierGunfireShape : int
    {
        Box = 0,
        Cylinder = 1,
        ENavModifierGunfireShape_MAX = 2,
    }
    public enum ELookTargetType : int
    {
        Simple = 0,
        OnlyIfTargeted = 1,
        OnlyWithLOS = 2,
        ELookTargetType_MAX = 3,
    }
    public enum ETrackingMode : int
    {
        LookTargets = 0,
        Viewpoint = 1,
        ETrackingMode_MAX = 2,
    }
    public enum EReplicatedMovementRotationReplication : int
    {
        Walking = 0,
        Flying = 1,
        EReplicatedMovementRotationReplication_MAX = 2,
    }
    public enum ESilhouetteType : int
    {
        Default = 0,
        Wounded = 1,
        ESilhouetteType_MAX = 2,
    }
    public enum ESilhouetteVisibility : int
    {
        WhenNotVisible = 0,
        WhenVisible = 1,
        Always = 2,
        ESilhouetteVisibility_MAX = 3,
    }
    public enum ESplineAttachmentRule : int
    {
        Start = 0,
        End = 1,
        Closest = 2,
        CustomTime = 3,
        ESplineAttachmentRule_MAX = 4,
    }
    public enum ESplineMovementDirection : int
    {
        Forward = 0,
        Backward = 1,
        ESplineMovementDirection_MAX = 2,
    }
    public enum ESplineAttachType : int
    {
        LocationOnly = 0,
        RotationOnly = 1,
        LocationAndRotation = 2,
        ESplineAttachType_MAX = 3,
    }
    public enum ESplineEaseType : int
    {
        NoEase = 0,
        EaseByTime = 1,
        ESplineEaseType_MAX = 2,
    }
    public enum ESurfaceOrientRotationMode : int
    {
        PitchAndRoll = 0,
        PitchOnly = 1,
        ESurfaceOrientRotationMode_MAX = 2,
    }
    public enum ESurfaceOrientTraceDirection : int
    {
        ActorX = 0,
        ActorY = 1,
        ActorZ = 2,
        ESurfaceOrientTraceDirection_MAX = 3,
    }
    public enum ETargetType : int
    {
        Any = 0,
        Camera = 1,
        ETargetType_MAX = 2,
    }
    public enum ETimeDilationMode : int
    {
        Enabled = 0,
        AnimationOnly = 1,
        Disabled = 2,
        ETimeDilationMode_MAX = 3,
    }
    public enum ETweenRoot : int
    {
        ActorPosition = 0,
        RootNodePosition = 1,
        ETweenRoot_MAX = 2,
    }
    public enum EVitalityInitialValue : int
    {
        Zero = 0,
        Max = 1,
    }
    public enum EActorModifierScope : int
    {
        StatsOnly = 0,
        Server = 1,
        ServerClient = 2,
        EActorModifierScope_MAX = 3,
    }
    public enum EAssetCachePreloadMethod : int
    {
        OnGameInstanceInit = 0,
        OnPostLogin = 1,
        OnPostLoad = 2,
        Blueprint = 3,
        EAssetCachePreloadMethod_MAX = 4,
    }
    public enum EDecalReceiverType : int
    {
        Inherit = 0,
        Enabled = 1,
        Disabled = 2,
        EDecalReceiverType_MAX = 3,
    }
    public enum ENavigationType : int
    {
        Unknown = 0,
        Ground = 1,
        Air = 2,
        Water = 3,
        ENavigationType_MAX = 4,
    }
    public enum ECustomMovementMode : int
    {
        Swinging = 0,
        Floating = 1,
        ECustomMovementMode_MAX = 2,
    }
    public enum ESoftCollisionMode : int
    {
        Enabled = 0,
        Disabled = 1,
        Bully = 2,
        Coward = 3,
        ESoftCollisionMode_MAX = 4,
    }
    public enum ECheatExecutionType : int
    {
        CHEAT_CONSOLE = 0,
        CHEAT_MANAGER = 1,
        CHEAT_BLUEPRINT = 2,
        CHEAT_MAX = 3,
    }
    public enum EHitValidationType : int
    {
        Standard = 0,
        Piercing = 1,
        EHitValidationType_MAX = 2,
    }
    public enum EHandedness : int
    {
        Right = 0,
        Left = 1,
        EHandedness_MAX = 2,
    }
    public enum EAutoArcType : int
    {
        None = 0,
        ArcHeight = 1,
        ArcSpeed = 2,
        EAutoArcType_MAX = 3,
    }
    public enum EFireOutExec : int
    {
        Hit = 0,
        Destroyed = 1,
        EFireOutExec_MAX = 2,
    }
    public enum EInvincibleHandlingMethod : int
    {
        DamageFails = 0,
        ZeroDamage = 1,
        LockHealth = 2,
        EInvincibleHandlingMethod_MAX = 3,
    }
    public enum EDeadReason : int
    {
        Damage = 0,
        Fall = 1,
        GameSpecific1 = 2,
        EDeadReason_MAX = 3,
    }
    public enum EDamageNumbersVisibility : int
    {
        Hidden = 0,
        Shown = 1,
        IgnoresPower = 2,
        EDamageNumbersVisibility_MAX = 3,
    }
    public enum EHitscanPierce : int
    {
        None = 0,
        Damageable = 1,
        Character = 2,
        EHitscanPierce_MAX = 3,
    }
    public enum EEntitlementPlatform : int
    {
        Default = 0,
        Steam = 1,
        Epic = 2,
        XboxSeries = 3,
        PS5 = 4,
        EEntitlementPlatform_MAX = 5,
    }
    public enum ERevokeType : int
    {
        Default = 0,
        Remove = 1,
        Disable = 2,
        ERevokeType_MAX = 3,
    }
    public enum EFadeDirection : int
    {
        FD_In = 0,
        FD_Out = 1,
        FD_MAX = 2,
    }
    public enum EMsgSeverity : int
    {
        Error = 0,
        Warning = 1,
        Info = 2,
        EMsgSeverity_MAX = 3,
    }
    public enum EMsgCategory : int
    {
        Loading = 0,
        PreRuntime = 1,
        Runtime = 2,
        FBXImport = 3,
        EMsgCategory_MAX = 4,
    }
    public enum ELevelContextFallback : int
    {
        Instigator = 0,
        Root = 1,
        WorldContext = 2,
        Owner = 3,
        ELevelContextFallback_MAX = 4,
    }
    public enum EBasePlatform : int
    {
        Unknown = 0,
        PC = 1,
        Xbox = 2,
        PlayStation = 3,
        EBasePlatform_MAX = 4,
    }
    public enum EPlatform : int
    {
        Unknown = 0,
        PC = 1,
        SteamDeck = 2,
        PS5 = 3,
        XboxSeriesS = 4,
        XboxSeriesX = 5,
        EPlatform_MAX = 6,
    }
    public enum EVideoDeviceVendor : int
    {
        UNKNOWN = 0,
        NVIDIA = 1,
        AMD = 2,
        INTEL = 3,
        EVideoDeviceVendor_MAX = 4,
    }
    public enum EBuildType : int
    {
        Debug = 0,
        Development = 1,
        Test = 2,
        Shipping = 3,
        EBuildType_MAX = 4,
    }
    public enum ELocalizationLanguage : int
    {
        en = 0,
        es = 1,
        de = 2,
        fr = 3,
        ja = 4,
        ko = 5,
        zh = 6,
        ar = 7,
        fa = 8,
        it = 9,
        pl = 10,
        ru = 11,
        pt = 12,
        ELocalizationLanguage_MAX = 13,
    }
    public enum EQueryShapeType : int
    {
        Sphere = 0,
        Box = 1,
        EQueryShapeType_MAX = 2,
    }
    public enum EHitPauseMode : int
    {
        AnyDamage = 0,
        DamagedCharactersOnly = 1,
        EHitPauseMode_MAX = 2,
    }
    public enum EReloadInteractiveMode : int
    {
        Actors = 0,
        MashableActors = 1,
        Items = 2,
        Revive = 3,
        EReloadInteractiveMode_MAX = 4,
    }
    public enum EAmbientPriorityPolicy : int
    {
        FullyNested = 0,
        ManualLevelDepth = 1,
        EAmbientPriorityPolicy_MAX = 2,
    }
    public enum EDirectionalAnimationFilter : int
    {
        None = 0,
        DefaultToLeft = 1,
        DefaultToRight = 2,
        EDirectionalAnimationFilter_MAX = 3,
    }
    public enum EDebrisCullingMethod : int
    {
        CullByTime = 0,
        CullByDistance = 1,
        EDebrisCullingMethod_MAX = 2,
    }
    public enum InputFilterMethod : int
    {
        Both = 0,
        ControllerOnly = 1,
        KeyboardOnly = 2,
        InputFilterMethod_MAX = 3,
    }
    public enum EMoveInputMethod : int
    {
        CameraRelativeYaw = 0,
        CameraRelativeYawAndPitch = 1,
        EMoveInputMethod_MAX = 2,
    }
    public enum EInspectStatType : int
    {
        Standard = 0,
        Modifier = 1,
        PerSecond = 2,
        Scalar = 3,
        Seconds = 4,
        Requirement = 5,
        Affinity = 6,
        Custom = 7,
        Bar = 8,
        EInspectStatType_MAX = 9,
    }
    public enum ELineFittingMethod : int
    {
        AverageDirection = 0,
        LeastSquares = 1,
        OrthogonalRegression = 2,
        ELineFittingMethod_MAX = 3,
    }
    public enum EPhysicsBoundsForceDirection : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        EPhysicsBoundsForceDirection_MAX = 3,
    }
    public enum EPhysicsBoundsForceType : int
    {
        Push = 0,
        Pull = 1,
        EPhysicsBoundsForceType_MAX = 2,
    }
    public enum EPortalRenderState : int
    {
        Disabled = 0,
        Enabled = 1,
        EnabledNotRendered = 2,
        EnabledNoRecursion = 3,
        EPortalRenderState_MAX = 4,
    }
    public enum EPositionSource : int
    {
        Target = 0,
        Property = 1,
        Blackboard = 2,
        EPositionSource_MAX = 3,
    }
    public enum EProjectileSimMode : int
    {
        HitsOnly = 0,
        HitsAndOverlaps = 1,
        HitsAndOverlapsForcePawn = 2,
        EProjectileSimMode_MAX = 3,
    }
    public enum EProjectileBounceMode : int
    {
        DoFullSimulation = 0,
        StopAfterValidHit = 1,
        StopAfterHitTarget = 2,
        EProjectileBounceMode_MAX = 3,
    }
    public enum ESequenceOriginLocationOverride : int
    {
        DialogOwner = 0,
        DialogInstigator = 1,
        LocalPlayer = 2,
        DialogVariableObject = 3,
        NoOverride = 4,
        ESequenceOriginLocationOverride_MAX = 5,
    }
    public enum EDialogType : int
    {
        Default = 0,
        DialogInterrupt = 1,
        DialogOption = 2,
        EDialogType_MAX = 3,
    }
    public enum EActionType : int
    {
        Dialog = 0,
        Action = 1,
        Flow = 2,
        Trigger = 3,
        EActionType_MAX = 4,
    }
    public enum EDialogSpeakerGender : int
    {
        Male = 0,
        Female = 1,
        EDialogSpeakerGender_MAX = 2,
    }
    public enum EQuestSwitchResult : int
    {
        QuestNotStarted = 0,
        QuestInProgress = 1,
        QuestCompleteSuccess = 2,
        QuestCompleteFailure = 3,
        All = 4,
        EQuestSwitchResult_MAX = 5,
    }
    public enum EStageAction : int
    {
        Push = 0,
        Set = 1,
        Pop = 2,
        EStageAction_MAX = 3,
    }
    public enum EIntensityState : int
    {
        BuildUp = 0,
        Peak = 1,
        Relax = 2,
        EIntensityState_MAX = 3,
    }
    public enum EEncounterFlags : int
    {
        ShuffleSpawns = 0,
        EEncounterFlags_MAX = 1,
    }
    public enum EInputConflictGroup : int
    {
        Gameplay = 0,
        UI = 1,
        EInputConflictGroup_MAX = 2,
    }
    public enum EScalabilityGroup : int
    {
        ShadowQuality = 0,
        PostProcessing = 1,
        FoliageQuality = 2,
        EffectsQuality = 3,
        ViewDistanceQuality = 4,
        EScalabilityGroup_MAX = 5,
    }
    public enum ESettingsPlatforms : int
    {
        PC = 1,
        XboxSeriesX = 2,
        XboxSeriesS = 4,
        PS5 = 8,
        SteamDeck = 16,
        ESettingsPlatforms_MAX = 17,
    }
    public enum ERangedWeaponTrajectoryMode : int
    {
        Socket = 0,
        SocketToAimTarget = 1,
        Camera = 2,
        ERangedWeaponTrajectoryMode_MAX = 3,
    }
    public enum EChargeState : int
    {
        None = 0,
        Charging = 1,
        Success = 2,
        Fail = 3,
        EChargeState_MAX = 4,
    }
    public enum EChargeableActivateType : int
    {
        Press = 0,
        Hold = 1,
        EChargeableActivateType_MAX = 2,
    }
    public enum EInventoryAccess : int
    {
        Private = 0,
        Public = 1,
        EInventoryAccess_MAX = 2,
    }
    public enum EDropState : int
    {
        Idle = 0,
        Dropping = 1,
        Bounce = 2,
        SecondBounce = 3,
        EDropState_MAX = 4,
    }
    public enum EItemGenTableType : int
    {
        Standard = 0,
        IndividualChance = 1,
        EItemGenTableType_MAX = 2,
    }
    public enum EItemQuerySortMethod : int
    {
        Unsorted = 0,
        Sort = 1,
        SortPrioritizeEquipped = 2,
        SortPrioritizeHtLPrice = 3,
        SortPrioritizeLtHPrice = 4,
        NewFirst = 5,
        Favorited = 6,
        EItemQuerySortMethod_MAX = 7,
    }
    public enum EReticuleAlignment : int
    {
        Outside = 0,
        Centered = 1,
        EReticuleAlignment_MAX = 2,
    }
    public enum EReticulePieceDisableMode : int
    {
        Always = 0,
        WithConditions = 1,
        Never = 2,
        OnlyWhileDisabled = 3,
        EReticulePieceDisableMode_MAX = 4,
    }
    public enum EReticuleMaterialDrawMode : int
    {
        FillRadius = 0,
        FixedSize = 1,
        EReticuleMaterialDrawMode_MAX = 2,
    }
    public enum EReticuleGetterType : int
    {
        Float = 0,
        Int = 1,
        Bool = 2,
        EReticuleGetterType_MAX = 3,
    }
    public enum EUsableActivationType : int
    {
        Press = 0,
        PressAndNoHold = 1,
        Hold = 2,
        BothHoldAndPress = 3,
        Release = 4,
        DoublePress = 5,
        BothSingleAndDoublePress = 6,
        BothDoublePressAndHold = 7,
        SingleDoubleAndHold = 8,
        EUsableActivationType_MAX = 9,
    }
    public enum EWeaponAffinityType : int
    {
        Bonus = 0,
        Modifier = 1,
        EWeaponAffinityType_MAX = 2,
    }
    public enum EAmbientSpawnState : int
    {
        Unloaded = 0,
        Loading = 1,
        Loaded = 2,
        Spawning = 3,
        Spawned = 4,
        EAmbientSpawnState_MAX = 5,
    }
    public enum EMapGenState : int
    {
        Uninitialized = 0,
        WaitForServer = 1,
        LoadingTemplate = 2,
        Loading = 3,
        LoadingSubLevels = 4,
        ProcessingInitialTiles = 5,
        Initialized = 6,
        Failed = 7,
        EMapGenState_MAX = 8,
    }
    public enum ETileState : int
    {
        Uninitialized = 0,
        GeneratingNavmesh = 1,
        Initialized = 2,
        ETileState_MAX = 3,
    }
    public enum EResourceDistribution : int
    {
        Quantity = 0,
        Per10Tiles = 1,
        Per100SpawnPoints = 2,
        EResourceDistribution_MAX = 3,
    }
    public enum ETileFlags : int
    {
        AllowSpawns = 1,
        AllowQuests = 2,
        NoNavValidate = 4,
        AllFlags = 255,
        ETileFlags_MAX = 256,
    }
    public enum ETileDirection : int
    {
        None = 0,
        North = 1,
        East = 2,
        South = 4,
        West = 8,
        ETileDirection_MAX = 9,
    }
    public enum ETileVisibility : int
    {
        None = 0,
        Visible = 1,
        NotVisible = 2,
        ETileVisibility_MAX = 3,
    }
    public enum EMapGenAttributeScope : int
    {
        Tile = 0,
        Region = 1,
        World = 2,
        EMapGenAttributeScope_MAX = 3,
    }
    public enum ELODVolumeVisibility : int
    {
        All = 0,
        None = 1,
        Near = 2,
        Distant = 3,
        ELODVolumeVisibility_MAX = 4,
    }
    public enum ELODVolumeRangeType : int
    {
        Invalid = 0,
        NearRange = 1,
        MidRange = 2,
        OutOfRange = 3,
        ELODVolumeRangeType_MAX = 4,
    }
    public enum ELODVolumeFilterClass : int
    {
        StaticMesh = 0,
        Decal = 1,
        Blueprints = 2,
        ELODVolumeFilterClass_MAX = 3,
    }
    public enum ELODVolumeFilterType : int
    {
        SubString = 0,
        Class = 1,
        Reference = 2,
        ELODVolumeFilterType_MAX = 3,
    }
    public enum ECullCategory : int
    {
        NONE = 0,
        TRACERS = 1,
        SOUNDS_ATTACHED = 2,
        DECAL = 4,
        PROJECTILES = 8,
        ECullCategory_MAX = 9,
    }
    public enum EExperienceReason : int
    {
        Default = 0,
        Kill = 1,
        Reward = 2,
        EExperienceReason_MAX = 3,
    }
    public enum ETraitPointModType : int
    {
        Stat = 0,
        Equipment = 1,
        None = 2,
        ETraitPointModType_MAX = 3,
    }
    public enum EQuestEventTreeType : int
    {
        Default = 0,
        Interrupt = 1,
        DialogOption = 2,
        EQuestEventTreeType_MAX = 3,
    }
    public enum EQuestEntityOwnerContext : int
    {
        Quest = 0,
        Actor = 1,
        EQuestEntityOwnerContext_MAX = 2,
    }
    public enum EQuestState : int
    {
        None = 0,
        Active = 1,
        Complete = 2,
        EQuestState_MAX = 3,
    }
    public enum EQuestCreationStatus : int
    {
        AwatingCreation = 0,
        CreatingChildren = 1,
        Finished = 2,
        EQuestCreationStatus_MAX = 3,
    }
    public enum EQuestComponentStatus : int
    {
        Unloaded = 0,
        Loading = 1,
        ChildrenLoading = 2,
        Loaded = 3,
        EQuestComponentStatus_MAX = 4,
    }
    public enum EEquipmentTrackHandSetting : int
    {
        NoChange = 0,
        SetInHand = 1,
        SetNotInHand = 2,
        EEquipmentTrackHandSetting_MAX = 3,
    }
    public enum EEquipmentTrackStatusSetting : int
    {
        NoChange = 0,
        Equip = 1,
        Unequip = 2,
        EEquipmentTrackStatusSetting_MAX = 3,
    }
    public enum EPlayerPossessionType : int
    {
        NoPlayerPossession = 0,
        Local = 1,
        Instigator = 2,
        Player1 = 3,
        Player2 = 4,
        Player3 = 5,
        Player4 = 6,
        EPlayerPossessionType_MAX = 7,
    }
    public enum EPlayerPossessionGenderTarget : int
    {
        Male = 0,
        Female = 1,
        EPlayerPossessionGenderTarget_MAX = 2,
    }
    public enum ESpawnDelayType : int
    {
        DelayedSpawn = 0,
        DelayedTriggers = 1,
        DelayedSpawnAndTriggers = 2,
        Disabled = 3,
        ESpawnDelayType_MAX = 4,
    }
    public enum ESpawnPointType : int
    {
        Player = 0,
        Enemy = 1,
        ESpawnPointType_MAX = 2,
    }
    public enum ESpawnTableType : int
    {
        List = 0,
        Table = 1,
        TableGroup = 2,
        IndividualChance = 3,
        IndividualChanceOneShot = 4,
        ESpawnTableType_MAX = 5,
    }
    public enum ESpawnFlags : int
    {
        None = 0,
        NavMesh = 1,
        NavAccessible = 2,
        OutOfSight = 4,
        InView = 8,
        InFieldOfView = 16,
        ESpawnFlags_MAX = 17,
    }
    public enum ESpawnVisibility : int
    {
        DontCare = 0,
        OutOfSight = 1,
        InView = 2,
        InFieldOfView_OutOfSight = 3,
        ESpawnVisibility_MAX = 4,
    }
    public enum ESpawnFrom : int
    {
        Random = 0,
        Cardinal = 1,
        Front = 2,
        Behind = 3,
        ESpawnFrom_MAX = 4,
    }
    public enum ESpawnThrottling : int
    {
        NoThrottling = 0,
        ThrottleWeightOnPlayers = 1,
        ThrottleWeightFromAllSpawns = 2,
        ThrottleWeightFromEncounter = 3,
        ThrottleWeightFromOwnerEncounters = 4,
        ESpawnThrottling_MAX = 5,
    }
    public enum EAngleRef : int
    {
        Heading = 0,
        MoveDir = 1,
        InputDir = 2,
        ToTargetDir = 3,
        TacticalPointDir = 4,
        ToTacticalPoint = 5,
        CameraDir = 6,
        WorldUp = 7,
        Surface = 8,
        ToFollowTarget = 9,
        EAngleRef_MAX = 10,
    }
    public enum EAngleComponent : int
    {
        Yaw = 0,
        Pitch = 1,
        Roll = 2,
        EAngleComponent_MAX = 3,
    }
    public enum ButtonState : int
    {
        Pressed = 0,
        Released = 1,
        Down = 2,
        Up = 3,
        ButtonState_MAX = 4,
    }
    public enum ECliffWallCheckMethod : int
    {
        Front = 0,
        LeftRight = 1,
        ECliffWallCheckMethod_MAX = 2,
    }
    public enum EFallConditionCheck : int
    {
        IsNotFalling = 0,
        IsSafeFall = 1,
        IsUnsafeFall = 2,
        IsFatalFall = 3,
        IsUnsafeOrFatalFall = 4,
        IsFalling = 5,
        EFallConditionCheck_MAX = 6,
    }
    public enum EInspectableConditionCheck : int
    {
        IsOccupied = 0,
        IsInTransition = 1,
        IsInteractingActorLocal = 2,
        EInspectableConditionCheck_MAX = 3,
    }
    public enum ELastAttackCondition : int
    {
        AttackHitCharacter = 0,
        AttackHitEnvironment = 1,
        AttackWasBlocked = 2,
        AttackWasBlockCountered = 3,
        AttackWasEvaded = 4,
        ELastAttackCondition_MAX = 5,
    }
    public enum ELedgeGrabType : int
    {
        Solid = 0,
        Inset = 1,
        Hanging = 2,
        Cling = 3,
        ELedgeGrabType_MAX = 4,
    }
    public enum EMoveInputType : int
    {
        Full = 0,
        Horizontal = 1,
        Vertical = 2,
        Upwards = 3,
        Downwards = 4,
        EMoveInputType_MAX = 5,
    }
    public enum EGroundCheckType : int
    {
        OnGround = 0,
        NearGround = 1,
        EGroundCheckType_MAX = 2,
    }
    public enum ESwimmingType : int
    {
        Surface = 0,
        Underwater = 1,
        None = 2,
        ESwimmingType_MAX = 3,
    }
    public enum ESwimmingStateMethod : int
    {
        CurrentState = 0,
        Calculated = 1,
        ESwimmingStateMethod_MAX = 2,
    }
    public enum ETagLocation : int
    {
        Character = 0,
        Anim = 1,
        TacticalPoint = 2,
        ETagLocation_MAX = 3,
    }
    public enum EVaultQueryType : int
    {
        Walking = 0,
        Swimming = 1,
        EVaultQueryType_MAX = 2,
    }
    public enum EVaultDirectionType : int
    {
        Actor = 0,
        Input = 1,
        EVaultDirectionType_MAX = 2,
    }
    public enum EBlackboardVariableType : int
    {
        Object = 0,
        Class = 1,
        Int = 2,
        Float = 3,
        Bool = 4,
        String = 5,
        Name = 6,
        EBlackboardVariableType_MAX = 7,
    }
    public enum EVaultType : int
    {
        VaultOver = 0,
        VaultUp = 1,
        EVaultType_MAX = 2,
    }
    public enum EVelocityType : int
    {
        Full = 0,
        Horizontal = 1,
        Vertical = 2,
        EVelocityType_MAX = 3,
    }
    public enum EWallCheckType : int
    {
        Full = 0,
        Horizontal = 1,
        Vertical = 2,
        None = 3,
        EWallCheckType_MAX = 4,
    }
    public enum EWaterSurfaceDirection : int
    {
        On = 0,
        Above = 1,
        Below = 2,
        EWaterSurfaceDirection_MAX = 3,
    }
    public enum EClampVelocityHorizontalDirection : int
    {
        Current = 0,
        Input = 1,
        Facing = 2,
        EClampVelocityHorizontalDirection_MAX = 3,
    }
    public enum ECustomCollisionEnabled : int
    {
        Enabled = 0,
        Disabled = 1,
        ECustomCollisionEnabled_MAX = 2,
    }
    public enum ECooldownType : int
    {
        Named = 0,
        AllNames = 1,
        Global = 2,
        ECooldownType_MAX = 3,
    }
    public enum ECooldownScope : int
    {
        Local = 0,
        Target = 1,
        ECooldownScope_MAX = 2,
    }
    public enum ECooldownAction : int
    {
        SetCooldown = 0,
        ResetCooldown = 1,
        ResetCooldownOnExit = 2,
        ECooldownAction_MAX = 3,
    }
    public enum EDebugPrintContext : int
    {
        ACTOR = 0,
        SCREEN = 1,
        EDebugPrintContext_MAX = 2,
    }
    public enum EInitialFacing : int
    {
        MoveDir = 0,
        Camera = 1,
        Velocity = 2,
        Target = 3,
        TargetOnly = 4,
        Surface = 5,
        EInitialFacing_MAX = 6,
    }
    public enum HitReactionType : int
    {
        Flinch = 0,
        Impact = 1,
        HitLocationDestroyed = 2,
        KnockBack = 3,
        Death = 4,
        DeathKnockBack = 5,
        None = 6,
        HitReactionType_MAX = 7,
    }
    public enum EHitResult : int
    {
        Hit = 0,
        Evade = 1,
        Block = 2,
        EHitResult_MAX = 3,
    }
    public enum EJumpStateType : int
    {
        Approach = 0,
        Impulse = 1,
        EJumpStateType_MAX = 2,
    }
    public enum ELadderEntryType : int
    {
        BestApproch = 0,
        BottomOnly = 1,
        TopOnly = 2,
        ELadderEntryType_MAX = 3,
    }
    public enum ELadderDistanceAnimTag : int
    {
        None = 0,
        RungsFromTop = 1,
        RungsFromBottom = 2,
        ELadderDistanceAnimTag_MAX = 3,
    }
    public enum ELadderCacheType : int
    {
        NotCached = 0,
        TransitionCache = 1,
        DescriptorCache = 2,
        ELadderCacheType_MAX = 3,
    }
    public enum ELadderTrafficType : int
    {
        Occupancy = 0,
        Interest = 1,
        All = 2,
        ELadderTrafficType_MAX = 3,
    }
    public enum ELadderQueryType : int
    {
        Raycast = 0,
        Radial = 1,
        Bounds = 2,
        ELadderQueryType_MAX = 3,
    }
    public enum EInteractivePushForceLocation : int
    {
        None = 0,
        Anchor = 1,
        AnchorAlignedToInput = 2,
        NonAnchor = 3,
        EInteractivePushForceLocation_MAX = 4,
    }
    public enum EPushState : int
    {
        Idle = 0,
        Starting = 1,
        Pushing = 2,
        Stopping = 3,
        EPushState_MAX = 4,
    }
    public enum EPushIKMethod : int
    {
        SnapToPoint = 0,
        TraceForSurface = 1,
        EPushIKMethod_MAX = 2,
    }
    public enum EPushMethod : int
    {
        Impulse = 0,
        Torque = 1,
        EPushMethod_MAX = 2,
    }
    public enum EWaterSurfaceTraversalType : int
    {
        Emerge = 0,
        Submerge = 1,
        EWaterSurfaceTraversalType_MAX = 2,
    }
    public enum EAdvButtonType : int
    {
        NormalButton = 0,
        Radio = 1,
        Push = 2,
        EAdvButtonType_MAX = 3,
    }
    public enum ECursorInteractBehavior : int
    {
        Press = 0,
        Release = 1,
        UpAndDown = 2,
        ECursorInteractBehavior_MAX = 3,
    }
    public enum EReticuleDrawMode : int
    {
        RangedWeaponRequired = 0,
        AimCameraRequired = 1,
        AimCameraAndRangedWeaponRequired = 2,
        Always = 3,
        EReticuleDrawMode_MAX = 4,
    }
    public enum EDisabledWeaponVisuals : int
    {
        ShowDefaultReticule = 0,
        ShowDefaultReticuleWithDisabledColor = 1,
        ShowReticule = 2,
        ShowReticuleWithDisabledColor = 3,
        NoReticule = 4,
        EDisabledWeaponVisuals_MAX = 5,
    }
    public enum EAutoFocusTraversal : int
    {
        None = 0,
        Auto = 1,
        EAutoFocusTraversal_MAX = 2,
    }
    public enum ENotificationType : int
    {
        NewTrait = 0,
        UpgradedTrait = 1,
        Level = 2,
        Generic = 3,
        Item = 4,
        ItemUpgrade = 5,
        NewArchetype = 6,
        UpgradedArchetype = 7,
        AccountAward = 8,
        ENotificationType_MAX = 9,
    }
    public enum EDialogLocation : int
    {
        None = 0,
        Center = 1,
        CameraCenter = 2,
        HMDAnchor = 3,
        EDialogLocation_MAX = 4,
    }
    public enum EDialogBeginMethod : int
    {
        AddDuplicates = 0,
        AddIfNotOnTop = 1,
        AddIfNotOnStack = 2,
        EDialogBeginMethod_MAX = 3,
    }
    public enum EUIEaseType : int
    {
        EaseIn = 0,
        EaseOut = 1,
        EaseInOut = 2,
        SmoothCD = 3,
        EUIEaseType_MAX = 4,
    }
    public enum EQuantityValidationType : int
    {
        ValidateAnyChange = 0,
        ValidateIncrease = 1,
        ValidateDecrease = 2,
        NoValidation = 3,
        EQuantityValidationType_MAX = 4,
    }
    public enum EVarType : int
    {
        None = 0,
        Bool = 1,
        Int = 2,
        Float = 3,
        Name = 4,
        EVarType_MAX = 5,
    }
    public enum EStatementValue : int
    {
        Constant = 0,
        Variable = 1,
        Condition = 2,
        EStatementValue_MAX = 3,
    }
    public enum EStatementOp : int
    {
        GreaterThan = 0,
        LessThan = 1,
        GreaterThanEqual = 2,
        LessThanEqual = 3,
        Equal = 4,
        NotEqual = 5,
        Increment = 6,
        Decrement = 7,
        Assign = 8,
        EStatementOp_MAX = 9,
    }
    public class AITacticalPoint : Object
    {
        public AITacticalPoint(nint addr) : base(addr) { }
        public EAITacticalPointType Type { get { return (EAITacticalPointType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public Actor CustomTacticalPoint { get { return this[nameof(CustomTacticalPoint)].As<Actor>(); } set { this["CustomTacticalPoint"] = value; } }
    }
    public class SoftSoundGunfire : Object
    {
        public SoftSoundGunfire(nint addr) : base(addr) { }
        public Object RefToSoundObject { get { return this[nameof(RefToSoundObject)]; } set { this[nameof(RefToSoundObject)] = value; } }
    }
    public class StatData : TableRowBase
    {
        public StatData(nint addr) : base(addr) { }
    }
    public class VariableStatements : Object
    {
        public VariableStatements(nint addr) : base(addr) { }
        public Array<VariableStatement> Statements { get { return new Array<VariableStatement>(this[nameof(Statements)].Address); } }
    }
    public class VariableStatement : Object
    {
        public VariableStatement(nint addr) : base(addr) { }
        public Object ContextA { get { return this[nameof(ContextA)]; } set { this[nameof(ContextA)] = value; } }
        public VariableValue ValueA { get { return this[nameof(ValueA)].As<VariableValue>(); } set { this["ValueA"] = value; } }
        public EStatementValue TypeA { get { return (EStatementValue)this[nameof(TypeA)].GetValue<int>(); } set { this[nameof(TypeA)].SetValue<int>((int)value); } }
        public EStatementOp Operation { get { return (EStatementOp)this[nameof(Operation)].GetValue<int>(); } set { this[nameof(Operation)].SetValue<int>((int)value); } }
        public Object ContextB { get { return this[nameof(ContextB)]; } set { this[nameof(ContextB)] = value; } }
        public VariableValue ValueB { get { return this[nameof(ValueB)].As<VariableValue>(); } set { this["ValueB"] = value; } }
        public EStatementValue TypeB { get { return (EStatementValue)this[nameof(TypeB)].GetValue<int>(); } set { this[nameof(TypeB)].SetValue<int>((int)value); } }
        public float Expiration { get { return this[nameof(Expiration)].GetValue<float>(); } set { this[nameof(Expiration)].SetValue<float>(value); } }
    }
    public class VariableValue : Object
    {
        public VariableValue(nint addr) : base(addr) { }
    }
    public class ActorStateID : Object
    {
        public ActorStateID(nint addr) : base(addr) { }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
    }
    public class SoundSetSettings : Object
    {
        public SoundSetSettings(nint addr) : base(addr) { }
        public Object PreviewSoundSet { get { return this[nameof(PreviewSoundSet)]; } set { this[nameof(PreviewSoundSet)] = value; } }
        public Array<Object> PreviewTags { get { return new Array<Object>(this[nameof(PreviewTags)].Address); } }
    }
    public class CustomizationSetSettings : Object
    {
        public CustomizationSetSettings(nint addr) : base(addr) { }
        public Object CustomizationSet { get { return this[nameof(CustomizationSet)]; } set { this[nameof(CustomizationSet)] = value; } }
        public Array<Object> PreviewRequiredIDs { get { return new Array<Object>(this[nameof(PreviewRequiredIDs)].Address); } }
        public Array<Object> PreviewTags { get { return new Array<Object>(this[nameof(PreviewTags)].Address); } }
    }
    public class GunfireAudioPlayParams : Object
    {
        public GunfireAudioPlayParams(nint addr) : base(addr) { }
        //public GunfireAudioPlayParams_Wwise UserParams { get { return this[nameof(UserParams)].As<GunfireAudioPlayParams_Wwise>(); } set { this["UserParams"] = value; } }
        public float VolumeMultiplier { get { return this[nameof(VolumeMultiplier)].GetValue<float>(); } set { this[nameof(VolumeMultiplier)].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
        public float StartTime { get { return this[nameof(StartTime)].GetValue<float>(); } set { this[nameof(StartTime)].SetValue<float>(value); } }
        public bool bRandomizeStartTime { get { return this[nameof(bRandomizeStartTime)].Flag; } set { this[nameof(bRandomizeStartTime)].Flag = value; } }
        public float VolumeFadeDuration { get { return this[nameof(VolumeFadeDuration)].GetValue<float>(); } set { this[nameof(VolumeFadeDuration)].SetValue<float>(value); } }
        public bool bApplyReverb { get { return this[nameof(bApplyReverb)].Flag; } set { this[nameof(bApplyReverb)].Flag = value; } }
        public bool bApplyOcclusion { get { return this[nameof(bApplyOcclusion)].Flag; } set { this[nameof(bApplyOcclusion)].Flag = value; } }
        public bool bAutoDestroy { get { return this[nameof(bAutoDestroy)].Flag; } set { this[nameof(bAutoDestroy)].Flag = value; } }
    }
    public class GunfireAudioStopParams : Object
    {
        public GunfireAudioStopParams(nint addr) : base(addr) { }
        public float VolumeFadeDuration { get { return this[nameof(VolumeFadeDuration)].GetValue<float>(); } set { this[nameof(VolumeFadeDuration)].SetValue<float>(value); } }
    }
    public class GunfireAudioAttachParams : Object
    {
        public GunfireAudioAttachParams(nint addr) : base(addr) { }
        public Object AttachPointName { get { return this[nameof(AttachPointName)]; } set { this[nameof(AttachPointName)] = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public byte LocationType { get { return this[nameof(LocationType)].GetValue<byte>(); } set { this[nameof(LocationType)].SetValue<byte>(value); } }
        public byte StopWhenOwnerDestroyed { get { return this[nameof(StopWhenOwnerDestroyed)].GetValue<byte>(); } set { this[nameof(StopWhenOwnerDestroyed)].SetValue<byte>(value); } }
    }
    public class HardwareCursorImageProperties : Object
    {
        public HardwareCursorImageProperties(nint addr) : base(addr) { }
        public Object CursorImagePath { get { return this[nameof(CursorImagePath)]; } set { this[nameof(CursorImagePath)] = value; } }
        public Object CursorImagePathHighRes { get { return this[nameof(CursorImagePathHighRes)]; } set { this[nameof(CursorImagePathHighRes)] = value; } }
        public Vector2D CursorHotSpot { get { return this[nameof(CursorHotSpot)].As<Vector2D>(); } set { this["CursorHotSpot"] = value; } }
    }
    public class HardwareCursorStyles : Object
    {
        public HardwareCursorStyles(nint addr) : base(addr) { }
        public Object HardwareCursorStyles_value { get { return this[nameof(HardwareCursorStyles)]; } set { this[nameof(HardwareCursorStyles)] = value; } }
    }
    public class IkEffector : Object
    {
        public IkEffector(nint addr) : base(addr) { }
        public Object IkBone { get { return this[nameof(IkBone)]; } set { this[nameof(IkBone)] = value; } }
        public float Alpha { get { return this[nameof(Alpha)].GetValue<float>(); } set { this[nameof(Alpha)].SetValue<float>(value); } }
        public Transform ComponentSpaceTransform { get { return this[nameof(ComponentSpaceTransform)].As<Transform>(); } set { this["ComponentSpaceTransform"] = value; } }
    }
    public class InteractiveConditions : Object
    {
        public InteractiveConditions(nint addr) : base(addr) { }
        public ELogicalOperator LogicalOperator { get { return (ELogicalOperator)this[nameof(LogicalOperator)].GetValue<int>(); } set { this[nameof(LogicalOperator)].SetValue<int>((int)value); } }
        public Array<Condition> Conditions { get { return new Array<Condition>(this[nameof(Conditions)].Address); } }
    }
    public class InventoryItem : Object
    {
        public InventoryItem(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
        public bool New { get { return this[nameof(New)].Flag; } set { this[nameof(New)].Flag = value; } }
        public bool Favorited { get { return this[nameof(Favorited)].Flag; } set { this[nameof(Favorited)].Flag = value; } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
        public int EquipmentSlotIndex { get { return this[nameof(EquipmentSlotIndex)].GetValue<int>(); } set { this[nameof(EquipmentSlotIndex)].SetValue<int>(value); } }
        public ItemInstanceData InstanceData { get { return this[nameof(InstanceData)].As<ItemInstanceData>(); } set { this["InstanceData"] = value; } }
        public Equipment EquippedActor { get { return this[nameof(EquippedActor)].As<Equipment>(); } set { this["EquippedActor"] = value; } }
    }
    public class EquipmentModSlot : Object
    {
        public EquipmentModSlot(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public int RequiredLevel { get { return this[nameof(RequiredLevel)].GetValue<int>(); } set { this[nameof(RequiredLevel)].SetValue<int>(value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public Object DefaultMod { get { return this[nameof(DefaultMod)]; } set { this[nameof(DefaultMod)] = value; } }
        public byte DefaultModLevel { get { return this[nameof(DefaultModLevel)].GetValue<byte>(); } set { this[nameof(DefaultModLevel)].SetValue<byte>(value); } }
    }
    public class EquipmentModData : Object
    {
        public EquipmentModData(nint addr) : base(addr) { }
        public byte ModSlot { get { return this[nameof(ModSlot)].GetValue<byte>(); } set { this[nameof(ModSlot)].SetValue<byte>(value); } }
        public Object Mod { get { return this[nameof(Mod)]; } set { this[nameof(Mod)] = value; } }
        public int ModItemID { get { return this[nameof(ModItemID)].GetValue<int>(); } set { this[nameof(ModItemID)].SetValue<int>(value); } }
        public byte ModLevel { get { return this[nameof(ModLevel)].GetValue<byte>(); } set { this[nameof(ModLevel)].SetValue<byte>(value); } }
    }
    public class MusicSetInstanceData : Object
    {
        public MusicSetInstanceData(nint addr) : base(addr) { }
        public EMusicState CurrentState { get { return (EMusicState)this[nameof(CurrentState)].GetValue<int>(); } set { this[nameof(CurrentState)].SetValue<int>((int)value); } }
        public bool bIsPlaying { get { return this[nameof(bIsPlaying)].Flag; } set { this[nameof(bIsPlaying)].Flag = value; } }
        public Array<AudioComponentGunfire> AudioComponents { get { return new Array<AudioComponentGunfire>(this[nameof(AudioComponents)].Address); } }
    }
    public class AudioComponentGunfire : Object
    {
        public AudioComponentGunfire(nint addr) : base(addr) { }
        public SceneComponent AudioComponent { get { return this[nameof(AudioComponent)].As<SceneComponent>(); } set { this["AudioComponent"] = value; } }
    }
    public class PhantomKeyframe : Object
    {
        public PhantomKeyframe(nint addr) : base(addr) { }
    }
    public class WeaponPhantomShape : Object
    {
        public WeaponPhantomShape(nint addr) : base(addr) { }
        public Object Primitive { get { return this[nameof(Primitive)]; } set { this[nameof(Primitive)] = value; } }
        public EWeaponPhantomGeometryType Type { get { return (EWeaponPhantomGeometryType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class WeaponPhantomInfo : Object
    {
        public WeaponPhantomInfo(nint addr) : base(addr) { }
        public PrimitiveComponent InitialShape { get { return this[nameof(InitialShape)].As<PrimitiveComponent>(); } set { this["InitialShape"] = value; } }
        public Array<WeaponPhantomShape> Shapes { get { return new Array<WeaponPhantomShape>(this[nameof(Shapes)].Address); } }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public Object ImpactDirection { get { return this[nameof(ImpactDirection)]; } set { this[nameof(ImpactDirection)] = value; } }
        public ImpactEffectDescriptor ImpactEffectDescriptor { get { return this[nameof(ImpactEffectDescriptor)].As<ImpactEffectDescriptor>(); } set { this["ImpactEffectDescriptor"] = value; } }
        public Object EffectBone { get { return this[nameof(EffectBone)]; } set { this[nameof(EffectBone)] = value; } }
        public EEffectSpawnDirection EffectSpawnDirection { get { return (EEffectSpawnDirection)this[nameof(EffectSpawnDirection)].GetValue<int>(); } set { this[nameof(EffectSpawnDirection)].SetValue<int>((int)value); } }
        public Rotator EffectOrientation { get { return this[nameof(EffectOrientation)].As<Rotator>(); } set { this["EffectOrientation"] = value; } }
        public float DamageMod { get { return this[nameof(DamageMod)].GetValue<float>(); } set { this[nameof(DamageMod)].SetValue<float>(value); } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public bool Blockable { get { return this[nameof(Blockable)].Flag; } set { this[nameof(Blockable)].Flag = value; } }
        public bool Evadable { get { return this[nameof(Evadable)].Flag; } set { this[nameof(Evadable)].Flag = value; } }
        public int PowerOverride { get { return this[nameof(PowerOverride)].GetValue<int>(); } set { this[nameof(PowerOverride)].SetValue<int>(value); } }
        public float HitCooldown { get { return this[nameof(HitCooldown)].GetValue<float>(); } set { this[nameof(HitCooldown)].SetValue<float>(value); } }
        public Object GroupName { get { return this[nameof(GroupName)]; } set { this[nameof(GroupName)] = value; } }
        public int GroupPriority { get { return this[nameof(GroupPriority)].GetValue<int>(); } set { this[nameof(GroupPriority)].SetValue<int>(value); } }
        public bool bPersistentCooldown { get { return this[nameof(bPersistentCooldown)].Flag; } set { this[nameof(bPersistentCooldown)].Flag = value; } }
        public bool IgnoreEnvironmentHits { get { return this[nameof(IgnoreEnvironmentHits)].Flag; } set { this[nameof(IgnoreEnvironmentHits)].Flag = value; } }
        public bool IgnoreLagSupersampling { get { return this[nameof(IgnoreLagSupersampling)].Flag; } set { this[nameof(IgnoreLagSupersampling)].Flag = value; } }
        public bool bIgnoreDistanceChecks { get { return this[nameof(bIgnoreDistanceChecks)].Flag; } set { this[nameof(bIgnoreDistanceChecks)].Flag = value; } }
        public EWeaponPhantomCollisionCheckMethod CollisionCheckMethod { get { return (EWeaponPhantomCollisionCheckMethod)this[nameof(CollisionCheckMethod)].GetValue<int>(); } set { this[nameof(CollisionCheckMethod)].SetValue<int>((int)value); } }
        public float CollisionCheckRadius { get { return this[nameof(CollisionCheckRadius)].GetValue<float>(); } set { this[nameof(CollisionCheckRadius)].SetValue<float>(value); } }
    }
    public class ImpactEffectDescriptor : Object
    {
        public ImpactEffectDescriptor(nint addr) : base(addr) { }
        public ImpactEffectSelector Effect { get { return this[nameof(Effect)].As<ImpactEffectSelector>(); } set { this["Effect"] = value; } }
        public ImpactEffectSelector Overlay { get { return this[nameof(Overlay)].As<ImpactEffectSelector>(); } set { this["Overlay"] = value; } }
    }
    public class ImpactEffectSelector : Object
    {
        public ImpactEffectSelector(nint addr) : base(addr) { }
        public Object ImpactEffectName { get { return this[nameof(ImpactEffectName)]; } set { this[nameof(ImpactEffectName)] = value; } }
    }
    public class ActorCustomizationSlot : Object
    {
        public ActorCustomizationSlot(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object DefaultCustomizationID { get { return this[nameof(DefaultCustomizationID)]; } set { this[nameof(DefaultCustomizationID)] = value; } }
        public Object CustomizationID { get { return this[nameof(CustomizationID)]; } set { this[nameof(CustomizationID)] = value; } }
        public ActorCustomizationID PendingCustomization { get { return this[nameof(PendingCustomization)].As<ActorCustomizationID>(); } set { this["PendingCustomization"] = value; } }
        public ActorCustomizationID CachedCustomization { get { return this[nameof(CachedCustomization)].As<ActorCustomizationID>(); } set { this["CachedCustomization"] = value; } }
        public bool IsTransient { get { return this[nameof(IsTransient)].Flag; } set { this[nameof(IsTransient)].Flag = value; } }
    }
    public class ActorCustomizationMaterialParam : Object
    {
        public ActorCustomizationMaterialParam(nint addr) : base(addr) { }
        public bool AllMaterials { get { return this[nameof(AllMaterials)].Flag; } set { this[nameof(AllMaterials)].Flag = value; } }
        public bool AllMeshes { get { return this[nameof(AllMeshes)].Flag; } set { this[nameof(AllMeshes)].Flag = value; } }
        public Object SlotName { get { return this[nameof(SlotName)]; } set { this[nameof(SlotName)] = value; } }
        public EActorCustomizationMaterialParameterType ParameterType { get { return (EActorCustomizationMaterialParameterType)this[nameof(ParameterType)].GetValue<int>(); } set { this[nameof(ParameterType)].SetValue<int>((int)value); } }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public float ScalarValue { get { return this[nameof(ScalarValue)].GetValue<float>(); } set { this[nameof(ScalarValue)].SetValue<float>(value); } }
        public LinearColor ColorValue { get { return this[nameof(ColorValue)].As<LinearColor>(); } set { this["ColorValue"] = value; } }
        public Object TextureValue { get { return this[nameof(TextureValue)]; } set { this[nameof(TextureValue)] = value; } }
        public EEaseType EaseValue { get { return (EEaseType)this[nameof(EaseValue)].GetValue<int>(); } set { this[nameof(EaseValue)].SetValue<int>((int)value); } }
        public EParamApply ApplyValue { get { return (EParamApply)this[nameof(ApplyValue)].GetValue<int>(); } set { this[nameof(ApplyValue)].SetValue<int>((int)value); } }
        public bool bUseManualTweenFrom { get { return this[nameof(bUseManualTweenFrom)].Flag; } set { this[nameof(bUseManualTweenFrom)].Flag = value; } }
        public float TweenFrom { get { return this[nameof(TweenFrom)].GetValue<float>(); } set { this[nameof(TweenFrom)].SetValue<float>(value); } }
        public float TweenTo { get { return this[nameof(TweenTo)].GetValue<float>(); } set { this[nameof(TweenTo)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float Exponent { get { return this[nameof(Exponent)].GetValue<float>(); } set { this[nameof(Exponent)].SetValue<float>(value); } }
    }
    public class ActorCustomizationMaterialReplacement : Object
    {
        public ActorCustomizationMaterialReplacement(nint addr) : base(addr) { }
        public Object SlotName { get { return this[nameof(SlotName)]; } set { this[nameof(SlotName)] = value; } }
        public Object Material { get { return this[nameof(Material)]; } set { this[nameof(Material)] = value; } }
        public bool bAllMeshes { get { return this[nameof(bAllMeshes)].Flag; } set { this[nameof(bAllMeshes)].Flag = value; } }
    }
    public class RandomMesh : Object
    {
        public RandomMesh(nint addr) : base(addr) { }
        public Array<Object> VisualTags { get { return new Array<Object>(this[nameof(VisualTags)].Address); } }
        public Array<Object> AnimSoundTags { get { return new Array<Object>(this[nameof(AnimSoundTags)].Address); } }
        public Array<ActorCustomizationMaterialReplacement> MaterialReplacements { get { return new Array<ActorCustomizationMaterialReplacement>(this[nameof(MaterialReplacements)].Address); } }
        public Array<ActorCustomizationMaterialParam> MaterialParams { get { return new Array<ActorCustomizationMaterialParam>(this[nameof(MaterialParams)].Address); } }
    }
    public class RandomSkinMesh : RandomMesh
    {
        public RandomSkinMesh(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
    }
    public class RandomStaticMesh : RandomMesh
    {
        public RandomStaticMesh(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
    }
    public class AINavigationLink : NavigationLinkBase
    {
        public AINavigationLink(nint addr) : base(addr) { }
        public Vector Left { get { return this[nameof(Left)].As<Vector>(); } set { this["Left"] = value; } }
        public Vector Right { get { return this[nameof(Right)].As<Vector>(); } set { this["Right"] = value; } }
    }
    public class SpawnPointTransform : Object
    {
        public SpawnPointTransform(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Rotator Direction { get { return this[nameof(Direction)].As<Rotator>(); } set { this["Direction"] = value; } }
    }
    public class SpawnPointList : Object
    {
        public SpawnPointList(nint addr) : base(addr) { }
        public Object SpawnPointBP { get { return this[nameof(SpawnPointBP)]; } set { this[nameof(SpawnPointBP)] = value; } }
        public Array<SpawnPointTransform> Points { get { return new Array<SpawnPointTransform>(this[nameof(Points)].Address); } }
    }
    public class OwnedAIData : Object
    {
        public OwnedAIData(nint addr) : base(addr) { }
        public uint OwnerId { get { return this[nameof(OwnerId)].GetValue<uint>(); } set { this[nameof(OwnerId)].SetValue<uint>(value); } }
        public int NumTacticalPoints { get { return this[nameof(NumTacticalPoints)].GetValue<int>(); } set { this[nameof(NumTacticalPoints)].SetValue<int>(value); } }
        public int FirstTacticalPoint { get { return this[nameof(FirstTacticalPoint)].GetValue<int>(); } set { this[nameof(FirstTacticalPoint)].SetValue<int>(value); } }
        public int NumNavLinks { get { return this[nameof(NumNavLinks)].GetValue<int>(); } set { this[nameof(NumNavLinks)].SetValue<int>(value); } }
        public int FirstNavLink { get { return this[nameof(FirstNavLink)].GetValue<int>(); } set { this[nameof(FirstNavLink)].SetValue<int>(value); } }
        public int NumDisabledNavLinks { get { return this[nameof(NumDisabledNavLinks)].GetValue<int>(); } set { this[nameof(NumDisabledNavLinks)].SetValue<int>(value); } }
        public int FirstDisabledNavLink { get { return this[nameof(FirstDisabledNavLink)].GetValue<int>(); } set { this[nameof(FirstDisabledNavLink)].SetValue<int>(value); } }
    }
    public class SpawnGenerator : Object
    {
        public SpawnGenerator(nint addr) : base(addr) { }
        public Object EnvironmentQuery { get { return this[nameof(EnvironmentQuery)]; } set { this[nameof(EnvironmentQuery)] = value; } }
        public Object SpawnPointBP { get { return this[nameof(SpawnPointBP)]; } set { this[nameof(SpawnPointBP)] = value; } }
    }
    public class AIPathBranchPoint : Object
    {
        public AIPathBranchPoint(nint addr) : base(addr) { }
        public AIPathPoint Point { get { return this[nameof(Point)].As<AIPathPoint>(); } set { this["Point"] = value; } }
        public int Chance { get { return this[nameof(Chance)].GetValue<int>(); } set { this[nameof(Chance)].SetValue<int>(value); } }
        public float Cooldown { get { return this[nameof(Cooldown)].GetValue<float>(); } set { this[nameof(Cooldown)].SetValue<float>(value); } }
    }
    public class PerNodePathSharingData : Object
    {
        public PerNodePathSharingData(nint addr) : base(addr) { }
    }
    public class FollowTargetData : Object
    {
        public FollowTargetData(nint addr) : base(addr) { }
        public CharacterGunfire Target { get { return this[nameof(Target)].As<CharacterGunfire>(); } set { this["Target"] = value; } }
        public Array<CharacterGunfire> FollowingCharacters { get { return new Array<CharacterGunfire>(this[nameof(FollowingCharacters)].Address); } }
    }
    public class AnimationHandle : Object
    {
        public AnimationHandle(nint addr) : base(addr) { }
        public AnimInstanceGunfire AnimInstance { get { return this[nameof(AnimInstance)].As<AnimInstanceGunfire>(); } set { this["AnimInstance"] = value; } }
        public AnimMontage Montage { get { return this[nameof(Montage)].As<AnimMontage>(); } set { this["Montage"] = value; } }
        public float AnimLength { get { return this[nameof(AnimLength)].GetValue<float>(); } set { this[nameof(AnimLength)].SetValue<float>(value); } }
    }
    public class AnimationSetBlendParameter : Object
    {
        public AnimationSetBlendParameter(nint addr) : base(addr) { }
        public bool bUseCustomParameterName { get { return this[nameof(bUseCustomParameterName)].Flag; } set { this[nameof(bUseCustomParameterName)].Flag = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public int ParameterIndex { get { return this[nameof(ParameterIndex)].GetValue<int>(); } set { this[nameof(ParameterIndex)].SetValue<int>(value); } }
    }
    public class AnimationSetBlendspace : Object
    {
        public AnimationSetBlendspace(nint addr) : base(addr) { }
        public BlendSpace BlendSpace { get { return this[nameof(BlendSpace)].As<BlendSpace>(); } set { this["BlendSpace"] = value; } }
        public AnimationSetBlendParameter ParameterX { get { return this[nameof(ParameterX)].As<AnimationSetBlendParameter>(); } set { this["ParameterX"] = value; } }
        public AnimationSetBlendParameter ParameterY { get { return this[nameof(ParameterY)].As<AnimationSetBlendParameter>(); } set { this["ParameterY"] = value; } }
    }
    public class AnimationEntry : Object
    {
        public AnimationEntry(nint addr) : base(addr) { }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Array<AnimSequenceBase> Animations { get { return new Array<AnimSequenceBase>(this[nameof(Animations)].Address); } }
        public Array<AnimSequenceBase> SlaveAnimations { get { return new Array<AnimSequenceBase>(this[nameof(SlaveAnimations)].Address); } }
    }
    public class AnimationID : Object
    {
        public AnimationID(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public float StartTime { get { return this[nameof(StartTime)].GetValue<float>(); } set { this[nameof(StartTime)].SetValue<float>(value); } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public float BlendOut { get { return this[nameof(BlendOut)].GetValue<float>(); } set { this[nameof(BlendOut)].SetValue<float>(value); } }
        public bool Loop { get { return this[nameof(Loop)].Flag; } set { this[nameof(Loop)].Flag = value; } }
        public bool ResetOnReplay { get { return this[nameof(ResetOnReplay)].Flag; } set { this[nameof(ResetOnReplay)].Flag = value; } }
        public Object SyncGroupName { get { return this[nameof(SyncGroupName)]; } set { this[nameof(SyncGroupName)] = value; } }
        public bool AutoBlendOutMontage { get { return this[nameof(AutoBlendOutMontage)].Flag; } set { this[nameof(AutoBlendOutMontage)].Flag = value; } }
        public Array<AnimationEntry> Entries { get { return new Array<AnimationEntry>(this[nameof(Entries)].Address); } }
    }
    public class AnimationLayerInputs : Object
    {
        public AnimationLayerInputs(nint addr) : base(addr) { }
        public Object CurrentAnimationID { get { return this[nameof(CurrentAnimationID)]; } set { this[nameof(CurrentAnimationID)] = value; } }
        public AnimationNamed Animation { get { return this[nameof(Animation)].As<AnimationNamed>(); } set { this["Animation"] = value; } }
    }
    public class AnimationLayerOutputs : Object
    {
        public AnimationLayerOutputs(nint addr) : base(addr) { }
        public Object AnimationAssetName { get { return this[nameof(AnimationAssetName)]; } set { this[nameof(AnimationAssetName)] = value; } }
        public float AnimationTime { get { return this[nameof(AnimationTime)].GetValue<float>(); } set { this[nameof(AnimationTime)].SetValue<float>(value); } }
        public float AnimationTimeFraction { get { return this[nameof(AnimationTimeFraction)].GetValue<float>(); } set { this[nameof(AnimationTimeFraction)].SetValue<float>(value); } }
    }
    public class AnimationLayer : Object
    {
        public AnimationLayer(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public AnimationSet AnimationSet { get { return this[nameof(AnimationSet)].As<AnimationSet>(); } set { this["AnimationSet"] = value; } }
        public Object AnimationMontageSlot { get { return this[nameof(AnimationMontageSlot)]; } set { this[nameof(AnimationMontageSlot)] = value; } }
        public AnimationLayerInputs LayerInputs { get { return this[nameof(LayerInputs)].As<AnimationLayerInputs>(); } set { this["LayerInputs"] = value; } }
        public AnimationLayerOutputs LayerOutputs { get { return this[nameof(LayerOutputs)].As<AnimationLayerOutputs>(); } set { this["LayerOutputs"] = value; } }
        public Array<AnimMontage> Montages { get { return new Array<AnimMontage>(this[nameof(Montages)].Address); } }
        public Array<AnimationNamed> TransientAnimations { get { return new Array<AnimationNamed>(this[nameof(TransientAnimations)].Address); } }
    }
    public class GunfireAnimInstanceProxy : AnimInstanceProxy
    {
        public GunfireAnimInstanceProxy(nint addr) : base(addr) { }
        public Array<AnimationLayer> AnimationLayers { get { return new Array<AnimationLayer>(this[nameof(AnimationLayers)].Address); } }
    }
    public class AnimNode_3DBlend : AnimNode_Base
    {
        public AnimNode_3DBlend(nint addr) : base(addr) { }
        public float Z { get { return this[nameof(Z)].GetValue<float>(); } set { this[nameof(Z)].SetValue<float>(value); } }
        public Array<float> Heights { get { return new Array<float>(this[nameof(Heights)].Address); } }
        public Array<PoseLink> Samples { get { return new Array<PoseLink>(this[nameof(Samples)].Address); } }
        public InterpolationParameter InputInterpolation { get { return this[nameof(InputInterpolation)].As<InterpolationParameter>(); } set { this["InputInterpolation"] = value; } }
        public float TargetWeightInterpolationSpeedPerSec { get { return this[nameof(TargetWeightInterpolationSpeedPerSec)].GetValue<float>(); } set { this[nameof(TargetWeightInterpolationSpeedPerSec)].SetValue<float>(value); } }
        public Array<float> BlendWeights { get { return new Array<float>(this[nameof(BlendWeights)].Address); } }
    }
    public class AnimNode_PlayAnimSetAnim : AnimNode_AssetPlayerBase
    {
        public AnimNode_PlayAnimSetAnim(nint addr) : base(addr) { }
        public AnimationSet AnimationSet { get { return this[nameof(AnimationSet)].As<AnimationSet>(); } set { this["AnimationSet"] = value; } }
        public AnimationNamed Animation { get { return this[nameof(Animation)].As<AnimationNamed>(); } set { this["Animation"] = value; } }
        public AnimationAssetTagged AssetEntry { get { return this[nameof(AssetEntry)].As<AnimationAssetTagged>(); } set { this["AssetEntry"] = value; } }
        public AnimSequenceBase Sequence { get { return this[nameof(Sequence)].As<AnimSequenceBase>(); } set { this["Sequence"] = value; } }
        public AnimationSetBlendspace BlendSpace { get { return this[nameof(BlendSpace)].As<AnimationSetBlendspace>(); } set { this["BlendSpace"] = value; } }
        public AnimNode_DirectionalAnimationPlayer DirectionalPlayer { get { return this[nameof(DirectionalPlayer)].As<AnimNode_DirectionalAnimationPlayer>(); } set { this["DirectionalPlayer"] = value; } }
        public PoseLink BasePose { get { return this[nameof(BasePose)].As<PoseLink>(); } set { this["BasePose"] = value; } }
    }
    public class AnimNode_DirectionalAnimationPlayer : AnimNode_AssetPlayerBase
    {
        public AnimNode_DirectionalAnimationPlayer(nint addr) : base(addr) { }
        public Array<AnimSequenceBase> SequenceSamples { get { return new Array<AnimSequenceBase>(this[nameof(SequenceSamples)].Address); } }
        public float Direction { get { return this[nameof(Direction)].GetValue<float>(); } set { this[nameof(Direction)].SetValue<float>(value); } }
        public float VerticalDirection { get { return this[nameof(VerticalDirection)].GetValue<float>(); } set { this[nameof(VerticalDirection)].SetValue<float>(value); } }
        public EDirectionalAnimationComponent DirectionToTest { get { return (EDirectionalAnimationComponent)this[nameof(DirectionToTest)].GetValue<int>(); } set { this[nameof(DirectionToTest)].SetValue<int>((int)value); } }
        public bool bApplyDistanceMatching { get { return this[nameof(bApplyDistanceMatching)].Flag; } set { this[nameof(bApplyDistanceMatching)].Flag = value; } }
        public float PlayRate { get { return this[nameof(PlayRate)].GetValue<float>(); } set { this[nameof(PlayRate)].SetValue<float>(value); } }
        public Array<float> BlendWeights { get { return new Array<float>(this[nameof(BlendWeights)].Address); } }
        public Array<int> PosesToEvaluate { get { return new Array<int>(this[nameof(PosesToEvaluate)].Address); } }
    }
    public class AnimNode_BlendByAnimationID_Animation : Object
    {
        public AnimNode_BlendByAnimationID_Animation(nint addr) : base(addr) { }
        public Object AnimationID { get { return this[nameof(AnimationID)]; } set { this[nameof(AnimationID)] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
    }
    public class AnimNode_BlendByAnimationID_Anim : Object
    {
        public AnimNode_BlendByAnimationID_Anim(nint addr) : base(addr) { }
        public AnimNode_PlayAnimSetAnim AssetPlayer { get { return this[nameof(AssetPlayer)].As<AnimNode_PlayAnimSetAnim>(); } set { this["AssetPlayer"] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
    }
    public class AnimNode_BlendByAnimationID_Parameter : Object
    {
        public AnimNode_BlendByAnimationID_Parameter(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public bool bAutoBindToProperty { get { return this[nameof(bAutoBindToProperty)].Flag; } set { this[nameof(bAutoBindToProperty)].Flag = value; } }
    }
    public class AnimNode_BlendByAnimationID : AnimNode_Base
    {
        public AnimNode_BlendByAnimationID(nint addr) : base(addr) { }
        public PoseLink BasePose { get { return this[nameof(BasePose)].As<PoseLink>(); } set { this["BasePose"] = value; } }
        public Array<PoseLink> BlendPose { get { return new Array<PoseLink>(this[nameof(BlendPose)].Address); } }
        public Array<float> Inputs { get { return new Array<float>(this[nameof(Inputs)].Address); } }
        public Array<AnimNode_BlendByAnimationID_Parameter> InputParameters { get { return new Array<AnimNode_BlendByAnimationID_Parameter>(this[nameof(InputParameters)].Address); } }
        public Array<AnimNode_BlendByAnimationID_Animation> Animations { get { return new Array<AnimNode_BlendByAnimationID_Animation>(this[nameof(Animations)].Address); } }
        public Object AnimationLayerID { get { return this[nameof(AnimationLayerID)]; } set { this[nameof(AnimationLayerID)] = value; } }
        public bool bReinitializeOnBecomingRelevant { get { return this[nameof(bReinitializeOnBecomingRelevant)].Flag; } set { this[nameof(bReinitializeOnBecomingRelevant)].Flag = value; } }
        public EAlphaBlendOption BlendType { get { return (EAlphaBlendOption)this[nameof(BlendType)].GetValue<int>(); } set { this[nameof(BlendType)].SetValue<int>((int)value); } }
        public AnimNode_BlendByAnimationID_Anim ActiveAnims { get { return this[nameof(ActiveAnims)].As<AnimNode_BlendByAnimationID_Anim>(); } set { this["ActiveAnims"] = value; } }
        public Array<BlendSampleData> PerBoneSampleData { get { return new Array<BlendSampleData>(this[nameof(PerBoneSampleData)].Address); } }
    }
    public class AnimNode_BlendByAnimTags_Entry : Object
    {
        public AnimNode_BlendByAnimTags_Entry(nint addr) : base(addr) { }
        public Array<Object> AnimTags { get { return new Array<Object>(this[nameof(AnimTags)].Address); } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
    }
    public class AnimNode_BlendByAnimTags : AnimNode_Base
    {
        public AnimNode_BlendByAnimTags(nint addr) : base(addr) { }
        public Array<PoseLink> BlendPose { get { return new Array<PoseLink>(this[nameof(BlendPose)].Address); } }
        public Array<AnimNode_BlendByAnimTags_Entry> Entries { get { return new Array<AnimNode_BlendByAnimTags_Entry>(this[nameof(Entries)].Address); } }
        public EAlphaBlendOption BlendType { get { return (EAlphaBlendOption)this[nameof(BlendType)].GetValue<int>(); } set { this[nameof(BlendType)].SetValue<int>((int)value); } }
        public CurveFloat CustomBlendCurve { get { return this[nameof(CustomBlendCurve)].As<CurveFloat>(); } set { this["CustomBlendCurve"] = value; } }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
        public Array<AlphaBlend> Blends { get { return new Array<AlphaBlend>(this[nameof(Blends)].Address); } }
        public Array<float> BlendWeights { get { return new Array<float>(this[nameof(BlendWeights)].Address); } }
        public Array<float> RemainingBlendTimes { get { return new Array<float>(this[nameof(RemainingBlendTimes)].Address); } }
        public int LastActiveChildIndex { get { return this[nameof(LastActiveChildIndex)].GetValue<int>(); } set { this[nameof(LastActiveChildIndex)].SetValue<int>(value); } }
        public Array<BlendSampleData> PerBoneSampleData { get { return new Array<BlendSampleData>(this[nameof(PerBoneSampleData)].Address); } }
        public bool bReinitializeOnBecomingRelevant { get { return this[nameof(bReinitializeOnBecomingRelevant)].Flag; } set { this[nameof(bReinitializeOnBecomingRelevant)].Flag = value; } }
        public bool bResetOnActivation { get { return this[nameof(bResetOnActivation)].Flag; } set { this[nameof(bResetOnActivation)].Flag = value; } }
        public bool bDynamicEvaluateActivePose { get { return this[nameof(bDynamicEvaluateActivePose)].Flag; } set { this[nameof(bDynamicEvaluateActivePose)].Flag = value; } }
    }
    public class AnimNode_BlendListByTime : AnimNode_BlendListBase
    {
        public AnimNode_BlendListByTime(nint addr) : base(addr) { }
        public float TransitionDelay { get { return this[nameof(TransitionDelay)].GetValue<float>(); } set { this[nameof(TransitionDelay)].SetValue<float>(value); } }
        public bool bReinitializeOnBecomingRelevant { get { return this[nameof(bReinitializeOnBecomingRelevant)].Flag; } set { this[nameof(bReinitializeOnBecomingRelevant)].Flag = value; } }
    }
    public class AnimNode_CompositeBlendSpacePlayer : AnimNode_AssetPlayerBase
    {
        public AnimNode_CompositeBlendSpacePlayer(nint addr) : base(addr) { }
        public float InitialX { get { return this[nameof(InitialX)].GetValue<float>(); } set { this[nameof(InitialX)].SetValue<float>(value); } }
        public float InitialY { get { return this[nameof(InitialY)].GetValue<float>(); } set { this[nameof(InitialY)].SetValue<float>(value); } }
        public float InitialZ { get { return this[nameof(InitialZ)].GetValue<float>(); } set { this[nameof(InitialZ)].SetValue<float>(value); } }
        public float LoopingX { get { return this[nameof(LoopingX)].GetValue<float>(); } set { this[nameof(LoopingX)].SetValue<float>(value); } }
        public float LoopingY { get { return this[nameof(LoopingY)].GetValue<float>(); } set { this[nameof(LoopingY)].SetValue<float>(value); } }
        public float LoopingZ { get { return this[nameof(LoopingZ)].GetValue<float>(); } set { this[nameof(LoopingZ)].SetValue<float>(value); } }
        public BlendSpace InitialBlendSpace { get { return this[nameof(InitialBlendSpace)].As<BlendSpace>(); } set { this["InitialBlendSpace"] = value; } }
        public BlendSpace LoopingBlendSpace { get { return this[nameof(LoopingBlendSpace)].As<BlendSpace>(); } set { this["LoopingBlendSpace"] = value; } }
        public float PlayRate { get { return this[nameof(PlayRate)].GetValue<float>(); } set { this[nameof(PlayRate)].SetValue<float>(value); } }
        public float InitialBlendSpaceStopTime { get { return this[nameof(InitialBlendSpaceStopTime)].GetValue<float>(); } set { this[nameof(InitialBlendSpaceStopTime)].SetValue<float>(value); } }
        public float LoopingBlendspaceStartTime { get { return this[nameof(LoopingBlendspaceStartTime)].GetValue<float>(); } set { this[nameof(LoopingBlendspaceStartTime)].SetValue<float>(value); } }
        public EAlphaBlendOption BlendType { get { return (EAlphaBlendOption)this[nameof(BlendType)].GetValue<int>(); } set { this[nameof(BlendType)].SetValue<int>((int)value); } }
        public CurveFloat CustomBlendCurve { get { return this[nameof(CustomBlendCurve)].As<CurveFloat>(); } set { this["CustomBlendCurve"] = value; } }
        public BlendProfile BlendProfile { get { return this[nameof(BlendProfile)].As<BlendProfile>(); } set { this["BlendProfile"] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
        public Array<AlphaBlend> Blends { get { return new Array<AlphaBlend>(this[nameof(Blends)].Address); } }
        public Array<float> BlendWeights { get { return new Array<float>(this[nameof(BlendWeights)].Address); } }
        public Array<int> PosesToEvaluate { get { return new Array<int>(this[nameof(PosesToEvaluate)].Address); } }
    }
    public class AnimNode_PlayAnimByAnimTags_AnimEntry : Object
    {
        public AnimNode_PlayAnimByAnimTags_AnimEntry(nint addr) : base(addr) { }
        public Array<Object> AnimTags { get { return new Array<Object>(this[nameof(AnimTags)].Address); } }
        public Array<AnimSequenceBase> Animations { get { return new Array<AnimSequenceBase>(this[nameof(Animations)].Address); } }
    }
    public class AnimNode_PlayAnimByAnimTags : AnimNode_AssetPlayerBase
    {
        public AnimNode_PlayAnimByAnimTags(nint addr) : base(addr) { }
        public Array<AnimNode_PlayAnimByAnimTags_AnimEntry> Entries { get { return new Array<AnimNode_PlayAnimByAnimTags_AnimEntry>(this[nameof(Entries)].Address); } }
        public bool bLoopAnimation { get { return this[nameof(bLoopAnimation)].Flag; } set { this[nameof(bLoopAnimation)].Flag = value; } }
        public bool bApplyRootMotion { get { return this[nameof(bApplyRootMotion)].Flag; } set { this[nameof(bApplyRootMotion)].Flag = value; } }
        public float PlayRate { get { return this[nameof(PlayRate)].GetValue<float>(); } set { this[nameof(PlayRate)].SetValue<float>(value); } }
        public AnimSequenceBase Sequence { get { return this[nameof(Sequence)].As<AnimSequenceBase>(); } set { this["Sequence"] = value; } }
    }
    public class AnimNode_RandomBlend : AnimNode_BlendListBase
    {
        public AnimNode_RandomBlend(nint addr) : base(addr) { }
        public bool bSwitchOnNewSeed { get { return this[nameof(bSwitchOnNewSeed)].Flag; } set { this[nameof(bSwitchOnNewSeed)].Flag = value; } }
        public bool bSwitchAfterDuration { get { return this[nameof(bSwitchAfterDuration)].Flag; } set { this[nameof(bSwitchAfterDuration)].Flag = value; } }
        public float MinPlayDuration { get { return this[nameof(MinPlayDuration)].GetValue<float>(); } set { this[nameof(MinPlayDuration)].SetValue<float>(value); } }
        public float MaxPlayDuration { get { return this[nameof(MaxPlayDuration)].GetValue<float>(); } set { this[nameof(MaxPlayDuration)].SetValue<float>(value); } }
        public int NodeSeed { get { return this[nameof(NodeSeed)].GetValue<int>(); } set { this[nameof(NodeSeed)].SetValue<int>(value); } }
        public Array<float> PlayChanaces { get { return new Array<float>(this[nameof(PlayChanaces)].Address); } }
        public int CurrentPlayIndex { get { return this[nameof(CurrentPlayIndex)].GetValue<int>(); } set { this[nameof(CurrentPlayIndex)].SetValue<int>(value); } }
        public float NextUpdateDelay { get { return this[nameof(NextUpdateDelay)].GetValue<float>(); } set { this[nameof(NextUpdateDelay)].SetValue<float>(value); } }
    }
    public class WeaponPhantomShapeByName : Object
    {
        public WeaponPhantomShapeByName(nint addr) : base(addr) { }
        public Object ShapeName { get { return this[nameof(ShapeName)]; } set { this[nameof(ShapeName)] = value; } }
        public EWeaponPhantomGeometryType Type { get { return (EWeaponPhantomGeometryType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class TagParticleEffectPair : Object
    {
        public TagParticleEffectPair(nint addr) : base(addr) { }
        public Object EquipmentType { get { return this[nameof(EquipmentType)]; } set { this[nameof(EquipmentType)] = value; } }
        public Object CustomizationTag { get { return this[nameof(CustomizationTag)]; } set { this[nameof(CustomizationTag)] = value; } }
        public NiagaraSystem PSTemplate { get { return this[nameof(PSTemplate)].As<NiagaraSystem>(); } set { this["PSTemplate"] = value; } }
    }
    public class WeakAudioComponentGunfire : Object
    {
        public WeakAudioComponentGunfire(nint addr) : base(addr) { }
        public Object RefToAudioComponent { get { return this[nameof(RefToAudioComponent)]; } set { this[nameof(RefToAudioComponent)] = value; } }
    }
    public class AudioVolumeSelector : Object
    {
        public AudioVolumeSelector(nint addr) : base(addr) { }
        public Object AudioVolumeClass { get { return this[nameof(AudioVolumeClass)]; } set { this[nameof(AudioVolumeClass)] = value; } }
    }
    public class AudioVolumeClass : Object
    {
        public AudioVolumeClass(nint addr) : base(addr) { }
        public Object AudioVolumeClass_value { get { return this[nameof(AudioVolumeClass)]; } set { this[nameof(AudioVolumeClass)] = value; } }
    }
    public class DialogLineInfo : Object
    {
        public DialogLineInfo(nint addr) : base(addr) { }
        public DialogEntry Dialog { get { return this[nameof(Dialog)].As<DialogEntry>(); } set { this["Dialog"] = value; } }
        public int LineIndex { get { return this[nameof(LineIndex)].GetValue<int>(); } set { this[nameof(LineIndex)].SetValue<int>(value); } }
    }
    public class AmbientSoundMix : Object
    {
        public AmbientSoundMix(nint addr) : base(addr) { }
        public InterpolatedSoundMix InterpolatedMix { get { return this[nameof(InterpolatedMix)].As<InterpolatedSoundMix>(); } set { this["InterpolatedMix"] = value; } }
    }
    public class AmbientAudioChannel : Object
    {
        public AmbientAudioChannel(nint addr) : base(addr) { }
        public Object PrimaryComponent { get { return this[nameof(PrimaryComponent)]; } set { this[nameof(PrimaryComponent)] = value; } }
    }
    public class AudioState : Object
    {
        public AudioState(nint addr) : base(addr) { }
        public Object StateID { get { return this[nameof(StateID)]; } set { this[nameof(StateID)] = value; } }
        public SoundCue OnEnterSoundCue { get { return this[nameof(OnEnterSoundCue)].As<SoundCue>(); } set { this["OnEnterSoundCue"] = value; } }
        public SoundCue PrimarySoundCue { get { return this[nameof(PrimarySoundCue)].As<SoundCue>(); } set { this["PrimarySoundCue"] = value; } }
        public SoundCue OnExitSoundCue { get { return this[nameof(OnExitSoundCue)].As<SoundCue>(); } set { this["OnExitSoundCue"] = value; } }
        public SoundClass SoundClass { get { return this[nameof(SoundClass)].As<SoundClass>(); } set { this["SoundClass"] = value; } }
        public ReverbSettings Reverb { get { return this[nameof(Reverb)].As<ReverbSettings>(); } set { this["Reverb"] = value; } }
        public InteriorSettings AmbientZone { get { return this[nameof(AmbientZone)].As<InteriorSettings>(); } set { this["AmbientZone"] = value; } }
        public Array<WorldSound> WorldSounds { get { return new Array<WorldSound>(this[nameof(WorldSounds)].Address); } }
    }
    public class WorldSound : Object
    {
        public WorldSound(nint addr) : base(addr) { }
        public SoundGunfire SoundCue { get { return this[nameof(SoundCue)].As<SoundGunfire>(); } set { this["SoundCue"] = value; } }
        public SoundClass SoundClassOverride { get { return this[nameof(SoundClassOverride)].As<SoundClass>(); } set { this["SoundClassOverride"] = value; } }
        public float MinDelay { get { return this[nameof(MinDelay)].GetValue<float>(); } set { this[nameof(MinDelay)].SetValue<float>(value); } }
        public float MaxDelay { get { return this[nameof(MaxDelay)].GetValue<float>(); } set { this[nameof(MaxDelay)].SetValue<float>(value); } }
        public float MinRadius { get { return this[nameof(MinRadius)].GetValue<float>(); } set { this[nameof(MinRadius)].SetValue<float>(value); } }
        public float MaxRadius { get { return this[nameof(MaxRadius)].GetValue<float>(); } set { this[nameof(MaxRadius)].SetValue<float>(value); } }
        public float ZOffset { get { return this[nameof(ZOffset)].GetValue<float>(); } set { this[nameof(ZOffset)].SetValue<float>(value); } }
    }
    public class InterpolatedSoundClassAdjuster : Object
    {
        public InterpolatedSoundClassAdjuster(nint addr) : base(addr) { }
        public SoundClass SoundClassObject { get { return this[nameof(SoundClassObject)].As<SoundClass>(); } set { this["SoundClassObject"] = value; } }
        public float VolumeAdjusterBegin { get { return this[nameof(VolumeAdjusterBegin)].GetValue<float>(); } set { this[nameof(VolumeAdjusterBegin)].SetValue<float>(value); } }
        public float VolumeAdjusterEnd { get { return this[nameof(VolumeAdjusterEnd)].GetValue<float>(); } set { this[nameof(VolumeAdjusterEnd)].SetValue<float>(value); } }
        public float PitchAdjusterBegin { get { return this[nameof(PitchAdjusterBegin)].GetValue<float>(); } set { this[nameof(PitchAdjusterBegin)].SetValue<float>(value); } }
        public float PitchAdjusterEnd { get { return this[nameof(PitchAdjusterEnd)].GetValue<float>(); } set { this[nameof(PitchAdjusterEnd)].SetValue<float>(value); } }
    }
    public class WorldSoundList : Object
    {
        public WorldSoundList(nint addr) : base(addr) { }
        public Array<WorldSoundEntry> Entries { get { return new Array<WorldSoundEntry>(this[nameof(Entries)].Address); } }
    }
    public class BoidSettings : Object
    {
        public BoidSettings(nint addr) : base(addr) { }
        public Object CollisionProfile { get { return this[nameof(CollisionProfile)]; } set { this[nameof(CollisionProfile)] = value; } }
        public float PerceptionRadius { get { return this[nameof(PerceptionRadius)].GetValue<float>(); } set { this[nameof(PerceptionRadius)].SetValue<float>(value); } }
        public float MovementSpeed { get { return this[nameof(MovementSpeed)].GetValue<float>(); } set { this[nameof(MovementSpeed)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public float RotationTurnSpeed { get { return this[nameof(RotationTurnSpeed)].GetValue<float>(); } set { this[nameof(RotationTurnSpeed)].SetValue<float>(value); } }
        public float WanderRadius { get { return this[nameof(WanderRadius)].GetValue<float>(); } set { this[nameof(WanderRadius)].SetValue<float>(value); } }
        public float WanderHalfHeight { get { return this[nameof(WanderHalfHeight)].GetValue<float>(); } set { this[nameof(WanderHalfHeight)].SetValue<float>(value); } }
        public float AlignmentForce { get { return this[nameof(AlignmentForce)].GetValue<float>(); } set { this[nameof(AlignmentForce)].SetValue<float>(value); } }
        public float CohesionForce { get { return this[nameof(CohesionForce)].GetValue<float>(); } set { this[nameof(CohesionForce)].SetValue<float>(value); } }
        public float SeparationForce { get { return this[nameof(SeparationForce)].GetValue<float>(); } set { this[nameof(SeparationForce)].SetValue<float>(value); } }
        public float SeparationInnerRadius { get { return this[nameof(SeparationInnerRadius)].GetValue<float>(); } set { this[nameof(SeparationInnerRadius)].SetValue<float>(value); } }
        public float SeparationOuterRadius { get { return this[nameof(SeparationOuterRadius)].GetValue<float>(); } set { this[nameof(SeparationOuterRadius)].SetValue<float>(value); } }
        public float GoalSeekingForce { get { return this[nameof(GoalSeekingForce)].GetValue<float>(); } set { this[nameof(GoalSeekingForce)].SetValue<float>(value); } }
        public float GoalSeekingForceZ { get { return this[nameof(GoalSeekingForceZ)].GetValue<float>(); } set { this[nameof(GoalSeekingForceZ)].SetValue<float>(value); } }
        public float GoalTurnSpeed { get { return this[nameof(GoalTurnSpeed)].GetValue<float>(); } set { this[nameof(GoalTurnSpeed)].SetValue<float>(value); } }
        public float GoalZOffset { get { return this[nameof(GoalZOffset)].GetValue<float>(); } set { this[nameof(GoalZOffset)].SetValue<float>(value); } }
        public float AvoidanceForce { get { return this[nameof(AvoidanceForce)].GetValue<float>(); } set { this[nameof(AvoidanceForce)].SetValue<float>(value); } }
        public byte AvoidTraceChannel { get { return this[nameof(AvoidTraceChannel)].GetValue<byte>(); } set { this[nameof(AvoidTraceChannel)].SetValue<byte>(value); } }
        public float AvoidanceDistance { get { return this[nameof(AvoidanceDistance)].GetValue<float>(); } set { this[nameof(AvoidanceDistance)].SetValue<float>(value); } }
        public float AvoidanceConeAngle { get { return this[nameof(AvoidanceConeAngle)].GetValue<float>(); } set { this[nameof(AvoidanceConeAngle)].SetValue<float>(value); } }
        public ushort AvoidanceIterations { get { return this[nameof(AvoidanceIterations)].GetValue<ushort>(); } set { this[nameof(AvoidanceIterations)].SetValue<ushort>(value); } }
        public float AvoidanceTurnSpeedMin { get { return this[nameof(AvoidanceTurnSpeedMin)].GetValue<float>(); } set { this[nameof(AvoidanceTurnSpeedMin)].SetValue<float>(value); } }
        public float AvoidanceTurnSpeedMax { get { return this[nameof(AvoidanceTurnSpeedMax)].GetValue<float>(); } set { this[nameof(AvoidanceTurnSpeedMax)].SetValue<float>(value); } }
        public float AvoidanceRadius { get { return this[nameof(AvoidanceRadius)].GetValue<float>(); } set { this[nameof(AvoidanceRadius)].SetValue<float>(value); } }
        public bool bConstrainToPlane { get { return this[nameof(bConstrainToPlane)].Flag; } set { this[nameof(bConstrainToPlane)].Flag = value; } }
        public EPlaneConstraintAxisSetting PlaneConstraintAxis { get { return (EPlaneConstraintAxisSetting)this[nameof(PlaneConstraintAxis)].GetValue<int>(); } set { this[nameof(PlaneConstraintAxis)].SetValue<int>((int)value); } }
    }
    public class SpawnSettings : Object
    {
        public SpawnSettings(nint addr) : base(addr) { }
        public Object BoidBP { get { return this[nameof(BoidBP)]; } set { this[nameof(BoidBP)] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public ushort NumberOfBoids { get { return this[nameof(NumberOfBoids)].GetValue<ushort>(); } set { this[nameof(NumberOfBoids)].SetValue<ushort>(value); } }
        public ushort RandomNumberOfBoids { get { return this[nameof(RandomNumberOfBoids)].GetValue<ushort>(); } set { this[nameof(RandomNumberOfBoids)].SetValue<ushort>(value); } }
        public EBoidSpawnStyle SpawnStyle { get { return (EBoidSpawnStyle)this[nameof(SpawnStyle)].GetValue<int>(); } set { this[nameof(SpawnStyle)].SetValue<int>((int)value); } }
        public float SpawnRadius { get { return this[nameof(SpawnRadius)].GetValue<float>(); } set { this[nameof(SpawnRadius)].SetValue<float>(value); } }
        public float SpawnHeightOffset { get { return this[nameof(SpawnHeightOffset)].GetValue<float>(); } set { this[nameof(SpawnHeightOffset)].SetValue<float>(value); } }
        public bool RandomizeDirection { get { return this[nameof(RandomizeDirection)].Flag; } set { this[nameof(RandomizeDirection)].Flag = value; } }
    }
    public class CameraEffect : Object
    {
        public CameraEffect(nint addr) : base(addr) { }
        public NiagaraSystem ParticleSystem { get { return this[nameof(ParticleSystem)].As<NiagaraSystem>(); } set { this["ParticleSystem"] = value; } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public int Channel { get { return this[nameof(Channel)].GetValue<int>(); } set { this[nameof(Channel)].SetValue<int>(value); } }
        public bool AutoActivate { get { return this[nameof(AutoActivate)].Flag; } set { this[nameof(AutoActivate)].Flag = value; } }
        public bool SoftDestroy { get { return this[nameof(SoftDestroy)].Flag; } set { this[nameof(SoftDestroy)].Flag = value; } }
        public Object ParticleIntensityParamMap { get { return this[nameof(ParticleIntensityParamMap)]; } set { this[nameof(ParticleIntensityParamMap)] = value; } }
        public int HandleID { get { return this[nameof(HandleID)].GetValue<int>(); } set { this[nameof(HandleID)].SetValue<int>(value); } }
        public NiagaraComponent SpawnedParticleComponent { get { return this[nameof(SpawnedParticleComponent)].As<NiagaraComponent>(); } set { this["SpawnedParticleComponent"] = value; } }
        public Actor DeterminedViewTarget { get { return this[nameof(DeterminedViewTarget)].As<Actor>(); } set { this["DeterminedViewTarget"] = value; } }
        public TimerHandle DurationHandle { get { return this[nameof(DurationHandle)].As<TimerHandle>(); } set { this["DurationHandle"] = value; } }
    }
    public class CustomCameraBlend : Object
    {
        public CustomCameraBlend(nint addr) : base(addr) { }
        public Object PreviousState { get { return this[nameof(PreviousState)]; } set { this[nameof(PreviousState)] = value; } }
        public float BlendTime { get { return this[nameof(BlendTime)].GetValue<float>(); } set { this[nameof(BlendTime)].SetValue<float>(value); } }
    }
    public class ChallengeCategory : Object
    {
        public ChallengeCategory(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Texture2D BackgroundImage { get { return this[nameof(BackgroundImage)].As<Texture2D>(); } set { this["BackgroundImage"] = value; } }
    }
    public class PointSet : Object
    {
        public PointSet(nint addr) : base(addr) { }
        public int Current { get { return this[nameof(Current)].GetValue<int>(); } set { this[nameof(Current)].SetValue<int>(value); } }
        public int Max { get { return this[nameof(Max)].GetValue<int>(); } set { this[nameof(Max)].SetValue<int>(value); } }
    }
    public class ChallengeEvent : Object
    {
        public ChallengeEvent(nint addr) : base(addr) { }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
    }
    public class ChallengeObjectiveSelection : Object
    {
        public ChallengeObjectiveSelection(nint addr) : base(addr) { }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
    }
    public class ChallengeLinkId : Object
    {
        public ChallengeLinkId(nint addr) : base(addr) { }
        public Guid ID { get { return this[nameof(ID)].As<Guid>(); } set { this["ID"] = value; } }
        public Object EditorLabel { get { return this[nameof(EditorLabel)]; } set { this[nameof(EditorLabel)] = value; } }
    }
    public class ChallengeObjectiveInstance : Object
    {
        public ChallengeObjectiveInstance(nint addr) : base(addr) { }
        public ChallengeObjectiveBase Objective { get { return this[nameof(Objective)].As<ChallengeObjectiveBase>(); } set { this["Objective"] = value; } }
        public bool Complete { get { return this[nameof(Complete)].Flag; } set { this[nameof(Complete)].Flag = value; } }
        public int CurrentValue { get { return this[nameof(CurrentValue)].GetValue<int>(); } set { this[nameof(CurrentValue)].SetValue<int>(value); } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
    }
    public class ClimbableSurfaceAppendageFilter : Object
    {
        public ClimbableSurfaceAppendageFilter(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public bool bOverrideEffectorParameters { get { return this[nameof(bOverrideEffectorParameters)].Flag; } set { this[nameof(bOverrideEffectorParameters)].Flag = value; } }
        public ClimbAppendageEffectorParameters EffectorParametersOverride { get { return this[nameof(EffectorParametersOverride)].As<ClimbAppendageEffectorParameters>(); } set { this["EffectorParametersOverride"] = value; } }
        public bool bValidateAppendage { get { return this[nameof(bValidateAppendage)].Flag; } set { this[nameof(bValidateAppendage)].Flag = value; } }
        public bool bNeedsGeometry { get { return this[nameof(bNeedsGeometry)].Flag; } set { this[nameof(bNeedsGeometry)].Flag = value; } }
        public Vector DefaultRelativeLocation { get { return this[nameof(DefaultRelativeLocation)].As<Vector>(); } set { this["DefaultRelativeLocation"] = value; } }
    }
    public class ClimbAppendageEffectorParameters : Object
    {
        public ClimbAppendageEffectorParameters(nint addr) : base(addr) { }
        public Quat IKFacingOffset { get { return this[nameof(IKFacingOffset)].As<Quat>(); } set { this["IKFacingOffset"] = value; } }
        public Transform EffectorRelativeTransform { get { return this[nameof(EffectorRelativeTransform)].As<Transform>(); } set { this["EffectorRelativeTransform"] = value; } }
        public float TraceDistance { get { return this[nameof(TraceDistance)].GetValue<float>(); } set { this[nameof(TraceDistance)].SetValue<float>(value); } }
        public float TraceRadius { get { return this[nameof(TraceRadius)].GetValue<float>(); } set { this[nameof(TraceRadius)].SetValue<float>(value); } }
    }
    public class AppendageDataSection : Object
    {
        public AppendageDataSection(nint addr) : base(addr) { }
        public float StartTime { get { return this[nameof(StartTime)].GetValue<float>(); } set { this[nameof(StartTime)].SetValue<float>(value); } }
        public float PlantTime { get { return this[nameof(PlantTime)].GetValue<float>(); } set { this[nameof(PlantTime)].SetValue<float>(value); } }
        public float ReleaseTime { get { return this[nameof(ReleaseTime)].GetValue<float>(); } set { this[nameof(ReleaseTime)].SetValue<float>(value); } }
        public float EndTime { get { return this[nameof(EndTime)].GetValue<float>(); } set { this[nameof(EndTime)].SetValue<float>(value); } }
        public Transform PlantTransform { get { return this[nameof(PlantTransform)].As<Transform>(); } set { this["PlantTransform"] = value; } }
    }
    public class AppendageData : Object
    {
        public AppendageData(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public Object Socket { get { return this[nameof(Socket)]; } set { this[nameof(Socket)] = value; } }
        public EClimbDirectionBias Direction { get { return (EClimbDirectionBias)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public Array<AppendageDataSection> Sections { get { return new Array<AppendageDataSection>(this[nameof(Sections)].Address); } }
        public Transform InitialTransform { get { return this[nameof(InitialTransform)].As<Transform>(); } set { this["InitialTransform"] = value; } }
        public Transform FinalTransform { get { return this[nameof(FinalTransform)].As<Transform>(); } set { this["FinalTransform"] = value; } }
        public bool bIsPlantedAtBeginning { get { return this[nameof(bIsPlantedAtBeginning)].Flag; } set { this[nameof(bIsPlantedAtBeginning)].Flag = value; } }
        public bool bIsPlantedAtEnd { get { return this[nameof(bIsPlantedAtEnd)].Flag; } set { this[nameof(bIsPlantedAtEnd)].Flag = value; } }
    }
    public class ClimbableSurfaceQuery : Object
    {
        public ClimbableSurfaceQuery(nint addr) : base(addr) { }
        public ClimbingStateBase State { get { return this[nameof(State)].As<ClimbingStateBase>(); } set { this["State"] = value; } }
        public ClimbableSurfaceResult Result { get { return this[nameof(Result)].As<ClimbableSurfaceResult>(); } set { this["Result"] = value; } }
    }
    public class ClimbableTransitionQuery : Object
    {
        public ClimbableTransitionQuery(nint addr) : base(addr) { }
        public Object TransitionSet { get { return this[nameof(TransitionSet)]; } set { this[nameof(TransitionSet)] = value; } }
        public ClimbingStateBase BestState { get { return this[nameof(BestState)].As<ClimbingStateBase>(); } set { this["BestState"] = value; } }
    }
    public class ClimbGroupTransition : Object
    {
        public ClimbGroupTransition(nint addr) : base(addr) { }
        public Object From { get { return this[nameof(From)]; } set { this[nameof(From)] = value; } }
        public Object To { get { return this[nameof(To)]; } set { this[nameof(To)] = value; } }
        public float BlendTimeOverride { get { return this[nameof(BlendTimeOverride)].GetValue<float>(); } set { this[nameof(BlendTimeOverride)].SetValue<float>(value); } }
    }
    public class ClimbAppendage : Object
    {
        public ClimbAppendage(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public bool bMandatoryForClimbing { get { return this[nameof(bMandatoryForClimbing)].Flag; } set { this[nameof(bMandatoryForClimbing)].Flag = value; } }
        public ClimbAppendageEffectorParameters EffectorParameters { get { return this[nameof(EffectorParameters)].As<ClimbAppendageEffectorParameters>(); } set { this["EffectorParameters"] = value; } }
        public float AlphaPerSecond { get { return this[nameof(AlphaPerSecond)].GetValue<float>(); } set { this[nameof(AlphaPerSecond)].SetValue<float>(value); } }
        public float MaxEffectorMoveSpeed { get { return this[nameof(MaxEffectorMoveSpeed)].GetValue<float>(); } set { this[nameof(MaxEffectorMoveSpeed)].SetValue<float>(value); } }
        public float MaxEffectorRotationSpeed { get { return this[nameof(MaxEffectorRotationSpeed)].GetValue<float>(); } set { this[nameof(MaxEffectorRotationSpeed)].SetValue<float>(value); } }
        public float EffectorResetBlendTime { get { return this[nameof(EffectorResetBlendTime)].GetValue<float>(); } set { this[nameof(EffectorResetBlendTime)].SetValue<float>(value); } }
        public Object Socket { get { return this[nameof(Socket)]; } set { this[nameof(Socket)] = value; } }
        public EClimbDirectionBias Direction { get { return (EClimbDirectionBias)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
    }
    public class ClimbTransition : Object
    {
        public ClimbTransition(nint addr) : base(addr) { }
        public Array<ActorStateID> ClimbingStates { get { return new Array<ActorStateID>(this[nameof(ClimbingStates)].Address); } }
        public EClimbingTransitionRequiredInput RequiredInput { get { return (EClimbingTransitionRequiredInput)this[nameof(RequiredInput)].GetValue<int>(); } set { this[nameof(RequiredInput)].SetValue<int>((int)value); } }
        public float MinimumMoveDistance { get { return this[nameof(MinimumMoveDistance)].GetValue<float>(); } set { this[nameof(MinimumMoveDistance)].SetValue<float>(value); } }
        public float MinimumMoveAngle { get { return this[nameof(MinimumMoveAngle)].GetValue<float>(); } set { this[nameof(MinimumMoveAngle)].SetValue<float>(value); } }
        public float MaximumMoveAngle { get { return this[nameof(MaximumMoveAngle)].GetValue<float>(); } set { this[nameof(MaximumMoveAngle)].SetValue<float>(value); } }
        public Array<Object> CurrentSurfaceTags { get { return new Array<Object>(this[nameof(CurrentSurfaceTags)].Address); } }
        public Array<Object> RequiredSurfaceTags { get { return new Array<Object>(this[nameof(RequiredSurfaceTags)].Address); } }
        public Array<Object> InvalidSurfaceTags { get { return new Array<Object>(this[nameof(InvalidSurfaceTags)].Address); } }
    }
    public class ClimbTransitionRule : ClimbTransition
    {
        public ClimbTransitionRule(nint addr) : base(addr) { }
        public ECanClimbFilterMethod Filter { get { return (ECanClimbFilterMethod)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public Array<ClimbTransition> Prerequisites { get { return new Array<ClimbTransition>(this[nameof(Prerequisites)].Address); } }
    }
    public class ClimbAppendageSettings : Object
    {
        public ClimbAppendageSettings(nint addr) : base(addr) { }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public EClimbDirectionBias Direction { get { return (EClimbDirectionBias)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public Array<Object> Sockets { get { return new Array<Object>(this[nameof(Sockets)].Address); } }
    }
    public class ClimbableLedgePoint : Object
    {
        public ClimbableLedgePoint(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
    }
    public class ClimbableLedge : Object
    {
        public ClimbableLedge(nint addr) : base(addr) { }
        public Array<ClimbableLedgePoint> Points { get { return new Array<ClimbableLedgePoint>(this[nameof(Points)].Address); } }
    }
    public class AttachedChild : Object
    {
        public AttachedChild(nint addr) : base(addr) { }
        public SceneComponent SceneComponent { get { return this[nameof(SceneComponent)].As<SceneComponent>(); } set { this["SceneComponent"] = value; } }
        public int TickAdded { get { return this[nameof(TickAdded)].GetValue<int>(); } set { this[nameof(TickAdded)].SetValue<int>(value); } }
        public int LastTickUpdated { get { return this[nameof(LastTickUpdated)].GetValue<int>(); } set { this[nameof(LastTickUpdated)].SetValue<int>(value); } }
    }
    public class RecipeList : Object
    {
        public RecipeList(nint addr) : base(addr) { }
        public Array<CraftingRecipe_Base> Recipes { get { return new Array<CraftingRecipe_Base>(this[nameof(Recipes)].Address); } }
    }
    public class IngredientInfo : Object
    {
        public IngredientInfo(nint addr) : base(addr) { }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
        public int Quantity { get { return this[nameof(Quantity)].GetValue<int>(); } set { this[nameof(Quantity)].SetValue<int>(value); } }
        public int RequiredQuantity { get { return this[nameof(RequiredQuantity)].GetValue<int>(); } set { this[nameof(RequiredQuantity)].SetValue<int>(value); } }
        public int RequiredLevel { get { return this[nameof(RequiredLevel)].GetValue<int>(); } set { this[nameof(RequiredLevel)].SetValue<int>(value); } }
    }
    public class RecipeInfo : Object
    {
        public RecipeInfo(nint addr) : base(addr) { }
        public Actor Source { get { return this[nameof(Source)].As<Actor>(); } set { this["Source"] = value; } }
        public CraftingRecipe_Base Recipe { get { return this[nameof(Recipe)].As<CraftingRecipe_Base>(); } set { this["Recipe"] = value; } }
        public bool CanCraft { get { return this[nameof(CanCraft)].Flag; } set { this[nameof(CanCraft)].Flag = value; } }
        public bool IsHidden { get { return this[nameof(IsHidden)].Flag; } set { this[nameof(IsHidden)].Flag = value; } }
        public bool IsSecret { get { return this[nameof(IsSecret)].Flag; } set { this[nameof(IsSecret)].Flag = value; } }
        public int CraftQuantity { get { return this[nameof(CraftQuantity)].GetValue<int>(); } set { this[nameof(CraftQuantity)].SetValue<int>(value); } }
        public Array<IngredientInfo> Ingredients { get { return new Array<IngredientInfo>(this[nameof(Ingredients)].Address); } }
    }
    public class DebrisCullingInfo : Object
    {
        public DebrisCullingInfo(nint addr) : base(addr) { }
    }
    public class DifficultyScalingData : TableRowBase
    {
        public DifficultyScalingData(nint addr) : base(addr) { }
        public float EnemyHealthScalar { get { return this[nameof(EnemyHealthScalar)].GetValue<float>(); } set { this[nameof(EnemyHealthScalar)].SetValue<float>(value); } }
        public float EnemyDamageScalar { get { return this[nameof(EnemyDamageScalar)].GetValue<float>(); } set { this[nameof(EnemyDamageScalar)].SetValue<float>(value); } }
        public float SpawnQuantityScalar { get { return this[nameof(SpawnQuantityScalar)].GetValue<float>(); } set { this[nameof(SpawnQuantityScalar)].SetValue<float>(value); } }
        public float CurrencyScalar { get { return this[nameof(CurrencyScalar)].GetValue<float>(); } set { this[nameof(CurrencyScalar)].SetValue<float>(value); } }
        public float ExperienceScalar { get { return this[nameof(ExperienceScalar)].GetValue<float>(); } set { this[nameof(ExperienceScalar)].SetValue<float>(value); } }
    }
    public class DissolveMaterial : Object
    {
        public DissolveMaterial(nint addr) : base(addr) { }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public MaterialInterface DissolveMaterial_value { get { return this[nameof(DissolveMaterial)].As<MaterialInterface>(); } set { this["DissolveMaterial"] = value; } }
        public Array<MaterialInstanceDynamic> MaterialInstances { get { return new Array<MaterialInstanceDynamic>(this[nameof(MaterialInstances)].Address); } }
        public Array<MaterialInstanceDynamic> OriginalMaterialInstances { get { return new Array<MaterialInstanceDynamic>(this[nameof(OriginalMaterialInstances)].Address); } }
    }
    public class HeuristicBoundsHitResult : Object
    {
        public HeuristicBoundsHitResult(nint addr) : base(addr) { }
        public EHeuristicBoundsTraceResult Result { get { return (EHeuristicBoundsTraceResult)this[nameof(Result)].GetValue<int>(); } set { this[nameof(Result)].SetValue<int>((int)value); } }
        public HeuristicBoundsComponent Component { get { return this[nameof(Component)].As<HeuristicBoundsComponent>(); } set { this["Component"] = value; } }
        public float DistanceToTarget { get { return this[nameof(DistanceToTarget)].GetValue<float>(); } set { this[nameof(DistanceToTarget)].SetValue<float>(value); } }
        public Vector DirectionToTarget { get { return this[nameof(DirectionToTarget)].As<Vector>(); } set { this["DirectionToTarget"] = value; } }
        public Vector BoundsLocation { get { return this[nameof(BoundsLocation)].As<Vector>(); } set { this["BoundsLocation"] = value; } }
        public float ClosenessToCenter { get { return this[nameof(ClosenessToCenter)].GetValue<float>(); } set { this[nameof(ClosenessToCenter)].SetValue<float>(value); } }
        public float AngleFromCenter { get { return this[nameof(AngleFromCenter)].GetValue<float>(); } set { this[nameof(AngleFromCenter)].SetValue<float>(value); } }
        public bool bHasLOS { get { return this[nameof(bHasLOS)].Flag; } set { this[nameof(bHasLOS)].Flag = value; } }
        public Object HitComponent { get { return this[nameof(HitComponent)]; } set { this[nameof(HitComponent)] = value; } }
    }
    public class HeuristicBoundsTraceParams : Object
    {
        public HeuristicBoundsTraceParams(nint addr) : base(addr) { }
        public float MinDistance { get { return this[nameof(MinDistance)].GetValue<float>(); } set { this[nameof(MinDistance)].SetValue<float>(value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public float FieldOfView { get { return this[nameof(FieldOfView)].GetValue<float>(); } set { this[nameof(FieldOfView)].SetValue<float>(value); } }
        public bool bCheckForLoS { get { return this[nameof(bCheckForLoS)].Flag; } set { this[nameof(bCheckForLoS)].Flag = value; } }
        public bool bCheckForHitComponent { get { return this[nameof(bCheckForHitComponent)].Flag; } set { this[nameof(bCheckForHitComponent)].Flag = value; } }
        public float RadiusScalar { get { return this[nameof(RadiusScalar)].GetValue<float>(); } set { this[nameof(RadiusScalar)].SetValue<float>(value); } }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
    }
    public class HitLocationInfo : Object
    {
        public HitLocationInfo(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public PhysicalMaterial PhysMat { get { return this[nameof(PhysMat)].As<PhysicalMaterial>(); } set { this["PhysMat"] = value; } }
        public bool bCollisionInitiallyEnabled { get { return this[nameof(bCollisionInitiallyEnabled)].Flag; } set { this[nameof(bCollisionInitiallyEnabled)].Flag = value; } }
        public float DamageScalar { get { return this[nameof(DamageScalar)].GetValue<float>(); } set { this[nameof(DamageScalar)].SetValue<float>(value); } }
        public float HealthRatio { get { return this[nameof(HealthRatio)].GetValue<float>(); } set { this[nameof(HealthRatio)].SetValue<float>(value); } }
        public Object EventOnDestroyed { get { return this[nameof(EventOnDestroyed)]; } set { this[nameof(EventOnDestroyed)] = value; } }
        public Object EventOnRepaired { get { return this[nameof(EventOnRepaired)]; } set { this[nameof(EventOnRepaired)] = value; } }
        public bool KillOnDestroyed { get { return this[nameof(KillOnDestroyed)].Flag; } set { this[nameof(KillOnDestroyed)].Flag = value; } }
        public Object DestroyedAnimTag { get { return this[nameof(DestroyedAnimTag)]; } set { this[nameof(DestroyedAnimTag)] = value; } }
        public Object DebrisSocketLocationOnDestroy { get { return this[nameof(DebrisSocketLocationOnDestroy)]; } set { this[nameof(DebrisSocketLocationOnDestroy)] = value; } }
        public Object DebrisOnDestroy { get { return this[nameof(DebrisOnDestroy)]; } set { this[nameof(DebrisOnDestroy)] = value; } }
        public bool bResistSpot { get { return this[nameof(bResistSpot)].Flag; } set { this[nameof(bResistSpot)].Flag = value; } }
        public bool bIsWeakSpot { get { return this[nameof(bIsWeakSpot)].Flag; } set { this[nameof(bIsWeakSpot)].Flag = value; } }
        public bool Destroyed { get { return this[nameof(Destroyed)].Flag; } set { this[nameof(Destroyed)].Flag = value; } }
        public Array<Object> DestroyedDependentHitLocationsToActivate { get { return new Array<Object>(this[nameof(DestroyedDependentHitLocationsToActivate)].Address); } }
        public Array<Object> BoneNamesToActivateCollision { get { return new Array<Object>(this[nameof(BoneNamesToActivateCollision)].Address); } }
        public float DamageTaken { get { return this[nameof(DamageTaken)].GetValue<float>(); } set { this[nameof(DamageTaken)].SetValue<float>(value); } }
    }
    public class TInteractableTriggerVisualizerOverrides : Object
    {
        public TInteractableTriggerVisualizerOverrides(nint addr) : base(addr) { }
        public Object TriggerName { get { return this[nameof(TriggerName)]; } set { this[nameof(TriggerName)] = value; } }
        public bool bHasTriggerOverride { get { return this[nameof(bHasTriggerOverride)].Flag; } set { this[nameof(bHasTriggerOverride)].Flag = value; } }
        public Object TriggerOverride { get { return this[nameof(TriggerOverride)]; } set { this[nameof(TriggerOverride)] = value; } }
        public Object TriggerPropertyOverride { get { return this[nameof(TriggerPropertyOverride)]; } set { this[nameof(TriggerPropertyOverride)] = value; } }
        public bool bHasTriggerOriginOverride { get { return this[nameof(bHasTriggerOriginOverride)].Flag; } set { this[nameof(bHasTriggerOriginOverride)].Flag = value; } }
        public Object TriggerOriginOverride { get { return this[nameof(TriggerOriginOverride)]; } set { this[nameof(TriggerOriginOverride)] = value; } }
    }
    public class LinkOccupant : Object
    {
        public LinkOccupant(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public LadderParams LadderParams { get { return this[nameof(LadderParams)].As<LadderParams>(); } set { this["LadderParams"] = value; } }
        public int CurrentRung { get { return this[nameof(CurrentRung)].GetValue<int>(); } set { this[nameof(CurrentRung)].SetValue<int>(value); } }
    }
    public class LinkBreadcrumb : Object
    {
        public LinkBreadcrumb(nint addr) : base(addr) { }
    }
    public class LookTarget : Object
    {
        public LookTarget(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
    }
    public class PhysicsTweenParameters : Object
    {
        public PhysicsTweenParameters(nint addr) : base(addr) { }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float MaxLinearForce { get { return this[nameof(MaxLinearForce)].GetValue<float>(); } set { this[nameof(MaxLinearForce)].SetValue<float>(value); } }
        public float MaxAngularForce { get { return this[nameof(MaxAngularForce)].GetValue<float>(); } set { this[nameof(MaxAngularForce)].SetValue<float>(value); } }
        public float MaxHorizontalSpeed { get { return this[nameof(MaxHorizontalSpeed)].GetValue<float>(); } set { this[nameof(MaxHorizontalSpeed)].SetValue<float>(value); } }
        public float MaxLiftingSpeed { get { return this[nameof(MaxLiftingSpeed)].GetValue<float>(); } set { this[nameof(MaxLiftingSpeed)].SetValue<float>(value); } }
        public float MaxAngularSpeed { get { return this[nameof(MaxAngularSpeed)].GetValue<float>(); } set { this[nameof(MaxAngularSpeed)].SetValue<float>(value); } }
    }
    public class ReplicatedMovementInfo : Object
    {
        public ReplicatedMovementInfo(nint addr) : base(addr) { }
    }
    public class RimMaterial : Object
    {
        public RimMaterial(nint addr) : base(addr) { }
        public MaterialInstanceDynamic MaterialInstance { get { return this[nameof(MaterialInstance)].As<MaterialInstanceDynamic>(); } set { this["MaterialInstance"] = value; } }
        public MeshComponent Mesh { get { return this[nameof(Mesh)].As<MeshComponent>(); } set { this["Mesh"] = value; } }
    }
    public class RopeSegmentComponents : Object
    {
        public RopeSegmentComponents(nint addr) : base(addr) { }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public PhysicsConstraintComponent Constraint { get { return this[nameof(Constraint)].As<PhysicsConstraintComponent>(); } set { this["Constraint"] = value; } }
        public int NumActiveBones { get { return this[nameof(NumActiveBones)].GetValue<int>(); } set { this[nameof(NumActiveBones)].SetValue<int>(value); } }
    }
    public class RopeAttachPoint : Object
    {
        public RopeAttachPoint(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public Object ComponentName { get { return this[nameof(ComponentName)]; } set { this[nameof(ComponentName)] = value; } }
        public PrimitiveComponent Component { get { return this[nameof(Component)].As<PrimitiveComponent>(); } set { this["Component"] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector RelativeOffset { get { return this[nameof(RelativeOffset)].As<Vector>(); } set { this["RelativeOffset"] = value; } }
        public bool bAutoOrientInitialBone { get { return this[nameof(bAutoOrientInitialBone)].Flag; } set { this[nameof(bAutoOrientInitialBone)].Flag = value; } }
        public float Length { get { return this[nameof(Length)].GetValue<float>(); } set { this[nameof(Length)].SetValue<float>(value); } }
        public float LengthSpeed { get { return this[nameof(LengthSpeed)].GetValue<float>(); } set { this[nameof(LengthSpeed)].SetValue<float>(value); } }
        public float DynamicLengthThreshold { get { return this[nameof(DynamicLengthThreshold)].GetValue<float>(); } set { this[nameof(DynamicLengthThreshold)].SetValue<float>(value); } }
        public float Slack { get { return this[nameof(Slack)].GetValue<float>(); } set { this[nameof(Slack)].SetValue<float>(value); } }
        public float LinearDampingOverride { get { return this[nameof(LinearDampingOverride)].GetValue<float>(); } set { this[nameof(LinearDampingOverride)].SetValue<float>(value); } }
        public float AngularDampingOverride { get { return this[nameof(AngularDampingOverride)].GetValue<float>(); } set { this[nameof(AngularDampingOverride)].SetValue<float>(value); } }
        public int StartingSegment { get { return this[nameof(StartingSegment)].GetValue<int>(); } set { this[nameof(StartingSegment)].SetValue<int>(value); } }
        public int StartingBone { get { return this[nameof(StartingBone)].GetValue<int>(); } set { this[nameof(StartingBone)].SetValue<int>(value); } }
        public int EndingSegment { get { return this[nameof(EndingSegment)].GetValue<int>(); } set { this[nameof(EndingSegment)].SetValue<int>(value); } }
        public int EndingBone { get { return this[nameof(EndingBone)].GetValue<int>(); } set { this[nameof(EndingBone)].SetValue<int>(value); } }
        public float PercentageToNextBone { get { return this[nameof(PercentageToNextBone)].GetValue<float>(); } set { this[nameof(PercentageToNextBone)].SetValue<float>(value); } }
        public PhysicsConstraintComponent FinalConstraint { get { return this[nameof(FinalConstraint)].As<PhysicsConstraintComponent>(); } set { this["FinalConstraint"] = value; } }
    }
    public class SplineEaseParameters : Object
    {
        public SplineEaseParameters(nint addr) : base(addr) { }
        public byte EaseType { get { return this[nameof(EaseType)].GetValue<byte>(); } set { this[nameof(EaseType)].SetValue<byte>(value); } }
        public bool bUseLinearEase { get { return this[nameof(bUseLinearEase)].Flag; } set { this[nameof(bUseLinearEase)].Flag = value; } }
        public float EaseOverTime { get { return this[nameof(EaseOverTime)].GetValue<float>(); } set { this[nameof(EaseOverTime)].SetValue<float>(value); } }
        public CurveFloat NormalizedSpeedOverTimeCurve { get { return this[nameof(NormalizedSpeedOverTimeCurve)].As<CurveFloat>(); } set { this["NormalizedSpeedOverTimeCurve"] = value; } }
    }
    public class SubtitleInfo : Object
    {
        public SubtitleInfo(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Actor Source { get { return this[nameof(Source)].As<Actor>(); } set { this["Source"] = value; } }
        public ActorComponent SourceComponent { get { return this[nameof(SourceComponent)].As<ActorComponent>(); } set { this["SourceComponent"] = value; } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Speaker { get { return this[nameof(Speaker)]; } set { this[nameof(Speaker)] = value; } }
        public SoftSoundGunfire Audio { get { return this[nameof(Audio)].As<SoftSoundGunfire>(); } set { this["Audio"] = value; } }
        public GunfireAudioPlayParams AudioPlayParams { get { return this[nameof(AudioPlayParams)].As<GunfireAudioPlayParams>(); } set { this["AudioPlayParams"] = value; } }
        public GunfireAudioAttachParams AudioAttachParams { get { return this[nameof(AudioAttachParams)].As<GunfireAudioAttachParams>(); } set { this["AudioAttachParams"] = value; } }
        public bool AutoRemoveSubtitle { get { return this[nameof(AutoRemoveSubtitle)].Flag; } set { this[nameof(AutoRemoveSubtitle)].Flag = value; } }
        public bool AutoRemoveEmote { get { return this[nameof(AutoRemoveEmote)].Flag; } set { this[nameof(AutoRemoveEmote)].Flag = value; } }
    }
    public class SurfaceOrientFeeler : Object
    {
        public SurfaceOrientFeeler(nint addr) : base(addr) { }
        public Object FeelerNode { get { return this[nameof(FeelerNode)]; } set { this[nameof(FeelerNode)] = value; } }
        public Vector RelativeQueryOffset { get { return this[nameof(RelativeQueryOffset)].As<Vector>(); } set { this["RelativeQueryOffset"] = value; } }
        public Object IkVirtualBone { get { return this[nameof(IkVirtualBone)]; } set { this[nameof(IkVirtualBone)] = value; } }
        public float IkGroundOffset { get { return this[nameof(IkGroundOffset)].GetValue<float>(); } set { this[nameof(IkGroundOffset)].SetValue<float>(value); } }
        public Quat IkRelativeOrientation { get { return this[nameof(IkRelativeOrientation)].As<Quat>(); } set { this["IkRelativeOrientation"] = value; } }
    }
    public class TargetAlignRequest : Object
    {
        public TargetAlignRequest(nint addr) : base(addr) { }
    }
    public class TargetTraceParams : Object
    {
        public TargetTraceParams(nint addr) : base(addr) { }
        public HeuristicBoundsTraceParams BoundsTraceParams { get { return this[nameof(BoundsTraceParams)].As<HeuristicBoundsTraceParams>(); } set { this["BoundsTraceParams"] = value; } }
        public float ClosenessToBoundsCenterWeight { get { return this[nameof(ClosenessToBoundsCenterWeight)].GetValue<float>(); } set { this[nameof(ClosenessToBoundsCenterWeight)].SetValue<float>(value); } }
        public float DistanceFromTraceOriginWeight { get { return this[nameof(DistanceFromTraceOriginWeight)].GetValue<float>(); } set { this[nameof(DistanceFromTraceOriginWeight)].SetValue<float>(value); } }
        public float BestTargetScorePadding { get { return this[nameof(BestTargetScorePadding)].GetValue<float>(); } set { this[nameof(BestTargetScorePadding)].SetValue<float>(value); } }
        public bool bStickyTarget { get { return this[nameof(bStickyTarget)].Flag; } set { this[nameof(bStickyTarget)].Flag = value; } }
        public bool bCalculateSnapTarget { get { return this[nameof(bCalculateSnapTarget)].Flag; } set { this[nameof(bCalculateSnapTarget)].Flag = value; } }
        public float MaxSnapAngle { get { return this[nameof(MaxSnapAngle)].GetValue<float>(); } set { this[nameof(MaxSnapAngle)].SetValue<float>(value); } }
    }
    public class TargetQueryResult : Object
    {
        public TargetQueryResult(nint addr) : base(addr) { }
        public TargetableComponent Target { get { return this[nameof(Target)].As<TargetableComponent>(); } set { this["Target"] = value; } }
        public float Score { get { return this[nameof(Score)].GetValue<float>(); } set { this[nameof(Score)].SetValue<float>(value); } }
    }
    public class TimeDilationEffectHandle : Object
    {
        public TimeDilationEffectHandle(nint addr) : base(addr) { }
    }
    public class TweenComponentDuringPhysicsTickFunction : TickFunction
    {
        public TweenComponentDuringPhysicsTickFunction(nint addr) : base(addr) { }
    }
    public class WaterFXEntry : Object
    {
        public WaterFXEntry(nint addr) : base(addr) { }
        public float VelocityRef { get { return this[nameof(VelocityRef)].GetValue<float>(); } set { this[nameof(VelocityRef)].SetValue<float>(value); } }
        public float SubmergeDepth { get { return this[nameof(SubmergeDepth)].GetValue<float>(); } set { this[nameof(SubmergeDepth)].SetValue<float>(value); } }
        public SoundGunfire SFX { get { return this[nameof(SFX)].As<SoundGunfire>(); } set { this["SFX"] = value; } }
        public NiagaraSystem VFX { get { return this[nameof(VFX)].As<NiagaraSystem>(); } set { this["VFX"] = value; } }
    }
    public class WaterFXOverride : Object
    {
        public WaterFXOverride(nint addr) : base(addr) { }
        public Array<Object> WaterTypes { get { return new Array<Object>(this[nameof(WaterTypes)].Address); } }
        public Array<WaterFXEntry> WaterEnterFX { get { return new Array<WaterFXEntry>(this[nameof(WaterEnterFX)].Address); } }
        public Array<WaterFXEntry> WaterWakeFX { get { return new Array<WaterFXEntry>(this[nameof(WaterWakeFX)].Address); } }
        public Array<WaterFXEntry> WaterExitFX { get { return new Array<WaterFXEntry>(this[nameof(WaterExitFX)].Address); } }
    }
    public class ActiveWeaponPhantom : Object
    {
        public ActiveWeaponPhantom(nint addr) : base(addr) { }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
    }
    public class DirectionalGraphEdge : Object
    {
        public DirectionalGraphEdge(nint addr) : base(addr) { }
    }
    public class GraphNode : Object
    {
        public GraphNode(nint addr) : base(addr) { }
        public WeightedGraphNode GraphNodeInstance { get { return this[nameof(GraphNodeInstance)].As<WeightedGraphNode>(); } set { this["GraphNodeInstance"] = value; } }
        public WeightedGraphComponent OwningGraph { get { return this[nameof(OwningGraph)].As<WeightedGraphComponent>(); } set { this["OwningGraph"] = value; } }
    }
    public class ComponentManagedTickEntry : Object
    {
        public ComponentManagedTickEntry(nint addr) : base(addr) { }
        public ActorComponent ActorComponent { get { return this[nameof(ActorComponent)].As<ActorComponent>(); } set { this["ActorComponent"] = value; } }
    }
    public class ActorManagedTickEntry : Object
    {
        public ActorManagedTickEntry(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public Array<Actor> ChildActors { get { return new Array<Actor>(this[nameof(ChildActors)].Address); } }
        public Array<ComponentManagedTickEntry> PrePhysicsTick { get { return new Array<ComponentManagedTickEntry>(this[nameof(PrePhysicsTick)].Address); } }
        public Array<ComponentManagedTickEntry> DuringPhysicsTick { get { return new Array<ComponentManagedTickEntry>(this[nameof(DuringPhysicsTick)].Address); } }
    }
    public class ActorTickManagerTickFunction : TickFunction
    {
        public ActorTickManagerTickFunction(nint addr) : base(addr) { }
    }
    public class ActiveRagdollInfo : Object
    {
        public ActiveRagdollInfo(nint addr) : base(addr) { }
        public SoundGunfire FoleySound { get { return this[nameof(FoleySound)].As<SoundGunfire>(); } set { this["FoleySound"] = value; } }
        public float MinVolumeSpeed { get { return this[nameof(MinVolumeSpeed)].GetValue<float>(); } set { this[nameof(MinVolumeSpeed)].SetValue<float>(value); } }
        public float MaxVolumeSpeed { get { return this[nameof(MaxVolumeSpeed)].GetValue<float>(); } set { this[nameof(MaxVolumeSpeed)].SetValue<float>(value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public SoundGunfire DeathVocalization { get { return this[nameof(DeathVocalization)].As<SoundGunfire>(); } set { this["DeathVocalization"] = value; } }
        public Object DeathVocalizationSocketName { get { return this[nameof(DeathVocalizationSocketName)]; } set { this[nameof(DeathVocalizationSocketName)] = value; } }
    }
    public class TargetConvergeSettings : Object
    {
        public TargetConvergeSettings(nint addr) : base(addr) { }
        public float DesiredDistance { get { return this[nameof(DesiredDistance)].GetValue<float>(); } set { this[nameof(DesiredDistance)].SetValue<float>(value); } }
        public float DesiredHeight { get { return this[nameof(DesiredHeight)].GetValue<float>(); } set { this[nameof(DesiredHeight)].SetValue<float>(value); } }
        public Vector ConvergeOffset { get { return this[nameof(ConvergeOffset)].As<Vector>(); } set { this["ConvergeOffset"] = value; } }
        public float ConvergeTime { get { return this[nameof(ConvergeTime)].GetValue<float>(); } set { this[nameof(ConvergeTime)].SetValue<float>(value); } }
        public float MaxScale { get { return this[nameof(MaxScale)].GetValue<float>(); } set { this[nameof(MaxScale)].SetValue<float>(value); } }
        public float DirectionOffset { get { return this[nameof(DirectionOffset)].GetValue<float>(); } set { this[nameof(DirectionOffset)].SetValue<float>(value); } }
        public bool OnlyAffectForwardVelocity { get { return this[nameof(OnlyAffectForwardVelocity)].Flag; } set { this[nameof(OnlyAffectForwardVelocity)].Flag = value; } }
    }
    public class KeyImage : Object
    {
        public KeyImage(nint addr) : base(addr) { }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public float Angle { get { return this[nameof(Angle)].GetValue<float>(); } set { this[nameof(Angle)].SetValue<float>(value); } }
    }
    public class CheatCommandDetails : Object
    {
        public CheatCommandDetails(nint addr) : base(addr) { }
        public Object Command { get { return this[nameof(Command)]; } set { this[nameof(Command)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public uint ArgumentCount { get { return this[nameof(ArgumentCount)].GetValue<uint>(); } set { this[nameof(ArgumentCount)].SetValue<uint>(value); } }
        public bool bExecuteOnServer { get { return this[nameof(bExecuteOnServer)].Flag; } set { this[nameof(bExecuteOnServer)].Flag = value; } }
    }
    public class CheatCommands : Object
    {
        public CheatCommands(nint addr) : base(addr) { }
        public Object CheatCommandDetails { get { return this[nameof(CheatCommandDetails)]; } set { this[nameof(CheatCommandDetails)] = value; } }
        public Array<Object> CheatCommands_value { get { return new Array<Object>(this[nameof(CheatCommands)].Address); } }
    }
    public class InputKeySet : Object
    {
        public InputKeySet(nint addr) : base(addr) { }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public bool bClearOnRelease { get { return this[nameof(bClearOnRelease)].Flag; } set { this[nameof(bClearOnRelease)].Flag = value; } }
        public Array<InputActionKeyMapping> ActionMappings { get { return new Array<InputActionKeyMapping>(this[nameof(ActionMappings)].Address); } }
    }
    public class CheatActionCategory : Object
    {
        public CheatActionCategory(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Array<InputActionKeyMapping> InputActions { get { return new Array<InputActionKeyMapping>(this[nameof(InputActions)].Address); } }
    }
    public class PendingCheatInputInstanceData : Object
    {
        public PendingCheatInputInstanceData(nint addr) : base(addr) { }
    }
    public class RelevantPlayerCachedData : Object
    {
        public RelevantPlayerCachedData(nint addr) : base(addr) { }
        public Actor RelevantPlayer { get { return this[nameof(RelevantPlayer)].As<Actor>(); } set { this["RelevantPlayer"] = value; } }
    }
    public class SurfaceNormalCheckParams : Object
    {
        public SurfaceNormalCheckParams(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public float SampleDistance { get { return this[nameof(SampleDistance)].GetValue<float>(); } set { this[nameof(SampleDistance)].SetValue<float>(value); } }
        public Vector OriginalSurfaceNormal { get { return this[nameof(OriginalSurfaceNormal)].As<Vector>(); } set { this["OriginalSurfaceNormal"] = value; } }
        public Vector SampleDirection { get { return this[nameof(SampleDirection)].As<Vector>(); } set { this["SampleDirection"] = value; } }
        public Actor TargetActorOverride { get { return this[nameof(TargetActorOverride)].As<Actor>(); } set { this["TargetActorOverride"] = value; } }
        public float DebugDrawTime { get { return this[nameof(DebugDrawTime)].GetValue<float>(); } set { this[nameof(DebugDrawTime)].SetValue<float>(value); } }
    }
    public class GunfireTraceParams : Object
    {
        public GunfireTraceParams(nint addr) : base(addr) { }
        public byte Pierce { get { return this[nameof(Pierce)].GetValue<byte>(); } set { this[nameof(Pierce)].SetValue<byte>(value); } }
        public int Victims { get { return this[nameof(Victims)].GetValue<int>(); } set { this[nameof(Victims)].SetValue<int>(value); } }
        public int MaxVictims { get { return this[nameof(MaxVictims)].GetValue<int>(); } set { this[nameof(MaxVictims)].SetValue<int>(value); } }
    }
    public class ReplicatedHits : Object
    {
        public ReplicatedHits(nint addr) : base(addr) { }
    }
    public class WeaponTraceSegment : Object
    {
        public WeaponTraceSegment(nint addr) : base(addr) { }
        public Object StartComponent { get { return this[nameof(StartComponent)]; } set { this[nameof(StartComponent)] = value; } }
        public Object StartBoneName { get { return this[nameof(StartBoneName)]; } set { this[nameof(StartBoneName)] = value; } }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
        public HitResult Hit { get { return this[nameof(Hit)].As<HitResult>(); } set { this["Hit"] = value; } }
        public bool bIsPiercingHit { get { return this[nameof(bIsPiercingHit)].Flag; } set { this[nameof(bIsPiercingHit)].Flag = value; } }
    }
    public class WeaponTracePath : Object
    {
        public WeaponTracePath(nint addr) : base(addr) { }
        public Array<WeaponTraceSegment> Segments { get { return new Array<WeaponTraceSegment>(this[nameof(Segments)].Address); } }
        public GunfireTraceParams Critera { get { return this[nameof(Critera)].As<GunfireTraceParams>(); } set { this["Critera"] = value; } }
    }
    public class TargetingColorParams : Object
    {
        public TargetingColorParams(nint addr) : base(addr) { }
        public bool OverrideProjectDefaultColors { get { return this[nameof(OverrideProjectDefaultColors)].Flag; } set { this[nameof(OverrideProjectDefaultColors)].Flag = value; } }
        public Color NoTargetColor { get { return this[nameof(NoTargetColor)].As<Color>(); } set { this["NoTargetColor"] = value; } }
        public Color HostileColor { get { return this[nameof(HostileColor)].As<Color>(); } set { this["HostileColor"] = value; } }
        public Color FriendlyColor { get { return this[nameof(FriendlyColor)].As<Color>(); } set { this["FriendlyColor"] = value; } }
        public Color NeutralColor { get { return this[nameof(NeutralColor)].As<Color>(); } set { this["NeutralColor"] = value; } }
        public Color DisabledColor { get { return this[nameof(DisabledColor)].As<Color>(); } set { this["DisabledColor"] = value; } }
    }
    public class ProjectileParams : Object
    {
        public ProjectileParams(nint addr) : base(addr) { }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public bool OrientToTarget { get { return this[nameof(OrientToTarget)].Flag; } set { this[nameof(OrientToTarget)].Flag = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public Object ComponentToRotate { get { return this[nameof(ComponentToRotate)]; } set { this[nameof(ComponentToRotate)] = value; } }
        public bool bMaintainInitialRelativeRotation { get { return this[nameof(bMaintainInitialRelativeRotation)].Flag; } set { this[nameof(bMaintainInitialRelativeRotation)].Flag = value; } }
        public Vector Target { get { return this[nameof(Target)].As<Vector>(); } set { this["Target"] = value; } }
        public float Spread { get { return this[nameof(Spread)].GetValue<float>(); } set { this[nameof(Spread)].SetValue<float>(value); } }
        public bool IsSubProjectile { get { return this[nameof(IsSubProjectile)].Flag; } set { this[nameof(IsSubProjectile)].Flag = value; } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public float TargetLead { get { return this[nameof(TargetLead)].GetValue<float>(); } set { this[nameof(TargetLead)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float GravityScale { get { return this[nameof(GravityScale)].GetValue<float>(); } set { this[nameof(GravityScale)].SetValue<float>(value); } }
        public EAutoArcType AutoArc { get { return (EAutoArcType)this[nameof(AutoArc)].GetValue<int>(); } set { this[nameof(AutoArc)].SetValue<int>((int)value); } }
        public float AutoArcHeight { get { return this[nameof(AutoArcHeight)].GetValue<float>(); } set { this[nameof(AutoArcHeight)].SetValue<float>(value); } }
        public bool bDeferred { get { return this[nameof(bDeferred)].Flag; } set { this[nameof(bDeferred)].Flag = value; } }
    }
    public class ReplicatedDamageInfo : Object
    {
        public ReplicatedDamageInfo(nint addr) : base(addr) { }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public Vector_NetQuantize ImpactPoint { get { return this[nameof(ImpactPoint)].As<Vector_NetQuantize>(); } set { this["ImpactPoint"] = value; } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float AbsorbedDamage { get { return this[nameof(AbsorbedDamage)].GetValue<float>(); } set { this[nameof(AbsorbedDamage)].SetValue<float>(value); } }
        public bool Killed { get { return this[nameof(Killed)].Flag; } set { this[nameof(Killed)].Flag = value; } }
        public bool Critical { get { return this[nameof(Critical)].Flag; } set { this[nameof(Critical)].Flag = value; } }
        public bool WeakSpot { get { return this[nameof(WeakSpot)].Flag; } set { this[nameof(WeakSpot)].Flag = value; } }
        public bool Resisted { get { return this[nameof(Resisted)].Flag; } set { this[nameof(Resisted)].Flag = value; } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
    }
    public class EntitlementEntry : Object
    {
        public EntitlementEntry(nint addr) : base(addr) { }
        public EEntitlementPlatform Platform { get { return (EEntitlementPlatform)this[nameof(Platform)].GetValue<int>(); } set { this[nameof(Platform)].SetValue<int>((int)value); } }
        public Array<Object> EntitlementIDs { get { return new Array<Object>(this[nameof(EntitlementIDs)].Address); } }
    }
    public class FactionAffiliation : Object
    {
        public FactionAffiliation(nint addr) : base(addr) { }
        public Object Faction1 { get { return this[nameof(Faction1)]; } set { this[nameof(Faction1)] = value; } }
        public Object Faction2 { get { return this[nameof(Faction2)]; } set { this[nameof(Faction2)] = value; } }
        public EAffiliation Affiliation { get { return (EAffiliation)this[nameof(Affiliation)].GetValue<int>(); } set { this[nameof(Affiliation)].SetValue<int>((int)value); } }
    }
    public class FactionOverride : Object
    {
        public FactionOverride(nint addr) : base(addr) { }
        public Object Faction { get { return this[nameof(Faction)]; } set { this[nameof(Faction)] = value; } }
        public EAffiliation Affiliation { get { return (EAffiliation)this[nameof(Affiliation)].GetValue<int>(); } set { this[nameof(Affiliation)].SetValue<int>((int)value); } }
    }
    public class FactionDamageTracker : Object
    {
        public FactionDamageTracker(nint addr) : base(addr) { }
        public Object Faction { get { return this[nameof(Faction)]; } set { this[nameof(Faction)] = value; } }
        public float DamagePercent { get { return this[nameof(DamagePercent)].GetValue<float>(); } set { this[nameof(DamagePercent)].SetValue<float>(value); } }
    }
    public class MultiplayerScalingData : TableRowBase
    {
        public MultiplayerScalingData(nint addr) : base(addr) { }
        public float EnemyDamageScalar { get { return this[nameof(EnemyDamageScalar)].GetValue<float>(); } set { this[nameof(EnemyDamageScalar)].SetValue<float>(value); } }
        public float PlayerDamageScalar { get { return this[nameof(PlayerDamageScalar)].GetValue<float>(); } set { this[nameof(PlayerDamageScalar)].SetValue<float>(value); } }
        public float SpawnQuantityScalar { get { return this[nameof(SpawnQuantityScalar)].GetValue<float>(); } set { this[nameof(SpawnQuantityScalar)].SetValue<float>(value); } }
    }
    public class ApplyHealingContextData : Object
    {
        public ApplyHealingContextData(nint addr) : base(addr) { }
        public Actor HealingOwner { get { return this[nameof(HealingOwner)].As<Actor>(); } set { this["HealingOwner"] = value; } }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public StatsComponent OwnerStats { get { return this[nameof(OwnerStats)].As<StatsComponent>(); } set { this["OwnerStats"] = value; } }
        public StatsComponent CauseStats { get { return this[nameof(CauseStats)].As<StatsComponent>(); } set { this["CauseStats"] = value; } }
        public StatsComponent TargetStats { get { return this[nameof(TargetStats)].As<StatsComponent>(); } set { this["TargetStats"] = value; } }
        public HealingTypeGunfire HealingType { get { return this[nameof(HealingType)].As<HealingTypeGunfire>(); } set { this["HealingType"] = value; } }
        public ActionComponent TargetActionComp { get { return this[nameof(TargetActionComp)].As<ActionComponent>(); } set { this["TargetActionComp"] = value; } }
    }
    public class ApplyDamageContextData : Object
    {
        public ApplyDamageContextData(nint addr) : base(addr) { }
        public Actor DamageOwner { get { return this[nameof(DamageOwner)].As<Actor>(); } set { this["DamageOwner"] = value; } }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public StatsComponent OwnerStats { get { return this[nameof(OwnerStats)].As<StatsComponent>(); } set { this["OwnerStats"] = value; } }
        public StatsComponent CauseStats { get { return this[nameof(CauseStats)].As<StatsComponent>(); } set { this["CauseStats"] = value; } }
        public StatsComponent TargetStats { get { return this[nameof(TargetStats)].As<StatsComponent>(); } set { this["TargetStats"] = value; } }
        public DamageTypeGunfire DamageType { get { return this[nameof(DamageType)].As<DamageTypeGunfire>(); } set { this["DamageType"] = value; } }
        public HitLogComponent TargetHitLogComp { get { return this[nameof(TargetHitLogComp)].As<HitLogComponent>(); } set { this["TargetHitLogComp"] = value; } }
        public ActionComponent TargetActionComp { get { return this[nameof(TargetActionComp)].As<ActionComponent>(); } set { this["TargetActionComp"] = value; } }
        public TraitsComponent TargetTraitsComp { get { return this[nameof(TargetTraitsComp)].As<TraitsComponent>(); } set { this["TargetTraitsComp"] = value; } }
        public StateMachineComponent TargetStateMachineComp { get { return this[nameof(TargetStateMachineComp)].As<StateMachineComponent>(); } set { this["TargetStateMachineComp"] = value; } }
    }
    public class ActorQueryFilter : Object
    {
        public ActorQueryFilter(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public EAffiliation Affiliation { get { return (EAffiliation)this[nameof(Affiliation)].GetValue<int>(); } set { this[nameof(Affiliation)].SetValue<int>((int)value); } }
        public Actor RefActor { get { return this[nameof(RefActor)].As<Actor>(); } set { this["RefActor"] = value; } }
        public bool IgnoreRefActor { get { return this[nameof(IgnoreRefActor)].Flag; } set { this[nameof(IgnoreRefActor)].Flag = value; } }
        public bool SortResultsByDistance { get { return this[nameof(SortResultsByDistance)].Flag; } set { this[nameof(SortResultsByDistance)].Flag = value; } }
        public bool SolveIn2D { get { return this[nameof(SolveIn2D)].Flag; } set { this[nameof(SolveIn2D)].Flag = value; } }
        public bool TestLineOfSight { get { return this[nameof(TestLineOfSight)].Flag; } set { this[nameof(TestLineOfSight)].Flag = value; } }
        public bool TestCollision { get { return this[nameof(TestCollision)].Flag; } set { this[nameof(TestCollision)].Flag = value; } }
        public bool TestHealth { get { return this[nameof(TestHealth)].Flag; } set { this[nameof(TestHealth)].Flag = value; } }
        public CompareOp HealthCompare { get { return (CompareOp)this[nameof(HealthCompare)].GetValue<int>(); } set { this[nameof(HealthCompare)].SetValue<int>((int)value); } }
        public float HealthValue { get { return this[nameof(HealthValue)].GetValue<float>(); } set { this[nameof(HealthValue)].SetValue<float>(value); } }
    }
    public class ActorQueryShapeDetails : Object
    {
        public ActorQueryShapeDetails(nint addr) : base(addr) { }
        public EQueryShapeType ShapeType { get { return (EQueryShapeType)this[nameof(ShapeType)].GetValue<int>(); } set { this[nameof(ShapeType)].SetValue<int>((int)value); } }
        public float MinRadius { get { return this[nameof(MinRadius)].GetValue<float>(); } set { this[nameof(MinRadius)].SetValue<float>(value); } }
        public float MaxRadius { get { return this[nameof(MaxRadius)].GetValue<float>(); } set { this[nameof(MaxRadius)].SetValue<float>(value); } }
        public Vector MinExtents { get { return this[nameof(MinExtents)].As<Vector>(); } set { this["MinExtents"] = value; } }
        public Vector MaxExtents { get { return this[nameof(MaxExtents)].As<Vector>(); } set { this["MaxExtents"] = value; } }
    }
    public class ActorQueryResult : Object
    {
        public ActorQueryResult(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public Vector TestLocation { get { return this[nameof(TestLocation)].As<Vector>(); } set { this["TestLocation"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
    }
    public class CachedMaterialState : Object
    {
        public CachedMaterialState(nint addr) : base(addr) { }
        public MaterialInterface OriginalMaterial { get { return this[nameof(OriginalMaterial)].As<MaterialInterface>(); } set { this["OriginalMaterial"] = value; } }
        public MaterialInterface NewMaterial { get { return this[nameof(NewMaterial)].As<MaterialInterface>(); } set { this["NewMaterial"] = value; } }
        public int OriginalMaterialIndex { get { return this[nameof(OriginalMaterialIndex)].GetValue<int>(); } set { this[nameof(OriginalMaterialIndex)].SetValue<int>(value); } }
        public MeshComponent Component { get { return this[nameof(Component)].As<MeshComponent>(); } set { this["Component"] = value; } }
    }
    public class ImpactFXDecalCurves : Object
    {
        public ImpactFXDecalCurves(nint addr) : base(addr) { }
        public CurveFloat DecalEmissiveCurve { get { return this[nameof(DecalEmissiveCurve)].As<CurveFloat>(); } set { this["DecalEmissiveCurve"] = value; } }
        public CurveFloat DecalOpacityCurve { get { return this[nameof(DecalOpacityCurve)].As<CurveFloat>(); } set { this["DecalOpacityCurve"] = value; } }
    }
    public class ImpactFX : Object
    {
        public ImpactFX(nint addr) : base(addr) { }
        public byte SurfaceType { get { return this[nameof(SurfaceType)].GetValue<byte>(); } set { this[nameof(SurfaceType)].SetValue<byte>(value); } }
        public Object ImpactFX_value { get { return this[nameof(ImpactFX)]; } set { this[nameof(ImpactFX)] = value; } }
        public SoftSoundGunfire ImpactSound { get { return this[nameof(ImpactSound)].As<SoftSoundGunfire>(); } set { this["ImpactSound"] = value; } }
        public Object DecalMaterial { get { return this[nameof(DecalMaterial)]; } set { this[nameof(DecalMaterial)] = value; } }
        public NiagaraSystem ImpactFXLoaded { get { return this[nameof(ImpactFXLoaded)].As<NiagaraSystem>(); } set { this["ImpactFXLoaded"] = value; } }
        public SoundGunfire ImpactSoundLoaded { get { return this[nameof(ImpactSoundLoaded)].As<SoundGunfire>(); } set { this["ImpactSoundLoaded"] = value; } }
        public MaterialInterface DecalMaterialLoaded { get { return this[nameof(DecalMaterialLoaded)].As<MaterialInterface>(); } set { this["DecalMaterialLoaded"] = value; } }
        public float DecalSize { get { return this[nameof(DecalSize)].GetValue<float>(); } set { this[nameof(DecalSize)].SetValue<float>(value); } }
        public float DecalDepth { get { return this[nameof(DecalDepth)].GetValue<float>(); } set { this[nameof(DecalDepth)].SetValue<float>(value); } }
        public float DecalLifeSpan { get { return this[nameof(DecalLifeSpan)].GetValue<float>(); } set { this[nameof(DecalLifeSpan)].SetValue<float>(value); } }
        public float DecalFadeScreenSize { get { return this[nameof(DecalFadeScreenSize)].GetValue<float>(); } set { this[nameof(DecalFadeScreenSize)].SetValue<float>(value); } }
        public bool DecalRandomizeRotation { get { return this[nameof(DecalRandomizeRotation)].Flag; } set { this[nameof(DecalRandomizeRotation)].Flag = value; } }
        public bool Reflect { get { return this[nameof(Reflect)].Flag; } set { this[nameof(Reflect)].Flag = value; } }
        public ImpactFXDecalCurves Curves { get { return this[nameof(Curves)].As<ImpactFXDecalCurves>(); } set { this["Curves"] = value; } }
    }
    public class ImpactEffectData : TableRowBase
    {
        public ImpactEffectData(nint addr) : base(addr) { }
        public ImpactFX Default { get { return this[nameof(Default)].As<ImpactFX>(); } set { this["Default"] = value; } }
        public Array<ImpactFX> ImpactFX { get { return new Array<ImpactFX>(this[nameof(ImpactFX)].Address); } }
    }
    public class ImpactEffectOverlayData : TableRowBase
    {
        public ImpactEffectOverlayData(nint addr) : base(addr) { }
        public ImpactFX OverlayImpact { get { return this[nameof(OverlayImpact)].As<ImpactFX>(); } set { this["OverlayImpact"] = value; } }
    }
    public class TracerPathSegment : Object
    {
        public TracerPathSegment(nint addr) : base(addr) { }
        public Object TracerClass { get { return this[nameof(TracerClass)]; } set { this[nameof(TracerClass)] = value; } }
    }
    public class ImpactDescriptorSet : Object
    {
        public ImpactDescriptorSet(nint addr) : base(addr) { }
        public ImpactEffectDescriptor Foot { get { return this[nameof(Foot)].As<ImpactEffectDescriptor>(); } set { this["Foot"] = value; } }
        public ImpactEffectDescriptor FootSprint { get { return this[nameof(FootSprint)].As<ImpactEffectDescriptor>(); } set { this["FootSprint"] = value; } }
        public ImpactEffectDescriptor FootScuff { get { return this[nameof(FootScuff)].As<ImpactEffectDescriptor>(); } set { this["FootScuff"] = value; } }
        public ImpactEffectDescriptor Hand { get { return this[nameof(Hand)].As<ImpactEffectDescriptor>(); } set { this["Hand"] = value; } }
        public ImpactEffectDescriptor HandSprint { get { return this[nameof(HandSprint)].As<ImpactEffectDescriptor>(); } set { this["HandSprint"] = value; } }
        public ImpactEffectDescriptor Land { get { return this[nameof(Land)].As<ImpactEffectDescriptor>(); } set { this["Land"] = value; } }
        public ImpactEffectDescriptor Slam { get { return this[nameof(Slam)].As<ImpactEffectDescriptor>(); } set { this["Slam"] = value; } }
        public ImpactEffectDescriptor Body { get { return this[nameof(Body)].As<ImpactEffectDescriptor>(); } set { this["Body"] = value; } }
    }
    public class ImpactDescriptorCharacterSet : ImpactDescriptorSet
    {
        public ImpactDescriptorCharacterSet(nint addr) : base(addr) { }
        public ImpactEffectDescriptor DefaultImpact { get { return this[nameof(DefaultImpact)].As<ImpactEffectDescriptor>(); } set { this["DefaultImpact"] = value; } }
        public ImpactEffectDescriptor DefaultBlock { get { return this[nameof(DefaultBlock)].As<ImpactEffectDescriptor>(); } set { this["DefaultBlock"] = value; } }
    }
    public class InheritableArrayElement : Object
    {
        public InheritableArrayElement(nint addr) : base(addr) { }
    }
    public class InheritableArray : Object
    {
        public InheritableArray(nint addr) : base(addr) { }
    }
    public class GenericInput : Object
    {
        public GenericInput(nint addr) : base(addr) { }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
        public bool bShift { get { return this[nameof(bShift)].Flag; } set { this[nameof(bShift)].Flag = value; } }
        public bool bCtrl { get { return this[nameof(bCtrl)].Flag; } set { this[nameof(bCtrl)].Flag = value; } }
        public bool bAlt { get { return this[nameof(bAlt)].Flag; } set { this[nameof(bAlt)].Flag = value; } }
        public bool bCmd { get { return this[nameof(bCmd)].Flag; } set { this[nameof(bCmd)].Flag = value; } }
    }
    public class RebindedInputAction : Object
    {
        public RebindedInputAction(nint addr) : base(addr) { }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
        public Array<InputActionKeyMapping> AddedKeys { get { return new Array<InputActionKeyMapping>(this[nameof(AddedKeys)].Address); } }
        public Array<InputActionKeyMapping> RemovedKeys { get { return new Array<InputActionKeyMapping>(this[nameof(RemovedKeys)].Address); } }
    }
    public class RebindedInputAxis : Object
    {
        public RebindedInputAxis(nint addr) : base(addr) { }
        public Object AxisName { get { return this[nameof(AxisName)]; } set { this[nameof(AxisName)] = value; } }
        public Array<InputAxisKeyMapping> AddedKeys { get { return new Array<InputAxisKeyMapping>(this[nameof(AddedKeys)].Address); } }
        public Array<InputAxisKeyMapping> RemovedKeys { get { return new Array<InputAxisKeyMapping>(this[nameof(RemovedKeys)].Address); } }
    }
    public class InputActivity : Object
    {
        public InputActivity(nint addr) : base(addr) { }
    }
    public class InputButton : Object
    {
        public InputButton(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public InputAction InputAction { get { return this[nameof(InputAction)].As<InputAction>(); } set { this["InputAction"] = value; } }
        public InputFilterMethod Filter { get { return (InputFilterMethod)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
    }
    public class InspectStatBase : Object
    {
        public InspectStatBase(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object CustomDescription { get { return this[nameof(CustomDescription)]; } set { this[nameof(CustomDescription)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public EInspectStatType Type { get { return (EInspectStatType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public bool Primary { get { return this[nameof(Primary)].Flag; } set { this[nameof(Primary)].Flag = value; } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
        public bool Modifier { get { return this[nameof(Modifier)].Flag; } set { this[nameof(Modifier)].Flag = value; } }
    }
    public class InspectStat : InspectStatBase
    {
        public InspectStat(nint addr) : base(addr) { }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public Object Context { get { return this[nameof(Context)].As<Object>(); } set { this["Context"] = value; } }
    }
    public class InspectMod : Object
    {
        public InspectMod(nint addr) : base(addr) { }
        public Object InspectObject { get { return this[nameof(InspectObject)].As<Object>(); } set { this["InspectObject"] = value; } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public byte Slot { get { return this[nameof(Slot)].GetValue<byte>(); } set { this[nameof(Slot)].SetValue<byte>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public bool bRemoveable { get { return this[nameof(bRemoveable)].Flag; } set { this[nameof(bRemoveable)].Flag = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object FlavorText { get { return this[nameof(FlavorText)]; } set { this[nameof(FlavorText)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Array<InspectStat> Stats { get { return new Array<InspectStat>(this[nameof(Stats)].Address); } }
    }
    public class InspectInfo : Object
    {
        public InspectInfo(nint addr) : base(addr) { }
        public Object InspectObject { get { return this[nameof(InspectObject)].As<Object>(); } set { this["InspectObject"] = value; } }
        public Object InspectData { get { return this[nameof(InspectData)].As<Object>(); } set { this["InspectData"] = value; } }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int Quantity { get { return this[nameof(Quantity)].GetValue<int>(); } set { this[nameof(Quantity)].SetValue<int>(value); } }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
        public int ValueInc { get { return this[nameof(ValueInc)].GetValue<int>(); } set { this[nameof(ValueInc)].SetValue<int>(value); } }
        public int PickupValue { get { return this[nameof(PickupValue)].GetValue<int>(); } set { this[nameof(PickupValue)].SetValue<int>(value); } }
        public float SellScalar { get { return this[nameof(SellScalar)].GetValue<float>(); } set { this[nameof(SellScalar)].SetValue<float>(value); } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object SubLabel { get { return this[nameof(SubLabel)]; } set { this[nameof(SubLabel)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object FlavorText { get { return this[nameof(FlavorText)]; } set { this[nameof(FlavorText)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Array<InspectStat> Stats { get { return new Array<InspectStat>(this[nameof(Stats)].Address); } }
        public Array<InspectMod> Mods { get { return new Array<InspectMod>(this[nameof(Mods)].Address); } }
    }
    public class InteractableActorReference : Object
    {
        public InteractableActorReference(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
        public Object State { get { return this[nameof(State)]; } set { this[nameof(State)] = value; } }
    }
    public class KinematicInfo : Object
    {
        public KinematicInfo(nint addr) : base(addr) { }
        public bool Simulated { get { return this[nameof(Simulated)].Flag; } set { this[nameof(Simulated)].Flag = value; } }
        public Vector OutputPosition { get { return this[nameof(OutputPosition)].As<Vector>(); } set { this["OutputPosition"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float ElapsedTime { get { return this[nameof(ElapsedTime)].GetValue<float>(); } set { this[nameof(ElapsedTime)].SetValue<float>(value); } }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
    }
    public class PhysicsImpactSoundInfo : Object
    {
        public PhysicsImpactSoundInfo(nint addr) : base(addr) { }
        public SoundGunfire FoleySound { get { return this[nameof(FoleySound)].As<SoundGunfire>(); } set { this["FoleySound"] = value; } }
        public SoundGunfire RollingSound { get { return this[nameof(RollingSound)].As<SoundGunfire>(); } set { this["RollingSound"] = value; } }
        public CurveFloat VelocityVolumeCurve { get { return this[nameof(VelocityVolumeCurve)].As<CurveFloat>(); } set { this["VelocityVolumeCurve"] = value; } }
        public CurveFloat PitchVelocityCurve { get { return this[nameof(PitchVelocityCurve)].As<CurveFloat>(); } set { this["PitchVelocityCurve"] = value; } }
        public bool StopSoundManually { get { return this[nameof(StopSoundManually)].Flag; } set { this[nameof(StopSoundManually)].Flag = value; } }
        public CurveFloat VelocityDurationCurve { get { return this[nameof(VelocityDurationCurve)].As<CurveFloat>(); } set { this["VelocityDurationCurve"] = value; } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public float FoleySoundThreshold { get { return this[nameof(FoleySoundThreshold)].GetValue<float>(); } set { this[nameof(FoleySoundThreshold)].SetValue<float>(value); } }
        public float RollingSoundThreshold { get { return this[nameof(RollingSoundThreshold)].GetValue<float>(); } set { this[nameof(RollingSoundThreshold)].SetValue<float>(value); } }
    }
    public class CollisionResponseOverride : Object
    {
        public CollisionResponseOverride(nint addr) : base(addr) { }
        public byte Channel { get { return this[nameof(Channel)].GetValue<byte>(); } set { this[nameof(Channel)].SetValue<byte>(value); } }
        public byte Response { get { return this[nameof(Response)].GetValue<byte>(); } set { this[nameof(Response)].SetValue<byte>(value); } }
        public byte OriginalResponse { get { return this[nameof(OriginalResponse)].GetValue<byte>(); } set { this[nameof(OriginalResponse)].SetValue<byte>(value); } }
    }
    public class PhysicsActorState : Object
    {
        public PhysicsActorState(nint addr) : base(addr) { }
        public float SpeedRef { get { return this[nameof(SpeedRef)].GetValue<float>(); } set { this[nameof(SpeedRef)].SetValue<float>(value); } }
        public PhysicalMaterial PhysicalMaterialOverride { get { return this[nameof(PhysicalMaterialOverride)].As<PhysicalMaterial>(); } set { this["PhysicalMaterialOverride"] = value; } }
        public float MassScale { get { return this[nameof(MassScale)].GetValue<float>(); } set { this[nameof(MassScale)].SetValue<float>(value); } }
        public float LinearDamping { get { return this[nameof(LinearDamping)].GetValue<float>(); } set { this[nameof(LinearDamping)].SetValue<float>(value); } }
        public float AngularDamping { get { return this[nameof(AngularDamping)].GetValue<float>(); } set { this[nameof(AngularDamping)].SetValue<float>(value); } }
        public Vector InertiaTensorScale { get { return this[nameof(InertiaTensorScale)].As<Vector>(); } set { this["InertiaTensorScale"] = value; } }
        public Array<CollisionResponseOverride> CollisionOverrides { get { return new Array<CollisionResponseOverride>(this[nameof(CollisionOverrides)].Address); } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public ImpactEffectDescriptor ImpactEffects { get { return this[nameof(ImpactEffects)].As<ImpactEffectDescriptor>(); } set { this["ImpactEffects"] = value; } }
        public float WeaponPhantomHorizontalInflation { get { return this[nameof(WeaponPhantomHorizontalInflation)].GetValue<float>(); } set { this[nameof(WeaponPhantomHorizontalInflation)].SetValue<float>(value); } }
        public float WeaponPhantomVerticalInflation { get { return this[nameof(WeaponPhantomVerticalInflation)].GetValue<float>(); } set { this[nameof(WeaponPhantomVerticalInflation)].SetValue<float>(value); } }
        public float WeaponPhantomVerticalOffset { get { return this[nameof(WeaponPhantomVerticalOffset)].GetValue<float>(); } set { this[nameof(WeaponPhantomVerticalOffset)].SetValue<float>(value); } }
        public float WeaponPhantomForwardOffset { get { return this[nameof(WeaponPhantomForwardOffset)].GetValue<float>(); } set { this[nameof(WeaponPhantomForwardOffset)].SetValue<float>(value); } }
        public Object GroundFX { get { return this[nameof(GroundFX)]; } set { this[nameof(GroundFX)] = value; } }
        public Object FallingFX { get { return this[nameof(FallingFX)]; } set { this[nameof(FallingFX)] = value; } }
    }
    public class PhysicsActorStateSet : Object
    {
        public PhysicsActorStateSet(nint addr) : base(addr) { }
        public Object PhysicsBoundsType { get { return this[nameof(PhysicsBoundsType)]; } set { this[nameof(PhysicsBoundsType)] = value; } }
        public float EntryLinearVelocityScale { get { return this[nameof(EntryLinearVelocityScale)].GetValue<float>(); } set { this[nameof(EntryLinearVelocityScale)].SetValue<float>(value); } }
        public float EntryAngularVelocityScale { get { return this[nameof(EntryAngularVelocityScale)].GetValue<float>(); } set { this[nameof(EntryAngularVelocityScale)].SetValue<float>(value); } }
        public Array<PhysicsActorState> States { get { return new Array<PhysicsActorState>(this[nameof(States)].Address); } }
        public PhysicsActorState DisabledState { get { return this[nameof(DisabledState)].As<PhysicsActorState>(); } set { this["DisabledState"] = value; } }
    }
    public class CachedPhysicsComponent : Object
    {
        public CachedPhysicsComponent(nint addr) : base(addr) { }
        public PrimitiveComponent CachedComponent { get { return this[nameof(CachedComponent)].As<PrimitiveComponent>(); } set { this["CachedComponent"] = value; } }
        public Vector CachedLinearVelocity { get { return this[nameof(CachedLinearVelocity)].As<Vector>(); } set { this["CachedLinearVelocity"] = value; } }
        public Vector CachedAngularVelocity { get { return this[nameof(CachedAngularVelocity)].As<Vector>(); } set { this["CachedAngularVelocity"] = value; } }
    }
    public class PlayStateContext : Object
    {
        public PlayStateContext(nint addr) : base(addr) { }
        public Object StateName { get { return this[nameof(StateName)]; } set { this[nameof(StateName)] = value; } }
        public Object Context { get { return this[nameof(Context)].As<Object>(); } set { this["Context"] = value; } }
        public Object Reason { get { return this[nameof(Reason)]; } set { this[nameof(Reason)] = value; } }
    }
    public class PortalActorRecord : Object
    {
        public PortalActorRecord(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
    }
    public class PortalActorTransition : PortalActorRecord
    {
        public PortalActorTransition(nint addr) : base(addr) { }
        public Portal TargetPortal { get { return this[nameof(TargetPortal)].As<Portal>(); } set { this["TargetPortal"] = value; } }
        public Array<PortalActorRecord> AttachedActors { get { return new Array<PortalActorRecord>(this[nameof(AttachedActors)].Address); } }
    }
    public class PositionValue : Object
    {
        public PositionValue(nint addr) : base(addr) { }
        public EPositionSource Source { get { return (EPositionSource)this[nameof(Source)].GetValue<int>(); } set { this[nameof(Source)].SetValue<int>((int)value); } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class ProjectileVisualizationParams : Object
    {
        public ProjectileVisualizationParams(nint addr) : base(addr) { }
        public EProjectileSimMode SimMode { get { return (EProjectileSimMode)this[nameof(SimMode)].GetValue<int>(); } set { this[nameof(SimMode)].SetValue<int>((int)value); } }
        public EProjectileBounceMode BounceMode { get { return (EProjectileBounceMode)this[nameof(BounceMode)].GetValue<int>(); } set { this[nameof(BounceMode)].SetValue<int>((int)value); } }
        public int MaxBounces { get { return this[nameof(MaxBounces)].GetValue<int>(); } set { this[nameof(MaxBounces)].SetValue<int>(value); } }
        public float FinalBounceMaximumDistance { get { return this[nameof(FinalBounceMaximumDistance)].GetValue<float>(); } set { this[nameof(FinalBounceMaximumDistance)].SetValue<float>(value); } }
        public float SpeedOverride { get { return this[nameof(SpeedOverride)].GetValue<float>(); } set { this[nameof(SpeedOverride)].SetValue<float>(value); } }
        public float MaxSimulationTime { get { return this[nameof(MaxSimulationTime)].GetValue<float>(); } set { this[nameof(MaxSimulationTime)].SetValue<float>(value); } }
        public Object ProjectileVisualization { get { return this[nameof(ProjectileVisualization)]; } set { this[nameof(ProjectileVisualization)] = value; } }
    }
    public class ProjectileVisualizationContext : Object
    {
        public ProjectileVisualizationContext(nint addr) : base(addr) { }
        public bool bIsValid { get { return this[nameof(bIsValid)].Flag; } set { this[nameof(bIsValid)].Flag = value; } }
        public Vector EndLocation { get { return this[nameof(EndLocation)].As<Vector>(); } set { this["EndLocation"] = value; } }
        public HitResult LastHit { get { return this[nameof(LastHit)].As<HitResult>(); } set { this["LastHit"] = value; } }
        public bool bWillHitTarget { get { return this[nameof(bWillHitTarget)].Flag; } set { this[nameof(bWillHitTarget)].Flag = value; } }
        public EAffiliation TargetAffiliation { get { return (EAffiliation)this[nameof(TargetAffiliation)].GetValue<int>(); } set { this[nameof(TargetAffiliation)].SetValue<int>((int)value); } }
        public float ColorAlpha { get { return this[nameof(ColorAlpha)].GetValue<float>(); } set { this[nameof(ColorAlpha)].SetValue<float>(value); } }
        public bool bUsesTargetColors { get { return this[nameof(bUsesTargetColors)].Flag; } set { this[nameof(bUsesTargetColors)].Flag = value; } }
        public float ElapsedTime { get { return this[nameof(ElapsedTime)].GetValue<float>(); } set { this[nameof(ElapsedTime)].SetValue<float>(value); } }
        public ProjectileVisualization ProjectileVisualization { get { return this[nameof(ProjectileVisualization)].As<ProjectileVisualization>(); } set { this["ProjectileVisualization"] = value; } }
    }
    public class ReplicatedLocation : Object
    {
        public ReplicatedLocation(nint addr) : base(addr) { }
    }
    public class ReplicatedTrace : ReplicatedLocation
    {
        public ReplicatedTrace(nint addr) : base(addr) { }
    }
    public class ReplicatedHit : ReplicatedTrace
    {
        public ReplicatedHit(nint addr) : base(addr) { }
    }
    public class CachedMeshBoundsSettings : Object
    {
        public CachedMeshBoundsSettings(nint addr) : base(addr) { }
        public SkinnedMeshComponent TargetMeshComponent { get { return this[nameof(TargetMeshComponent)].As<SkinnedMeshComponent>(); } set { this["TargetMeshComponent"] = value; } }
    }
    public class LevelSequencePossession : Object
    {
        public LevelSequencePossession(nint addr) : base(addr) { }
        public Object CachedCollisionMap { get { return this[nameof(CachedCollisionMap)]; } set { this[nameof(CachedCollisionMap)] = value; } }
        public Object CachedMipStreamingMap { get { return this[nameof(CachedMipStreamingMap)]; } set { this[nameof(CachedMipStreamingMap)] = value; } }
        public MovieScenePossessableTrack PossessionTrackDetails { get { return this[nameof(PossessionTrackDetails)].As<MovieScenePossessableTrack>(); } set { this["PossessionTrackDetails"] = value; } }
        public Array<CachedMeshBoundsSettings> CachedBoundsSettings { get { return new Array<CachedMeshBoundsSettings>(this[nameof(CachedBoundsSettings)].Address); } }
    }
    public class SequenceReplicationState : Object
    {
        public SequenceReplicationState(nint addr) : base(addr) { }
        public Array<Actor> RequiredRepActors { get { return new Array<Actor>(this[nameof(RequiredRepActors)].Address); } }
        public int ChangeID { get { return this[nameof(ChangeID)].GetValue<int>(); } set { this[nameof(ChangeID)].SetValue<int>(value); } }
    }
    public class StatValue : Object
    {
        public StatValue(nint addr) : base(addr) { }
        public Object StatName { get { return this[nameof(StatName)]; } set { this[nameof(StatName)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class Dialog : Object
    {
        public Dialog(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public EventTree EventTree { get { return this[nameof(EventTree)].As<EventTree>(); } set { this["EventTree"] = value; } }
    }
    public class DialogTokenValuePair : Object
    {
        public DialogTokenValuePair(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class DialogOption : Object
    {
        public DialogOption(nint addr) : base(addr) { }
        public byte ID { get { return this[nameof(ID)].GetValue<byte>(); } set { this[nameof(ID)].SetValue<byte>(value); } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public bool Valid { get { return this[nameof(Valid)].Flag; } set { this[nameof(Valid)].Flag = value; } }
        public bool Visited { get { return this[nameof(Visited)].Flag; } set { this[nameof(Visited)].Flag = value; } }
        public bool LastVisited { get { return this[nameof(LastVisited)].Flag; } set { this[nameof(LastVisited)].Flag = value; } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
        public Array<EventTreeAttrib> Attributes { get { return new Array<EventTreeAttrib>(this[nameof(Attributes)].Address); } }
    }
    public class DialogInfo : Object
    {
        public DialogInfo(nint addr) : base(addr) { }
        public Object Speaker { get { return this[nameof(Speaker)]; } set { this[nameof(Speaker)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public bool RemoveEmoteOnFinish { get { return this[nameof(RemoveEmoteOnFinish)].Flag; } set { this[nameof(RemoveEmoteOnFinish)].Flag = value; } }
        public EventTreeComponent SourceComponent { get { return this[nameof(SourceComponent)].As<EventTreeComponent>(); } set { this["SourceComponent"] = value; } }
        public Actor LookAtTarget { get { return this[nameof(LookAtTarget)].As<Actor>(); } set { this["LookAtTarget"] = value; } }
        public byte TextCounter { get { return this[nameof(TextCounter)].GetValue<byte>(); } set { this[nameof(TextCounter)].SetValue<byte>(value); } }
        public SoftSoundGunfire Dialog { get { return this[nameof(Dialog)].As<SoftSoundGunfire>(); } set { this["Dialog"] = value; } }
        public GunfireAudioPlayParams DialogPlayParams { get { return this[nameof(DialogPlayParams)].As<GunfireAudioPlayParams>(); } set { this["DialogPlayParams"] = value; } }
        public GunfireAudioAttachParams DialogAttachParams { get { return this[nameof(DialogAttachParams)].As<GunfireAudioAttachParams>(); } set { this["DialogAttachParams"] = value; } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
        public bool IgnoreVocalRange { get { return this[nameof(IgnoreVocalRange)].Flag; } set { this[nameof(IgnoreVocalRange)].Flag = value; } }
        public Object VocalRange { get { return this[nameof(VocalRange)]; } set { this[nameof(VocalRange)] = value; } }
        public bool BlockInteractions { get { return this[nameof(BlockInteractions)].Flag; } set { this[nameof(BlockInteractions)].Flag = value; } }
    }
    public class DialogCameraShotInfo : Object
    {
        public DialogCameraShotInfo(nint addr) : base(addr) { }
        public Actor ViewTarget { get { return this[nameof(ViewTarget)].As<Actor>(); } set { this["ViewTarget"] = value; } }
        public SequencerShotEntry ShotEntry { get { return this[nameof(ShotEntry)].As<SequencerShotEntry>(); } set { this["ShotEntry"] = value; } }
        public bool IgnoreViewTargetRotation { get { return this[nameof(IgnoreViewTargetRotation)].Flag; } set { this[nameof(IgnoreViewTargetRotation)].Flag = value; } }
        public bool IgnoreViewTargetTransform { get { return this[nameof(IgnoreViewTargetTransform)].Flag; } set { this[nameof(IgnoreViewTargetTransform)].Flag = value; } }
        public bool TargetLocalPlayer { get { return this[nameof(TargetLocalPlayer)].Flag; } set { this[nameof(TargetLocalPlayer)].Flag = value; } }
    }
    public class EventTreeContext : Object
    {
        public EventTreeContext(nint addr) : base(addr) { }
        public Array<EventTreeNode> Events { get { return new Array<EventTreeNode>(this[nameof(Events)].Address); } }
        public Object Subroutines { get { return this[nameof(Subroutines)]; } set { this[nameof(Subroutines)] = value; } }
    }
    public class NodeDisplayData : Object
    {
        public NodeDisplayData(nint addr) : base(addr) { }
        public EActionType ActionType { get { return (EActionType)this[nameof(ActionType)].GetValue<int>(); } set { this[nameof(ActionType)].SetValue<int>((int)value); } }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
        public Object ActionText { get { return this[nameof(ActionText)]; } set { this[nameof(ActionText)] = value; } }
    }
    public class EventTreeNodeCondition : Object
    {
        public EventTreeNodeCondition(nint addr) : base(addr) { }
        public Object ContextActor { get { return this[nameof(ContextActor)]; } set { this[nameof(ContextActor)] = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public class Conditions : Object
    {
        public Conditions(nint addr) : base(addr) { }
        public ELogicalOperator LogicalOperator { get { return (ELogicalOperator)this[nameof(LogicalOperator)].GetValue<int>(); } set { this[nameof(LogicalOperator)].SetValue<int>((int)value); } }
        public Array<Condition> Conditions_value { get { return new Array<Condition>(this[nameof(Conditions)].Address); } }
    }
    public class CameraShotNodeEntryData : Object
    {
        public CameraShotNodeEntryData(nint addr) : base(addr) { }
        public Object SequenceShotNameID { get { return this[nameof(SequenceShotNameID)]; } set { this[nameof(SequenceShotNameID)] = value; } }
        public ESequenceOriginLocationOverride TargetOverride { get { return (ESequenceOriginLocationOverride)this[nameof(TargetOverride)].GetValue<int>(); } set { this[nameof(TargetOverride)].SetValue<int>((int)value); } }
        public Object ShotDialogObjectID { get { return this[nameof(ShotDialogObjectID)]; } set { this[nameof(ShotDialogObjectID)] = value; } }
        public bool IgnoreViewTargetRotation { get { return this[nameof(IgnoreViewTargetRotation)].Flag; } set { this[nameof(IgnoreViewTargetRotation)].Flag = value; } }
        public bool IgnoreViewTargetTransform { get { return this[nameof(IgnoreViewTargetTransform)].Flag; } set { this[nameof(IgnoreViewTargetTransform)].Flag = value; } }
    }
    public class EncounterGroup : Object
    {
        public EncounterGroup(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public VariableStatements ValidateStatements { get { return this[nameof(ValidateStatements)].As<VariableStatements>(); } set { this["ValidateStatements"] = value; } }
        public Actor Context { get { return this[nameof(Context)].As<Actor>(); } set { this["Context"] = value; } }
        public float WarmupTime { get { return this[nameof(WarmupTime)].GetValue<float>(); } set { this[nameof(WarmupTime)].SetValue<float>(value); } }
        public float CooldownMin { get { return this[nameof(CooldownMin)].GetValue<float>(); } set { this[nameof(CooldownMin)].SetValue<float>(value); } }
        public float CooldownMax { get { return this[nameof(CooldownMax)].GetValue<float>(); } set { this[nameof(CooldownMax)].SetValue<float>(value); } }
        public bool RequireAggro { get { return this[nameof(RequireAggro)].Flag; } set { this[nameof(RequireAggro)].Flag = value; } }
        public float AggroCooldownMin { get { return this[nameof(AggroCooldownMin)].GetValue<float>(); } set { this[nameof(AggroCooldownMin)].SetValue<float>(value); } }
        public float AggroCooldownMax { get { return this[nameof(AggroCooldownMax)].GetValue<float>(); } set { this[nameof(AggroCooldownMax)].SetValue<float>(value); } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public SpawnTable SpawnTable { get { return this[nameof(SpawnTable)].As<SpawnTable>(); } set { this["SpawnTable"] = value; } }
        public Array<Object> SpawnTags { get { return new Array<Object>(this[nameof(SpawnTags)].Address); } }
        public int MaxEncounters { get { return this[nameof(MaxEncounters)].GetValue<int>(); } set { this[nameof(MaxEncounters)].SetValue<int>(value); } }
        public bool UseIntensity { get { return this[nameof(UseIntensity)].Flag; } set { this[nameof(UseIntensity)].Flag = value; } }
        public bool PerpetualSpawns { get { return this[nameof(PerpetualSpawns)].Flag; } set { this[nameof(PerpetualSpawns)].Flag = value; } }
        public bool PerpetualSpawnsAreRandom { get { return this[nameof(PerpetualSpawnsAreRandom)].Flag; } set { this[nameof(PerpetualSpawnsAreRandom)].Flag = value; } }
        public bool EnableSpawnNotifications { get { return this[nameof(EnableSpawnNotifications)].Flag; } set { this[nameof(EnableSpawnNotifications)].Flag = value; } }
        public bool DisableWhenFullyExplored { get { return this[nameof(DisableWhenFullyExplored)].Flag; } set { this[nameof(DisableWhenFullyExplored)].Flag = value; } }
        public bool IgnoreAllowSpawnsFlag { get { return this[nameof(IgnoreAllowSpawnsFlag)].Flag; } set { this[nameof(IgnoreAllowSpawnsFlag)].Flag = value; } }
        public int MinRating { get { return this[nameof(MinRating)].GetValue<int>(); } set { this[nameof(MinRating)].SetValue<int>(value); } }
        public int MaxRating { get { return this[nameof(MaxRating)].GetValue<int>(); } set { this[nameof(MaxRating)].SetValue<int>(value); } }
        public Object AggroGroup { get { return this[nameof(AggroGroup)]; } set { this[nameof(AggroGroup)] = value; } }
    }
    public class EncounterSpawn : Object
    {
        public EncounterSpawn(nint addr) : base(addr) { }
        public SpawnEntry Spawn { get { return this[nameof(Spawn)].As<SpawnEntry>(); } set { this["Spawn"] = value; } }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
    }
    public class EnumCVDUserSettingEntry : Object
    {
        public EnumCVDUserSettingEntry(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public EColorVisionDeficiency Value { get { return (EColorVisionDeficiency)this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>((int)value); } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
    }
    public class CVarListValue : Object
    {
        public CVarListValue(nint addr) : base(addr) { }
        public Object ConsoleVariable { get { return this[nameof(ConsoleVariable)]; } set { this[nameof(ConsoleVariable)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class ListUserSettingEntry : Object
    {
        public ListUserSettingEntry(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
    }
    public class CVarListUserSettingEntry : ListUserSettingEntry
    {
        public CVarListUserSettingEntry(nint addr) : base(addr) { }
        public Array<CVarListValue> Values { get { return new Array<CVarListValue>(this[nameof(Values)].Address); } }
    }
    public class AimingParameters : Object
    {
        public AimingParameters(nint addr) : base(addr) { }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public SceneComponent Muzzle { get { return this[nameof(Muzzle)].As<SceneComponent>(); } set { this["Muzzle"] = value; } }
        public float MuzzleObstructionDistance { get { return this[nameof(MuzzleObstructionDistance)].GetValue<float>(); } set { this[nameof(MuzzleObstructionDistance)].SetValue<float>(value); } }
        public ERangedWeaponTrajectoryMode TrajectoryMode { get { return (ERangedWeaponTrajectoryMode)this[nameof(TrajectoryMode)].GetValue<int>(); } set { this[nameof(TrajectoryMode)].SetValue<int>((int)value); } }
        public Object ProjectileSocket { get { return this[nameof(ProjectileSocket)]; } set { this[nameof(ProjectileSocket)] = value; } }
        public Vector ProjectileExtent { get { return this[nameof(ProjectileExtent)].As<Vector>(); } set { this["ProjectileExtent"] = value; } }
        public float AimAdjustMin { get { return this[nameof(AimAdjustMin)].GetValue<float>(); } set { this[nameof(AimAdjustMin)].SetValue<float>(value); } }
        public float AimAdjustMax { get { return this[nameof(AimAdjustMax)].GetValue<float>(); } set { this[nameof(AimAdjustMax)].SetValue<float>(value); } }
        public float AimAdjustOptimalDistance { get { return this[nameof(AimAdjustOptimalDistance)].GetValue<float>(); } set { this[nameof(AimAdjustOptimalDistance)].SetValue<float>(value); } }
        public float AimAdjustTotalDistance { get { return this[nameof(AimAdjustTotalDistance)].GetValue<float>(); } set { this[nameof(AimAdjustTotalDistance)].SetValue<float>(value); } }
        public float InputDragOptimalDistance { get { return this[nameof(InputDragOptimalDistance)].GetValue<float>(); } set { this[nameof(InputDragOptimalDistance)].SetValue<float>(value); } }
        public float InputDragTotalDistance { get { return this[nameof(InputDragTotalDistance)].GetValue<float>(); } set { this[nameof(InputDragTotalDistance)].SetValue<float>(value); } }
        public Object ProjectileToVisualize { get { return this[nameof(ProjectileToVisualize)]; } set { this[nameof(ProjectileToVisualize)] = value; } }
        public ProjectileVisualizationParams VisualizationParams { get { return this[nameof(VisualizationParams)].As<ProjectileVisualizationParams>(); } set { this["VisualizationParams"] = value; } }
    }
    public class EquipmentAttachment : Object
    {
        public EquipmentAttachment(nint addr) : base(addr) { }
        public EEquipAttachType AttachType { get { return (EEquipAttachType)this[nameof(AttachType)].GetValue<int>(); } set { this[nameof(AttachType)].SetValue<int>((int)value); } }
        public Object MeshName { get { return this[nameof(MeshName)]; } set { this[nameof(MeshName)] = value; } }
        public Object AttachParent { get { return this[nameof(AttachParent)]; } set { this[nameof(AttachParent)] = value; } }
        public Object AttachPoint { get { return this[nameof(AttachPoint)]; } set { this[nameof(AttachPoint)] = value; } }
        public Transform AttachRelativeTransform { get { return this[nameof(AttachRelativeTransform)].As<Transform>(); } set { this["AttachRelativeTransform"] = value; } }
        public SceneComponent Component { get { return this[nameof(Component)].As<SceneComponent>(); } set { this["Component"] = value; } }
        public SceneComponent Parent { get { return this[nameof(Parent)].As<SceneComponent>(); } set { this["Parent"] = value; } }
    }
    public class EquipmentMods : Object
    {
        public EquipmentMods(nint addr) : base(addr) { }
        public Array<EquipmentModData> Mods { get { return new Array<EquipmentModData>(this[nameof(Mods)].Address); } }
    }
    public class EquipmentAttachPointOverride : Object
    {
        public EquipmentAttachPointOverride(nint addr) : base(addr) { }
        public Object AttachPoint { get { return this[nameof(AttachPoint)]; } set { this[nameof(AttachPoint)] = value; } }
        public Object AttachParentOverride { get { return this[nameof(AttachParentOverride)]; } set { this[nameof(AttachParentOverride)] = value; } }
        public Object AttachPointOverride { get { return this[nameof(AttachPointOverride)]; } set { this[nameof(AttachPointOverride)] = value; } }
    }
    public class EquipmentSlot : Object
    {
        public EquipmentSlot(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public Object ActivationType { get { return this[nameof(ActivationType)]; } set { this[nameof(ActivationType)] = value; } }
        public Object CustomizationSlot { get { return this[nameof(CustomizationSlot)]; } set { this[nameof(CustomizationSlot)] = value; } }
        public InputAction InputAction { get { return this[nameof(InputAction)].As<InputAction>(); } set { this["InputAction"] = value; } }
        public Object AnimationTag { get { return this[nameof(AnimationTag)]; } set { this[nameof(AnimationTag)] = value; } }
        public Array<EquipmentAttachPointOverride> AttachPointOverrides { get { return new Array<EquipmentAttachPointOverride>(this[nameof(AttachPointOverrides)].Address); } }
        public Object DefaultEquipmentBP { get { return this[nameof(DefaultEquipmentBP)]; } set { this[nameof(DefaultEquipmentBP)] = value; } }
        public bool SlotSupportsAutoEquip { get { return this[nameof(SlotSupportsAutoEquip)].Flag; } set { this[nameof(SlotSupportsAutoEquip)].Flag = value; } }
    }
    public class InventorySold : Object
    {
        public InventorySold(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public uint Quantity { get { return this[nameof(Quantity)].GetValue<uint>(); } set { this[nameof(Quantity)].SetValue<uint>(value); } }
    }
    public class ItemGenResult : Object
    {
        public ItemGenResult(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public byte Quantity { get { return this[nameof(Quantity)].GetValue<byte>(); } set { this[nameof(Quantity)].SetValue<byte>(value); } }
        public ItemInstanceData InstanceData { get { return this[nameof(InstanceData)].As<ItemInstanceData>(); } set { this["InstanceData"] = value; } }
    }
    public class ItemGenRequest : Object
    {
        public ItemGenRequest(nint addr) : base(addr) { }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public Actor Cause { get { return this[nameof(Cause)].As<Actor>(); } set { this["Cause"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
    }
    public class ItemStatInfo : Object
    {
        public ItemStatInfo(nint addr) : base(addr) { }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public EInspectStatType Type { get { return (EInspectStatType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public bool Primary { get { return this[nameof(Primary)].Flag; } set { this[nameof(Primary)].Flag = value; } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
        public bool CharacterStat { get { return this[nameof(CharacterStat)].Flag; } set { this[nameof(CharacterStat)].Flag = value; } }
    }
    public class ItemQueryFilter : Object
    {
        public ItemQueryFilter(nint addr) : base(addr) { }
        public Array<Object> RequiredTypes { get { return new Array<Object>(this[nameof(RequiredTypes)].Address); } }
        public Array<Object> RequiredCategories { get { return new Array<Object>(this[nameof(RequiredCategories)].Address); } }
        public bool bModableItemsOnly { get { return this[nameof(bModableItemsOnly)].Flag; } set { this[nameof(bModableItemsOnly)].Flag = value; } }
        public bool bIgnoreCurrency { get { return this[nameof(bIgnoreCurrency)].Flag; } set { this[nameof(bIgnoreCurrency)].Flag = value; } }
        public bool bIgnoreHidden { get { return this[nameof(bIgnoreHidden)].Flag; } set { this[nameof(bIgnoreHidden)].Flag = value; } }
        public Array<Object> IgnoreSlots { get { return new Array<Object>(this[nameof(IgnoreSlots)].Address); } }
        public Array<Object> IgnoreTags { get { return new Array<Object>(this[nameof(IgnoreTags)].Address); } }
    }
    public class ItemQueryResult : Object
    {
        public ItemQueryResult(nint addr) : base(addr) { }
        public InventoryItem Item { get { return this[nameof(Item)].As<InventoryItem>(); } set { this["Item"] = value; } }
        public InventoryComponent Inventory { get { return this[nameof(Inventory)].As<InventoryComponent>(); } set { this["Inventory"] = value; } }
    }
    public class DropInfo : Object
    {
        public DropInfo(nint addr) : base(addr) { }
        public Actor Source { get { return this[nameof(Source)].As<Actor>(); } set { this["Source"] = value; } }
        public Object ItemBP { get { return this[nameof(ItemBP)]; } set { this[nameof(ItemBP)] = value; } }
        public ItemInstanceData InstanceData { get { return this[nameof(InstanceData)].As<ItemInstanceData>(); } set { this["InstanceData"] = value; } }
        public int Quantity { get { return this[nameof(Quantity)].GetValue<int>(); } set { this[nameof(Quantity)].SetValue<int>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public bool Force { get { return this[nameof(Force)].Flag; } set { this[nameof(Force)].Flag = value; } }
        public bool Transient { get { return this[nameof(Transient)].Flag; } set { this[nameof(Transient)].Flag = value; } }
        public Transform DropTransform { get { return this[nameof(DropTransform)].As<Transform>(); } set { this["DropTransform"] = value; } }
        public Actor GroundActor { get { return this[nameof(GroundActor)].As<Actor>(); } set { this["GroundActor"] = value; } }
    }
    public class AutoUpgradeableItem : Object
    {
        public AutoUpgradeableItem(nint addr) : base(addr) { }
        public Object ItemClass { get { return this[nameof(ItemClass)]; } set { this[nameof(ItemClass)] = value; } }
        public int MaxUpgrades { get { return this[nameof(MaxUpgrades)].GetValue<int>(); } set { this[nameof(MaxUpgrades)].SetValue<int>(value); } }
    }
    public class WeaponStatData : StatData
    {
        public WeaponStatData(nint addr) : base(addr) { }
        public int Damage { get { return this[nameof(Damage)].GetValue<int>(); } set { this[nameof(Damage)].SetValue<int>(value); } }
    }
    public class RangedWeaponData : WeaponStatData
    {
        public RangedWeaponData(nint addr) : base(addr) { }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public float PrimaryFalloff { get { return this[nameof(PrimaryFalloff)].GetValue<float>(); } set { this[nameof(PrimaryFalloff)].SetValue<float>(value); } }
        public float SecondaryFalloff { get { return this[nameof(SecondaryFalloff)].GetValue<float>(); } set { this[nameof(SecondaryFalloff)].SetValue<float>(value); } }
        public int SprayCount { get { return this[nameof(SprayCount)].GetValue<int>(); } set { this[nameof(SprayCount)].SetValue<int>(value); } }
        public float Spread { get { return this[nameof(Spread)].GetValue<float>(); } set { this[nameof(Spread)].SetValue<float>(value); } }
        public int MaxAmmo { get { return this[nameof(MaxAmmo)].GetValue<int>(); } set { this[nameof(MaxAmmo)].SetValue<int>(value); } }
        public int AmmoPerClip { get { return this[nameof(AmmoPerClip)].GetValue<int>(); } set { this[nameof(AmmoPerClip)].SetValue<int>(value); } }
        public int AmmoPerReload { get { return this[nameof(AmmoPerReload)].GetValue<int>(); } set { this[nameof(AmmoPerReload)].SetValue<int>(value); } }
        public float RateOfFire { get { return this[nameof(RateOfFire)].GetValue<float>(); } set { this[nameof(RateOfFire)].SetValue<float>(value); } }
        public int BurstCount { get { return this[nameof(BurstCount)].GetValue<int>(); } set { this[nameof(BurstCount)].SetValue<int>(value); } }
        public bool IsAutomatic { get { return this[nameof(IsAutomatic)].Flag; } set { this[nameof(IsAutomatic)].Flag = value; } }
        public float BurstRateOfFire { get { return this[nameof(BurstRateOfFire)].GetValue<float>(); } set { this[nameof(BurstRateOfFire)].SetValue<float>(value); } }
        public bool HasScope { get { return this[nameof(HasScope)].Flag; } set { this[nameof(HasScope)].Flag = value; } }
        public float ScopeFOV { get { return this[nameof(ScopeFOV)].GetValue<float>(); } set { this[nameof(ScopeFOV)].SetValue<float>(value); } }
    }
    public class RangedWeaponMode : Object
    {
        public RangedWeaponMode(nint addr) : base(addr) { }
        public Object IdleAnim { get { return this[nameof(IdleAnim)]; } set { this[nameof(IdleAnim)] = value; } }
        public Object FireStartAnim { get { return this[nameof(FireStartAnim)]; } set { this[nameof(FireStartAnim)] = value; } }
        public Object FireAnim { get { return this[nameof(FireAnim)]; } set { this[nameof(FireAnim)] = value; } }
        public Object FireEndAnim { get { return this[nameof(FireEndAnim)]; } set { this[nameof(FireEndAnim)] = value; } }
        public Object ReloadAnim { get { return this[nameof(ReloadAnim)]; } set { this[nameof(ReloadAnim)] = value; } }
        public Object ReloadStartAnim { get { return this[nameof(ReloadStartAnim)]; } set { this[nameof(ReloadStartAnim)] = value; } }
        public Object ReloadLoopAnim { get { return this[nameof(ReloadLoopAnim)]; } set { this[nameof(ReloadLoopAnim)] = value; } }
        public Object ReloadEndAnim { get { return this[nameof(ReloadEndAnim)]; } set { this[nameof(ReloadEndAnim)] = value; } }
        public Object EquipAnim { get { return this[nameof(EquipAnim)]; } set { this[nameof(EquipAnim)] = value; } }
        public Object WindupAnim { get { return this[nameof(WindupAnim)]; } set { this[nameof(WindupAnim)] = value; } }
        public Object AnimLayerOverride { get { return this[nameof(AnimLayerOverride)]; } set { this[nameof(AnimLayerOverride)] = value; } }
        public float ReadyTime { get { return this[nameof(ReadyTime)].GetValue<float>(); } set { this[nameof(ReadyTime)].SetValue<float>(value); } }
        public float Range { get { return this[nameof(Range)].GetValue<float>(); } set { this[nameof(Range)].SetValue<float>(value); } }
        public float PrimaryFalloff { get { return this[nameof(PrimaryFalloff)].GetValue<float>(); } set { this[nameof(PrimaryFalloff)].SetValue<float>(value); } }
        public float SecondaryFalloff { get { return this[nameof(SecondaryFalloff)].GetValue<float>(); } set { this[nameof(SecondaryFalloff)].SetValue<float>(value); } }
        public float MinCritRange { get { return this[nameof(MinCritRange)].GetValue<float>(); } set { this[nameof(MinCritRange)].SetValue<float>(value); } }
        public float MaxCritRange { get { return this[nameof(MaxCritRange)].GetValue<float>(); } set { this[nameof(MaxCritRange)].SetValue<float>(value); } }
        public float RateOfFire { get { return this[nameof(RateOfFire)].GetValue<float>(); } set { this[nameof(RateOfFire)].SetValue<float>(value); } }
        public int BurstCount { get { return this[nameof(BurstCount)].GetValue<int>(); } set { this[nameof(BurstCount)].SetValue<int>(value); } }
        public bool IsAutomatic { get { return this[nameof(IsAutomatic)].Flag; } set { this[nameof(IsAutomatic)].Flag = value; } }
        public float RefireWindow { get { return this[nameof(RefireWindow)].GetValue<float>(); } set { this[nameof(RefireWindow)].SetValue<float>(value); } }
        public float BurstRateOfFire { get { return this[nameof(BurstRateOfFire)].GetValue<float>(); } set { this[nameof(BurstRateOfFire)].SetValue<float>(value); } }
        public float SprayCount { get { return this[nameof(SprayCount)].GetValue<float>(); } set { this[nameof(SprayCount)].SetValue<float>(value); } }
        public Reticule Reticule { get { return this[nameof(Reticule)].As<Reticule>(); } set { this["Reticule"] = value; } }
        public SoundGunfire AimEnterSound { get { return this[nameof(AimEnterSound)].As<SoundGunfire>(); } set { this["AimEnterSound"] = value; } }
        public SoundGunfire AimExitSound { get { return this[nameof(AimExitSound)].As<SoundGunfire>(); } set { this["AimExitSound"] = value; } }
        public bool HasScope { get { return this[nameof(HasScope)].Flag; } set { this[nameof(HasScope)].Flag = value; } }
        public float ScopeFOV { get { return this[nameof(ScopeFOV)].GetValue<float>(); } set { this[nameof(ScopeFOV)].SetValue<float>(value); } }
        public Reticule ScopeReticule { get { return this[nameof(ScopeReticule)].As<Reticule>(); } set { this["ScopeReticule"] = value; } }
        public Object ScopeWidget { get { return this[nameof(ScopeWidget)]; } set { this[nameof(ScopeWidget)] = value; } }
        public Object ScopePostProcess { get { return this[nameof(ScopePostProcess)]; } set { this[nameof(ScopePostProcess)] = value; } }
        public SoundGunfire ScopeInSound { get { return this[nameof(ScopeInSound)].As<SoundGunfire>(); } set { this["ScopeInSound"] = value; } }
        public SoundGunfire ScopeOutSound { get { return this[nameof(ScopeOutSound)].As<SoundGunfire>(); } set { this["ScopeOutSound"] = value; } }
        public float MinimumAimDelayForScope { get { return this[nameof(MinimumAimDelayForScope)].GetValue<float>(); } set { this[nameof(MinimumAimDelayForScope)].SetValue<float>(value); } }
        public Object DamageType { get { return this[nameof(DamageType)]; } set { this[nameof(DamageType)] = value; } }
        public Object Profile { get { return this[nameof(Profile)]; } set { this[nameof(Profile)] = value; } }
        public NiagaraSystem MuzzleFX { get { return this[nameof(MuzzleFX)].As<NiagaraSystem>(); } set { this["MuzzleFX"] = value; } }
        public bool MergeHitscanHits { get { return this[nameof(MergeHitscanHits)].Flag; } set { this[nameof(MergeHitscanHits)].Flag = value; } }
        public bool AllowReload { get { return this[nameof(AllowReload)].Flag; } set { this[nameof(AllowReload)].Flag = value; } }
        public bool ReloadAfterStartLoop { get { return this[nameof(ReloadAfterStartLoop)].Flag; } set { this[nameof(ReloadAfterStartLoop)].Flag = value; } }
        public bool AllowReloadWithNoAmmo { get { return this[nameof(AllowReloadWithNoAmmo)].Flag; } set { this[nameof(AllowReloadWithNoAmmo)].Flag = value; } }
        public bool AllowInfiniteClip { get { return this[nameof(AllowInfiniteClip)].Flag; } set { this[nameof(AllowInfiniteClip)].Flag = value; } }
        public ERangedWeaponTrajectoryMode TrajectoryMode { get { return (ERangedWeaponTrajectoryMode)this[nameof(TrajectoryMode)].GetValue<int>(); } set { this[nameof(TrajectoryMode)].SetValue<int>((int)value); } }
        public Vector ProjectileExtent { get { return this[nameof(ProjectileExtent)].As<Vector>(); } set { this["ProjectileExtent"] = value; } }
        public float MuzzleObstructionDistance { get { return this[nameof(MuzzleObstructionDistance)].GetValue<float>(); } set { this[nameof(MuzzleObstructionDistance)].SetValue<float>(value); } }
        public Object ProjectileToVisualize { get { return this[nameof(ProjectileToVisualize)]; } set { this[nameof(ProjectileToVisualize)] = value; } }
        public ProjectileVisualizationParams VisualizationParams { get { return this[nameof(VisualizationParams)].As<ProjectileVisualizationParams>(); } set { this["VisualizationParams"] = value; } }
        public bool bAllowCharacterSpreadMods { get { return this[nameof(bAllowCharacterSpreadMods)].Flag; } set { this[nameof(bAllowCharacterSpreadMods)].Flag = value; } }
        public bool bAllowCharacterRangeMods { get { return this[nameof(bAllowCharacterRangeMods)].Flag; } set { this[nameof(bAllowCharacterRangeMods)].Flag = value; } }
        public bool bAllowCharacterAmmoMods { get { return this[nameof(bAllowCharacterAmmoMods)].Flag; } set { this[nameof(bAllowCharacterAmmoMods)].Flag = value; } }
        public bool bAllowCharacterSpeedMods { get { return this[nameof(bAllowCharacterSpeedMods)].Flag; } set { this[nameof(bAllowCharacterSpeedMods)].Flag = value; } }
        public bool bAllowCharacterSwayMods { get { return this[nameof(bAllowCharacterSwayMods)].Flag; } set { this[nameof(bAllowCharacterSwayMods)].Flag = value; } }
        public bool bAllowCharacterRecoilMods { get { return this[nameof(bAllowCharacterRecoilMods)].Flag; } set { this[nameof(bAllowCharacterRecoilMods)].Flag = value; } }
        public bool bAllowCharacterWindupMods { get { return this[nameof(bAllowCharacterWindupMods)].Flag; } set { this[nameof(bAllowCharacterWindupMods)].Flag = value; } }
        public RangedWeaponProfile CachedProfile { get { return this[nameof(CachedProfile)].As<RangedWeaponProfile>(); } set { this["CachedProfile"] = value; } }
        public MaterialInterface ScopeMaterial { get { return this[nameof(ScopeMaterial)].As<MaterialInterface>(); } set { this["ScopeMaterial"] = value; } }
    }
    public class CustomWeaponSpread : Object
    {
        public CustomWeaponSpread(nint addr) : base(addr) { }
        public bool bRandomBetweenPoints { get { return this[nameof(bRandomBetweenPoints)].Flag; } set { this[nameof(bRandomBetweenPoints)].Flag = value; } }
        public Array<Vector2D> Points { get { return new Array<Vector2D>(this[nameof(Points)].Address); } }
        public Vector2D Jitter { get { return this[nameof(Jitter)].As<Vector2D>(); } set { this["Jitter"] = value; } }
        public float Twist { get { return this[nameof(Twist)].GetValue<float>(); } set { this[nameof(Twist)].SetValue<float>(value); } }
    }
    public class ReticuleCustomMaterialParameter : Object
    {
        public ReticuleCustomMaterialParameter(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public EReticuleGetterType GetterType { get { return (EReticuleGetterType)this[nameof(GetterType)].GetValue<int>(); } set { this[nameof(GetterType)].SetValue<int>((int)value); } }
        public Object Getter { get { return this[nameof(Getter)]; } set { this[nameof(Getter)] = value; } }
        public float BlendSpeed { get { return this[nameof(BlendSpeed)].GetValue<float>(); } set { this[nameof(BlendSpeed)].SetValue<float>(value); } }
        public float BlendOutSpeed { get { return this[nameof(BlendOutSpeed)].GetValue<float>(); } set { this[nameof(BlendOutSpeed)].SetValue<float>(value); } }
    }
    public class UseDetails : Object
    {
        public UseDetails(nint addr) : base(addr) { }
        public Object UseState { get { return this[nameof(UseState)]; } set { this[nameof(UseState)] = value; } }
        public Object UseAnim { get { return this[nameof(UseAnim)]; } set { this[nameof(UseAnim)] = value; } }
        public Object PlayRateStat { get { return this[nameof(PlayRateStat)]; } set { this[nameof(PlayRateStat)] = value; } }
        public Array<Object> UseTags { get { return new Array<Object>(this[nameof(UseTags)].Address); } }
        public Array<Object> UseAnimTags { get { return new Array<Object>(this[nameof(UseAnimTags)].Address); } }
    }
    public class WeaponAffinity : Object
    {
        public WeaponAffinity(nint addr) : base(addr) { }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object DamageBonusStat { get { return this[nameof(DamageBonusStat)]; } set { this[nameof(DamageBonusStat)] = value; } }
        public Object AffinityStat { get { return this[nameof(AffinityStat)]; } set { this[nameof(AffinityStat)] = value; } }
        public EWeaponAffinityType AffinityType { get { return (EWeaponAffinityType)this[nameof(AffinityType)].GetValue<int>(); } set { this[nameof(AffinityType)].SetValue<int>((int)value); } }
    }
    public class TileAmbientSpawnRegion : Object
    {
        public TileAmbientSpawnRegion(nint addr) : base(addr) { }
        public Vector TileRelativePosition { get { return this[nameof(TileRelativePosition)].As<Vector>(); } set { this["TileRelativePosition"] = value; } }
        public Array<AmbientSpawn> Spawns { get { return new Array<AmbientSpawn>(this[nameof(Spawns)].Address); } }
    }
    public class AmbientSpawn : Object
    {
        public AmbientSpawn(nint addr) : base(addr) { }
        public SpawnEntry SpawnEntry { get { return this[nameof(SpawnEntry)].As<SpawnEntry>(); } set { this["SpawnEntry"] = value; } }
        public PersistenceKey Key { get { return this[nameof(Key)].As<PersistenceKey>(); } set { this["Key"] = value; } }
        public bool Destroyed { get { return this[nameof(Destroyed)].Flag; } set { this[nameof(Destroyed)].Flag = value; } }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
    }
    public class TileAmbientSpawns : Object
    {
        public TileAmbientSpawns(nint addr) : base(addr) { }
        public int TileID { get { return this[nameof(TileID)].GetValue<int>(); } set { this[nameof(TileID)].SetValue<int>(value); } }
        public Array<AmbientSpawn> Spawns { get { return new Array<AmbientSpawn>(this[nameof(Spawns)].Address); } }
        public Array<TileAmbientSpawnRegion> Regions { get { return new Array<TileAmbientSpawnRegion>(this[nameof(Regions)].Address); } }
        public bool HasBeenActivated { get { return this[nameof(HasBeenActivated)].Flag; } set { this[nameof(HasBeenActivated)].Flag = value; } }
        public EAmbientSpawnState State { get { return (EAmbientSpawnState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
    }
    public class TileAmbientSpawnDebugInfo : Object
    {
        public TileAmbientSpawnDebugInfo(nint addr) : base(addr) { }
        public Object ActorType { get { return this[nameof(ActorType)]; } set { this[nameof(ActorType)] = value; } }
        public int Quantity { get { return this[nameof(Quantity)].GetValue<int>(); } set { this[nameof(Quantity)].SetValue<int>(value); } }
    }
    public class TileAmbientDebugInfo : Object
    {
        public TileAmbientDebugInfo(nint addr) : base(addr) { }
        public int TileID { get { return this[nameof(TileID)].GetValue<int>(); } set { this[nameof(TileID)].SetValue<int>(value); } }
        public Array<TileAmbientSpawnDebugInfo> QueuedSpawns { get { return new Array<TileAmbientSpawnDebugInfo>(this[nameof(QueuedSpawns)].Address); } }
        public Array<TileAmbientSpawnDebugInfo> ActiveSpawns { get { return new Array<TileAmbientSpawnDebugInfo>(this[nameof(ActiveSpawns)].Address); } }
    }
    public class VisualTileData : Object
    {
        public VisualTileData(nint addr) : base(addr) { }
    }
    public class ResourceType : Object
    {
        public ResourceType(nint addr) : base(addr) { }
        public EResourceDistribution Distribution { get { return (EResourceDistribution)this[nameof(Distribution)].GetValue<int>(); } set { this[nameof(Distribution)].SetValue<int>((int)value); } }
        public bool ForceEvenDistribution { get { return this[nameof(ForceEvenDistribution)].Flag; } set { this[nameof(ForceEvenDistribution)].Flag = value; } }
        public float Min { get { return this[nameof(Min)].GetValue<float>(); } set { this[nameof(Min)].SetValue<float>(value); } }
        public float Max { get { return this[nameof(Max)].GetValue<float>(); } set { this[nameof(Max)].SetValue<float>(value); } }
        public SpawnTable SpawnTable { get { return this[nameof(SpawnTable)].As<SpawnTable>(); } set { this["SpawnTable"] = value; } }
        public Array<Object> SpawnTags { get { return new Array<Object>(this[nameof(SpawnTags)].Address); } }
        public Object SpawnPointTag { get { return this[nameof(SpawnPointTag)]; } set { this[nameof(SpawnPointTag)] = value; } }
    }
    public class TileResources : Object
    {
        public TileResources(nint addr) : base(addr) { }
        public int TileID { get { return this[nameof(TileID)].GetValue<int>(); } set { this[nameof(TileID)].SetValue<int>(value); } }
        public SpawnList Resources { get { return this[nameof(Resources)].As<SpawnList>(); } set { this["Resources"] = value; } }
    }
    public class TileCoord : Object
    {
        public TileCoord(nint addr) : base(addr) { }
        public int X { get { return this[nameof(X)].GetValue<int>(); } set { this[nameof(X)].SetValue<int>(value); } }
        public int Y { get { return this[nameof(Y)].GetValue<int>(); } set { this[nameof(Y)].SetValue<int>(value); } }
        public int Z { get { return this[nameof(Z)].GetValue<int>(); } set { this[nameof(Z)].SetValue<int>(value); } }
    }
    public class MapGenAttribute : Object
    {
        public MapGenAttribute(nint addr) : base(addr) { }
        public EMapGenAttributeScope Scope { get { return (EMapGenAttributeScope)this[nameof(Scope)].GetValue<int>(); } set { this[nameof(Scope)].SetValue<int>((int)value); } }
        public int TileOrRegionID { get { return this[nameof(TileOrRegionID)].GetValue<int>(); } set { this[nameof(TileOrRegionID)].SetValue<int>(value); } }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
        public Object LocalizedString { get { return this[nameof(LocalizedString)]; } set { this[nameof(LocalizedString)] = value; } }
    }
    public class TileBase : Object
    {
        public TileBase(nint addr) : base(addr) { }
        public int TileID { get { return this[nameof(TileID)].GetValue<int>(); } set { this[nameof(TileID)].SetValue<int>(value); } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Object SpawnTag { get { return this[nameof(SpawnTag)]; } set { this[nameof(SpawnTag)] = value; } }
        public Object RegionID { get { return this[nameof(RegionID)]; } set { this[nameof(RegionID)] = value; } }
        public Object WorldMapID { get { return this[nameof(WorldMapID)]; } set { this[nameof(WorldMapID)] = value; } }
        public TileCoord Coord { get { return this[nameof(Coord)].As<TileCoord>(); } set { this["Coord"] = value; } }
        public ETileDirection Direction { get { return (ETileDirection)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public MapTileInfoAsset TileInfoAsset { get { return this[nameof(TileInfoAsset)].As<MapTileInfoAsset>(); } set { this["TileInfoAsset"] = value; } }
        public float TileRotation { get { return this[nameof(TileRotation)].GetValue<float>(); } set { this[nameof(TileRotation)].SetValue<float>(value); } }
        public int TileRating { get { return this[nameof(TileRating)].GetValue<int>(); } set { this[nameof(TileRating)].SetValue<int>(value); } }
        public int TileSeed { get { return this[nameof(TileSeed)].GetValue<int>(); } set { this[nameof(TileSeed)].SetValue<int>(value); } }
        public byte Flags { get { return this[nameof(Flags)].GetValue<byte>(); } set { this[nameof(Flags)].SetValue<byte>(value); } }
        public bool Overlay { get { return this[nameof(Overlay)].Flag; } set { this[nameof(Overlay)].Flag = value; } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
        public Array<MapGenAttribute> Attributes { get { return new Array<MapGenAttribute>(this[nameof(Attributes)].Address); } }
    }
    public class Tile : TileBase
    {
        public Tile(nint addr) : base(addr) { }
        public LevelStreaming Level { get { return this[nameof(Level)].As<LevelStreaming>(); } set { this["Level"] = value; } }
        public Array<LevelStreaming> Sublevels { get { return new Array<LevelStreaming>(this[nameof(Sublevels)].Address); } }
        public Level LoadedLevel { get { return this[nameof(LoadedLevel)].As<Level>(); } set { this["LoadedLevel"] = value; } }
        public MapTileTemplate Template { get { return this[nameof(Template)].As<MapTileTemplate>(); } set { this["Template"] = value; } }
        public TileSet TileSet { get { return this[nameof(TileSet)].As<TileSet>(); } set { this["TileSet"] = value; } }
        public MapTileInfo TileInfo { get { return this[nameof(TileInfo)].As<MapTileInfo>(); } set { this["TileInfo"] = value; } }
        public Array<int> AdjacentTiles { get { return new Array<int>(this[nameof(AdjacentTiles)].Address); } }
    }
    public class TileSpawnList : Object
    {
        public TileSpawnList(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public SpawnTable SpawnTable { get { return this[nameof(SpawnTable)].As<SpawnTable>(); } set { this["SpawnTable"] = value; } }
        public Array<Object> Tags { get { return new Array<Object>(this[nameof(Tags)].Address); } }
    }
    public class MapTileEdgeInfo : Object
    {
        public MapTileEdgeInfo(nint addr) : base(addr) { }
        public Vector EdgeOffset { get { return this[nameof(EdgeOffset)].As<Vector>(); } set { this["EdgeOffset"] = value; } }
    }
    public class LODVolumeSubFilter : Object
    {
        public LODVolumeSubFilter(nint addr) : base(addr) { }
        public Array<Object> SubStrings { get { return new Array<Object>(this[nameof(SubStrings)].Address); } }
        public Array<Object> Classes { get { return new Array<Object>(this[nameof(Classes)].Address); } }
        public Array<Object> Blueprints { get { return new Array<Object>(this[nameof(Blueprints)].Address); } }
        public Array<Object> StaticMeshes { get { return new Array<Object>(this[nameof(StaticMeshes)].Address); } }
        public Array<Object> Decals { get { return new Array<Object>(this[nameof(Decals)].Address); } }
    }
    public class LODVolumeDistanceFilter : LODVolumeSubFilter
    {
        public LODVolumeDistanceFilter(nint addr) : base(addr) { }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public float DistanceMultiplier { get { return this[nameof(DistanceMultiplier)].GetValue<float>(); } set { this[nameof(DistanceMultiplier)].SetValue<float>(value); } }
        public bool bShouldApplyDistanceFade { get { return this[nameof(bShouldApplyDistanceFade)].Flag; } set { this[nameof(bShouldApplyDistanceFade)].Flag = value; } }
    }
    public class LODVolumeInfo : Object
    {
        public LODVolumeInfo(nint addr) : base(addr) { }
        public LODVolume Volume { get { return this[nameof(Volume)].As<LODVolume>(); } set { this["Volume"] = value; } }
        public ELODVolumeVisibility State { get { return (ELODVolumeVisibility)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
    }
    public class GridCoordinate : Object
    {
        public GridCoordinate(nint addr) : base(addr) { }
        public short X { get { return this[nameof(X)].GetValue<short>(); } set { this[nameof(X)].SetValue<short>(value); } }
        public short Y { get { return this[nameof(Y)].GetValue<short>(); } set { this[nameof(Y)].SetValue<short>(value); } }
        public short Z { get { return this[nameof(Z)].GetValue<short>(); } set { this[nameof(Z)].SetValue<short>(value); } }
    }
    public class VisitedCoordinates : Object
    {
        public VisitedCoordinates(nint addr) : base(addr) { }
        public Array<GridCoordinate> VisitedGridCoordinates { get { return new Array<GridCoordinate>(this[nameof(VisitedGridCoordinates)].Address); } }
        public double GridResolution { get { return this[nameof(GridResolution)].GetValue<double>(); } set { this[nameof(GridResolution)].SetValue<double>(value); } }
        public Vector GridOrigin { get { return this[nameof(GridOrigin)].As<Vector>(); } set { this["GridOrigin"] = value; } }
        public bool bApplyMapOffset { get { return this[nameof(bApplyMapOffset)].Flag; } set { this[nameof(bApplyMapOffset)].Flag = value; } }
    }
    public class RegisteredEntity : Object
    {
        public RegisteredEntity(nint addr) : base(addr) { }
        public Actor SpawnedActor { get { return this[nameof(SpawnedActor)].As<Actor>(); } set { this["SpawnedActor"] = value; } }
        public UserWidget Widget { get { return this[nameof(Widget)].As<UserWidget>(); } set { this["Widget"] = value; } }
    }
    public class MusicSetInstance : Object
    {
        public MusicSetInstance(nint addr) : base(addr) { }
        public MusicSetAsset MusicSet { get { return this[nameof(MusicSet)].As<MusicSetAsset>(); } set { this["MusicSet"] = value; } }
        public MusicSetInstanceData InstanceData { get { return this[nameof(InstanceData)].As<MusicSetInstanceData>(); } set { this["InstanceData"] = value; } }
        public Array<Object> Instigators { get { return new Array<Object>(this[nameof(Instigators)].Address); } }
    }
    public class GunfireMusicState : Object
    {
        public GunfireMusicState(nint addr) : base(addr) { }
        public EMusicState Type { get { return (EMusicState)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public SoundGunfire Music { get { return this[nameof(Music)].As<SoundGunfire>(); } set { this["Music"] = value; } }
        public float FadeInTime { get { return this[nameof(FadeInTime)].GetValue<float>(); } set { this[nameof(FadeInTime)].SetValue<float>(value); } }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
        public bool RestartOnEntry { get { return this[nameof(RestartOnEntry)].Flag; } set { this[nameof(RestartOnEntry)].Flag = value; } }
    }
    public class GunfireMusicStinger : Object
    {
        public GunfireMusicStinger(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public SoundGunfire Sound { get { return this[nameof(Sound)].As<SoundGunfire>(); } set { this["Sound"] = value; } }
    }
    public class SimplePoolPrecache : Object
    {
        public SimplePoolPrecache(nint addr) : base(addr) { }
        public Object SoftClass { get { return this[nameof(SoftClass)]; } set { this[nameof(SoftClass)] = value; } }
        public int MinCache { get { return this[nameof(MinCache)].GetValue<int>(); } set { this[nameof(MinCache)].SetValue<int>(value); } }
        public int MaxCache { get { return this[nameof(MaxCache)].GetValue<int>(); } set { this[nameof(MaxCache)].SetValue<int>(value); } }
    }
    public class PooledProjectileParams : Object
    {
        public PooledProjectileParams(nint addr) : base(addr) { }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public Transform OriginTransform { get { return this[nameof(OriginTransform)].As<Transform>(); } set { this["OriginTransform"] = value; } }
        public int PoolSize { get { return this[nameof(PoolSize)].GetValue<int>(); } set { this[nameof(PoolSize)].SetValue<int>(value); } }
        public bool bStartWithNetworkingActive { get { return this[nameof(bStartWithNetworkingActive)].Flag; } set { this[nameof(bStartWithNetworkingActive)].Flag = value; } }
    }
    public class AttributeLevel : Object
    {
        public AttributeLevel(nint addr) : base(addr) { }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
    }
    public class Attribute : Object
    {
        public Attribute(nint addr) : base(addr) { }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public DataTable StatsTable { get { return this[nameof(StatsTable)].As<DataTable>(); } set { this["StatsTable"] = value; } }
    }
    public class ExperienceData : TableRowBase
    {
        public ExperienceData(nint addr) : base(addr) { }
        public int RequiredExperience { get { return this[nameof(RequiredExperience)].GetValue<int>(); } set { this[nameof(RequiredExperience)].SetValue<int>(value); } }
    }
    public class StatModTableEntry : TableRowBase
    {
        public StatModTableEntry(nint addr) : base(addr) { }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public Object StatName { get { return this[nameof(StatName)]; } set { this[nameof(StatName)] = value; } }
        public float StatBonus { get { return this[nameof(StatBonus)].GetValue<float>(); } set { this[nameof(StatBonus)].SetValue<float>(value); } }
        public Object ModifierBP { get { return this[nameof(ModifierBP)]; } set { this[nameof(ModifierBP)] = value; } }
        public int ModifierLevel { get { return this[nameof(ModifierLevel)].GetValue<int>(); } set { this[nameof(ModifierLevel)].SetValue<int>(value); } }
        public int ModifierCapacity { get { return this[nameof(ModifierCapacity)].GetValue<int>(); } set { this[nameof(ModifierCapacity)].SetValue<int>(value); } }
        public bool OverrideExistingLevel { get { return this[nameof(OverrideExistingLevel)].Flag; } set { this[nameof(OverrideExistingLevel)].Flag = value; } }
        public Object LevelScalingOwner { get { return this[nameof(LevelScalingOwner)]; } set { this[nameof(LevelScalingOwner)] = value; } }
        public int RequiredContextSlot { get { return this[nameof(RequiredContextSlot)].GetValue<int>(); } set { this[nameof(RequiredContextSlot)].SetValue<int>(value); } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public bool Hidden { get { return this[nameof(Hidden)].Flag; } set { this[nameof(Hidden)].Flag = value; } }
    }
    public class ModifierSearchFilter : Object
    {
        public ModifierSearchFilter(nint addr) : base(addr) { }
    }
    public class TraitPointsPerLevelData : TableRowBase
    {
        public TraitPointsPerLevelData(nint addr) : base(addr) { }
        public int TraitPoints { get { return this[nameof(TraitPoints)].GetValue<int>(); } set { this[nameof(TraitPoints)].SetValue<int>(value); } }
    }
    public class TraitModLevel : Object
    {
        public TraitModLevel(nint addr) : base(addr) { }
        public ETraitPointModType Type { get { return (ETraitPointModType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public byte Level { get { return this[nameof(Level)].GetValue<byte>(); } set { this[nameof(Level)].SetValue<byte>(value); } }
    }
    public class TraitInfo : Object
    {
        public TraitInfo(nint addr) : base(addr) { }
        public bool Transient { get { return this[nameof(Transient)].Flag; } set { this[nameof(Transient)].Flag = value; } }
        public Array<TraitModLevel> LevelMods { get { return new Array<TraitModLevel>(this[nameof(LevelMods)].Address); } }
        public Array<TraitModLevel> MaxLevelMods { get { return new Array<TraitModLevel>(this[nameof(MaxLevelMods)].Address); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int SlotIndex { get { return this[nameof(SlotIndex)].GetValue<int>(); } set { this[nameof(SlotIndex)].SetValue<int>(value); } }
        public int InstanceData { get { return this[nameof(InstanceData)].GetValue<int>(); } set { this[nameof(InstanceData)].SetValue<int>(value); } }
        public Object TraitBP { get { return this[nameof(TraitBP)]; } set { this[nameof(TraitBP)] = value; } }
        public bool bNewTrait { get { return this[nameof(bNewTrait)].Flag; } set { this[nameof(bNewTrait)].Flag = value; } }
        public Trait TraitInstance { get { return this[nameof(TraitInstance)].As<Trait>(); } set { this["TraitInstance"] = value; } }
    }
    public class TraitSlot : Object
    {
        public TraitSlot(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public Conditions UnlockConditions { get { return this[nameof(UnlockConditions)].As<Conditions>(); } set { this["UnlockConditions"] = value; } }
        public bool AutoEquipToSlot { get { return this[nameof(AutoEquipToSlot)].Flag; } set { this[nameof(AutoEquipToSlot)].Flag = value; } }
    }
    public class QuestEntityEventTree : Object
    {
        public QuestEntityEventTree(nint addr) : base(addr) { }
        public EQuestEventTreeType Type { get { return (EQuestEventTreeType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object NameID { get { return this[nameof(NameID)]; } set { this[nameof(NameID)] = value; } }
        public Object EventTree { get { return this[nameof(EventTree)]; } set { this[nameof(EventTree)] = value; } }
        public Object ActiveForObjective { get { return this[nameof(ActiveForObjective)]; } set { this[nameof(ActiveForObjective)] = value; } }
        public Object Label { get { return this[nameof(Label)]; } set { this[nameof(Label)] = value; } }
    }
    public class QuestDebugProperty : Object
    {
        public QuestDebugProperty(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class MovieSceneDialogSectionTemplateData : Object
    {
        public MovieSceneDialogSectionTemplateData(nint addr) : base(addr) { }
        public SoundGunfire Dialog { get { return this[nameof(Dialog)].As<SoundGunfire>(); } set { this["Dialog"] = value; } }
        public GunfireAudioPlayParams DialogPlayParams { get { return this[nameof(DialogPlayParams)].As<GunfireAudioPlayParams>(); } set { this["DialogPlayParams"] = value; } }
        public GunfireAudioAttachParams DialogAttachParams { get { return this[nameof(DialogAttachParams)].As<GunfireAudioAttachParams>(); } set { this["DialogAttachParams"] = value; } }
        public Object DialogText { get { return this[nameof(DialogText)]; } set { this[nameof(DialogText)] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public Object FacialAnimation { get { return this[nameof(FacialAnimation)]; } set { this[nameof(FacialAnimation)] = value; } }
        public bool IgnoreVocalRange { get { return this[nameof(IgnoreVocalRange)].Flag; } set { this[nameof(IgnoreVocalRange)].Flag = value; } }
        public FloatRange DialogTimeRange { get { return this[nameof(DialogTimeRange)].As<FloatRange>(); } set { this["DialogTimeRange"] = value; } }
        public Object OnDialogFinished { get { return this[nameof(OnDialogFinished)]; } set { this[nameof(OnDialogFinished)] = value; } }
    }
    public class MovieSceneDialogSectionTemplate : MovieSceneEvalTemplate
    {
        public MovieSceneDialogSectionTemplate(nint addr) : base(addr) { }
        public MovieSceneDialogSectionTemplateData DialogData { get { return this[nameof(DialogData)].As<MovieSceneDialogSectionTemplateData>(); } set { this["DialogData"] = value; } }
    }
    public class EquipmentPayload : Object
    {
        public EquipmentPayload(nint addr) : base(addr) { }
        public EEquipmentTrackHandSetting InHand { get { return (EEquipmentTrackHandSetting)this[nameof(InHand)].GetValue<int>(); } set { this[nameof(InHand)].SetValue<int>((int)value); } }
        public EEquipmentTrackStatusSetting Equipped { get { return (EEquipmentTrackStatusSetting)this[nameof(Equipped)].GetValue<int>(); } set { this[nameof(Equipped)].SetValue<int>((int)value); } }
        public Object EquipmentSlotName { get { return this[nameof(EquipmentSlotName)]; } set { this[nameof(EquipmentSlotName)] = value; } }
        public Object ItemToEquip { get { return this[nameof(ItemToEquip)]; } set { this[nameof(ItemToEquip)] = value; } }
        public bool NotifyOnItemAdded { get { return this[nameof(NotifyOnItemAdded)].Flag; } set { this[nameof(NotifyOnItemAdded)].Flag = value; } }
    }
    public class MovieSceneEquipmentSectionData : MovieSceneChannel
    {
        public MovieSceneEquipmentSectionData(nint addr) : base(addr) { }
        public Array<FrameNumber> Times { get { return new Array<FrameNumber>(this[nameof(Times)].Address); } }
        public Array<EquipmentPayload> KeyValues { get { return new Array<EquipmentPayload>(this[nameof(KeyValues)].Address); } }
    }
    public class EquipmentCachedRestorePayload : Object
    {
        public EquipmentCachedRestorePayload(nint addr) : base(addr) { }
        public Object ItemToEquip { get { return this[nameof(ItemToEquip)]; } set { this[nameof(ItemToEquip)] = value; } }
        public Object ItemToUnEquip { get { return this[nameof(ItemToUnEquip)]; } set { this[nameof(ItemToUnEquip)] = value; } }
        public Object AddedItem { get { return this[nameof(AddedItem)]; } set { this[nameof(AddedItem)] = value; } }
        public Object EquipmentSlotName { get { return this[nameof(EquipmentSlotName)]; } set { this[nameof(EquipmentSlotName)] = value; } }
    }
    public class MovieSceneEquipmentSectionTemplate : MovieSceneEvalTemplate
    {
        public MovieSceneEquipmentSectionTemplate(nint addr) : base(addr) { }
        public MovieSceneEquipmentSectionData EquipmentData { get { return this[nameof(EquipmentData)].As<MovieSceneEquipmentSectionData>(); } set { this["EquipmentData"] = value; } }
        public MovieSceneEquipmentTrack ParentTrack { get { return this[nameof(ParentTrack)].As<MovieSceneEquipmentTrack>(); } set { this["ParentTrack"] = value; } }
    }
    public class EventTreePayload : Object
    {
        public EventTreePayload(nint addr) : base(addr) { }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
    }
    public class MovieSceneEventTreeSectionData : MovieSceneChannel
    {
        public MovieSceneEventTreeSectionData(nint addr) : base(addr) { }
        public Array<FrameNumber> Times { get { return new Array<FrameNumber>(this[nameof(Times)].Address); } }
        public Array<EventTreePayload> KeyValues { get { return new Array<EventTreePayload>(this[nameof(KeyValues)].Address); } }
    }
    public class MovieSceneEventTreeSectionTemplate : MovieSceneEvalTemplate
    {
        public MovieSceneEventTreeSectionTemplate(nint addr) : base(addr) { }
        public Array<MovieSceneObjectBindingID> EventReceivers { get { return new Array<MovieSceneObjectBindingID>(this[nameof(EventReceivers)].Address); } }
        public MovieSceneEventTreeSectionData EventData { get { return this[nameof(EventData)].As<MovieSceneEventTreeSectionData>(); } set { this["EventData"] = value; } }
        public bool bFireEventsWhenForwards { get { return this[nameof(bFireEventsWhenForwards)].Flag; } set { this[nameof(bFireEventsWhenForwards)].Flag = value; } }
        public bool bFireEventsWhenBackwards { get { return this[nameof(bFireEventsWhenBackwards)].Flag; } set { this[nameof(bFireEventsWhenBackwards)].Flag = value; } }
        public MovieSceneEventTreeTrack ParentTrack { get { return this[nameof(ParentTrack)].As<MovieSceneEventTreeTrack>(); } set { this["ParentTrack"] = value; } }
    }
    public class MovieSceneSoundSetSectionTemplateData : Object
    {
        public MovieSceneSoundSetSectionTemplateData(nint addr) : base(addr) { }
        public Object SoundIDName { get { return this[nameof(SoundIDName)]; } set { this[nameof(SoundIDName)] = value; } }
        public SoundGunfire SoundCue { get { return this[nameof(SoundCue)].As<SoundGunfire>(); } set { this["SoundCue"] = value; } }
        public GunfireAudioPlayParams PlayParams { get { return this[nameof(PlayParams)].As<GunfireAudioPlayParams>(); } set { this["PlayParams"] = value; } }
        public GunfireAudioAttachParams AttachParams { get { return this[nameof(AttachParams)].As<GunfireAudioAttachParams>(); } set { this["AttachParams"] = value; } }
        public Object Emote { get { return this[nameof(Emote)]; } set { this[nameof(Emote)] = value; } }
        public bool IgnoreVocalRange { get { return this[nameof(IgnoreVocalRange)].Flag; } set { this[nameof(IgnoreVocalRange)].Flag = value; } }
        public bool UseFacialAnimation { get { return this[nameof(UseFacialAnimation)].Flag; } set { this[nameof(UseFacialAnimation)].Flag = value; } }
        public FloatRange SoundSetTimeRange { get { return this[nameof(SoundSetTimeRange)].As<FloatRange>(); } set { this["SoundSetTimeRange"] = value; } }
        public Object OnSoundSetFinished { get { return this[nameof(OnSoundSetFinished)]; } set { this[nameof(OnSoundSetFinished)] = value; } }
    }
    public class MovieSceneSoundSetSectionTemplate : MovieSceneEvalTemplate
    {
        public MovieSceneSoundSetSectionTemplate(nint addr) : base(addr) { }
        public MovieSceneSoundSetSectionTemplateData SoundSetData { get { return this[nameof(SoundSetData)].As<MovieSceneSoundSetSectionTemplateData>(); } set { this["SoundSetData"] = value; } }
    }
    public class MovieSceneUIEventSectionTemplateData : Object
    {
        public MovieSceneUIEventSectionTemplateData(nint addr) : base(addr) { }
        public SequencerUIEventPayload UIEventPayload { get { return this[nameof(UIEventPayload)].As<SequencerUIEventPayload>(); } set { this["UIEventPayload"] = value; } }
    }
    public class MovieSceneUIEventSectionTemplate : MovieSceneEvalTemplate
    {
        public MovieSceneUIEventSectionTemplate(nint addr) : base(addr) { }
        public MovieSceneUIEventSectionTemplateData UIEventData { get { return this[nameof(UIEventData)].As<MovieSceneUIEventSectionTemplateData>(); } set { this["UIEventData"] = value; } }
    }
    public class SpawnPointInfo : Object
    {
        public SpawnPointInfo(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Object SpawnPointBP { get { return this[nameof(SpawnPointBP)]; } set { this[nameof(SpawnPointBP)] = value; } }
        public SpawnPoint SpawnPoint { get { return this[nameof(SpawnPoint)].As<SpawnPoint>(); } set { this["SpawnPoint"] = value; } }
    }
    public class QueuedSpawn : Object
    {
        public QueuedSpawn(nint addr) : base(addr) { }
        public Actor Owner { get { return this[nameof(Owner)].As<Actor>(); } set { this["Owner"] = value; } }
        public SpawnPointBase SpawnPoint { get { return this[nameof(SpawnPoint)].As<SpawnPointBase>(); } set { this["SpawnPoint"] = value; } }
        public Object ActorBP { get { return this[nameof(ActorBP)]; } set { this[nameof(ActorBP)] = value; } }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public SpawnEntry SpawnEntry { get { return this[nameof(SpawnEntry)].As<SpawnEntry>(); } set { this["SpawnEntry"] = value; } }
        public Level OwningLevel { get { return this[nameof(OwningLevel)].As<Level>(); } set { this["OwningLevel"] = value; } }
    }
    public class SpawnedActor : Object
    {
        public SpawnedActor(nint addr) : base(addr) { }
        public SpawnEntry SpawnEntry { get { return this[nameof(SpawnEntry)].As<SpawnEntry>(); } set { this["SpawnEntry"] = value; } }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
    }
    public class ActorStateDecorators : Object
    {
        public ActorStateDecorators(nint addr) : base(addr) { }
        public Array<ActorStateDecorator> Decorators { get { return new Array<ActorStateDecorator>(this[nameof(Decorators)].Address); } }
    }
    public class CliffConditionInput : Object
    {
        public CliffConditionInput(nint addr) : base(addr) { }
        public CharacterGunfire Character { get { return this[nameof(Character)].As<CharacterGunfire>(); } set { this["Character"] = value; } }
        public Object Params { get { return this[nameof(Params)]; } set { this[nameof(Params)] = value; } }
        public CliffConditionParams CliffParams { get { return this[nameof(CliffParams)].As<CliffConditionParams>(); } set { this["CliffParams"] = value; } }
    }
    public class BlackboardNumValue : Object
    {
        public BlackboardNumValue(nint addr) : base(addr) { }
        public CompareOp Compare { get { return (CompareOp)this[nameof(Compare)].GetValue<int>(); } set { this[nameof(Compare)].SetValue<int>((int)value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class BlackboardBoolValue : Object
    {
        public BlackboardBoolValue(nint addr) : base(addr) { }
        public bool Value { get { return this[nameof(Value)].Flag; } set { this[nameof(Value)].Flag = value; } }
    }
    public class BlackboardStringValue : Object
    {
        public BlackboardStringValue(nint addr) : base(addr) { }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
    }
    public class BlackboardClassValue : Object
    {
        public BlackboardClassValue(nint addr) : base(addr) { }
        public Object Value { get { return this[nameof(Value)].As<Object>(); } set { this["Value"] = value; } } // ClassPtrProperty
    }
    public class BlackboardObjectValue : Object
    {
        public BlackboardObjectValue(nint addr) : base(addr) { }
        public Object Type { get { return this[nameof(Type)]; } set { this[nameof(Type)] = value; } }
        public bool CheckForNull { get { return this[nameof(CheckForNull)].Flag; } set { this[nameof(CheckForNull)].Flag = value; } }
    }
    public class StatDecoratorStat : Object
    {
        public StatDecoratorStat(nint addr) : base(addr) { }
        public Object Stat { get { return this[nameof(Stat)]; } set { this[nameof(Stat)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public float Scalar { get { return this[nameof(Scalar)].GetValue<float>(); } set { this[nameof(Scalar)].SetValue<float>(value); } }
    }
    public class LadderReference : Object
    {
        public LadderReference(nint addr) : base(addr) { }
        public Object Ladder { get { return this[nameof(Ladder)]; } set { this[nameof(Ladder)] = value; } }
        public LadderParams Params { get { return this[nameof(Params)].As<LadderParams>(); } set { this["Params"] = value; } }
    }
    public class StateID : Object
    {
        public StateID(nint addr) : base(addr) { }
        public ushort StateRuntimeID { get { return this[nameof(StateRuntimeID)].GetValue<ushort>(); } set { this[nameof(StateRuntimeID)].SetValue<ushort>(value); } }
        public ushort StateChangeID { get { return this[nameof(StateChangeID)].GetValue<ushort>(); } set { this[nameof(StateChangeID)].SetValue<ushort>(value); } }
    }
    public class StateInfo : StateID
    {
        public StateInfo(nint addr) : base(addr) { }
        public bool IsInteractive { get { return this[nameof(IsInteractive)].Flag; } set { this[nameof(IsInteractive)].Flag = value; } }
        public EInteractiveHost InteractiveHost { get { return (EInteractiveHost)this[nameof(InteractiveHost)].GetValue<int>(); } set { this[nameof(InteractiveHost)].SetValue<int>((int)value); } }
        public EInteractiveResult InteractiveState { get { return (EInteractiveResult)this[nameof(InteractiveState)].GetValue<int>(); } set { this[nameof(InteractiveState)].SetValue<int>((int)value); } }
        public Actor InteractiveOther { get { return this[nameof(InteractiveOther)].As<Actor>(); } set { this["InteractiveOther"] = value; } }
        public float InteractiveMashValue { get { return this[nameof(InteractiveMashValue)].GetValue<float>(); } set { this[nameof(InteractiveMashValue)].SetValue<float>(value); } }
    }
    public class PushIKAppendage : Object
    {
        public PushIKAppendage(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public EPushIKMethod IKMethod { get { return (EPushIKMethod)this[nameof(IKMethod)].GetValue<int>(); } set { this[nameof(IKMethod)].SetValue<int>((int)value); } }
        public Object NodeName { get { return this[nameof(NodeName)]; } set { this[nameof(NodeName)] = value; } }
        public Vector LocalOffset { get { return this[nameof(LocalOffset)].As<Vector>(); } set { this["LocalOffset"] = value; } }
        public Quat LocalOrientation { get { return this[nameof(LocalOrientation)].As<Quat>(); } set { this["LocalOrientation"] = value; } }
        public float DefaultAlpha { get { return this[nameof(DefaultAlpha)].GetValue<float>(); } set { this[nameof(DefaultAlpha)].SetValue<float>(value); } }
        public Object CurveName { get { return this[nameof(CurveName)]; } set { this[nameof(CurveName)] = value; } }
        public float MaximumExtent { get { return this[nameof(MaximumExtent)].GetValue<float>(); } set { this[nameof(MaximumExtent)].SetValue<float>(value); } }
        public Object IKOriginBone { get { return this[nameof(IKOriginBone)]; } set { this[nameof(IKOriginBone)] = value; } }
        public float TraceDistance { get { return this[nameof(TraceDistance)].GetValue<float>(); } set { this[nameof(TraceDistance)].SetValue<float>(value); } }
        public float TraceStartingOffset { get { return this[nameof(TraceStartingOffset)].GetValue<float>(); } set { this[nameof(TraceStartingOffset)].SetValue<float>(value); } }
        public bool bAllowSurfaceOffset { get { return this[nameof(bAllowSurfaceOffset)].Flag; } set { this[nameof(bAllowSurfaceOffset)].Flag = value; } }
        public Vector AnimationSurfaceReferencePoint { get { return this[nameof(AnimationSurfaceReferencePoint)].As<Vector>(); } set { this["AnimationSurfaceReferencePoint"] = value; } }
        public float SurfaceRadius { get { return this[nameof(SurfaceRadius)].GetValue<float>(); } set { this[nameof(SurfaceRadius)].SetValue<float>(value); } }
        public float SurfaceTranslationScale { get { return this[nameof(SurfaceTranslationScale)].GetValue<float>(); } set { this[nameof(SurfaceTranslationScale)].SetValue<float>(value); } }
        public float RotationMaxHeight { get { return this[nameof(RotationMaxHeight)].GetValue<float>(); } set { this[nameof(RotationMaxHeight)].SetValue<float>(value); } }
        public Quat MaxHeightLocalOrientation { get { return this[nameof(MaxHeightLocalOrientation)].As<Quat>(); } set { this["MaxHeightLocalOrientation"] = value; } }
    }
    public class AdvButtonStyle : SlateWidgetStyle
    {
        public AdvButtonStyle(nint addr) : base(addr) { }
        public SlateBrush Normal { get { return this[nameof(Normal)].As<SlateBrush>(); } set { this["Normal"] = value; } }
        public SlateBrush Hovered { get { return this[nameof(Hovered)].As<SlateBrush>(); } set { this["Hovered"] = value; } }
        public SlateBrush Pressed { get { return this[nameof(Pressed)].As<SlateBrush>(); } set { this["Pressed"] = value; } }
        public SlateBrush Disabled { get { return this[nameof(Disabled)].As<SlateBrush>(); } set { this["Disabled"] = value; } }
        public SlateBrush Focus { get { return this[nameof(Focus)].As<SlateBrush>(); } set { this["Focus"] = value; } }
        public SlateBrush FocusHovered { get { return this[nameof(FocusHovered)].As<SlateBrush>(); } set { this["FocusHovered"] = value; } }
        public SlateBrush InactiveFocus { get { return this[nameof(InactiveFocus)].As<SlateBrush>(); } set { this["InactiveFocus"] = value; } }
        public Margin NormalPadding { get { return this[nameof(NormalPadding)].As<Margin>(); } set { this["NormalPadding"] = value; } }
        public Margin PressedPadding { get { return this[nameof(PressedPadding)].As<Margin>(); } set { this["PressedPadding"] = value; } }
        public Margin FocusedPadding { get { return this[nameof(FocusedPadding)].As<Margin>(); } set { this["FocusedPadding"] = value; } }
        public SlateSound PressedSlateSound { get { return this[nameof(PressedSlateSound)].As<SlateSound>(); } set { this["PressedSlateSound"] = value; } }
        public SlateSound HoveredSlateSound { get { return this[nameof(HoveredSlateSound)].As<SlateSound>(); } set { this["HoveredSlateSound"] = value; } }
        public SlateSound FocusedSlateSound { get { return this[nameof(FocusedSlateSound)].As<SlateSound>(); } set { this["FocusedSlateSound"] = value; } }
    }
    public class FontStyleConfigEntry : Object
    {
        public FontStyleConfigEntry(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Template { get { return this[nameof(Template)]; } set { this[nameof(Template)] = value; } }
        public Object Font { get { return this[nameof(Font)]; } set { this[nameof(Font)] = value; } }
        public Object Typeface { get { return this[nameof(Typeface)]; } set { this[nameof(Typeface)] = value; } }
        public int Size { get { return this[nameof(Size)].GetValue<int>(); } set { this[nameof(Size)].SetValue<int>(value); } }
        public Object Color { get { return this[nameof(Color)]; } set { this[nameof(Color)] = value; } }
        public Object ShadowOffset { get { return this[nameof(ShadowOffset)]; } set { this[nameof(ShadowOffset)] = value; } }
        public Object ShadowColor { get { return this[nameof(ShadowColor)]; } set { this[nameof(ShadowColor)] = value; } }
    }
    public class DamageNumberParameters : Object
    {
        public DamageNumberParameters(nint addr) : base(addr) { }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public Vector2D PopScale { get { return this[nameof(PopScale)].As<Vector2D>(); } set { this["PopScale"] = value; } }
        public bool bPopToWhite { get { return this[nameof(bPopToWhite)].Flag; } set { this[nameof(bPopToWhite)].Flag = value; } }
        public CurveFloat PopCurve { get { return this[nameof(PopCurve)].As<CurveFloat>(); } set { this["PopCurve"] = value; } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float Gravity { get { return this[nameof(Gravity)].GetValue<float>(); } set { this[nameof(Gravity)].SetValue<float>(value); } }
        public float LifeSpan { get { return this[nameof(LifeSpan)].GetValue<float>(); } set { this[nameof(LifeSpan)].SetValue<float>(value); } }
    }
    public class FocusInfo : Object
    {
        public FocusInfo(nint addr) : base(addr) { }
        public PanelWidget Group { get { return this[nameof(Group)].As<PanelWidget>(); } set { this["Group"] = value; } }
        public FocusButtonWidget Widget { get { return this[nameof(Widget)].As<FocusButtonWidget>(); } set { this["Widget"] = value; } }
    }
    public class TabGroup : Object
    {
        public TabGroup(nint addr) : base(addr) { }
        public PanelWidget Group { get { return this[nameof(Group)].As<PanelWidget>(); } set { this["Group"] = value; } }
        public TabButton Widget { get { return this[nameof(Widget)].As<TabButton>(); } set { this["Widget"] = value; } }
    }
    public class TabFocusInfo : Object
    {
        public TabFocusInfo(nint addr) : base(addr) { }
        public Array<TabGroup> Groups { get { return new Array<TabGroup>(this[nameof(Groups)].Address); } }
    }
    public class TextFormatTokenPair : Object
    {
        public TextFormatTokenPair(nint addr) : base(addr) { }
        public Object FormatTokenKey { get { return this[nameof(FormatTokenKey)]; } set { this[nameof(FormatTokenKey)] = value; } }
        public Object FormatTokenArg { get { return this[nameof(FormatTokenArg)]; } set { this[nameof(FormatTokenArg)] = value; } }
    }
    public class VariableDef : Object
    {
        public VariableDef(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public EVarType Type { get { return (EVarType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public bool Persistent { get { return this[nameof(Persistent)].Flag; } set { this[nameof(Persistent)].Flag = value; } }
        public bool IsFunction { get { return this[nameof(IsFunction)].Flag; } set { this[nameof(IsFunction)].Flag = value; } }
        public Object Property { get { return this[nameof(Property)]; } set { this[nameof(Property)] = value; } }
    }
    public class ConditionalVariableDef : Object
    {
        public ConditionalVariableDef(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Conditions Conditions { get { return this[nameof(Conditions)].As<Conditions>(); } set { this["Conditions"] = value; } }
    }
    public enum Default__EnumUserSetting : int
    {
    }
}
